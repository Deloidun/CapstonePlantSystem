
CapstonePlantSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d890  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800da20  0800da20  0000ea20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddec  0800ddec  0000f1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ddec  0800ddec  0000edec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddf4  0800ddf4  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddf4  0800ddf4  0000edf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ddf8  0800ddf8  0000edf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800ddfc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1f4  2**0
                  CONTENTS
 10 .bss          00000b40  200001f4  200001f4  0000f1f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d34  20000d34  0000f1f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d2e2  00000000  00000000  0000f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000439b  00000000  00000000  0002c506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d0  00000000  00000000  000308a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001418  00000000  00000000  00032278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006c3e  00000000  00000000  00033690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021134  00000000  00000000  0003a2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8ccb  00000000  00000000  0005b402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001340cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ec4  00000000  00000000  00134110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0013bfd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da08 	.word	0x0800da08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800da08 	.word	0x0800da08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f7c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d013      	beq.n	8000fb4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f8c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f94:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00b      	beq.n	8000fb4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f9c:	e000      	b.n	8000fa0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f9e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fa0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f9      	beq.n	8000f9e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000faa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fca:	f000 ffd1 	bl	8001f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f867 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f000 fa85 	bl	80014e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fd6:	f000 f8cd 	bl	8001174 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000fda:	f000 f8f9 	bl	80011d0 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8000fde:	f009 fd6d 	bl	800aabc <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000fe2:	f000 fa53 	bl	800148c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000fe6:	f000 f9b1 	bl	800134c <MX_TIM3_Init>
  MX_SPI1_Init();
 8000fea:	f000 f921 	bl	8001230 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000fee:	f000 f955 	bl	800129c <MX_TIM1_Init>
  MX_TIM9_Init();
 8000ff2:	f000 f9fb 	bl	80013ec <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the encoder
  Encoder_Init();
 8000ff6:	f000 fb87 	bl	8001708 <Encoder_Init>
  Motor_PWM_Init();
 8000ffa:	f000 fb93 	bl	8001724 <Motor_PWM_Init>

  int32_t encoderCounts = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  float travelDistance = 0.0;
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001008:	f009 fd7e 	bl	800ab08 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (encoderCounts > 30000){
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001012:	4293      	cmp	r3, r2
 8001014:	dd03      	ble.n	800101e <main+0x5a>
      	 __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001016:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <main+0xcc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	@ 0x24

      }

    encoderCounts = Encoder_GetPosition();
 800101e:	f000 fbd1 	bl	80017c4 <Encoder_GetPosition>
 8001022:	6078      	str	r0, [r7, #4]
    travelDistance = CalculateTravelDistance(encoderCounts);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 fbdb 	bl	80017e0 <CalculateTravelDistance>
 800102a:	ed87 0a00 	vstr	s0, [r7]


    // Check if the target distance is reached
    if (travelDistance >= TARGET_DISTANCE_CM)
 800102e:	edd7 7a00 	vldr	s15, [r7]
 8001032:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001094 <main+0xd0>
 8001036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	db08      	blt.n	8001052 <main+0x8e>
    {
        // Stop the motor briefly
        Motor_SetSpeedAndDirection(0, 0);
 8001040:	2100      	movs	r1, #0
 8001042:	2000      	movs	r0, #0
 8001044:	f000 fb80 	bl	8001748 <Motor_SetSpeedAndDirection>



        // Reverse the motor direction to go back to 0 cm
        Motor_SetSpeedAndDirection(50, 1);
 8001048:	2101      	movs	r1, #1
 800104a:	2032      	movs	r0, #50	@ 0x32
 800104c:	f000 fb7c 	bl	8001748 <Motor_SetSpeedAndDirection>
 8001050:	e00e      	b.n	8001070 <main+0xac>
    }
    else if (travelDistance <= 0.0 )
 8001052:	edd7 7a00 	vldr	s15, [r7]
 8001056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	d807      	bhi.n	8001070 <main+0xac>
    {
        // Stop the motor briefly
        Motor_SetSpeedAndDirection(0, 0);
 8001060:	2100      	movs	r1, #0
 8001062:	2000      	movs	r0, #0
 8001064:	f000 fb70 	bl	8001748 <Motor_SetSpeedAndDirection>

        // Set the motor direction to forward to go back to 400 cm
        Motor_SetSpeedAndDirection(50, 0);
 8001068:	2100      	movs	r1, #0
 800106a:	2032      	movs	r0, #50	@ 0x32
 800106c:	f000 fb6c 	bl	8001748 <Motor_SetSpeedAndDirection>
    }

    // Print the travel distance
    printf("Raw Encoder Counts: %ld\r\n", encoderCounts);
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4809      	ldr	r0, [pc, #36]	@ (8001098 <main+0xd4>)
 8001074:	f00a fe02 	bl	800bc7c <iprintf>
    printf("Travel Distance: %.2f cm\r\n", travelDistance);
 8001078:	6838      	ldr	r0, [r7, #0]
 800107a:	f7ff fa65 	bl	8000548 <__aeabi_f2d>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4806      	ldr	r0, [pc, #24]	@ (800109c <main+0xd8>)
 8001084:	f00a fdfa 	bl	800bc7c <iprintf>
    // Add a small delay
    HAL_Delay(100);
 8001088:	2064      	movs	r0, #100	@ 0x64
 800108a:	f000 ffe3 	bl	8002054 <HAL_Delay>
    MX_USB_HOST_Process();
 800108e:	e7bb      	b.n	8001008 <main+0x44>
 8001090:	20000304 	.word	0x20000304
 8001094:	43c80000 	.word	0x43c80000
 8001098:	0800da20 	.word	0x0800da20
 800109c:	0800da3c 	.word	0x0800da3c

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b094      	sub	sp, #80	@ 0x50
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	2230      	movs	r2, #48	@ 0x30
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00a fe39 	bl	800bd26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	4b28      	ldr	r3, [pc, #160]	@ (800116c <SystemClock_Config+0xcc>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	4a27      	ldr	r2, [pc, #156]	@ (800116c <SystemClock_Config+0xcc>)
 80010ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d4:	4b25      	ldr	r3, [pc, #148]	@ (800116c <SystemClock_Config+0xcc>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <SystemClock_Config+0xd0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a21      	ldr	r2, [pc, #132]	@ (8001170 <SystemClock_Config+0xd0>)
 80010ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <SystemClock_Config+0xd0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010fc:	2301      	movs	r3, #1
 80010fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001100:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001106:	2302      	movs	r3, #2
 8001108:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800110e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001110:	2308      	movs	r3, #8
 8001112:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001114:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001118:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111a:	2302      	movs	r3, #2
 800111c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800111e:	2307      	movs	r3, #7
 8001120:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	4618      	mov	r0, r3
 8001128:	f004 f998 	bl	800545c <HAL_RCC_OscConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001132:	f000 fbb1 	bl	8001898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001136:	230f      	movs	r3, #15
 8001138:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113a:	2302      	movs	r3, #2
 800113c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001142:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001146:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001148:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800114c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2105      	movs	r1, #5
 8001154:	4618      	mov	r0, r3
 8001156:	f004 fbf9 	bl	800594c <HAL_RCC_ClockConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001160:	f000 fb9a 	bl	8001898 <Error_Handler>
  }
}
 8001164:	bf00      	nop
 8001166:	3750      	adds	r7, #80	@ 0x50
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	40007000 	.word	0x40007000

08001174 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800117a:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <MX_I2C1_Init+0x54>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001180:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <MX_I2C1_Init+0x58>)
 8001182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001192:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001196:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011b2:	f003 fb6f 	bl	8004894 <HAL_I2C_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011bc:	f000 fb6c 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000210 	.word	0x20000210
 80011c8:	40005400 	.word	0x40005400
 80011cc:	000186a0 	.word	0x000186a0

080011d0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <MX_I2S3_Init+0x54>)
 80011d6:	4a14      	ldr	r2, [pc, #80]	@ (8001228 <MX_I2S3_Init+0x58>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <MX_I2S3_Init+0x54>)
 80011dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <MX_I2S3_Init+0x54>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MX_I2S3_Init+0x54>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <MX_I2S3_Init+0x54>)
 80011f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <MX_I2S3_Init+0x54>)
 80011f8:	4a0c      	ldr	r2, [pc, #48]	@ (800122c <MX_I2S3_Init+0x5c>)
 80011fa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <MX_I2S3_Init+0x54>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <MX_I2S3_Init+0x54>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_I2S3_Init+0x54>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_I2S3_Init+0x54>)
 8001210:	f003 fc84 	bl	8004b1c <HAL_I2S_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800121a:	f000 fb3d 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000264 	.word	0x20000264
 8001228:	40003c00 	.word	0x40003c00
 800122c:	00017700 	.word	0x00017700

08001230 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <MX_SPI1_Init+0x64>)
 8001236:	4a18      	ldr	r2, [pc, #96]	@ (8001298 <MX_SPI1_Init+0x68>)
 8001238:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <MX_SPI1_Init+0x64>)
 800123c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001240:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <MX_SPI1_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <MX_SPI1_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_SPI1_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <MX_SPI1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_SPI1_Init+0x64>)
 800125c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001260:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001262:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_SPI1_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001268:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <MX_SPI1_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800126e:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_SPI1_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001274:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <MX_SPI1_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_SPI1_Init+0x64>)
 800127c:	220a      	movs	r2, #10
 800127e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001280:	4804      	ldr	r0, [pc, #16]	@ (8001294 <MX_SPI1_Init+0x64>)
 8001282:	f004 fec5 	bl	8006010 <HAL_SPI_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800128c:	f000 fb04 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200002ac 	.word	0x200002ac
 8001298:	40013000 	.word	0x40013000

0800129c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	@ 0x30
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2224      	movs	r2, #36	@ 0x24
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f00a fd3b 	bl	800bd26 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b8:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <MX_TIM1_Init+0xa8>)
 80012ba:	4a23      	ldr	r2, [pc, #140]	@ (8001348 <MX_TIM1_Init+0xac>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012be:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <MX_TIM1_Init+0xa8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <MX_TIM1_Init+0xa8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <MX_TIM1_Init+0xa8>)
 80012cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <MX_TIM1_Init+0xa8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <MX_TIM1_Init+0xa8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012de:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <MX_TIM1_Init+0xa8>)
 80012e0:	2280      	movs	r2, #128	@ 0x80
 80012e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012e4:	2303      	movs	r3, #3
 80012e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ec:	2301      	movs	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012f4:	230a      	movs	r3, #10
 80012f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012fc:	2301      	movs	r3, #1
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001304:	230a      	movs	r3, #10
 8001306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	@ (8001344 <MX_TIM1_Init+0xa8>)
 8001310:	f005 f8d6 	bl	80064c0 <HAL_TIM_Encoder_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800131a:	f000 fabd 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	@ (8001344 <MX_TIM1_Init+0xa8>)
 800132c:	f005 fe8c 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001336:	f000 faaf 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	@ 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000304 	.word	0x20000304
 8001348:	40010000 	.word	0x40010000

0800134c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <MX_TIM3_Init+0x98>)
 800136c:	4a1e      	ldr	r2, [pc, #120]	@ (80013e8 <MX_TIM3_Init+0x9c>)
 800136e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <MX_TIM3_Init+0x98>)
 8001372:	2200      	movs	r2, #0
 8001374:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <MX_TIM3_Init+0x98>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <MX_TIM3_Init+0x98>)
 800137e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001382:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001384:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MX_TIM3_Init+0x98>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <MX_TIM3_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001390:	4814      	ldr	r0, [pc, #80]	@ (80013e4 <MX_TIM3_Init+0x98>)
 8001392:	f004 fec6 	bl	8006122 <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800139c:	f000 fa7c 	bl	8001898 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80013a0:	2307      	movs	r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	4619      	mov	r1, r3
 80013ae:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <MX_TIM3_Init+0x98>)
 80013b0:	f005 fa7c 	bl	80068ac <HAL_TIM_SlaveConfigSynchro>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80013ba:	f000 fa6d 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <MX_TIM3_Init+0x98>)
 80013cc:	f005 fe3c 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80013d6:	f000 fa5f 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	3720      	adds	r7, #32
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000034c 	.word	0x2000034c
 80013e8:	40000400 	.word	0x40000400

080013ec <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	615a      	str	r2, [r3, #20]
 8001402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001404:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <MX_TIM9_Init+0x98>)
 8001406:	4a20      	ldr	r2, [pc, #128]	@ (8001488 <MX_TIM9_Init+0x9c>)
 8001408:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <MX_TIM9_Init+0x98>)
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <MX_TIM9_Init+0x98>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001416:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <MX_TIM9_Init+0x98>)
 8001418:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800141c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <MX_TIM9_Init+0x98>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <MX_TIM9_Init+0x98>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800142a:	4816      	ldr	r0, [pc, #88]	@ (8001484 <MX_TIM9_Init+0x98>)
 800142c:	f004 ff30 	bl	8006290 <HAL_TIM_PWM_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001436:	f000 fa2f 	bl	8001898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143a:	2360      	movs	r3, #96	@ 0x60
 800143c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <MX_TIM9_Init+0x98>)
 8001452:	f005 f969 	bl	8006728 <HAL_TIM_PWM_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 800145c:	f000 fa1c 	bl	8001898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2204      	movs	r2, #4
 8001464:	4619      	mov	r1, r3
 8001466:	4807      	ldr	r0, [pc, #28]	@ (8001484 <MX_TIM9_Init+0x98>)
 8001468:	f005 f95e 	bl	8006728 <HAL_TIM_PWM_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001472:	f000 fa11 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001476:	4803      	ldr	r0, [pc, #12]	@ (8001484 <MX_TIM9_Init+0x98>)
 8001478:	f000 fbd8 	bl	8001c2c <HAL_TIM_MspPostInit>

}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000394 	.word	0x20000394
 8001488:	40014000 	.word	0x40014000

0800148c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <MX_USART2_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014c4:	f005 fe3c 	bl	8007140 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ce:	f000 f9e3 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200003dc 	.word	0x200003dc
 80014dc:	40004400 	.word	0x40004400

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	@ 0x30
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	4b7d      	ldr	r3, [pc, #500]	@ (80016f0 <MX_GPIO_Init+0x210>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a7c      	ldr	r2, [pc, #496]	@ (80016f0 <MX_GPIO_Init+0x210>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b7a      	ldr	r3, [pc, #488]	@ (80016f0 <MX_GPIO_Init+0x210>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	61bb      	str	r3, [r7, #24]
 8001510:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	4b76      	ldr	r3, [pc, #472]	@ (80016f0 <MX_GPIO_Init+0x210>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a75      	ldr	r2, [pc, #468]	@ (80016f0 <MX_GPIO_Init+0x210>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b73      	ldr	r3, [pc, #460]	@ (80016f0 <MX_GPIO_Init+0x210>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b6f      	ldr	r3, [pc, #444]	@ (80016f0 <MX_GPIO_Init+0x210>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a6e      	ldr	r2, [pc, #440]	@ (80016f0 <MX_GPIO_Init+0x210>)
 8001538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b6c      	ldr	r3, [pc, #432]	@ (80016f0 <MX_GPIO_Init+0x210>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b68      	ldr	r3, [pc, #416]	@ (80016f0 <MX_GPIO_Init+0x210>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a67      	ldr	r2, [pc, #412]	@ (80016f0 <MX_GPIO_Init+0x210>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b65      	ldr	r3, [pc, #404]	@ (80016f0 <MX_GPIO_Init+0x210>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b61      	ldr	r3, [pc, #388]	@ (80016f0 <MX_GPIO_Init+0x210>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a60      	ldr	r2, [pc, #384]	@ (80016f0 <MX_GPIO_Init+0x210>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b5e      	ldr	r3, [pc, #376]	@ (80016f0 <MX_GPIO_Init+0x210>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b5a      	ldr	r3, [pc, #360]	@ (80016f0 <MX_GPIO_Init+0x210>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a59      	ldr	r2, [pc, #356]	@ (80016f0 <MX_GPIO_Init+0x210>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b57      	ldr	r3, [pc, #348]	@ (80016f0 <MX_GPIO_Init+0x210>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2108      	movs	r1, #8
 80015a2:	4854      	ldr	r0, [pc, #336]	@ (80016f4 <MX_GPIO_Init+0x214>)
 80015a4:	f001 f828 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2101      	movs	r1, #1
 80015ac:	4852      	ldr	r0, [pc, #328]	@ (80016f8 <MX_GPIO_Init+0x218>)
 80015ae:	f001 f823 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015b2:	2200      	movs	r2, #0
 80015b4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80015b8:	4850      	ldr	r0, [pc, #320]	@ (80016fc <MX_GPIO_Init+0x21c>)
 80015ba:	f001 f81d 	bl	80025f8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015c4:	484e      	ldr	r0, [pc, #312]	@ (8001700 <MX_GPIO_Init+0x220>)
 80015c6:	f001 f817 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80015ca:	2308      	movs	r3, #8
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4844      	ldr	r0, [pc, #272]	@ (80016f4 <MX_GPIO_Init+0x214>)
 80015e2:	f000 fe6d 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	483e      	ldr	r0, [pc, #248]	@ (80016f8 <MX_GPIO_Init+0x218>)
 80015fe:	f000 fe5f 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001602:	2308      	movs	r3, #8
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001612:	2305      	movs	r3, #5
 8001614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	4836      	ldr	r0, [pc, #216]	@ (80016f8 <MX_GPIO_Init+0x218>)
 800161e:	f000 fe4f 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001622:	2301      	movs	r3, #1
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001626:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800162a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4832      	ldr	r0, [pc, #200]	@ (8001700 <MX_GPIO_Init+0x220>)
 8001638:	f000 fe42 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB13 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_13;
 800163c:	f242 0304 	movw	r3, #8196	@ 0x2004
 8001640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	4619      	mov	r1, r3
 8001650:	482c      	ldr	r0, [pc, #176]	@ (8001704 <MX_GPIO_Init+0x224>)
 8001652:	f000 fe35 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001656:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001668:	2305      	movs	r3, #5
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	4824      	ldr	r0, [pc, #144]	@ (8001704 <MX_GPIO_Init+0x224>)
 8001674:	f000 fe24 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001678:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800167c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	481a      	ldr	r0, [pc, #104]	@ (80016fc <MX_GPIO_Init+0x21c>)
 8001692:	f000 fe15 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001696:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4619      	mov	r1, r3
 80016ae:	4814      	ldr	r0, [pc, #80]	@ (8001700 <MX_GPIO_Init+0x220>)
 80016b0:	f000 fe06 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016b4:	2320      	movs	r3, #32
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	480d      	ldr	r0, [pc, #52]	@ (80016fc <MX_GPIO_Init+0x21c>)
 80016c8:	f000 fdfa 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016d0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <MX_GPIO_Init+0x214>)
 80016e2:	f000 fded 	bl	80022c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016e6:	bf00      	nop
 80016e8:	3730      	adds	r7, #48	@ 0x30
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020c00 	.word	0x40020c00
 8001700:	40020000 	.word	0x40020000
 8001704:	40020400 	.word	0x40020400

08001708 <Encoder_Init>:

/* USER CODE BEGIN 4 */
void Encoder_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
    // Start Timer 1 in encoder mode
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800170c:	213c      	movs	r1, #60	@ 0x3c
 800170e:	4804      	ldr	r0, [pc, #16]	@ (8001720 <Encoder_Init+0x18>)
 8001710:	f004 ff7c 	bl	800660c <HAL_TIM_Encoder_Start>
    // Reset the counter to zero
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001714:	4b02      	ldr	r3, [pc, #8]	@ (8001720 <Encoder_Init+0x18>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000304 	.word	0x20000304

08001724 <Motor_PWM_Init>:
// Function to initialize PWM
void Motor_PWM_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim9);
 8001728:	4806      	ldr	r0, [pc, #24]	@ (8001744 <Motor_PWM_Init+0x20>)
 800172a:	f004 fd49 	bl	80061c0 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1); // Start PWM on TIM2 Channel 1
 800172e:	2100      	movs	r1, #0
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <Motor_PWM_Init+0x20>)
 8001732:	f004 fdfd 	bl	8006330 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2); // Start PWM for RPWM
 8001736:	2104      	movs	r1, #4
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <Motor_PWM_Init+0x20>)
 800173a:	f004 fdf9 	bl	8006330 <HAL_TIM_PWM_Start>
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000394 	.word	0x20000394

08001748 <Motor_SetSpeedAndDirection>:
// Function to set motor speed (0-100%)


// Function to set motor direction
void Motor_SetSpeedAndDirection(uint8_t speed, uint8_t direction)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	460a      	mov	r2, r1
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	4613      	mov	r3, r2
 8001756:	71bb      	strb	r3, [r7, #6]
    if (speed > 100) speed = 100; // Limit speed to 100%
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b64      	cmp	r3, #100	@ 0x64
 800175c:	d901      	bls.n	8001762 <Motor_SetSpeedAndDirection+0x1a>
 800175e:	2364      	movs	r3, #100	@ 0x64
 8001760:	71fb      	strb	r3, [r7, #7]

    if (direction == 0) // Forward
 8001762:	79bb      	ldrb	r3, [r7, #6]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d111      	bne.n	800178c <Motor_SetSpeedAndDirection+0x44>
    {
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, speed * (htim9.Init.Period + 1) / 100); // LPWM
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4a14      	ldr	r2, [pc, #80]	@ (80017bc <Motor_SetSpeedAndDirection+0x74>)
 800176c:	68d2      	ldr	r2, [r2, #12]
 800176e:	3201      	adds	r2, #1
 8001770:	fb03 f202 	mul.w	r2, r3, r2
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <Motor_SetSpeedAndDirection+0x74>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4911      	ldr	r1, [pc, #68]	@ (80017c0 <Motor_SetSpeedAndDirection+0x78>)
 800177a:	fba1 1202 	umull	r1, r2, r1, r2
 800177e:	0952      	lsrs	r2, r2, #5
 8001780:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0); // RPWM
 8001782:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <Motor_SetSpeedAndDirection+0x74>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	639a      	str	r2, [r3, #56]	@ 0x38
    else // Reverse
    {
    	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0); // LPWM
    	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, speed * (htim9.Init.Period + 1) / 100); // RPWM
    }
}
 800178a:	e010      	b.n	80017ae <Motor_SetSpeedAndDirection+0x66>
    	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0); // LPWM
 800178c:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <Motor_SetSpeedAndDirection+0x74>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2200      	movs	r2, #0
 8001792:	635a      	str	r2, [r3, #52]	@ 0x34
    	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, speed * (htim9.Init.Period + 1) / 100); // RPWM
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4a09      	ldr	r2, [pc, #36]	@ (80017bc <Motor_SetSpeedAndDirection+0x74>)
 8001798:	68d2      	ldr	r2, [r2, #12]
 800179a:	3201      	adds	r2, #1
 800179c:	fb03 f202 	mul.w	r2, r3, r2
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <Motor_SetSpeedAndDirection+0x74>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4906      	ldr	r1, [pc, #24]	@ (80017c0 <Motor_SetSpeedAndDirection+0x78>)
 80017a6:	fba1 1202 	umull	r1, r2, r1, r2
 80017aa:	0952      	lsrs	r2, r2, #5
 80017ac:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000394 	.word	0x20000394
 80017c0:	51eb851f 	.word	0x51eb851f

080017c4 <Encoder_GetPosition>:

int32_t Encoder_GetPosition(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim1);
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <Encoder_GetPosition+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	20000304 	.word	0x20000304
 80017dc:	00000000 	.word	0x00000000

080017e0 <CalculateTravelDistance>:
void Encoder_ResetPosition(void)
{

}
float CalculateTravelDistance(int32_t encoderCounts)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    // Calculate the wheel circumference
    float wheelCircumference = 2 * M_PI * WHEEL_RADIUS_CM;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <CalculateTravelDistance+0x78>)
 80017ea:	617b      	str	r3, [r7, #20]

    // Calculate the number of wheel revolutions
    float wheelRevolutions = (float)encoderCounts / ENCODER_PULSES_PER_REVOLUTION / GEAR_RATIO;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	ee07 3a90 	vmov	s15, r3
 80017f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f6:	ee17 0a90 	vmov	r0, s15
 80017fa:	f7fe fea5 	bl	8000548 <__aeabi_f2d>
 80017fe:	a314      	add	r3, pc, #80	@ (adr r3, 8001850 <CalculateTravelDistance+0x70>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7ff f822 	bl	800084c <__aeabi_ddiv>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <CalculateTravelDistance+0x7c>)
 8001816:	f7ff f819 	bl	800084c <__aeabi_ddiv>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff f9c1 	bl	8000ba8 <__aeabi_d2f>
 8001826:	4603      	mov	r3, r0
 8001828:	613b      	str	r3, [r7, #16]

    // Calculate the travel distance
    float travelDistance = wheelRevolutions * wheelCircumference;
 800182a:	ed97 7a04 	vldr	s14, [r7, #16]
 800182e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001836:	edc7 7a03 	vstr	s15, [r7, #12]

    return travelDistance; // Distance in cm
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	ee07 3a90 	vmov	s15, r3
}
 8001840:	eeb0 0a67 	vmov.f32	s0, s15
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	f3af 8000 	nop.w
 8001850:	00000000 	.word	0x00000000
 8001854:	4074a000 	.word	0x4074a000
 8001858:	433c7edd 	.word	0x433c7edd
 800185c:	403e0000 	.word	0x403e0000

08001860 <_write>:
int _write(int file, char *ptr, int len)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	e009      	b.n	8001886 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fb7a 	bl	8000f74 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	dbf1      	blt.n	8001872 <_write+0x12>
  }
  return len;
 800188e:	687b      	ldr	r3, [r7, #4]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <Error_Handler+0x8>

080018a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	4a0f      	ldr	r2, [pc, #60]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4a08      	ldr	r2, [pc, #32]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018e2:	2007      	movs	r0, #7
 80018e4:	f000 fcaa 	bl	800223c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	@ 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	@ (8001978 <HAL_I2C_MspInit+0x84>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d12c      	bne.n	8001970 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <HAL_I2C_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a17      	ldr	r2, [pc, #92]	@ (800197c <HAL_I2C_MspInit+0x88>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <HAL_I2C_MspInit+0x88>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001932:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001938:	2312      	movs	r3, #18
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193c:	2301      	movs	r3, #1
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001944:	2304      	movs	r3, #4
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	480c      	ldr	r0, [pc, #48]	@ (8001980 <HAL_I2C_MspInit+0x8c>)
 8001950:	f000 fcb6 	bl	80022c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <HAL_I2C_MspInit+0x88>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	4a07      	ldr	r2, [pc, #28]	@ (800197c <HAL_I2C_MspInit+0x88>)
 800195e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001962:	6413      	str	r3, [r2, #64]	@ 0x40
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_I2C_MspInit+0x88>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	@ 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40005400 	.word	0x40005400
 800197c:	40023800 	.word	0x40023800
 8001980:	40020400 	.word	0x40020400

08001984 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08e      	sub	sp, #56	@ 0x38
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a31      	ldr	r2, [pc, #196]	@ (8001a74 <HAL_I2S_MspInit+0xf0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d15a      	bne.n	8001a6a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80019b4:	2301      	movs	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80019b8:	23c0      	movs	r3, #192	@ 0xc0
 80019ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80019bc:	2302      	movs	r3, #2
 80019be:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4618      	mov	r0, r3
 80019c6:	f004 f9e1 	bl	8005d8c <HAL_RCCEx_PeriphCLKConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80019d0:	f7ff ff62 	bl	8001898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <HAL_I2S_MspInit+0xf4>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	4a26      	ldr	r2, [pc, #152]	@ (8001a78 <HAL_I2S_MspInit+0xf4>)
 80019de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e4:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <HAL_I2S_MspInit+0xf4>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <HAL_I2S_MspInit+0xf4>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a78 <HAL_I2S_MspInit+0xf4>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a00:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <HAL_I2S_MspInit+0xf4>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <HAL_I2S_MspInit+0xf4>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a14:	4a18      	ldr	r2, [pc, #96]	@ (8001a78 <HAL_I2S_MspInit+0xf4>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1c:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <HAL_I2S_MspInit+0xf4>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001a28:	2310      	movs	r3, #16
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a38:	2306      	movs	r3, #6
 8001a3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a40:	4619      	mov	r1, r3
 8001a42:	480e      	ldr	r0, [pc, #56]	@ (8001a7c <HAL_I2S_MspInit+0xf8>)
 8001a44:	f000 fc3c 	bl	80022c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a48:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a5a:	2306      	movs	r3, #6
 8001a5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a62:	4619      	mov	r1, r3
 8001a64:	4806      	ldr	r0, [pc, #24]	@ (8001a80 <HAL_I2S_MspInit+0xfc>)
 8001a66:	f000 fc2b 	bl	80022c0 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3738      	adds	r7, #56	@ 0x38
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40003c00 	.word	0x40003c00
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40020800 	.word	0x40020800

08001a84 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	@ (8001b08 <HAL_SPI_MspInit+0x84>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12b      	bne.n	8001afe <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <HAL_SPI_MspInit+0x88>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	4a17      	ldr	r2, [pc, #92]	@ (8001b0c <HAL_SPI_MspInit+0x88>)
 8001ab0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <HAL_SPI_MspInit+0x88>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <HAL_SPI_MspInit+0x88>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	4a10      	ldr	r2, [pc, #64]	@ (8001b0c <HAL_SPI_MspInit+0x88>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <HAL_SPI_MspInit+0x88>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001ade:	23e0      	movs	r3, #224	@ 0xe0
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aee:	2305      	movs	r3, #5
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <HAL_SPI_MspInit+0x8c>)
 8001afa:	f000 fbe1 	bl	80022c0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	@ 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40013000 	.word	0x40013000
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000

08001b14 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	@ 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a19      	ldr	r2, [pc, #100]	@ (8001b98 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d12c      	bne.n	8001b90 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	4a17      	ldr	r2, [pc, #92]	@ (8001b9c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b46:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a10      	ldr	r2, [pc, #64]	@ (8001b9c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b5c:	f043 0310 	orr.w	r3, r3, #16
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001b6e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001b8c:	f000 fb98 	bl	80022c0 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b90:	bf00      	nop
 8001b92:	3728      	adds	r7, #40	@ 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001be0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_TIM_Base_MspInit+0x40>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <HAL_TIM_Base_MspInit+0x40>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc6:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <HAL_TIM_Base_MspInit+0x40>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40000400 	.word	0x40000400
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c24 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d10d      	bne.n	8001c16 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM9_MspInit 0 */

    /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <HAL_TIM_PWM_MspInit+0x40>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	4a09      	ldr	r2, [pc, #36]	@ (8001c28 <HAL_TIM_PWM_MspInit+0x40>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0a:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <HAL_TIM_PWM_MspInit+0x40>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM9_MspInit 1 */

  }

}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40014000 	.word	0x40014000
 8001c28:	40023800 	.word	0x40023800

08001c2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a12      	ldr	r2, [pc, #72]	@ (8001c94 <HAL_TIM_MspPostInit+0x68>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d11d      	bne.n	8001c8a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM9_MspPostInit 0 */

    /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HAL_TIM_MspPostInit+0x6c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <HAL_TIM_MspPostInit+0x6c>)
 8001c58:	f043 0310 	orr.w	r3, r3, #16
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <HAL_TIM_MspPostInit+0x6c>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c6a:	2360      	movs	r3, #96	@ 0x60
 8001c6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <HAL_TIM_MspPostInit+0x70>)
 8001c86:	f000 fb1b 	bl	80022c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM9_MspPostInit 1 */

    /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40014000 	.word	0x40014000
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	@ (8001d24 <HAL_UART_MspInit+0x84>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d12b      	bne.n	8001d1a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <HAL_UART_MspInit+0x88>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	4a17      	ldr	r2, [pc, #92]	@ (8001d28 <HAL_UART_MspInit+0x88>)
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd2:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <HAL_UART_MspInit+0x88>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <HAL_UART_MspInit+0x88>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a10      	ldr	r2, [pc, #64]	@ (8001d28 <HAL_UART_MspInit+0x88>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <HAL_UART_MspInit+0x88>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cfa:	230c      	movs	r3, #12
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <HAL_UART_MspInit+0x8c>)
 8001d16:	f000 fad3 	bl	80022c0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	@ 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40004400 	.word	0x40004400
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020000 	.word	0x40020000

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <NMI_Handler+0x4>

08001d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <MemManage_Handler+0x4>

08001d48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d86:	f000 f945 	bl	8002014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d94:	4802      	ldr	r0, [pc, #8]	@ (8001da0 <OTG_FS_IRQHandler+0x10>)
 8001d96:	f000 ff29 	bl	8002bec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000808 	.word	0x20000808

08001da4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return 1;
 8001da8:	2301      	movs	r3, #1
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <_kill>:

int _kill(int pid, int sig)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dbe:	f00a f815 	bl	800bdec <__errno>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2216      	movs	r2, #22
 8001dc6:	601a      	str	r2, [r3, #0]
  return -1;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_exit>:

void _exit (int status)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ffe7 	bl	8001db4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001de6:	bf00      	nop
 8001de8:	e7fd      	b.n	8001de6 <_exit+0x12>

08001dea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e00a      	b.n	8001e12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dfc:	f3af 8000 	nop.w
 8001e00:	4601      	mov	r1, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	60ba      	str	r2, [r7, #8]
 8001e08:	b2ca      	uxtb	r2, r1
 8001e0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	dbf0      	blt.n	8001dfc <_read+0x12>
  }

  return len;
 8001e1a:	687b      	ldr	r3, [r7, #4]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e4c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_isatty>:

int _isatty(int file)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	@ (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	@ (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f009 ff96 	bl	800bdec <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	@ (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	@ (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20020000 	.word	0x20020000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	20000424 	.word	0x20000424
 8001ef4:	20000d38 	.word	0x20000d38

08001ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <SystemInit+0x20>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f02:	4a05      	ldr	r2, [pc, #20]	@ (8001f18 <SystemInit+0x20>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f20:	f7ff ffea 	bl	8001ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f24:	480c      	ldr	r0, [pc, #48]	@ (8001f58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f26:	490d      	ldr	r1, [pc, #52]	@ (8001f5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f28:	4a0d      	ldr	r2, [pc, #52]	@ (8001f60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f2c:	e002      	b.n	8001f34 <LoopCopyDataInit>

08001f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f32:	3304      	adds	r3, #4

08001f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f38:	d3f9      	bcc.n	8001f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f40:	e001      	b.n	8001f46 <LoopFillZerobss>

08001f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f44:	3204      	adds	r2, #4

08001f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f48:	d3fb      	bcc.n	8001f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4a:	f009 ff55 	bl	800bdf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4e:	f7ff f839 	bl	8000fc4 <main>
  bx  lr    
 8001f52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f5c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001f60:	0800ddfc 	.word	0x0800ddfc
  ldr r2, =_sbss
 8001f64:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001f68:	20000d34 	.word	0x20000d34

08001f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <ADC_IRQHandler>
	...

08001f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f74:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <HAL_Init+0x40>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb0 <HAL_Init+0x40>)
 8001f7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f80:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <HAL_Init+0x40>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <HAL_Init+0x40>)
 8001f86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f8c:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <HAL_Init+0x40>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a07      	ldr	r2, [pc, #28]	@ (8001fb0 <HAL_Init+0x40>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f000 f94f 	bl	800223c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f000 f808 	bl	8001fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa4:	f7ff fc7e 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023c00 	.word	0x40023c00

08001fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <HAL_InitTick+0x54>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b12      	ldr	r3, [pc, #72]	@ (800200c <HAL_InitTick+0x58>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f967 	bl	80022a6 <HAL_SYSTICK_Config>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00e      	b.n	8002000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d80a      	bhi.n	8001ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f000 f92f 	bl	8002252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff4:	4a06      	ldr	r2, [pc, #24]	@ (8002010 <HAL_InitTick+0x5c>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e000      	b.n	8002000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000000 	.word	0x20000000
 800200c:	20000008 	.word	0x20000008
 8002010:	20000004 	.word	0x20000004

08002014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_IncTick+0x20>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_IncTick+0x24>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4413      	add	r3, r2
 8002024:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <HAL_IncTick+0x24>)
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000008 	.word	0x20000008
 8002038:	20000428 	.word	0x20000428

0800203c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return uwTick;
 8002040:	4b03      	ldr	r3, [pc, #12]	@ (8002050 <HAL_GetTick+0x14>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000428 	.word	0x20000428

08002054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff ffee 	bl	800203c <HAL_GetTick>
 8002060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d005      	beq.n	800207a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206e:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <HAL_Delay+0x44>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800207a:	bf00      	nop
 800207c:	f7ff ffde 	bl	800203c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	429a      	cmp	r2, r3
 800208a:	d8f7      	bhi.n	800207c <HAL_Delay+0x28>
  {
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000008 	.word	0x20000008

0800209c <__NVIC_SetPriorityGrouping>:
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ac:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b8:	4013      	ands	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ce:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	60d3      	str	r3, [r2, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_GetPriorityGrouping>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <__NVIC_GetPriorityGrouping+0x18>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0307 	and.w	r3, r3, #7
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_EnableIRQ>:
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	2b00      	cmp	r3, #0
 8002110:	db0b      	blt.n	800212a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	4907      	ldr	r1, [pc, #28]	@ (8002138 <__NVIC_EnableIRQ+0x38>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2001      	movs	r0, #1
 8002122:	fa00 f202 	lsl.w	r2, r0, r2
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	@ (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	@ (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	@ 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	@ 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <SysTick_Config>:
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002208:	d301      	bcc.n	800220e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800220a:	2301      	movs	r3, #1
 800220c:	e00f      	b.n	800222e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <SysTick_Config+0x40>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002216:	210f      	movs	r1, #15
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f7ff ff8e 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <SysTick_Config+0x40>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002226:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <SysTick_Config+0x40>)
 8002228:	2207      	movs	r2, #7
 800222a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	e000e010 	.word	0xe000e010

0800223c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff29 	bl	800209c <__NVIC_SetPriorityGrouping>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002264:	f7ff ff3e 	bl	80020e4 <__NVIC_GetPriorityGrouping>
 8002268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f7ff ff8e 	bl	8002190 <NVIC_EncodePriority>
 8002274:	4602      	mov	r2, r0
 8002276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff5d 	bl	800213c <__NVIC_SetPriority>
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff31 	bl	8002100 <__NVIC_EnableIRQ>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffa2 	bl	80021f8 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	@ 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	e16b      	b.n	80025b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	f040 815a 	bne.w	80025ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d005      	beq.n	8002312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230e:	2b02      	cmp	r3, #2
 8002310:	d130      	bne.n	8002374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0201 	and.w	r2, r3, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b03      	cmp	r3, #3
 800237e:	d017      	beq.n	80023b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d123      	bne.n	8002404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	08da      	lsrs	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3208      	adds	r2, #8
 80023c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	08da      	lsrs	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3208      	adds	r2, #8
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0203 	and.w	r2, r3, #3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80b4 	beq.w	80025ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b60      	ldr	r3, [pc, #384]	@ (80025cc <HAL_GPIO_Init+0x30c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	4a5f      	ldr	r2, [pc, #380]	@ (80025cc <HAL_GPIO_Init+0x30c>)
 8002450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002454:	6453      	str	r3, [r2, #68]	@ 0x44
 8002456:	4b5d      	ldr	r3, [pc, #372]	@ (80025cc <HAL_GPIO_Init+0x30c>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002462:	4a5b      	ldr	r2, [pc, #364]	@ (80025d0 <HAL_GPIO_Init+0x310>)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	3302      	adds	r3, #2
 800246a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	220f      	movs	r2, #15
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a52      	ldr	r2, [pc, #328]	@ (80025d4 <HAL_GPIO_Init+0x314>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d02b      	beq.n	80024e6 <HAL_GPIO_Init+0x226>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a51      	ldr	r2, [pc, #324]	@ (80025d8 <HAL_GPIO_Init+0x318>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d025      	beq.n	80024e2 <HAL_GPIO_Init+0x222>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a50      	ldr	r2, [pc, #320]	@ (80025dc <HAL_GPIO_Init+0x31c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01f      	beq.n	80024de <HAL_GPIO_Init+0x21e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4f      	ldr	r2, [pc, #316]	@ (80025e0 <HAL_GPIO_Init+0x320>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d019      	beq.n	80024da <HAL_GPIO_Init+0x21a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4e      	ldr	r2, [pc, #312]	@ (80025e4 <HAL_GPIO_Init+0x324>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_GPIO_Init+0x216>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4d      	ldr	r2, [pc, #308]	@ (80025e8 <HAL_GPIO_Init+0x328>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00d      	beq.n	80024d2 <HAL_GPIO_Init+0x212>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4c      	ldr	r2, [pc, #304]	@ (80025ec <HAL_GPIO_Init+0x32c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <HAL_GPIO_Init+0x20e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4b      	ldr	r2, [pc, #300]	@ (80025f0 <HAL_GPIO_Init+0x330>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_GPIO_Init+0x20a>
 80024c6:	2307      	movs	r3, #7
 80024c8:	e00e      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024ca:	2308      	movs	r3, #8
 80024cc:	e00c      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024ce:	2306      	movs	r3, #6
 80024d0:	e00a      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024d2:	2305      	movs	r3, #5
 80024d4:	e008      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024d6:	2304      	movs	r3, #4
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024da:	2303      	movs	r3, #3
 80024dc:	e004      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024de:	2302      	movs	r3, #2
 80024e0:	e002      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024e6:	2300      	movs	r3, #0
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	f002 0203 	and.w	r2, r2, #3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	4093      	lsls	r3, r2
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f8:	4935      	ldr	r1, [pc, #212]	@ (80025d0 <HAL_GPIO_Init+0x310>)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002506:	4b3b      	ldr	r3, [pc, #236]	@ (80025f4 <HAL_GPIO_Init+0x334>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252a:	4a32      	ldr	r2, [pc, #200]	@ (80025f4 <HAL_GPIO_Init+0x334>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002530:	4b30      	ldr	r3, [pc, #192]	@ (80025f4 <HAL_GPIO_Init+0x334>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002554:	4a27      	ldr	r2, [pc, #156]	@ (80025f4 <HAL_GPIO_Init+0x334>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800255a:	4b26      	ldr	r3, [pc, #152]	@ (80025f4 <HAL_GPIO_Init+0x334>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257e:	4a1d      	ldr	r2, [pc, #116]	@ (80025f4 <HAL_GPIO_Init+0x334>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002584:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_GPIO_Init+0x334>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a8:	4a12      	ldr	r2, [pc, #72]	@ (80025f4 <HAL_GPIO_Init+0x334>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b0f      	cmp	r3, #15
 80025b8:	f67f ae90 	bls.w	80022dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3724      	adds	r7, #36	@ 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40013800 	.word	0x40013800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40020400 	.word	0x40020400
 80025dc:	40020800 	.word	0x40020800
 80025e0:	40020c00 	.word	0x40020c00
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40021400 	.word	0x40021400
 80025ec:	40021800 	.word	0x40021800
 80025f0:	40021c00 	.word	0x40021c00
 80025f4:	40013c00 	.word	0x40013c00

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af02      	add	r7, sp, #8
 8002630:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e059      	b.n	80026f0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f008 fa8e 	bl	800ab78 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2203      	movs	r2, #3
 8002660:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800266a:	d102      	bne.n	8002672 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f005 f89b 	bl	80077b2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7c1a      	ldrb	r2, [r3, #16]
 8002684:	f88d 2000 	strb.w	r2, [sp]
 8002688:	3304      	adds	r3, #4
 800268a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800268c:	f005 f81c 	bl	80076c8 <USB_CoreInit>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2202      	movs	r2, #2
 800269a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e026      	b.n	80026f0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2101      	movs	r1, #1
 80026a8:	4618      	mov	r0, r3
 80026aa:	f005 f893 	bl	80077d4 <USB_SetCurrentMode>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e017      	b.n	80026f0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7c1a      	ldrb	r2, [r3, #16]
 80026c8:	f88d 2000 	strb.w	r2, [sp]
 80026cc:	3304      	adds	r3, #4
 80026ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d0:	f005 fa3c 	bl	8007b4c <USB_HostInit>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e004      	b.n	80026f0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b08b      	sub	sp, #44	@ 0x2c
 80026fc:	af04      	add	r7, sp, #16
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	4608      	mov	r0, r1
 8002702:	4611      	mov	r1, r2
 8002704:	461a      	mov	r2, r3
 8002706:	4603      	mov	r3, r0
 8002708:	70fb      	strb	r3, [r7, #3]
 800270a:	460b      	mov	r3, r1
 800270c:	70bb      	strb	r3, [r7, #2]
 800270e:	4613      	mov	r3, r2
 8002710:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002712:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002714:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_HCD_HC_Init+0x2c>
 8002720:	2302      	movs	r3, #2
 8002722:	e09d      	b.n	8002860 <HAL_HCD_HC_Init+0x168>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3319      	adds	r3, #25
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	3314      	adds	r3, #20
 8002750:	787a      	ldrb	r2, [r7, #1]
 8002752:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3315      	adds	r3, #21
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	3326      	adds	r3, #38	@ 0x26
 8002778:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800277c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800277e:	78fa      	ldrb	r2, [r7, #3]
 8002780:	78bb      	ldrb	r3, [r7, #2]
 8002782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002786:	b2d8      	uxtb	r0, r3
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3316      	adds	r3, #22
 8002796:	4602      	mov	r2, r0
 8002798:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fbc8 	bl	8002f34 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80027a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da0a      	bge.n	80027c2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	3317      	adds	r3, #23
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e009      	b.n	80027d6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	3317      	adds	r3, #23
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f005 fb1a 	bl	8007e14 <USB_GetHostSpeed>
 80027e0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80027e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d10b      	bne.n	8002802 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80027ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <HAL_HCD_HC_Init+0x10a>
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d104      	bne.n	8002802 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2bbc      	cmp	r3, #188	@ 0xbc
 80027fc:	d901      	bls.n	8002802 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80027fe:	23bc      	movs	r3, #188	@ 0xbc
 8002800:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	3318      	adds	r3, #24
 8002812:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002816:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	b298      	uxth	r0, r3
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	3328      	adds	r3, #40	@ 0x28
 800282c:	4602      	mov	r2, r0
 800282e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	b29b      	uxth	r3, r3
 8002838:	787c      	ldrb	r4, [r7, #1]
 800283a:	78ba      	ldrb	r2, [r7, #2]
 800283c:	78f9      	ldrb	r1, [r7, #3]
 800283e:	9302      	str	r3, [sp, #8]
 8002840:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	4623      	mov	r3, r4
 800284e:	f005 fb09 	bl	8007e64 <USB_HC_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002860:	4618      	mov	r0, r3
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	bd90      	pop	{r4, r7, pc}

08002868 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_HCD_HC_Halt+0x1e>
 8002882:	2302      	movs	r3, #2
 8002884:	e00f      	b.n	80028a6 <HAL_HCD_HC_Halt+0x3e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f005 fe9b 	bl	80085d2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	4608      	mov	r0, r1
 80028ba:	4611      	mov	r1, r2
 80028bc:	461a      	mov	r2, r3
 80028be:	4603      	mov	r3, r0
 80028c0:	70fb      	strb	r3, [r7, #3]
 80028c2:	460b      	mov	r3, r1
 80028c4:	70bb      	strb	r3, [r7, #2]
 80028c6:	4613      	mov	r3, r2
 80028c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3317      	adds	r3, #23
 80028da:	78ba      	ldrb	r2, [r7, #2]
 80028dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	3326      	adds	r3, #38	@ 0x26
 80028ee:	787a      	ldrb	r2, [r7, #1]
 80028f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80028f2:	7c3b      	ldrb	r3, [r7, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d114      	bne.n	8002922 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	332a      	adds	r3, #42	@ 0x2a
 8002908:	2203      	movs	r2, #3
 800290a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	3319      	adds	r3, #25
 800291c:	7f3a      	ldrb	r2, [r7, #28]
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	e009      	b.n	8002936 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	332a      	adds	r3, #42	@ 0x2a
 8002932:	2202      	movs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002936:	787b      	ldrb	r3, [r7, #1]
 8002938:	2b03      	cmp	r3, #3
 800293a:	f200 8102 	bhi.w	8002b42 <HAL_HCD_HC_SubmitRequest+0x292>
 800293e:	a201      	add	r2, pc, #4	@ (adr r2, 8002944 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	08002955 	.word	0x08002955
 8002948:	08002b2d 	.word	0x08002b2d
 800294c:	08002a19 	.word	0x08002a19
 8002950:	08002aa3 	.word	0x08002aa3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002954:	7c3b      	ldrb	r3, [r7, #16]
 8002956:	2b01      	cmp	r3, #1
 8002958:	f040 80f5 	bne.w	8002b46 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800295c:	78bb      	ldrb	r3, [r7, #2]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d12d      	bne.n	80029be <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002962:	8b3b      	ldrh	r3, [r7, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	333d      	adds	r3, #61	@ 0x3d
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	333d      	adds	r3, #61	@ 0x3d
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10a      	bne.n	80029a8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	332a      	adds	r3, #42	@ 0x2a
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80029a6:	e0ce      	b.n	8002b46 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	332a      	adds	r3, #42	@ 0x2a
 80029b8:	2202      	movs	r2, #2
 80029ba:	701a      	strb	r2, [r3, #0]
      break;
 80029bc:	e0c3      	b.n	8002b46 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	331a      	adds	r3, #26
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	f040 80b8 	bne.w	8002b46 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	333c      	adds	r3, #60	@ 0x3c
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	332a      	adds	r3, #42	@ 0x2a
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
      break;
 8002a00:	e0a1      	b.n	8002b46 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	332a      	adds	r3, #42	@ 0x2a
 8002a12:	2202      	movs	r2, #2
 8002a14:	701a      	strb	r2, [r3, #0]
      break;
 8002a16:	e096      	b.n	8002b46 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002a18:	78bb      	ldrb	r3, [r7, #2]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d120      	bne.n	8002a60 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	333d      	adds	r3, #61	@ 0x3d
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	332a      	adds	r3, #42	@ 0x2a
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002a48:	e07e      	b.n	8002b48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	332a      	adds	r3, #42	@ 0x2a
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	701a      	strb	r2, [r3, #0]
      break;
 8002a5e:	e073      	b.n	8002b48 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	333c      	adds	r3, #60	@ 0x3c
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	332a      	adds	r3, #42	@ 0x2a
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
      break;
 8002a8a:	e05d      	b.n	8002b48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	332a      	adds	r3, #42	@ 0x2a
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	701a      	strb	r2, [r3, #0]
      break;
 8002aa0:	e052      	b.n	8002b48 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002aa2:	78bb      	ldrb	r3, [r7, #2]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d120      	bne.n	8002aea <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	333d      	adds	r3, #61	@ 0x3d
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10a      	bne.n	8002ad4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	332a      	adds	r3, #42	@ 0x2a
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ad2:	e039      	b.n	8002b48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	332a      	adds	r3, #42	@ 0x2a
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	701a      	strb	r2, [r3, #0]
      break;
 8002ae8:	e02e      	b.n	8002b48 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	333c      	adds	r3, #60	@ 0x3c
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10a      	bne.n	8002b16 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	332a      	adds	r3, #42	@ 0x2a
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
      break;
 8002b14:	e018      	b.n	8002b48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	332a      	adds	r3, #42	@ 0x2a
 8002b26:	2202      	movs	r2, #2
 8002b28:	701a      	strb	r2, [r3, #0]
      break;
 8002b2a:	e00d      	b.n	8002b48 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	332a      	adds	r3, #42	@ 0x2a
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
      break;
 8002b40:	e002      	b.n	8002b48 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002b42:	bf00      	nop
 8002b44:	e000      	b.n	8002b48 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002b46:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	332c      	adds	r3, #44	@ 0x2c
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	8b39      	ldrh	r1, [r7, #24]
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4403      	add	r3, r0
 8002b6c:	3334      	adds	r3, #52	@ 0x34
 8002b6e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	334c      	adds	r3, #76	@ 0x4c
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3338      	adds	r3, #56	@ 0x38
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3315      	adds	r3, #21
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	334d      	adds	r3, #77	@ 0x4d
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	3310      	adds	r3, #16
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	1d19      	adds	r1, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	799b      	ldrb	r3, [r3, #6]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f005 fa6e 	bl	80080bc <USB_HC_StartXfer>
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop

08002bec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f004 ff5c 	bl	8007ac0 <USB_GetMode>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	f040 80fb 	bne.w	8002e06 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f004 ff1f 	bl	8007a58 <USB_ReadInterrupts>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80f1 	beq.w	8002e04 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f004 ff16 	bl	8007a58 <USB_ReadInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c36:	d104      	bne.n	8002c42 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002c40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f004 ff06 	bl	8007a58 <USB_ReadInterrupts>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c56:	d104      	bne.n	8002c62 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002c60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 fef6 	bl	8007a58 <USB_ReadInterrupts>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c76:	d104      	bne.n	8002c82 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002c80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f004 fee6 	bl	8007a58 <USB_ReadInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d103      	bne.n	8002c9e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 fed8 	bl	8007a58 <USB_ReadInterrupts>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cb2:	d120      	bne.n	8002cf6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002cbc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d113      	bne.n	8002cf6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002cce:	2110      	movs	r1, #16
 8002cd0:	6938      	ldr	r0, [r7, #16]
 8002cd2:	f004 fdcb 	bl	800786c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002cd6:	6938      	ldr	r0, [r7, #16]
 8002cd8:	f004 fdfa 	bl	80078d0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7a5b      	ldrb	r3, [r3, #9]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d105      	bne.n	8002cf0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f004 fff2 	bl	8007cd4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f007 ffbf 	bl	800ac74 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f004 feac 	bl	8007a58 <USB_ReadInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d0a:	d102      	bne.n	8002d12 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f001 fd4d 	bl	80047ac <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f004 fe9e 	bl	8007a58 <USB_ReadInterrupts>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d106      	bne.n	8002d34 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f007 ff88 	bl	800ac3c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2208      	movs	r2, #8
 8002d32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f004 fe8d 	bl	8007a58 <USB_ReadInterrupts>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d48:	d139      	bne.n	8002dbe <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f005 fc2e 	bl	80085b0 <USB_HC_ReadInterrupt>
 8002d54:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	e025      	b.n	8002da8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d018      	beq.n	8002da2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d86:	d106      	bne.n	8002d96 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f905 	bl	8002f9e <HCD_HC_IN_IRQHandler>
 8002d94:	e005      	b.n	8002da2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 ff67 	bl	8003c70 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3301      	adds	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	795b      	ldrb	r3, [r3, #5]
 8002dac:	461a      	mov	r2, r3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d3d3      	bcc.n	8002d5c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 fe48 	bl	8007a58 <USB_ReadInterrupts>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b10      	cmp	r3, #16
 8002dd0:	d101      	bne.n	8002dd6 <HAL_HCD_IRQHandler+0x1ea>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_HCD_IRQHandler+0x1ec>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d014      	beq.n	8002e06 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0210 	bic.w	r2, r2, #16
 8002dea:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f001 fbfe 	bl	80045ee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0210 	orr.w	r2, r2, #16
 8002e00:	619a      	str	r2, [r3, #24]
 8002e02:	e000      	b.n	8002e06 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002e04:	bf00      	nop
    }
  }
}
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_HCD_Start+0x16>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e013      	b.n	8002e4a <HAL_HCD_Start+0x3e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2101      	movs	r1, #1
 8002e30:	4618      	mov	r0, r3
 8002e32:	f004 ffb6 	bl	8007da2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f004 fca8 	bl	8007790 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_HCD_Stop+0x16>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e00d      	b.n	8002e84 <HAL_HCD_Stop+0x32>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f005 fd09 	bl	800888c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f004 ff58 	bl	8007d4e <USB_ResetPort>
 8002e9e:	4603      	mov	r3, r0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	334c      	adds	r3, #76	@ 0x4c
 8002ec4:	781b      	ldrb	r3, [r3, #0]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	3338      	adds	r3, #56	@ 0x38
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f004 ff9a 	bl	8007e42 <USB_GetCurrentFrame>
 8002f0e:	4603      	mov	r3, r0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f004 ff75 	bl	8007e14 <USB_GetHostSpeed>
 8002f2a:	4603      	mov	r3, r0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	331a      	adds	r3, #26
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	331b      	adds	r3, #27
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	3325      	adds	r3, #37	@ 0x25
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	3324      	adds	r3, #36	@ 0x24
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f004 fd5e 	bl	8007a7e <USB_ReadChInterrupts>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d11a      	bne.n	8003002 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2304      	movs	r3, #4
 8002fdc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	334d      	adds	r3, #77	@ 0x4d
 8002fee:	2207      	movs	r2, #7
 8002ff0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f005 fae9 	bl	80085d2 <USB_HC_Halt>
 8003000:	e09e      	b.n	8003140 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f004 fd37 	bl	8007a7e <USB_ReadChInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800301a:	d11b      	bne.n	8003054 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003028:	461a      	mov	r2, r3
 800302a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800302e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	334d      	adds	r3, #77	@ 0x4d
 8003040:	2208      	movs	r2, #8
 8003042:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f005 fac0 	bl	80085d2 <USB_HC_Halt>
 8003052:	e075      	b.n	8003140 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f004 fd0e 	bl	8007a7e <USB_ReadChInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b08      	cmp	r3, #8
 800306a:	d11a      	bne.n	80030a2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003078:	461a      	mov	r2, r3
 800307a:	2308      	movs	r3, #8
 800307c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	334d      	adds	r3, #77	@ 0x4d
 800308e:	2206      	movs	r2, #6
 8003090:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f005 fa99 	bl	80085d2 <USB_HC_Halt>
 80030a0:	e04e      	b.n	8003140 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f004 fce7 	bl	8007a7e <USB_ReadChInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ba:	d11b      	bne.n	80030f4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c8:	461a      	mov	r2, r3
 80030ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	334d      	adds	r3, #77	@ 0x4d
 80030e0:	2209      	movs	r2, #9
 80030e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f005 fa70 	bl	80085d2 <USB_HC_Halt>
 80030f2:	e025      	b.n	8003140 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 fcbe 	bl	8007a7e <USB_ReadChInterrupts>
 8003102:	4603      	mov	r3, r0
 8003104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003108:	2b80      	cmp	r3, #128	@ 0x80
 800310a:	d119      	bne.n	8003140 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003118:	461a      	mov	r2, r3
 800311a:	2380      	movs	r3, #128	@ 0x80
 800311c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	334d      	adds	r3, #77	@ 0x4d
 800312e:	2207      	movs	r2, #7
 8003130:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f005 fa49 	bl	80085d2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	4611      	mov	r1, r2
 8003148:	4618      	mov	r0, r3
 800314a:	f004 fc98 	bl	8007a7e <USB_ReadChInterrupts>
 800314e:	4603      	mov	r3, r0
 8003150:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003158:	d112      	bne.n	8003180 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f005 fa35 	bl	80085d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4413      	add	r3, r2
 8003170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003174:	461a      	mov	r2, r3
 8003176:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800317a:	6093      	str	r3, [r2, #8]
 800317c:	f000 bd75 	b.w	8003c6a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f004 fc78 	bl	8007a7e <USB_ReadChInterrupts>
 800318e:	4603      	mov	r3, r0
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 8128 	bne.w	80033ea <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a6:	461a      	mov	r2, r3
 80031a8:	2320      	movs	r3, #32
 80031aa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	331b      	adds	r3, #27
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d119      	bne.n	80031f6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	331b      	adds	r3, #27
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	0151      	lsls	r1, r2, #5
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	440a      	add	r2, r1
 80031ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	799b      	ldrb	r3, [r3, #6]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01b      	beq.n	8003236 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	3330      	adds	r3, #48	@ 0x30
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	1ac9      	subs	r1, r1, r3
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4403      	add	r3, r0
 8003232:	3338      	adds	r3, #56	@ 0x38
 8003234:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	334d      	adds	r3, #77	@ 0x4d
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	3344      	adds	r3, #68	@ 0x44
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4413      	add	r3, r2
 8003266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800326a:	461a      	mov	r2, r3
 800326c:	2301      	movs	r3, #1
 800326e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3326      	adds	r3, #38	@ 0x26
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	3326      	adds	r3, #38	@ 0x26
 8003296:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003298:	2b02      	cmp	r3, #2
 800329a:	d110      	bne.n	80032be <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f005 f994 	bl	80085d2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b6:	461a      	mov	r2, r3
 80032b8:	2310      	movs	r3, #16
 80032ba:	6093      	str	r3, [r2, #8]
 80032bc:	e03d      	b.n	800333a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3326      	adds	r3, #38	@ 0x26
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d00a      	beq.n	80032ea <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	3326      	adds	r3, #38	@ 0x26
 80032e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d127      	bne.n	800333a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	0151      	lsls	r1, r2, #5
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	440a      	add	r2, r1
 8003300:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003304:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003308:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	334c      	adds	r3, #76	@ 0x4c
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	334c      	adds	r3, #76	@ 0x4c
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	4619      	mov	r1, r3
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f007 fcab 	bl	800ac90 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	799b      	ldrb	r3, [r3, #6]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d13b      	bne.n	80033ba <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	3338      	adds	r3, #56	@ 0x38
 8003352:	6819      	ldr	r1, [r3, #0]
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4403      	add	r3, r0
 8003362:	3328      	adds	r3, #40	@ 0x28
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	440b      	add	r3, r1
 8003368:	1e59      	subs	r1, r3, #1
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4403      	add	r3, r0
 8003378:	3328      	adds	r3, #40	@ 0x28
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8470 	beq.w	8003c6a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	333c      	adds	r3, #60	@ 0x3c
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	f083 0301 	eor.w	r3, r3, #1
 80033a2:	b2d8      	uxtb	r0, r3
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	333c      	adds	r3, #60	@ 0x3c
 80033b2:	4602      	mov	r2, r0
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	f000 bc58 	b.w	8003c6a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	333c      	adds	r3, #60	@ 0x3c
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	f083 0301 	eor.w	r3, r3, #1
 80033d2:	b2d8      	uxtb	r0, r3
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	333c      	adds	r3, #60	@ 0x3c
 80033e2:	4602      	mov	r2, r0
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	f000 bc40 	b.w	8003c6a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f004 fb43 	bl	8007a7e <USB_ReadChInterrupts>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d131      	bne.n	8003466 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800340e:	461a      	mov	r2, r3
 8003410:	2320      	movs	r3, #32
 8003412:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	331a      	adds	r3, #26
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	f040 841f 	bne.w	8003c6a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	331b      	adds	r3, #27
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	334d      	adds	r3, #77	@ 0x4d
 8003450:	2203      	movs	r2, #3
 8003452:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f005 f8b8 	bl	80085d2 <USB_HC_Halt>
 8003462:	f000 bc02 	b.w	8003c6a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	4611      	mov	r1, r2
 800346e:	4618      	mov	r0, r3
 8003470:	f004 fb05 	bl	8007a7e <USB_ReadChInterrupts>
 8003474:	4603      	mov	r3, r0
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b02      	cmp	r3, #2
 800347c:	f040 8305 	bne.w	8003a8a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800348c:	461a      	mov	r2, r3
 800348e:	2302      	movs	r3, #2
 8003490:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	334d      	adds	r3, #77	@ 0x4d
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d114      	bne.n	80034d2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	334d      	adds	r3, #77	@ 0x4d
 80034b8:	2202      	movs	r2, #2
 80034ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	334c      	adds	r3, #76	@ 0x4c
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	e2cc      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	334d      	adds	r3, #77	@ 0x4d
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b06      	cmp	r3, #6
 80034e6:	d114      	bne.n	8003512 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	334d      	adds	r3, #77	@ 0x4d
 80034f8:	2202      	movs	r2, #2
 80034fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	334c      	adds	r3, #76	@ 0x4c
 800350c:	2205      	movs	r2, #5
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	e2ac      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	334d      	adds	r3, #77	@ 0x4d
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b07      	cmp	r3, #7
 8003526:	d00b      	beq.n	8003540 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	334d      	adds	r3, #77	@ 0x4d
 8003538:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800353a:	2b09      	cmp	r3, #9
 800353c:	f040 80a6 	bne.w	800368c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	334d      	adds	r3, #77	@ 0x4d
 8003550:	2202      	movs	r2, #2
 8003552:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	3344      	adds	r3, #68	@ 0x44
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	1c59      	adds	r1, r3, #1
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4403      	add	r3, r0
 8003574:	3344      	adds	r3, #68	@ 0x44
 8003576:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3344      	adds	r3, #68	@ 0x44
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d943      	bls.n	8003616 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3344      	adds	r3, #68	@ 0x44
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	331a      	adds	r3, #26
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d123      	bne.n	8003600 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	331b      	adds	r3, #27
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	331c      	adds	r3, #28
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	0151      	lsls	r1, r2, #5
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	440a      	add	r2, r1
 80035f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035fe:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	334c      	adds	r3, #76	@ 0x4c
 8003610:	2204      	movs	r2, #4
 8003612:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003614:	e229      	b.n	8003a6a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	334c      	adds	r3, #76	@ 0x4c
 8003626:	2202      	movs	r2, #2
 8003628:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	3326      	adds	r3, #38	@ 0x26
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3326      	adds	r3, #38	@ 0x26
 8003650:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003652:	2b02      	cmp	r3, #2
 8003654:	f040 8209 	bne.w	8003a6a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4413      	add	r3, r2
 8003660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800366e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003676:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003684:	461a      	mov	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800368a:	e1ee      	b.n	8003a6a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	334d      	adds	r3, #77	@ 0x4d
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b05      	cmp	r3, #5
 80036a0:	f040 80c8 	bne.w	8003834 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	334d      	adds	r3, #77	@ 0x4d
 80036b4:	2202      	movs	r2, #2
 80036b6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	331b      	adds	r3, #27
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	f040 81ce 	bne.w	8003a6c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80036d0:	78fa      	ldrb	r2, [r7, #3]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	3326      	adds	r3, #38	@ 0x26
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d16b      	bne.n	80037be <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	3348      	adds	r3, #72	@ 0x48
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	1c59      	adds	r1, r3, #1
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4403      	add	r3, r0
 8003706:	3348      	adds	r3, #72	@ 0x48
 8003708:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3348      	adds	r3, #72	@ 0x48
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d943      	bls.n	80037a8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	3348      	adds	r3, #72	@ 0x48
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	331b      	adds	r3, #27
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	3344      	adds	r3, #68	@ 0x44
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d809      	bhi.n	8003772 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	331c      	adds	r3, #28
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	0151      	lsls	r1, r2, #5
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	440a      	add	r2, r1
 8003788:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800378c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003790:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	334c      	adds	r3, #76	@ 0x4c
 80037a2:	2204      	movs	r2, #4
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e014      	b.n	80037d2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	334c      	adds	r3, #76	@ 0x4c
 80037b8:	2202      	movs	r2, #2
 80037ba:	701a      	strb	r2, [r3, #0]
 80037bc:	e009      	b.n	80037d2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	334c      	adds	r3, #76	@ 0x4c
 80037ce:	2202      	movs	r2, #2
 80037d0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	3326      	adds	r3, #38	@ 0x26
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00b      	beq.n	8003800 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	3326      	adds	r3, #38	@ 0x26
 80037f8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	f040 8136 	bne.w	8003a6c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003816:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800381e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382c:	461a      	mov	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e11b      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	334d      	adds	r3, #77	@ 0x4d
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b03      	cmp	r3, #3
 8003848:	f040 8081 	bne.w	800394e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	334d      	adds	r3, #77	@ 0x4d
 800385c:	2202      	movs	r2, #2
 800385e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	331b      	adds	r3, #27
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	f040 80fa 	bne.w	8003a6c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	334c      	adds	r3, #76	@ 0x4c
 8003888:	2202      	movs	r2, #2
 800388a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	0151      	lsls	r1, r2, #5
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	440a      	add	r2, r1
 80038a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038aa:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	0151      	lsls	r1, r2, #5
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	440a      	add	r2, r1
 80038c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038ca:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	0151      	lsls	r1, r2, #5
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	440a      	add	r2, r1
 80038e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038e6:	f023 0320 	bic.w	r3, r3, #32
 80038ea:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038ec:	78fa      	ldrb	r2, [r7, #3]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3326      	adds	r3, #38	@ 0x26
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	3326      	adds	r3, #38	@ 0x26
 8003912:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003914:	2b02      	cmp	r3, #2
 8003916:	f040 80a9 	bne.w	8003a6c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4413      	add	r3, r2
 8003922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003930:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003938:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4413      	add	r3, r2
 8003942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	e08e      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	334d      	adds	r3, #77	@ 0x4d
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d143      	bne.n	80039ec <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	334d      	adds	r3, #77	@ 0x4d
 8003974:	2202      	movs	r2, #2
 8003976:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	334c      	adds	r3, #76	@ 0x4c
 8003988:	2202      	movs	r2, #2
 800398a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	3326      	adds	r3, #38	@ 0x26
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	3326      	adds	r3, #38	@ 0x26
 80039b2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d159      	bne.n	8003a6c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039ce:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039d6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039e4:	461a      	mov	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e03f      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	334d      	adds	r3, #77	@ 0x4d
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d126      	bne.n	8003a50 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	334d      	adds	r3, #77	@ 0x4d
 8003a12:	2202      	movs	r2, #2
 8003a14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	3344      	adds	r3, #68	@ 0x44
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	1c59      	adds	r1, r3, #1
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4403      	add	r3, r0
 8003a36:	3344      	adds	r3, #68	@ 0x44
 8003a38:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a3a:	78fa      	ldrb	r2, [r7, #3]
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	334c      	adds	r3, #76	@ 0x4c
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	e00d      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	334d      	adds	r3, #77	@ 0x4d
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	f000 8100 	beq.w	8003c68 <HCD_HC_IN_IRQHandler+0xcca>
 8003a68:	e000      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a6a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	334c      	adds	r3, #76	@ 0x4c
 8003a7c:	781a      	ldrb	r2, [r3, #0]
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	4619      	mov	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f007 f904 	bl	800ac90 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a88:	e0ef      	b.n	8003c6a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 fff3 	bl	8007a7e <USB_ReadChInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9e:	2b40      	cmp	r3, #64	@ 0x40
 8003aa0:	d12f      	bne.n	8003b02 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2340      	movs	r3, #64	@ 0x40
 8003ab2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	334d      	adds	r3, #77	@ 0x4d
 8003ac4:	2205      	movs	r2, #5
 8003ac6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	331a      	adds	r3, #26
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3344      	adds	r3, #68	@ 0x44
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f004 fd69 	bl	80085d2 <USB_HC_Halt>
 8003b00:	e0b3      	b.n	8003c6a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	78fa      	ldrb	r2, [r7, #3]
 8003b08:	4611      	mov	r1, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f003 ffb7 	bl	8007a7e <USB_ReadChInterrupts>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	f040 80a7 	bne.w	8003c6a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	3326      	adds	r3, #38	@ 0x26
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d11b      	bne.n	8003b6a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	3344      	adds	r3, #68	@ 0x44
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	334d      	adds	r3, #77	@ 0x4d
 8003b56:	2204      	movs	r2, #4
 8003b58:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f004 fd35 	bl	80085d2 <USB_HC_Halt>
 8003b68:	e03f      	b.n	8003bea <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	3326      	adds	r3, #38	@ 0x26
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	3326      	adds	r3, #38	@ 0x26
 8003b90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d129      	bne.n	8003bea <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3344      	adds	r3, #68	@ 0x44
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	799b      	ldrb	r3, [r3, #6]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HCD_HC_IN_IRQHandler+0xc2a>
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	331b      	adds	r3, #27
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d110      	bne.n	8003bea <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	334d      	adds	r3, #77	@ 0x4d
 8003bd8:	2204      	movs	r2, #4
 8003bda:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f004 fcf4 	bl	80085d2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	331b      	adds	r3, #27
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d129      	bne.n	8003c54 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	331b      	adds	r3, #27
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	0151      	lsls	r1, r2, #5
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	440a      	add	r2, r1
 8003c2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c32:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c4e:	f043 0320 	orr.w	r3, r3, #32
 8003c52:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c60:	461a      	mov	r2, r3
 8003c62:	2310      	movs	r3, #16
 8003c64:	6093      	str	r3, [r2, #8]
 8003c66:	e000      	b.n	8003c6a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003c68:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f003 fef5 	bl	8007a7e <USB_ReadChInterrupts>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d11b      	bne.n	8003cd6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003caa:	461a      	mov	r2, r3
 8003cac:	2304      	movs	r3, #4
 8003cae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	334d      	adds	r3, #77	@ 0x4d
 8003cc0:	2207      	movs	r2, #7
 8003cc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	78fa      	ldrb	r2, [r7, #3]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f004 fc80 	bl	80085d2 <USB_HC_Halt>
 8003cd2:	f000 bc89 	b.w	80045e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	4611      	mov	r1, r2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f003 fecd 	bl	8007a7e <USB_ReadChInterrupts>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	f040 8082 	bne.w	8003df4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2320      	movs	r3, #32
 8003d00:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	3319      	adds	r3, #25
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d124      	bne.n	8003d62 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	3319      	adds	r3, #25
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	334c      	adds	r3, #76	@ 0x4c
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	334d      	adds	r3, #77	@ 0x4d
 8003d50:	2203      	movs	r2, #3
 8003d52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f004 fc38 	bl	80085d2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	331a      	adds	r3, #26
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	f040 8437 	bne.w	80045e8 <HCD_HC_OUT_IRQHandler+0x978>
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	331b      	adds	r3, #27
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f040 842b 	bne.w	80045e8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3326      	adds	r3, #38	@ 0x26
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d009      	beq.n	8003dbc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	331b      	adds	r3, #27
 8003db8:	2201      	movs	r2, #1
 8003dba:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003dbc:	78fa      	ldrb	r2, [r7, #3]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	334d      	adds	r3, #77	@ 0x4d
 8003dcc:	2203      	movs	r2, #3
 8003dce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f004 fbfa 	bl	80085d2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	3344      	adds	r3, #68	@ 0x44
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e3f9      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f003 fe3e 	bl	8007a7e <USB_ReadChInterrupts>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e0c:	d111      	bne.n	8003e32 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e20:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	78fa      	ldrb	r2, [r7, #3]
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f004 fbd1 	bl	80085d2 <USB_HC_Halt>
 8003e30:	e3da      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f003 fe1f 	bl	8007a7e <USB_ReadChInterrupts>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d168      	bne.n	8003f1c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	3344      	adds	r3, #68	@ 0x44
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	4611      	mov	r1, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f003 fe09 	bl	8007a7e <USB_ReadChInterrupts>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e72:	2b40      	cmp	r3, #64	@ 0x40
 8003e74:	d112      	bne.n	8003e9c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	3319      	adds	r3, #25
 8003e86:	2201      	movs	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e96:	461a      	mov	r2, r3
 8003e98:	2340      	movs	r3, #64	@ 0x40
 8003e9a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	331b      	adds	r3, #27
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d019      	beq.n	8003ee6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	331b      	adds	r3, #27
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	78fa      	ldrb	r2, [r7, #3]
 8003ed6:	0151      	lsls	r1, r2, #5
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	440a      	add	r2, r1
 8003edc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	334d      	adds	r3, #77	@ 0x4d
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f004 fb5c 	bl	80085d2 <USB_HC_Halt>
 8003f1a:	e365      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f003 fdaa 	bl	8007a7e <USB_ReadChInterrupts>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f30:	2b40      	cmp	r3, #64	@ 0x40
 8003f32:	d139      	bne.n	8003fa8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	334d      	adds	r3, #77	@ 0x4d
 8003f44:	2205      	movs	r2, #5
 8003f46:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	331a      	adds	r3, #26
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	3319      	adds	r3, #25
 8003f6e:	2201      	movs	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	3344      	adds	r3, #68	@ 0x44
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f004 fb1f 	bl	80085d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2340      	movs	r3, #64	@ 0x40
 8003fa4:	6093      	str	r3, [r2, #8]
 8003fa6:	e31f      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f003 fd64 	bl	8007a7e <USB_ReadChInterrupts>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d11a      	bne.n	8003ff6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2308      	movs	r3, #8
 8003fd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	334d      	adds	r3, #77	@ 0x4d
 8003fe2:	2206      	movs	r2, #6
 8003fe4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	4611      	mov	r1, r2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f004 faef 	bl	80085d2 <USB_HC_Halt>
 8003ff4:	e2f8      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f003 fd3d 	bl	8007a7e <USB_ReadChInterrupts>
 8004004:	4603      	mov	r3, r0
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	2b10      	cmp	r3, #16
 800400c:	d144      	bne.n	8004098 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	3344      	adds	r3, #68	@ 0x44
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	334d      	adds	r3, #77	@ 0x4d
 8004032:	2204      	movs	r2, #4
 8004034:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	3319      	adds	r3, #25
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d114      	bne.n	8004076 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	3318      	adds	r3, #24
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	3319      	adds	r3, #25
 8004072:	2201      	movs	r2, #1
 8004074:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	4611      	mov	r1, r2
 800407e:	4618      	mov	r0, r3
 8004080:	f004 faa7 	bl	80085d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4413      	add	r3, r2
 800408c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004090:	461a      	mov	r2, r3
 8004092:	2310      	movs	r3, #16
 8004094:	6093      	str	r3, [r2, #8]
 8004096:	e2a7      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	4611      	mov	r1, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f003 fcec 	bl	8007a7e <USB_ReadChInterrupts>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ac:	2b80      	cmp	r3, #128	@ 0x80
 80040ae:	f040 8083 	bne.w	80041b8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	799b      	ldrb	r3, [r3, #6]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d111      	bne.n	80040de <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	334d      	adds	r3, #77	@ 0x4d
 80040ca:	2207      	movs	r2, #7
 80040cc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	78fa      	ldrb	r2, [r7, #3]
 80040d4:	4611      	mov	r1, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f004 fa7b 	bl	80085d2 <USB_HC_Halt>
 80040dc:	e062      	b.n	80041a4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	3344      	adds	r3, #68	@ 0x44
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	1c59      	adds	r1, r3, #1
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4403      	add	r3, r0
 80040fe:	3344      	adds	r3, #68	@ 0x44
 8004100:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	3344      	adds	r3, #68	@ 0x44
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d922      	bls.n	800415e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	3344      	adds	r3, #68	@ 0x44
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	334c      	adds	r3, #76	@ 0x4c
 800413c:	2204      	movs	r2, #4
 800413e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	334c      	adds	r3, #76	@ 0x4c
 8004150:	781a      	ldrb	r2, [r3, #0]
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f006 fd9a 	bl	800ac90 <HAL_HCD_HC_NotifyURBChange_Callback>
 800415c:	e022      	b.n	80041a4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	334c      	adds	r3, #76	@ 0x4c
 800416e:	2202      	movs	r2, #2
 8004170:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4413      	add	r3, r2
 800417a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004188:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004190:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041b0:	461a      	mov	r2, r3
 80041b2:	2380      	movs	r3, #128	@ 0x80
 80041b4:	6093      	str	r3, [r2, #8]
 80041b6:	e217      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	4611      	mov	r1, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f003 fc5c 	bl	8007a7e <USB_ReadChInterrupts>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041d0:	d11b      	bne.n	800420a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	334d      	adds	r3, #77	@ 0x4d
 80041e2:	2209      	movs	r2, #9
 80041e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f004 f9ef 	bl	80085d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004200:	461a      	mov	r2, r3
 8004202:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004206:	6093      	str	r3, [r2, #8]
 8004208:	e1ee      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f003 fc33 	bl	8007a7e <USB_ReadChInterrupts>
 8004218:	4603      	mov	r3, r0
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b02      	cmp	r3, #2
 8004220:	f040 81df 	bne.w	80045e2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004230:	461a      	mov	r2, r3
 8004232:	2302      	movs	r3, #2
 8004234:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	334d      	adds	r3, #77	@ 0x4d
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	f040 8093 	bne.w	8004374 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	334d      	adds	r3, #77	@ 0x4d
 800425e:	2202      	movs	r2, #2
 8004260:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	334c      	adds	r3, #76	@ 0x4c
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	3326      	adds	r3, #38	@ 0x26
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d00b      	beq.n	80042a4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	3326      	adds	r3, #38	@ 0x26
 800429c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800429e:	2b03      	cmp	r3, #3
 80042a0:	f040 8190 	bne.w	80045c4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	799b      	ldrb	r3, [r3, #6]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d115      	bne.n	80042d8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	333d      	adds	r3, #61	@ 0x3d
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	f083 0301 	eor.w	r3, r3, #1
 80042c4:	b2d8      	uxtb	r0, r3
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	333d      	adds	r3, #61	@ 0x3d
 80042d4:	4602      	mov	r2, r0
 80042d6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	799b      	ldrb	r3, [r3, #6]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	f040 8171 	bne.w	80045c4 <HCD_HC_OUT_IRQHandler+0x954>
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	3334      	adds	r3, #52	@ 0x34
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8165 	beq.w	80045c4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	3334      	adds	r3, #52	@ 0x34
 800430a:	6819      	ldr	r1, [r3, #0]
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4403      	add	r3, r0
 800431a:	3328      	adds	r3, #40	@ 0x28
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	440b      	add	r3, r1
 8004320:	1e59      	subs	r1, r3, #1
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4403      	add	r3, r0
 8004330:	3328      	adds	r3, #40	@ 0x28
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	fbb1 f3f3 	udiv	r3, r1, r3
 8004338:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 813f 	beq.w	80045c4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	333d      	adds	r3, #61	@ 0x3d
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	f083 0301 	eor.w	r3, r3, #1
 800435e:	b2d8      	uxtb	r0, r3
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	333d      	adds	r3, #61	@ 0x3d
 800436e:	4602      	mov	r2, r0
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	e127      	b.n	80045c4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	334d      	adds	r3, #77	@ 0x4d
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d120      	bne.n	80043cc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	334d      	adds	r3, #77	@ 0x4d
 800439a:	2202      	movs	r2, #2
 800439c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	331b      	adds	r3, #27
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	f040 8107 	bne.w	80045c4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	334c      	adds	r3, #76	@ 0x4c
 80043c6:	2202      	movs	r2, #2
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	e0fb      	b.n	80045c4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	334d      	adds	r3, #77	@ 0x4d
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d13a      	bne.n	8004458 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043e2:	78fa      	ldrb	r2, [r7, #3]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	334d      	adds	r3, #77	@ 0x4d
 80043f2:	2202      	movs	r2, #2
 80043f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	334c      	adds	r3, #76	@ 0x4c
 8004406:	2202      	movs	r2, #2
 8004408:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	331b      	adds	r3, #27
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	f040 80d1 	bne.w	80045c4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004422:	78fa      	ldrb	r2, [r7, #3]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	331b      	adds	r3, #27
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4413      	add	r3, r2
 800443e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	440a      	add	r2, r1
 800444c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004454:	6053      	str	r3, [r2, #4]
 8004456:	e0b5      	b.n	80045c4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	334d      	adds	r3, #77	@ 0x4d
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b05      	cmp	r3, #5
 800446c:	d114      	bne.n	8004498 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800446e:	78fa      	ldrb	r2, [r7, #3]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	334d      	adds	r3, #77	@ 0x4d
 800447e:	2202      	movs	r2, #2
 8004480:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004482:	78fa      	ldrb	r2, [r7, #3]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	334c      	adds	r3, #76	@ 0x4c
 8004492:	2202      	movs	r2, #2
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	e095      	b.n	80045c4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	334d      	adds	r3, #77	@ 0x4d
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b06      	cmp	r3, #6
 80044ac:	d114      	bne.n	80044d8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044ae:	78fa      	ldrb	r2, [r7, #3]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	334d      	adds	r3, #77	@ 0x4d
 80044be:	2202      	movs	r2, #2
 80044c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80044c2:	78fa      	ldrb	r2, [r7, #3]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	334c      	adds	r3, #76	@ 0x4c
 80044d2:	2205      	movs	r2, #5
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	e075      	b.n	80045c4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	334d      	adds	r3, #77	@ 0x4d
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b07      	cmp	r3, #7
 80044ec:	d00a      	beq.n	8004504 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	334d      	adds	r3, #77	@ 0x4d
 80044fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004500:	2b09      	cmp	r3, #9
 8004502:	d170      	bne.n	80045e6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	334d      	adds	r3, #77	@ 0x4d
 8004514:	2202      	movs	r2, #2
 8004516:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	3344      	adds	r3, #68	@ 0x44
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	1c59      	adds	r1, r3, #1
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4403      	add	r3, r0
 8004538:	3344      	adds	r3, #68	@ 0x44
 800453a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	3344      	adds	r3, #68	@ 0x44
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d914      	bls.n	800457c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	3344      	adds	r3, #68	@ 0x44
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	334c      	adds	r3, #76	@ 0x4c
 8004576:	2204      	movs	r2, #4
 8004578:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800457a:	e022      	b.n	80045c2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	334c      	adds	r3, #76	@ 0x4c
 800458c:	2202      	movs	r2, #2
 800458e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80045a6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045ae:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045bc:	461a      	mov	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045c2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	334c      	adds	r3, #76	@ 0x4c
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	78fb      	ldrb	r3, [r7, #3]
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f006 fb58 	bl	800ac90 <HAL_HCD_HC_NotifyURBChange_Callback>
 80045e0:	e002      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80045e2:	bf00      	nop
 80045e4:	e000      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80045e6:	bf00      	nop
  }
}
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b08a      	sub	sp, #40	@ 0x28
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	0c5b      	lsrs	r3, r3, #17
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004622:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d004      	beq.n	8004634 <HCD_RXQLVL_IRQHandler+0x46>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b05      	cmp	r3, #5
 800462e:	f000 80b6 	beq.w	800479e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004632:	e0b7      	b.n	80047a4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80b3 	beq.w	80047a2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4613      	mov	r3, r2
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	332c      	adds	r3, #44	@ 0x2c
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80a7 	beq.w	80047a2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4613      	mov	r3, r2
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	3338      	adds	r3, #56	@ 0x38
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	18d1      	adds	r1, r2, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4613      	mov	r3, r2
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4403      	add	r3, r0
 8004678:	3334      	adds	r3, #52	@ 0x34
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4299      	cmp	r1, r3
 800467e:	f200 8083 	bhi.w	8004788 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	332c      	adds	r3, #44	@ 0x2c
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	b292      	uxth	r2, r2
 800469c:	4619      	mov	r1, r3
 800469e:	f003 f983 	bl	80079a8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4613      	mov	r3, r2
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	332c      	adds	r3, #44	@ 0x2c
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	18d1      	adds	r1, r2, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4613      	mov	r3, r2
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4403      	add	r3, r0
 80046c6:	332c      	adds	r3, #44	@ 0x2c
 80046c8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4613      	mov	r3, r2
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	3338      	adds	r3, #56	@ 0x38
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	18d1      	adds	r1, r2, r3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4403      	add	r3, r0
 80046ee:	3338      	adds	r3, #56	@ 0x38
 80046f0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	0cdb      	lsrs	r3, r3, #19
 8004702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004706:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	3328      	adds	r3, #40	@ 0x28
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4293      	cmp	r3, r2
 8004720:	d13f      	bne.n	80047a2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d03c      	beq.n	80047a2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	4413      	add	r3, r2
 8004730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800473e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004746:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	4413      	add	r3, r2
 8004750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004754:	461a      	mov	r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4613      	mov	r3, r2
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	333c      	adds	r3, #60	@ 0x3c
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	f083 0301 	eor.w	r3, r3, #1
 8004770:	b2d8      	uxtb	r0, r3
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4613      	mov	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	333c      	adds	r3, #60	@ 0x3c
 8004782:	4602      	mov	r2, r0
 8004784:	701a      	strb	r2, [r3, #0]
      break;
 8004786:	e00c      	b.n	80047a2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	334c      	adds	r3, #76	@ 0x4c
 8004798:	2204      	movs	r2, #4
 800479a:	701a      	strb	r2, [r3, #0]
      break;
 800479c:	e001      	b.n	80047a2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800479e:	bf00      	nop
 80047a0:	e000      	b.n	80047a4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80047a2:	bf00      	nop
  }
}
 80047a4:	bf00      	nop
 80047a6:	3728      	adds	r7, #40	@ 0x28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80047d8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d10b      	bne.n	80047fc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d102      	bne.n	80047f4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f006 fa32 	bl	800ac58 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f043 0302 	orr.w	r3, r3, #2
 80047fa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b08      	cmp	r3, #8
 8004804:	d132      	bne.n	800486c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f043 0308 	orr.w	r3, r3, #8
 800480c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b04      	cmp	r3, #4
 8004816:	d126      	bne.n	8004866 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	7a5b      	ldrb	r3, [r3, #9]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d113      	bne.n	8004848 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004826:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800482a:	d106      	bne.n	800483a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2102      	movs	r1, #2
 8004832:	4618      	mov	r0, r3
 8004834:	f003 fa4e 	bl	8007cd4 <USB_InitFSLSPClkSel>
 8004838:	e011      	b.n	800485e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2101      	movs	r1, #1
 8004840:	4618      	mov	r0, r3
 8004842:	f003 fa47 	bl	8007cd4 <USB_InitFSLSPClkSel>
 8004846:	e00a      	b.n	800485e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	79db      	ldrb	r3, [r3, #7]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d106      	bne.n	800485e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004856:	461a      	mov	r2, r3
 8004858:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800485c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f006 fa24 	bl	800acac <HAL_HCD_PortEnabled_Callback>
 8004864:	e002      	b.n	800486c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f006 fa2e 	bl	800acc8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b20      	cmp	r3, #32
 8004874:	d103      	bne.n	800487e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f043 0320 	orr.w	r3, r3, #32
 800487c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004884:	461a      	mov	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6013      	str	r3, [r2, #0]
}
 800488a:	bf00      	nop
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e12b      	b.n	8004afe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fd f81a 	bl	80018f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2224      	movs	r2, #36	@ 0x24
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048f8:	f001 fa20 	bl	8005d3c <HAL_RCC_GetPCLK1Freq>
 80048fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4a81      	ldr	r2, [pc, #516]	@ (8004b08 <HAL_I2C_Init+0x274>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d807      	bhi.n	8004918 <HAL_I2C_Init+0x84>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a80      	ldr	r2, [pc, #512]	@ (8004b0c <HAL_I2C_Init+0x278>)
 800490c:	4293      	cmp	r3, r2
 800490e:	bf94      	ite	ls
 8004910:	2301      	movls	r3, #1
 8004912:	2300      	movhi	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	e006      	b.n	8004926 <HAL_I2C_Init+0x92>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a7d      	ldr	r2, [pc, #500]	@ (8004b10 <HAL_I2C_Init+0x27c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	bf94      	ite	ls
 8004920:	2301      	movls	r3, #1
 8004922:	2300      	movhi	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e0e7      	b.n	8004afe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a78      	ldr	r2, [pc, #480]	@ (8004b14 <HAL_I2C_Init+0x280>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	0c9b      	lsrs	r3, r3, #18
 8004938:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4a6a      	ldr	r2, [pc, #424]	@ (8004b08 <HAL_I2C_Init+0x274>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d802      	bhi.n	8004968 <HAL_I2C_Init+0xd4>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	3301      	adds	r3, #1
 8004966:	e009      	b.n	800497c <HAL_I2C_Init+0xe8>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	4a69      	ldr	r2, [pc, #420]	@ (8004b18 <HAL_I2C_Init+0x284>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	099b      	lsrs	r3, r3, #6
 800497a:	3301      	adds	r3, #1
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	430b      	orrs	r3, r1
 8004982:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800498e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	495c      	ldr	r1, [pc, #368]	@ (8004b08 <HAL_I2C_Init+0x274>)
 8004998:	428b      	cmp	r3, r1
 800499a:	d819      	bhi.n	80049d0 <HAL_I2C_Init+0x13c>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1e59      	subs	r1, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80049aa:	1c59      	adds	r1, r3, #1
 80049ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80049b0:	400b      	ands	r3, r1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_I2C_Init+0x138>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1e59      	subs	r1, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80049c4:	3301      	adds	r3, #1
 80049c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ca:	e051      	b.n	8004a70 <HAL_I2C_Init+0x1dc>
 80049cc:	2304      	movs	r3, #4
 80049ce:	e04f      	b.n	8004a70 <HAL_I2C_Init+0x1dc>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d111      	bne.n	80049fc <HAL_I2C_Init+0x168>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1e58      	subs	r0, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6859      	ldr	r1, [r3, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	440b      	add	r3, r1
 80049e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ea:	3301      	adds	r3, #1
 80049ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e012      	b.n	8004a22 <HAL_I2C_Init+0x18e>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1e58      	subs	r0, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6859      	ldr	r1, [r3, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	0099      	lsls	r1, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a12:	3301      	adds	r3, #1
 8004a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2301      	moveq	r3, #1
 8004a1e:	2300      	movne	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_I2C_Init+0x196>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e022      	b.n	8004a70 <HAL_I2C_Init+0x1dc>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10e      	bne.n	8004a50 <HAL_I2C_Init+0x1bc>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1e58      	subs	r0, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6859      	ldr	r1, [r3, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	440b      	add	r3, r1
 8004a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a44:	3301      	adds	r3, #1
 8004a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a4e:	e00f      	b.n	8004a70 <HAL_I2C_Init+0x1dc>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1e58      	subs	r0, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6859      	ldr	r1, [r3, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	0099      	lsls	r1, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	6809      	ldr	r1, [r1, #0]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6911      	ldr	r1, [r2, #16]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68d2      	ldr	r2, [r2, #12]
 8004aaa:	4311      	orrs	r1, r2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	000186a0 	.word	0x000186a0
 8004b0c:	001e847f 	.word	0x001e847f
 8004b10:	003d08ff 	.word	0x003d08ff
 8004b14:	431bde83 	.word	0x431bde83
 8004b18:	10624dd3 	.word	0x10624dd3

08004b1c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e128      	b.n	8004d80 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a90      	ldr	r2, [pc, #576]	@ (8004d88 <HAL_I2S_Init+0x26c>)
 8004b46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7fc ff1b 	bl	8001984 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2202      	movs	r2, #2
 8004b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004b64:	f023 030f 	bic.w	r3, r3, #15
 8004b68:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d060      	beq.n	8004c3c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004b82:	2310      	movs	r3, #16
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	e001      	b.n	8004b8c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004b88:	2320      	movs	r3, #32
 8004b8a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d802      	bhi.n	8004b9a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004b9a:	2001      	movs	r0, #1
 8004b9c:	f001 f9d8 	bl	8005f50 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ba0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004baa:	d125      	bne.n	8004bf8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d010      	beq.n	8004bd6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	3305      	adds	r3, #5
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	e01f      	b.n	8004c16 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	461a      	mov	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	3305      	adds	r3, #5
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	e00e      	b.n	8004c16 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	461a      	mov	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	3305      	adds	r3, #5
 8004c14:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4a5c      	ldr	r2, [pc, #368]	@ (8004d8c <HAL_I2S_Init+0x270>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	08db      	lsrs	r3, r3, #3
 8004c20:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	e003      	b.n	8004c44 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d902      	bls.n	8004c50 <HAL_I2S_Init+0x134>
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	2bff      	cmp	r3, #255	@ 0xff
 8004c4e:	d907      	bls.n	8004c60 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c54:	f043 0210 	orr.w	r2, r3, #16
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e08f      	b.n	8004d80 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	ea42 0103 	orr.w	r1, r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69fa      	ldr	r2, [r7, #28]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c7e:	f023 030f 	bic.w	r3, r3, #15
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6851      	ldr	r1, [r2, #4]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6892      	ldr	r2, [r2, #8]
 8004c8a:	4311      	orrs	r1, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68d2      	ldr	r2, [r2, #12]
 8004c90:	4311      	orrs	r1, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6992      	ldr	r2, [r2, #24]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ca2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d161      	bne.n	8004d70 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a38      	ldr	r2, [pc, #224]	@ (8004d90 <HAL_I2S_Init+0x274>)
 8004cb0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a37      	ldr	r2, [pc, #220]	@ (8004d94 <HAL_I2S_Init+0x278>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d101      	bne.n	8004cc0 <HAL_I2S_Init+0x1a4>
 8004cbc:	4b36      	ldr	r3, [pc, #216]	@ (8004d98 <HAL_I2S_Init+0x27c>)
 8004cbe:	e001      	b.n	8004cc4 <HAL_I2S_Init+0x1a8>
 8004cc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	4932      	ldr	r1, [pc, #200]	@ (8004d94 <HAL_I2S_Init+0x278>)
 8004ccc:	428a      	cmp	r2, r1
 8004cce:	d101      	bne.n	8004cd4 <HAL_I2S_Init+0x1b8>
 8004cd0:	4a31      	ldr	r2, [pc, #196]	@ (8004d98 <HAL_I2S_Init+0x27c>)
 8004cd2:	e001      	b.n	8004cd8 <HAL_I2S_Init+0x1bc>
 8004cd4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004cd8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004cdc:	f023 030f 	bic.w	r3, r3, #15
 8004ce0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8004d94 <HAL_I2S_Init+0x278>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d101      	bne.n	8004cf0 <HAL_I2S_Init+0x1d4>
 8004cec:	4b2a      	ldr	r3, [pc, #168]	@ (8004d98 <HAL_I2S_Init+0x27c>)
 8004cee:	e001      	b.n	8004cf4 <HAL_I2S_Init+0x1d8>
 8004cf0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a25      	ldr	r2, [pc, #148]	@ (8004d94 <HAL_I2S_Init+0x278>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d101      	bne.n	8004d06 <HAL_I2S_Init+0x1ea>
 8004d02:	4b25      	ldr	r3, [pc, #148]	@ (8004d98 <HAL_I2S_Init+0x27c>)
 8004d04:	e001      	b.n	8004d0a <HAL_I2S_Init+0x1ee>
 8004d06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d16:	d003      	beq.n	8004d20 <HAL_I2S_Init+0x204>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d103      	bne.n	8004d28 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004d20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	e001      	b.n	8004d2c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d36:	4313      	orrs	r3, r2
 8004d38:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d40:	4313      	orrs	r3, r2
 8004d42:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	897b      	ldrh	r3, [r7, #10]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004d58:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004d94 <HAL_I2S_Init+0x278>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <HAL_I2S_Init+0x24c>
 8004d64:	4b0c      	ldr	r3, [pc, #48]	@ (8004d98 <HAL_I2S_Init+0x27c>)
 8004d66:	e001      	b.n	8004d6c <HAL_I2S_Init+0x250>
 8004d68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d6c:	897a      	ldrh	r2, [r7, #10]
 8004d6e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	08004e93 	.word	0x08004e93
 8004d8c:	cccccccd 	.word	0xcccccccd
 8004d90:	08004fa9 	.word	0x08004fa9
 8004d94:	40003800 	.word	0x40003800
 8004d98:	40003400 	.word	0x40003400

08004d9c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	881a      	ldrh	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	1c9a      	adds	r2, r3, #2
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10e      	bne.n	8004e2c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e1c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff ffb8 	bl	8004d9c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e46:	b292      	uxth	r2, r2
 8004e48:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	1c9a      	adds	r2, r3, #2
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10e      	bne.n	8004e8a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e7a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff ff93 	bl	8004db0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b086      	sub	sp, #24
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d13a      	bne.n	8004f24 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d109      	bne.n	8004ecc <I2S_IRQHandler+0x3a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec2:	2b40      	cmp	r3, #64	@ 0x40
 8004ec4:	d102      	bne.n	8004ecc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff ffb4 	bl	8004e34 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed2:	2b40      	cmp	r3, #64	@ 0x40
 8004ed4:	d126      	bne.n	8004f24 <I2S_IRQHandler+0x92>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d11f      	bne.n	8004f24 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ef2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f16:	f043 0202 	orr.w	r2, r3, #2
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff ff50 	bl	8004dc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d136      	bne.n	8004f9e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d109      	bne.n	8004f4e <I2S_IRQHandler+0xbc>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f44:	2b80      	cmp	r3, #128	@ 0x80
 8004f46:	d102      	bne.n	8004f4e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff ff45 	bl	8004dd8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d122      	bne.n	8004f9e <I2S_IRQHandler+0x10c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d11b      	bne.n	8004f9e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f74:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f90:	f043 0204 	orr.w	r2, r3, #4
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff ff13 	bl	8004dc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f9e:	bf00      	nop
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a92      	ldr	r2, [pc, #584]	@ (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004fc2:	4b92      	ldr	r3, [pc, #584]	@ (800520c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fc4:	e001      	b.n	8004fca <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004fc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a8b      	ldr	r2, [pc, #556]	@ (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d101      	bne.n	8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004fe0:	4b8a      	ldr	r3, [pc, #552]	@ (800520c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fe2:	e001      	b.n	8004fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004fe4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ff4:	d004      	beq.n	8005000 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f040 8099 	bne.w	8005132 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b02      	cmp	r3, #2
 8005008:	d107      	bne.n	800501a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f925 	bl	8005264 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d107      	bne.n	8005034 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f9c8 	bl	80053c4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503a:	2b40      	cmp	r3, #64	@ 0x40
 800503c:	d13a      	bne.n	80050b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d035      	beq.n	80050b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a6e      	ldr	r2, [pc, #440]	@ (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d101      	bne.n	8005056 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005052:	4b6e      	ldr	r3, [pc, #440]	@ (800520c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005054:	e001      	b.n	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005056:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4969      	ldr	r1, [pc, #420]	@ (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005062:	428b      	cmp	r3, r1
 8005064:	d101      	bne.n	800506a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005066:	4b69      	ldr	r3, [pc, #420]	@ (800520c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005068:	e001      	b.n	800506e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800506a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800506e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005072:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005082:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	f043 0202 	orr.w	r2, r3, #2
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff fe88 	bl	8004dc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	f040 80c3 	bne.w	8005246 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80bd 	beq.w	8005246 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80050da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a49      	ldr	r2, [pc, #292]	@ (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d101      	bne.n	80050ea <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80050e6:	4b49      	ldr	r3, [pc, #292]	@ (800520c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050e8:	e001      	b.n	80050ee <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80050ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4944      	ldr	r1, [pc, #272]	@ (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050f6:	428b      	cmp	r3, r1
 80050f8:	d101      	bne.n	80050fe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80050fa:	4b44      	ldr	r3, [pc, #272]	@ (800520c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050fc:	e001      	b.n	8005102 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80050fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005102:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005106:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005108:	2300      	movs	r3, #0
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005122:	f043 0204 	orr.w	r2, r3, #4
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff fe4a 	bl	8004dc4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005130:	e089      	b.n	8005246 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b02      	cmp	r3, #2
 800513a:	d107      	bne.n	800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f8be 	bl	80052c8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b01      	cmp	r3, #1
 8005154:	d107      	bne.n	8005166 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8fd 	bl	8005360 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516c:	2b40      	cmp	r3, #64	@ 0x40
 800516e:	d12f      	bne.n	80051d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b00      	cmp	r3, #0
 8005178:	d02a      	beq.n	80051d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005188:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1e      	ldr	r2, [pc, #120]	@ (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d101      	bne.n	8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005194:	4b1d      	ldr	r3, [pc, #116]	@ (800520c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005196:	e001      	b.n	800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005198:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4919      	ldr	r1, [pc, #100]	@ (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051a4:	428b      	cmp	r3, r1
 80051a6:	d101      	bne.n	80051ac <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80051a8:	4b18      	ldr	r3, [pc, #96]	@ (800520c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051aa:	e001      	b.n	80051b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80051ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051b0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c2:	f043 0202 	orr.w	r2, r3, #2
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff fdfa 	bl	8004dc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d136      	bne.n	8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d031      	beq.n	8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a07      	ldr	r2, [pc, #28]	@ (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d101      	bne.n	80051f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80051ee:	4b07      	ldr	r3, [pc, #28]	@ (800520c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051f0:	e001      	b.n	80051f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80051f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4902      	ldr	r1, [pc, #8]	@ (8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051fe:	428b      	cmp	r3, r1
 8005200:	d106      	bne.n	8005210 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005202:	4b02      	ldr	r3, [pc, #8]	@ (800520c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005204:	e006      	b.n	8005214 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005206:	bf00      	nop
 8005208:	40003800 	.word	0x40003800
 800520c:	40003400 	.word	0x40003400
 8005210:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005214:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005218:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005228:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005236:	f043 0204 	orr.w	r2, r3, #4
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff fdc0 	bl	8004dc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005244:	e000      	b.n	8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005246:	bf00      	nop
}
 8005248:	bf00      	nop
 800524a:	3720      	adds	r7, #32
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	1c99      	adds	r1, r3, #2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6251      	str	r1, [r2, #36]	@ 0x24
 8005276:	881a      	ldrh	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d113      	bne.n	80052be <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d106      	bne.n	80052be <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ffc9 	bl	8005250 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052be:	bf00      	nop
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d4:	1c99      	adds	r1, r3, #2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6251      	str	r1, [r2, #36]	@ 0x24
 80052da:	8819      	ldrh	r1, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005358 <I2SEx_TxISR_I2SExt+0x90>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d101      	bne.n	80052ea <I2SEx_TxISR_I2SExt+0x22>
 80052e6:	4b1d      	ldr	r3, [pc, #116]	@ (800535c <I2SEx_TxISR_I2SExt+0x94>)
 80052e8:	e001      	b.n	80052ee <I2SEx_TxISR_I2SExt+0x26>
 80052ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052ee:	460a      	mov	r2, r1
 80052f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d121      	bne.n	800534e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a12      	ldr	r2, [pc, #72]	@ (8005358 <I2SEx_TxISR_I2SExt+0x90>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d101      	bne.n	8005318 <I2SEx_TxISR_I2SExt+0x50>
 8005314:	4b11      	ldr	r3, [pc, #68]	@ (800535c <I2SEx_TxISR_I2SExt+0x94>)
 8005316:	e001      	b.n	800531c <I2SEx_TxISR_I2SExt+0x54>
 8005318:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	490d      	ldr	r1, [pc, #52]	@ (8005358 <I2SEx_TxISR_I2SExt+0x90>)
 8005324:	428b      	cmp	r3, r1
 8005326:	d101      	bne.n	800532c <I2SEx_TxISR_I2SExt+0x64>
 8005328:	4b0c      	ldr	r3, [pc, #48]	@ (800535c <I2SEx_TxISR_I2SExt+0x94>)
 800532a:	e001      	b.n	8005330 <I2SEx_TxISR_I2SExt+0x68>
 800532c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005330:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005334:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d106      	bne.n	800534e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff ff81 	bl	8005250 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800534e:	bf00      	nop
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	40003800 	.word	0x40003800
 800535c:	40003400 	.word	0x40003400

08005360 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68d8      	ldr	r0, [r3, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	1c99      	adds	r1, r3, #2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005378:	b282      	uxth	r2, r0
 800537a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d113      	bne.n	80053bc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053a2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff ff4a 	bl	8005250 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a20      	ldr	r2, [pc, #128]	@ (8005454 <I2SEx_RxISR_I2SExt+0x90>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d101      	bne.n	80053da <I2SEx_RxISR_I2SExt+0x16>
 80053d6:	4b20      	ldr	r3, [pc, #128]	@ (8005458 <I2SEx_RxISR_I2SExt+0x94>)
 80053d8:	e001      	b.n	80053de <I2SEx_RxISR_I2SExt+0x1a>
 80053da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053de:	68d8      	ldr	r0, [r3, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	1c99      	adds	r1, r3, #2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80053ea:	b282      	uxth	r2, r0
 80053ec:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d121      	bne.n	800544a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a12      	ldr	r2, [pc, #72]	@ (8005454 <I2SEx_RxISR_I2SExt+0x90>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d101      	bne.n	8005414 <I2SEx_RxISR_I2SExt+0x50>
 8005410:	4b11      	ldr	r3, [pc, #68]	@ (8005458 <I2SEx_RxISR_I2SExt+0x94>)
 8005412:	e001      	b.n	8005418 <I2SEx_RxISR_I2SExt+0x54>
 8005414:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	490d      	ldr	r1, [pc, #52]	@ (8005454 <I2SEx_RxISR_I2SExt+0x90>)
 8005420:	428b      	cmp	r3, r1
 8005422:	d101      	bne.n	8005428 <I2SEx_RxISR_I2SExt+0x64>
 8005424:	4b0c      	ldr	r3, [pc, #48]	@ (8005458 <I2SEx_RxISR_I2SExt+0x94>)
 8005426:	e001      	b.n	800542c <I2SEx_RxISR_I2SExt+0x68>
 8005428:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800542c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005430:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d106      	bne.n	800544a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff ff03 	bl	8005250 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40003800 	.word	0x40003800
 8005458:	40003400 	.word	0x40003400

0800545c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e267      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d075      	beq.n	8005566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800547a:	4b88      	ldr	r3, [pc, #544]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b04      	cmp	r3, #4
 8005484:	d00c      	beq.n	80054a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005486:	4b85      	ldr	r3, [pc, #532]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800548e:	2b08      	cmp	r3, #8
 8005490:	d112      	bne.n	80054b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005492:	4b82      	ldr	r3, [pc, #520]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800549a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800549e:	d10b      	bne.n	80054b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a0:	4b7e      	ldr	r3, [pc, #504]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d05b      	beq.n	8005564 <HAL_RCC_OscConfig+0x108>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d157      	bne.n	8005564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e242      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054c0:	d106      	bne.n	80054d0 <HAL_RCC_OscConfig+0x74>
 80054c2:	4b76      	ldr	r3, [pc, #472]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a75      	ldr	r2, [pc, #468]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 80054c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e01d      	b.n	800550c <HAL_RCC_OscConfig+0xb0>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054d8:	d10c      	bne.n	80054f4 <HAL_RCC_OscConfig+0x98>
 80054da:	4b70      	ldr	r3, [pc, #448]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a6f      	ldr	r2, [pc, #444]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 80054e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	4b6d      	ldr	r3, [pc, #436]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a6c      	ldr	r2, [pc, #432]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 80054ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	e00b      	b.n	800550c <HAL_RCC_OscConfig+0xb0>
 80054f4:	4b69      	ldr	r3, [pc, #420]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a68      	ldr	r2, [pc, #416]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 80054fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	4b66      	ldr	r3, [pc, #408]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a65      	ldr	r2, [pc, #404]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 8005506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800550a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d013      	beq.n	800553c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005514:	f7fc fd92 	bl	800203c <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800551c:	f7fc fd8e 	bl	800203c <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b64      	cmp	r3, #100	@ 0x64
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e207      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552e:	4b5b      	ldr	r3, [pc, #364]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <HAL_RCC_OscConfig+0xc0>
 800553a:	e014      	b.n	8005566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553c:	f7fc fd7e 	bl	800203c <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005544:	f7fc fd7a 	bl	800203c <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b64      	cmp	r3, #100	@ 0x64
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e1f3      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005556:	4b51      	ldr	r3, [pc, #324]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0xe8>
 8005562:	e000      	b.n	8005566 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d063      	beq.n	800563a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005572:	4b4a      	ldr	r3, [pc, #296]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 030c 	and.w	r3, r3, #12
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800557e:	4b47      	ldr	r3, [pc, #284]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005586:	2b08      	cmp	r3, #8
 8005588:	d11c      	bne.n	80055c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800558a:	4b44      	ldr	r3, [pc, #272]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d116      	bne.n	80055c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005596:	4b41      	ldr	r3, [pc, #260]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <HAL_RCC_OscConfig+0x152>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d001      	beq.n	80055ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e1c7      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ae:	4b3b      	ldr	r3, [pc, #236]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4937      	ldr	r1, [pc, #220]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c2:	e03a      	b.n	800563a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d020      	beq.n	800560e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055cc:	4b34      	ldr	r3, [pc, #208]	@ (80056a0 <HAL_RCC_OscConfig+0x244>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d2:	f7fc fd33 	bl	800203c <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055da:	f7fc fd2f 	bl	800203c <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e1a8      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ec:	4b2b      	ldr	r3, [pc, #172]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0f0      	beq.n	80055da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f8:	4b28      	ldr	r3, [pc, #160]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	4925      	ldr	r1, [pc, #148]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 8005608:	4313      	orrs	r3, r2
 800560a:	600b      	str	r3, [r1, #0]
 800560c:	e015      	b.n	800563a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800560e:	4b24      	ldr	r3, [pc, #144]	@ (80056a0 <HAL_RCC_OscConfig+0x244>)
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005614:	f7fc fd12 	bl	800203c <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800561c:	f7fc fd0e 	bl	800203c <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e187      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800562e:	4b1b      	ldr	r3, [pc, #108]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d036      	beq.n	80056b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d016      	beq.n	800567c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800564e:	4b15      	ldr	r3, [pc, #84]	@ (80056a4 <HAL_RCC_OscConfig+0x248>)
 8005650:	2201      	movs	r2, #1
 8005652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005654:	f7fc fcf2 	bl	800203c <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800565c:	f7fc fcee 	bl	800203c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e167      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800566e:	4b0b      	ldr	r3, [pc, #44]	@ (800569c <HAL_RCC_OscConfig+0x240>)
 8005670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x200>
 800567a:	e01b      	b.n	80056b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800567c:	4b09      	ldr	r3, [pc, #36]	@ (80056a4 <HAL_RCC_OscConfig+0x248>)
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005682:	f7fc fcdb 	bl	800203c <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005688:	e00e      	b.n	80056a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800568a:	f7fc fcd7 	bl	800203c <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d907      	bls.n	80056a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e150      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
 800569c:	40023800 	.word	0x40023800
 80056a0:	42470000 	.word	0x42470000
 80056a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a8:	4b88      	ldr	r3, [pc, #544]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 80056aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1ea      	bne.n	800568a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8097 	beq.w	80057f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056c2:	2300      	movs	r3, #0
 80056c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056c6:	4b81      	ldr	r3, [pc, #516]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10f      	bne.n	80056f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]
 80056d6:	4b7d      	ldr	r3, [pc, #500]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056da:	4a7c      	ldr	r2, [pc, #496]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 80056dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80056e2:	4b7a      	ldr	r3, [pc, #488]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ea:	60bb      	str	r3, [r7, #8]
 80056ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ee:	2301      	movs	r3, #1
 80056f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f2:	4b77      	ldr	r3, [pc, #476]	@ (80058d0 <HAL_RCC_OscConfig+0x474>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d118      	bne.n	8005730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056fe:	4b74      	ldr	r3, [pc, #464]	@ (80058d0 <HAL_RCC_OscConfig+0x474>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a73      	ldr	r2, [pc, #460]	@ (80058d0 <HAL_RCC_OscConfig+0x474>)
 8005704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800570a:	f7fc fc97 	bl	800203c <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005712:	f7fc fc93 	bl	800203c <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e10c      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005724:	4b6a      	ldr	r3, [pc, #424]	@ (80058d0 <HAL_RCC_OscConfig+0x474>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0f0      	beq.n	8005712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d106      	bne.n	8005746 <HAL_RCC_OscConfig+0x2ea>
 8005738:	4b64      	ldr	r3, [pc, #400]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 800573a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573c:	4a63      	ldr	r2, [pc, #396]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 800573e:	f043 0301 	orr.w	r3, r3, #1
 8005742:	6713      	str	r3, [r2, #112]	@ 0x70
 8005744:	e01c      	b.n	8005780 <HAL_RCC_OscConfig+0x324>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b05      	cmp	r3, #5
 800574c:	d10c      	bne.n	8005768 <HAL_RCC_OscConfig+0x30c>
 800574e:	4b5f      	ldr	r3, [pc, #380]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005752:	4a5e      	ldr	r2, [pc, #376]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 8005754:	f043 0304 	orr.w	r3, r3, #4
 8005758:	6713      	str	r3, [r2, #112]	@ 0x70
 800575a:	4b5c      	ldr	r3, [pc, #368]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575e:	4a5b      	ldr	r2, [pc, #364]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	6713      	str	r3, [r2, #112]	@ 0x70
 8005766:	e00b      	b.n	8005780 <HAL_RCC_OscConfig+0x324>
 8005768:	4b58      	ldr	r3, [pc, #352]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576c:	4a57      	ldr	r2, [pc, #348]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 800576e:	f023 0301 	bic.w	r3, r3, #1
 8005772:	6713      	str	r3, [r2, #112]	@ 0x70
 8005774:	4b55      	ldr	r3, [pc, #340]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 8005776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005778:	4a54      	ldr	r2, [pc, #336]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 800577a:	f023 0304 	bic.w	r3, r3, #4
 800577e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d015      	beq.n	80057b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005788:	f7fc fc58 	bl	800203c <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005790:	f7fc fc54 	bl	800203c <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e0cb      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a6:	4b49      	ldr	r3, [pc, #292]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 80057a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0ee      	beq.n	8005790 <HAL_RCC_OscConfig+0x334>
 80057b2:	e014      	b.n	80057de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b4:	f7fc fc42 	bl	800203c <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ba:	e00a      	b.n	80057d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057bc:	f7fc fc3e 	bl	800203c <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e0b5      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d2:	4b3e      	ldr	r3, [pc, #248]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1ee      	bne.n	80057bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057de:	7dfb      	ldrb	r3, [r7, #23]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d105      	bne.n	80057f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057e4:	4b39      	ldr	r3, [pc, #228]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 80057e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e8:	4a38      	ldr	r2, [pc, #224]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 80057ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80a1 	beq.w	800593c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057fa:	4b34      	ldr	r3, [pc, #208]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 030c 	and.w	r3, r3, #12
 8005802:	2b08      	cmp	r3, #8
 8005804:	d05c      	beq.n	80058c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d141      	bne.n	8005892 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580e:	4b31      	ldr	r3, [pc, #196]	@ (80058d4 <HAL_RCC_OscConfig+0x478>)
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005814:	f7fc fc12 	bl	800203c <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800581c:	f7fc fc0e 	bl	800203c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e087      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582e:	4b27      	ldr	r3, [pc, #156]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f0      	bne.n	800581c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69da      	ldr	r2, [r3, #28]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	019b      	lsls	r3, r3, #6
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	3b01      	subs	r3, #1
 8005854:	041b      	lsls	r3, r3, #16
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585c:	061b      	lsls	r3, r3, #24
 800585e:	491b      	ldr	r1, [pc, #108]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 8005860:	4313      	orrs	r3, r2
 8005862:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005864:	4b1b      	ldr	r3, [pc, #108]	@ (80058d4 <HAL_RCC_OscConfig+0x478>)
 8005866:	2201      	movs	r2, #1
 8005868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586a:	f7fc fbe7 	bl	800203c <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005872:	f7fc fbe3 	bl	800203c <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e05c      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005884:	4b11      	ldr	r3, [pc, #68]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f0      	beq.n	8005872 <HAL_RCC_OscConfig+0x416>
 8005890:	e054      	b.n	800593c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005892:	4b10      	ldr	r3, [pc, #64]	@ (80058d4 <HAL_RCC_OscConfig+0x478>)
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005898:	f7fc fbd0 	bl	800203c <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a0:	f7fc fbcc 	bl	800203c <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e045      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b2:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <HAL_RCC_OscConfig+0x470>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0x444>
 80058be:	e03d      	b.n	800593c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d107      	bne.n	80058d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e038      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
 80058cc:	40023800 	.word	0x40023800
 80058d0:	40007000 	.word	0x40007000
 80058d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005948 <HAL_RCC_OscConfig+0x4ec>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d028      	beq.n	8005938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d121      	bne.n	8005938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fe:	429a      	cmp	r2, r3
 8005900:	d11a      	bne.n	8005938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005908:	4013      	ands	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800590e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005910:	4293      	cmp	r3, r2
 8005912:	d111      	bne.n	8005938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591e:	085b      	lsrs	r3, r3, #1
 8005920:	3b01      	subs	r3, #1
 8005922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d107      	bne.n	8005938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005934:	429a      	cmp	r2, r3
 8005936:	d001      	beq.n	800593c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	40023800 	.word	0x40023800

0800594c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e0cc      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005960:	4b68      	ldr	r3, [pc, #416]	@ (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d90c      	bls.n	8005988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596e:	4b65      	ldr	r3, [pc, #404]	@ (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005976:	4b63      	ldr	r3, [pc, #396]	@ (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d001      	beq.n	8005988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0b8      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d020      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059a0:	4b59      	ldr	r3, [pc, #356]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4a58      	ldr	r2, [pc, #352]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059b8:	4b53      	ldr	r3, [pc, #332]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4a52      	ldr	r2, [pc, #328]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c4:	4b50      	ldr	r3, [pc, #320]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	494d      	ldr	r1, [pc, #308]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d044      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d107      	bne.n	80059fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	4b47      	ldr	r3, [pc, #284]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d119      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e07f      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d003      	beq.n	8005a0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d107      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e06f      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e067      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a2a:	4b37      	ldr	r3, [pc, #220]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f023 0203 	bic.w	r2, r3, #3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4934      	ldr	r1, [pc, #208]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a3c:	f7fc fafe 	bl	800203c <HAL_GetTick>
 8005a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a42:	e00a      	b.n	8005a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a44:	f7fc fafa 	bl	800203c <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e04f      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 020c 	and.w	r2, r3, #12
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d1eb      	bne.n	8005a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a6c:	4b25      	ldr	r3, [pc, #148]	@ (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d20c      	bcs.n	8005a94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7a:	4b22      	ldr	r3, [pc, #136]	@ (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b20      	ldr	r3, [pc, #128]	@ (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e032      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa0:	4b19      	ldr	r3, [pc, #100]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4916      	ldr	r1, [pc, #88]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d009      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005abe:	4b12      	ldr	r3, [pc, #72]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	490e      	ldr	r1, [pc, #56]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ad2:	f000 f821 	bl	8005b18 <HAL_RCC_GetSysClockFreq>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	091b      	lsrs	r3, r3, #4
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	490a      	ldr	r1, [pc, #40]	@ (8005b0c <HAL_RCC_ClockConfig+0x1c0>)
 8005ae4:	5ccb      	ldrb	r3, [r1, r3]
 8005ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aea:	4a09      	ldr	r2, [pc, #36]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005aee:	4b09      	ldr	r3, [pc, #36]	@ (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fc fa5e 	bl	8001fb4 <HAL_InitTick>

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	40023c00 	.word	0x40023c00
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	0800da5c 	.word	0x0800da5c
 8005b10:	20000000 	.word	0x20000000
 8005b14:	20000004 	.word	0x20000004

08005b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b1c:	b094      	sub	sp, #80	@ 0x50
 8005b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b30:	4b79      	ldr	r3, [pc, #484]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 030c 	and.w	r3, r3, #12
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d00d      	beq.n	8005b58 <HAL_RCC_GetSysClockFreq+0x40>
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	f200 80e1 	bhi.w	8005d04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <HAL_RCC_GetSysClockFreq+0x34>
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d003      	beq.n	8005b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b4a:	e0db      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b4c:	4b73      	ldr	r3, [pc, #460]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b50:	e0db      	b.n	8005d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b52:	4b73      	ldr	r3, [pc, #460]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b56:	e0d8      	b.n	8005d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b58:	4b6f      	ldr	r3, [pc, #444]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b62:	4b6d      	ldr	r3, [pc, #436]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d063      	beq.n	8005c36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	099b      	lsrs	r3, r3, #6
 8005b74:	2200      	movs	r2, #0
 8005b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b82:	2300      	movs	r3, #0
 8005b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	462b      	mov	r3, r5
 8005b8e:	f04f 0000 	mov.w	r0, #0
 8005b92:	f04f 0100 	mov.w	r1, #0
 8005b96:	0159      	lsls	r1, r3, #5
 8005b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b9c:	0150      	lsls	r0, r2, #5
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	1a51      	subs	r1, r2, r1
 8005ba6:	6139      	str	r1, [r7, #16]
 8005ba8:	4629      	mov	r1, r5
 8005baa:	eb63 0301 	sbc.w	r3, r3, r1
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bbc:	4659      	mov	r1, fp
 8005bbe:	018b      	lsls	r3, r1, #6
 8005bc0:	4651      	mov	r1, sl
 8005bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bc6:	4651      	mov	r1, sl
 8005bc8:	018a      	lsls	r2, r1, #6
 8005bca:	4651      	mov	r1, sl
 8005bcc:	ebb2 0801 	subs.w	r8, r2, r1
 8005bd0:	4659      	mov	r1, fp
 8005bd2:	eb63 0901 	sbc.w	r9, r3, r1
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bea:	4690      	mov	r8, r2
 8005bec:	4699      	mov	r9, r3
 8005bee:	4623      	mov	r3, r4
 8005bf0:	eb18 0303 	adds.w	r3, r8, r3
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	462b      	mov	r3, r5
 8005bf8:	eb49 0303 	adc.w	r3, r9, r3
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	024b      	lsls	r3, r1, #9
 8005c0e:	4621      	mov	r1, r4
 8005c10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c14:	4621      	mov	r1, r4
 8005c16:	024a      	lsls	r2, r1, #9
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c1e:	2200      	movs	r2, #0
 8005c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c28:	f7fb f80e 	bl	8000c48 <__aeabi_uldivmod>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4613      	mov	r3, r2
 8005c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c34:	e058      	b.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c36:	4b38      	ldr	r3, [pc, #224]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	099b      	lsrs	r3, r3, #6
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	4618      	mov	r0, r3
 8005c40:	4611      	mov	r1, r2
 8005c42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c46:	623b      	str	r3, [r7, #32]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c50:	4642      	mov	r2, r8
 8005c52:	464b      	mov	r3, r9
 8005c54:	f04f 0000 	mov.w	r0, #0
 8005c58:	f04f 0100 	mov.w	r1, #0
 8005c5c:	0159      	lsls	r1, r3, #5
 8005c5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c62:	0150      	lsls	r0, r2, #5
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4641      	mov	r1, r8
 8005c6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c6e:	4649      	mov	r1, r9
 8005c70:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c88:	ebb2 040a 	subs.w	r4, r2, sl
 8005c8c:	eb63 050b 	sbc.w	r5, r3, fp
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	00eb      	lsls	r3, r5, #3
 8005c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c9e:	00e2      	lsls	r2, r4, #3
 8005ca0:	4614      	mov	r4, r2
 8005ca2:	461d      	mov	r5, r3
 8005ca4:	4643      	mov	r3, r8
 8005ca6:	18e3      	adds	r3, r4, r3
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	464b      	mov	r3, r9
 8005cac:	eb45 0303 	adc.w	r3, r5, r3
 8005cb0:	607b      	str	r3, [r7, #4]
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	f04f 0300 	mov.w	r3, #0
 8005cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	028b      	lsls	r3, r1, #10
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cc8:	4621      	mov	r1, r4
 8005cca:	028a      	lsls	r2, r1, #10
 8005ccc:	4610      	mov	r0, r2
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	61fa      	str	r2, [r7, #28]
 8005cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cdc:	f7fa ffb4 	bl	8000c48 <__aeabi_uldivmod>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005cf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d02:	e002      	b.n	8005d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d04:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3750      	adds	r7, #80	@ 0x50
 8005d10:	46bd      	mov	sp, r7
 8005d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d16:	bf00      	nop
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	00f42400 	.word	0x00f42400
 8005d20:	007a1200 	.word	0x007a1200

08005d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d28:	4b03      	ldr	r3, [pc, #12]	@ (8005d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20000000 	.word	0x20000000

08005d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d40:	f7ff fff0 	bl	8005d24 <HAL_RCC_GetHCLKFreq>
 8005d44:	4602      	mov	r2, r0
 8005d46:	4b05      	ldr	r3, [pc, #20]	@ (8005d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	0a9b      	lsrs	r3, r3, #10
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	4903      	ldr	r1, [pc, #12]	@ (8005d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d52:	5ccb      	ldrb	r3, [r1, r3]
 8005d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	0800da6c 	.word	0x0800da6c

08005d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d68:	f7ff ffdc 	bl	8005d24 <HAL_RCC_GetHCLKFreq>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	4b05      	ldr	r3, [pc, #20]	@ (8005d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	0b5b      	lsrs	r3, r3, #13
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	4903      	ldr	r1, [pc, #12]	@ (8005d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d7a:	5ccb      	ldrb	r3, [r1, r3]
 8005d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40023800 	.word	0x40023800
 8005d88:	0800da6c 	.word	0x0800da6c

08005d8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d105      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d035      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005db4:	4b62      	ldr	r3, [pc, #392]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dba:	f7fc f93f 	bl	800203c <HAL_GetTick>
 8005dbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005dc2:	f7fc f93b 	bl	800203c <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e0b0      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dd4:	4b5b      	ldr	r3, [pc, #364]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f0      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	019a      	lsls	r2, r3, #6
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	071b      	lsls	r3, r3, #28
 8005dec:	4955      	ldr	r1, [pc, #340]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005df4:	4b52      	ldr	r3, [pc, #328]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dfa:	f7fc f91f 	bl	800203c <HAL_GetTick>
 8005dfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e00:	e008      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e02:	f7fc f91b 	bl	800203c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e090      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e14:	4b4b      	ldr	r3, [pc, #300]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8083 	beq.w	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	4b44      	ldr	r3, [pc, #272]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e36:	4a43      	ldr	r2, [pc, #268]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e3e:	4b41      	ldr	r3, [pc, #260]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e4a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a3e      	ldr	r2, [pc, #248]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e56:	f7fc f8f1 	bl	800203c <HAL_GetTick>
 8005e5a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e5e:	f7fc f8ed 	bl	800203c <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e062      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005e70:	4b35      	ldr	r3, [pc, #212]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0f0      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e7c:	4b31      	ldr	r3, [pc, #196]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e84:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d02f      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d028      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ea4:	4b29      	ldr	r3, [pc, #164]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eaa:	4b28      	ldr	r3, [pc, #160]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005eb0:	4a24      	ldr	r2, [pc, #144]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005eb6:	4b23      	ldr	r3, [pc, #140]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d114      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ec2:	f7fc f8bb 	bl	800203c <HAL_GetTick>
 8005ec6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec8:	e00a      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eca:	f7fc f8b7 	bl	800203c <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e02a      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee0:	4b18      	ldr	r3, [pc, #96]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0ee      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ef4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ef8:	d10d      	bne.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005efa:	4b12      	ldr	r3, [pc, #72]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f0e:	490d      	ldr	r1, [pc, #52]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	608b      	str	r3, [r1, #8]
 8005f14:	e005      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f16:	4b0b      	ldr	r3, [pc, #44]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f1c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005f20:	6093      	str	r3, [r2, #8]
 8005f22:	4b08      	ldr	r3, [pc, #32]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f2e:	4905      	ldr	r1, [pc, #20]	@ (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	42470068 	.word	0x42470068
 8005f44:	40023800 	.word	0x40023800
 8005f48:	40007000 	.word	0x40007000
 8005f4c:	42470e40 	.word	0x42470e40

08005f50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d13f      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005f6e:	4b24      	ldr	r3, [pc, #144]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f76:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d006      	beq.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f84:	d12f      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f86:	4b1f      	ldr	r3, [pc, #124]	@ (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f88:	617b      	str	r3, [r7, #20]
          break;
 8005f8a:	e02f      	b.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f98:	d108      	bne.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f9a:	4b19      	ldr	r3, [pc, #100]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fa2:	4a19      	ldr	r2, [pc, #100]	@ (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa8:	613b      	str	r3, [r7, #16]
 8005faa:	e007      	b.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005fac:	4b14      	ldr	r3, [pc, #80]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fb4:	4a15      	ldr	r2, [pc, #84]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fba:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005fbc:	4b10      	ldr	r3, [pc, #64]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fc2:	099b      	lsrs	r3, r3, #6
 8005fc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
 8005fce:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fd6:	0f1b      	lsrs	r3, r3, #28
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe2:	617b      	str	r3, [r7, #20]
          break;
 8005fe4:	e002      	b.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
          break;
 8005fea:	bf00      	nop
        }
      }
      break;
 8005fec:	e000      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005fee:	bf00      	nop
    }
  }
  return frequency;
 8005ff0:	697b      	ldr	r3, [r7, #20]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	371c      	adds	r7, #28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40023800 	.word	0x40023800
 8006004:	00bb8000 	.word	0x00bb8000
 8006008:	007a1200 	.word	0x007a1200
 800600c:	00f42400 	.word	0x00f42400

08006010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e07b      	b.n	800611a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006026:	2b00      	cmp	r3, #0
 8006028:	d108      	bne.n	800603c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006032:	d009      	beq.n	8006048 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	61da      	str	r2, [r3, #28]
 800603a:	e005      	b.n	8006048 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fb fd0e 	bl	8001a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800607e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	431a      	orrs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060b8:	431a      	orrs	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060cc:	ea42 0103 	orr.w	r1, r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	0c1b      	lsrs	r3, r3, #16
 80060e6:	f003 0104 	and.w	r1, r3, #4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ee:	f003 0210 	and.w	r2, r3, #16
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69da      	ldr	r2, [r3, #28]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e041      	b.n	80061b8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d106      	bne.n	800614e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fb fd2b 	bl	8001ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2202      	movs	r2, #2
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3304      	adds	r3, #4
 800615e:	4619      	mov	r1, r3
 8006160:	4610      	mov	r0, r2
 8006162:	f000 fbe5 	bl	8006930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d001      	beq.n	80061d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e046      	b.n	8006266 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a23      	ldr	r2, [pc, #140]	@ (8006274 <HAL_TIM_Base_Start+0xb4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d022      	beq.n	8006230 <HAL_TIM_Base_Start+0x70>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f2:	d01d      	beq.n	8006230 <HAL_TIM_Base_Start+0x70>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006278 <HAL_TIM_Base_Start+0xb8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d018      	beq.n	8006230 <HAL_TIM_Base_Start+0x70>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1e      	ldr	r2, [pc, #120]	@ (800627c <HAL_TIM_Base_Start+0xbc>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d013      	beq.n	8006230 <HAL_TIM_Base_Start+0x70>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1c      	ldr	r2, [pc, #112]	@ (8006280 <HAL_TIM_Base_Start+0xc0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00e      	beq.n	8006230 <HAL_TIM_Base_Start+0x70>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1b      	ldr	r2, [pc, #108]	@ (8006284 <HAL_TIM_Base_Start+0xc4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d009      	beq.n	8006230 <HAL_TIM_Base_Start+0x70>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a19      	ldr	r2, [pc, #100]	@ (8006288 <HAL_TIM_Base_Start+0xc8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d004      	beq.n	8006230 <HAL_TIM_Base_Start+0x70>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a18      	ldr	r2, [pc, #96]	@ (800628c <HAL_TIM_Base_Start+0xcc>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d111      	bne.n	8006254 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b06      	cmp	r3, #6
 8006240:	d010      	beq.n	8006264 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f042 0201 	orr.w	r2, r2, #1
 8006250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006252:	e007      	b.n	8006264 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0201 	orr.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40010000 	.word	0x40010000
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40010400 	.word	0x40010400
 8006288:	40014000 	.word	0x40014000
 800628c:	40001800 	.word	0x40001800

08006290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e041      	b.n	8006326 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d106      	bne.n	80062bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7fb fc96 	bl	8001be8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f000 fb2e 	bl	8006930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d109      	bne.n	8006354 <HAL_TIM_PWM_Start+0x24>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	bf14      	ite	ne
 800634c:	2301      	movne	r3, #1
 800634e:	2300      	moveq	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	e022      	b.n	800639a <HAL_TIM_PWM_Start+0x6a>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b04      	cmp	r3, #4
 8006358:	d109      	bne.n	800636e <HAL_TIM_PWM_Start+0x3e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b01      	cmp	r3, #1
 8006364:	bf14      	ite	ne
 8006366:	2301      	movne	r3, #1
 8006368:	2300      	moveq	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	e015      	b.n	800639a <HAL_TIM_PWM_Start+0x6a>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b08      	cmp	r3, #8
 8006372:	d109      	bne.n	8006388 <HAL_TIM_PWM_Start+0x58>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	e008      	b.n	800639a <HAL_TIM_PWM_Start+0x6a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b01      	cmp	r3, #1
 8006392:	bf14      	ite	ne
 8006394:	2301      	movne	r3, #1
 8006396:	2300      	moveq	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e07c      	b.n	800649c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <HAL_TIM_PWM_Start+0x82>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063b0:	e013      	b.n	80063da <HAL_TIM_PWM_Start+0xaa>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d104      	bne.n	80063c2 <HAL_TIM_PWM_Start+0x92>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063c0:	e00b      	b.n	80063da <HAL_TIM_PWM_Start+0xaa>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d104      	bne.n	80063d2 <HAL_TIM_PWM_Start+0xa2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d0:	e003      	b.n	80063da <HAL_TIM_PWM_Start+0xaa>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2201      	movs	r2, #1
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fe0a 	bl	8006ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2d      	ldr	r2, [pc, #180]	@ (80064a4 <HAL_TIM_PWM_Start+0x174>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d004      	beq.n	80063fc <HAL_TIM_PWM_Start+0xcc>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2c      	ldr	r2, [pc, #176]	@ (80064a8 <HAL_TIM_PWM_Start+0x178>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d101      	bne.n	8006400 <HAL_TIM_PWM_Start+0xd0>
 80063fc:	2301      	movs	r3, #1
 80063fe:	e000      	b.n	8006402 <HAL_TIM_PWM_Start+0xd2>
 8006400:	2300      	movs	r3, #0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d007      	beq.n	8006416 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006414:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a22      	ldr	r2, [pc, #136]	@ (80064a4 <HAL_TIM_PWM_Start+0x174>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d022      	beq.n	8006466 <HAL_TIM_PWM_Start+0x136>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006428:	d01d      	beq.n	8006466 <HAL_TIM_PWM_Start+0x136>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1f      	ldr	r2, [pc, #124]	@ (80064ac <HAL_TIM_PWM_Start+0x17c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d018      	beq.n	8006466 <HAL_TIM_PWM_Start+0x136>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1d      	ldr	r2, [pc, #116]	@ (80064b0 <HAL_TIM_PWM_Start+0x180>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d013      	beq.n	8006466 <HAL_TIM_PWM_Start+0x136>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1c      	ldr	r2, [pc, #112]	@ (80064b4 <HAL_TIM_PWM_Start+0x184>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00e      	beq.n	8006466 <HAL_TIM_PWM_Start+0x136>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a16      	ldr	r2, [pc, #88]	@ (80064a8 <HAL_TIM_PWM_Start+0x178>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d009      	beq.n	8006466 <HAL_TIM_PWM_Start+0x136>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a18      	ldr	r2, [pc, #96]	@ (80064b8 <HAL_TIM_PWM_Start+0x188>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d004      	beq.n	8006466 <HAL_TIM_PWM_Start+0x136>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a16      	ldr	r2, [pc, #88]	@ (80064bc <HAL_TIM_PWM_Start+0x18c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d111      	bne.n	800648a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b06      	cmp	r3, #6
 8006476:	d010      	beq.n	800649a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006488:	e007      	b.n	800649a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40010400 	.word	0x40010400
 80064ac:	40000400 	.word	0x40000400
 80064b0:	40000800 	.word	0x40000800
 80064b4:	40000c00 	.word	0x40000c00
 80064b8:	40014000 	.word	0x40014000
 80064bc:	40001800 	.word	0x40001800

080064c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e097      	b.n	8006604 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7fb fb13 	bl	8001b14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2202      	movs	r2, #2
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006504:	f023 0307 	bic.w	r3, r3, #7
 8006508:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f000 fa0b 	bl	8006930 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006542:	f023 0303 	bic.w	r3, r3, #3
 8006546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	4313      	orrs	r3, r2
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006560:	f023 030c 	bic.w	r3, r3, #12
 8006564:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800656c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	4313      	orrs	r3, r2
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	011a      	lsls	r2, r3, #4
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	031b      	lsls	r3, r3, #12
 8006590:	4313      	orrs	r3, r2
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800659e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	4313      	orrs	r3, r2
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800661c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006624:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800662c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006634:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d110      	bne.n	800665e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d102      	bne.n	8006648 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006642:	7b7b      	ldrb	r3, [r7, #13]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d001      	beq.n	800664c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e069      	b.n	8006720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800665c:	e031      	b.n	80066c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b04      	cmp	r3, #4
 8006662:	d110      	bne.n	8006686 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d102      	bne.n	8006670 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800666a:	7b3b      	ldrb	r3, [r7, #12]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d001      	beq.n	8006674 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e055      	b.n	8006720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006684:	e01d      	b.n	80066c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d108      	bne.n	800669e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800668c:	7bbb      	ldrb	r3, [r7, #14]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d105      	bne.n	800669e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006692:	7b7b      	ldrb	r3, [r7, #13]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d102      	bne.n	800669e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006698:	7b3b      	ldrb	r3, [r7, #12]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d001      	beq.n	80066a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e03e      	b.n	8006720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <HAL_TIM_Encoder_Start+0xc4>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d008      	beq.n	80066e0 <HAL_TIM_Encoder_Start+0xd4>
 80066ce:	e00f      	b.n	80066f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2201      	movs	r2, #1
 80066d6:	2100      	movs	r1, #0
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fc8f 	bl	8006ffc <TIM_CCxChannelCmd>
      break;
 80066de:	e016      	b.n	800670e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2201      	movs	r2, #1
 80066e6:	2104      	movs	r1, #4
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fc87 	bl	8006ffc <TIM_CCxChannelCmd>
      break;
 80066ee:	e00e      	b.n	800670e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2201      	movs	r2, #1
 80066f6:	2100      	movs	r1, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fc7f 	bl	8006ffc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2201      	movs	r2, #1
 8006704:	2104      	movs	r1, #4
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fc78 	bl	8006ffc <TIM_CCxChannelCmd>
      break;
 800670c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0201 	orr.w	r2, r2, #1
 800671c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006742:	2302      	movs	r3, #2
 8006744:	e0ae      	b.n	80068a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b0c      	cmp	r3, #12
 8006752:	f200 809f 	bhi.w	8006894 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006756:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006791 	.word	0x08006791
 8006760:	08006895 	.word	0x08006895
 8006764:	08006895 	.word	0x08006895
 8006768:	08006895 	.word	0x08006895
 800676c:	080067d1 	.word	0x080067d1
 8006770:	08006895 	.word	0x08006895
 8006774:	08006895 	.word	0x08006895
 8006778:	08006895 	.word	0x08006895
 800677c:	08006813 	.word	0x08006813
 8006780:	08006895 	.word	0x08006895
 8006784:	08006895 	.word	0x08006895
 8006788:	08006895 	.word	0x08006895
 800678c:	08006853 	.word	0x08006853
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	4618      	mov	r0, r3
 8006798:	f000 f970 	bl	8006a7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0208 	orr.w	r2, r2, #8
 80067aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0204 	bic.w	r2, r2, #4
 80067ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6999      	ldr	r1, [r3, #24]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	691a      	ldr	r2, [r3, #16]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	619a      	str	r2, [r3, #24]
      break;
 80067ce:	e064      	b.n	800689a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f9c0 	bl	8006b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6999      	ldr	r1, [r3, #24]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	021a      	lsls	r2, r3, #8
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	619a      	str	r2, [r3, #24]
      break;
 8006810:	e043      	b.n	800689a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fa15 	bl	8006c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0208 	orr.w	r2, r2, #8
 800682c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69da      	ldr	r2, [r3, #28]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0204 	bic.w	r2, r2, #4
 800683c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69d9      	ldr	r1, [r3, #28]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	691a      	ldr	r2, [r3, #16]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	61da      	str	r2, [r3, #28]
      break;
 8006850:	e023      	b.n	800689a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	4618      	mov	r0, r3
 800685a:	f000 fa69 	bl	8006d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69da      	ldr	r2, [r3, #28]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800686c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800687c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69d9      	ldr	r1, [r3, #28]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	021a      	lsls	r2, r3, #8
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	61da      	str	r2, [r3, #28]
      break;
 8006892:	e002      	b.n	800689a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	75fb      	strb	r3, [r7, #23]
      break;
 8006898:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e031      	b.n	8006928 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa80 	bl	8006ddc <TIM_SlaveTimer_SetConfig>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d009      	beq.n	80068f6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e018      	b.n	8006928 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006904:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006914:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a43      	ldr	r2, [pc, #268]	@ (8006a50 <TIM_Base_SetConfig+0x120>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d013      	beq.n	8006970 <TIM_Base_SetConfig+0x40>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800694e:	d00f      	beq.n	8006970 <TIM_Base_SetConfig+0x40>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a40      	ldr	r2, [pc, #256]	@ (8006a54 <TIM_Base_SetConfig+0x124>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00b      	beq.n	8006970 <TIM_Base_SetConfig+0x40>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a3f      	ldr	r2, [pc, #252]	@ (8006a58 <TIM_Base_SetConfig+0x128>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d007      	beq.n	8006970 <TIM_Base_SetConfig+0x40>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a3e      	ldr	r2, [pc, #248]	@ (8006a5c <TIM_Base_SetConfig+0x12c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d003      	beq.n	8006970 <TIM_Base_SetConfig+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a3d      	ldr	r2, [pc, #244]	@ (8006a60 <TIM_Base_SetConfig+0x130>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d108      	bne.n	8006982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a32      	ldr	r2, [pc, #200]	@ (8006a50 <TIM_Base_SetConfig+0x120>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d02b      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006990:	d027      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a2f      	ldr	r2, [pc, #188]	@ (8006a54 <TIM_Base_SetConfig+0x124>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d023      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a2e      	ldr	r2, [pc, #184]	@ (8006a58 <TIM_Base_SetConfig+0x128>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01f      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a2d      	ldr	r2, [pc, #180]	@ (8006a5c <TIM_Base_SetConfig+0x12c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d01b      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006a60 <TIM_Base_SetConfig+0x130>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d017      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a2b      	ldr	r2, [pc, #172]	@ (8006a64 <TIM_Base_SetConfig+0x134>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006a68 <TIM_Base_SetConfig+0x138>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00f      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a29      	ldr	r2, [pc, #164]	@ (8006a6c <TIM_Base_SetConfig+0x13c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00b      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a28      	ldr	r2, [pc, #160]	@ (8006a70 <TIM_Base_SetConfig+0x140>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d007      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a27      	ldr	r2, [pc, #156]	@ (8006a74 <TIM_Base_SetConfig+0x144>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d003      	beq.n	80069e2 <TIM_Base_SetConfig+0xb2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a26      	ldr	r2, [pc, #152]	@ (8006a78 <TIM_Base_SetConfig+0x148>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d108      	bne.n	80069f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a0e      	ldr	r2, [pc, #56]	@ (8006a50 <TIM_Base_SetConfig+0x120>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d003      	beq.n	8006a22 <TIM_Base_SetConfig+0xf2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a10      	ldr	r2, [pc, #64]	@ (8006a60 <TIM_Base_SetConfig+0x130>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d103      	bne.n	8006a2a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f043 0204 	orr.w	r2, r3, #4
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	601a      	str	r2, [r3, #0]
}
 8006a42:	bf00      	nop
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40000400 	.word	0x40000400
 8006a58:	40000800 	.word	0x40000800
 8006a5c:	40000c00 	.word	0x40000c00
 8006a60:	40010400 	.word	0x40010400
 8006a64:	40014000 	.word	0x40014000
 8006a68:	40014400 	.word	0x40014400
 8006a6c:	40014800 	.word	0x40014800
 8006a70:	40001800 	.word	0x40001800
 8006a74:	40001c00 	.word	0x40001c00
 8006a78:	40002000 	.word	0x40002000

08006a7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	f023 0201 	bic.w	r2, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f023 0302 	bic.w	r3, r3, #2
 8006ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a20      	ldr	r2, [pc, #128]	@ (8006b54 <TIM_OC1_SetConfig+0xd8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d003      	beq.n	8006ae0 <TIM_OC1_SetConfig+0x64>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a1f      	ldr	r2, [pc, #124]	@ (8006b58 <TIM_OC1_SetConfig+0xdc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d10c      	bne.n	8006afa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f023 0308 	bic.w	r3, r3, #8
 8006ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f023 0304 	bic.w	r3, r3, #4
 8006af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a15      	ldr	r2, [pc, #84]	@ (8006b54 <TIM_OC1_SetConfig+0xd8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d003      	beq.n	8006b0a <TIM_OC1_SetConfig+0x8e>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a14      	ldr	r2, [pc, #80]	@ (8006b58 <TIM_OC1_SetConfig+0xdc>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d111      	bne.n	8006b2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	621a      	str	r2, [r3, #32]
}
 8006b48:	bf00      	nop
 8006b4a:	371c      	adds	r7, #28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	40010000 	.word	0x40010000
 8006b58:	40010400 	.word	0x40010400

08006b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	f023 0210 	bic.w	r2, r3, #16
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f023 0320 	bic.w	r3, r3, #32
 8006ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a22      	ldr	r2, [pc, #136]	@ (8006c40 <TIM_OC2_SetConfig+0xe4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_OC2_SetConfig+0x68>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a21      	ldr	r2, [pc, #132]	@ (8006c44 <TIM_OC2_SetConfig+0xe8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d10d      	bne.n	8006be0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a17      	ldr	r2, [pc, #92]	@ (8006c40 <TIM_OC2_SetConfig+0xe4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d003      	beq.n	8006bf0 <TIM_OC2_SetConfig+0x94>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a16      	ldr	r2, [pc, #88]	@ (8006c44 <TIM_OC2_SetConfig+0xe8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d113      	bne.n	8006c18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	40010000 	.word	0x40010000
 8006c44:	40010400 	.word	0x40010400

08006c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0303 	bic.w	r3, r3, #3
 8006c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	021b      	lsls	r3, r3, #8
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a21      	ldr	r2, [pc, #132]	@ (8006d28 <TIM_OC3_SetConfig+0xe0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d003      	beq.n	8006cae <TIM_OC3_SetConfig+0x66>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a20      	ldr	r2, [pc, #128]	@ (8006d2c <TIM_OC3_SetConfig+0xe4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d10d      	bne.n	8006cca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a16      	ldr	r2, [pc, #88]	@ (8006d28 <TIM_OC3_SetConfig+0xe0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d003      	beq.n	8006cda <TIM_OC3_SetConfig+0x92>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a15      	ldr	r2, [pc, #84]	@ (8006d2c <TIM_OC3_SetConfig+0xe4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d113      	bne.n	8006d02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	011b      	lsls	r3, r3, #4
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	621a      	str	r2, [r3, #32]
}
 8006d1c:	bf00      	nop
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	40010000 	.word	0x40010000
 8006d2c:	40010400 	.word	0x40010400

08006d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	021b      	lsls	r3, r3, #8
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	031b      	lsls	r3, r3, #12
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a12      	ldr	r2, [pc, #72]	@ (8006dd4 <TIM_OC4_SetConfig+0xa4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d003      	beq.n	8006d98 <TIM_OC4_SetConfig+0x68>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a11      	ldr	r2, [pc, #68]	@ (8006dd8 <TIM_OC4_SetConfig+0xa8>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d109      	bne.n	8006dac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	019b      	lsls	r3, r3, #6
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40010000 	.word	0x40010000
 8006dd8:	40010400 	.word	0x40010400

08006ddc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f023 0307 	bic.w	r3, r3, #7
 8006e0a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b70      	cmp	r3, #112	@ 0x70
 8006e24:	d01a      	beq.n	8006e5c <TIM_SlaveTimer_SetConfig+0x80>
 8006e26:	2b70      	cmp	r3, #112	@ 0x70
 8006e28:	d860      	bhi.n	8006eec <TIM_SlaveTimer_SetConfig+0x110>
 8006e2a:	2b60      	cmp	r3, #96	@ 0x60
 8006e2c:	d054      	beq.n	8006ed8 <TIM_SlaveTimer_SetConfig+0xfc>
 8006e2e:	2b60      	cmp	r3, #96	@ 0x60
 8006e30:	d85c      	bhi.n	8006eec <TIM_SlaveTimer_SetConfig+0x110>
 8006e32:	2b50      	cmp	r3, #80	@ 0x50
 8006e34:	d046      	beq.n	8006ec4 <TIM_SlaveTimer_SetConfig+0xe8>
 8006e36:	2b50      	cmp	r3, #80	@ 0x50
 8006e38:	d858      	bhi.n	8006eec <TIM_SlaveTimer_SetConfig+0x110>
 8006e3a:	2b40      	cmp	r3, #64	@ 0x40
 8006e3c:	d019      	beq.n	8006e72 <TIM_SlaveTimer_SetConfig+0x96>
 8006e3e:	2b40      	cmp	r3, #64	@ 0x40
 8006e40:	d854      	bhi.n	8006eec <TIM_SlaveTimer_SetConfig+0x110>
 8006e42:	2b30      	cmp	r3, #48	@ 0x30
 8006e44:	d055      	beq.n	8006ef2 <TIM_SlaveTimer_SetConfig+0x116>
 8006e46:	2b30      	cmp	r3, #48	@ 0x30
 8006e48:	d850      	bhi.n	8006eec <TIM_SlaveTimer_SetConfig+0x110>
 8006e4a:	2b20      	cmp	r3, #32
 8006e4c:	d051      	beq.n	8006ef2 <TIM_SlaveTimer_SetConfig+0x116>
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d84c      	bhi.n	8006eec <TIM_SlaveTimer_SetConfig+0x110>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d04d      	beq.n	8006ef2 <TIM_SlaveTimer_SetConfig+0x116>
 8006e56:	2b10      	cmp	r3, #16
 8006e58:	d04b      	beq.n	8006ef2 <TIM_SlaveTimer_SetConfig+0x116>
 8006e5a:	e047      	b.n	8006eec <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006e6c:	f000 f8a6 	bl	8006fbc <TIM_ETR_SetConfig>
      break;
 8006e70:	e040      	b.n	8006ef4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d101      	bne.n	8006e7e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e03b      	b.n	8006ef6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6a1a      	ldr	r2, [r3, #32]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0201 	bic.w	r2, r2, #1
 8006e94:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ea4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	621a      	str	r2, [r3, #32]
      break;
 8006ec2:	e017      	b.n	8006ef4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	f000 f814 	bl	8006efe <TIM_TI1_ConfigInputStage>
      break;
 8006ed6:	e00d      	b.n	8006ef4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f000 f839 	bl	8006f5c <TIM_TI2_ConfigInputStage>
      break;
 8006eea:	e003      	b.n	8006ef4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef0:	e000      	b.n	8006ef4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006ef2:	bf00      	nop
  }

  return status;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b087      	sub	sp, #28
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	f023 0201 	bic.w	r2, r3, #1
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f023 030a 	bic.w	r3, r3, #10
 8006f3a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	621a      	str	r2, [r3, #32]
}
 8006f50:	bf00      	nop
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f023 0210 	bic.w	r2, r3, #16
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	031b      	lsls	r3, r3, #12
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	621a      	str	r2, [r3, #32]
}
 8006fb0:	bf00      	nop
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
 8006fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	021a      	lsls	r2, r3, #8
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	609a      	str	r2, [r3, #8]
}
 8006ff0:	bf00      	nop
 8006ff2:	371c      	adds	r7, #28
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	2201      	movs	r2, #1
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1a      	ldr	r2, [r3, #32]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	43db      	mvns	r3, r3
 800701e:	401a      	ands	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a1a      	ldr	r2, [r3, #32]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	fa01 f303 	lsl.w	r3, r1, r3
 8007034:	431a      	orrs	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
	...

08007048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800705c:	2302      	movs	r3, #2
 800705e:	e05a      	b.n	8007116 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a21      	ldr	r2, [pc, #132]	@ (8007124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d022      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ac:	d01d      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007128 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d018      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1b      	ldr	r2, [pc, #108]	@ (800712c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d013      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007130 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00e      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a18      	ldr	r2, [pc, #96]	@ (8007134 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d009      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a17      	ldr	r2, [pc, #92]	@ (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d004      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a15      	ldr	r2, [pc, #84]	@ (800713c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d10c      	bne.n	8007104 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40010000 	.word	0x40010000
 8007128:	40000400 	.word	0x40000400
 800712c:	40000800 	.word	0x40000800
 8007130:	40000c00 	.word	0x40000c00
 8007134:	40010400 	.word	0x40010400
 8007138:	40014000 	.word	0x40014000
 800713c:	40001800 	.word	0x40001800

08007140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e042      	b.n	80071d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fa fd9a 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2224      	movs	r2, #36	@ 0x24
 8007170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f82b 	bl	80071e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	695a      	ldr	r2, [r3, #20]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68da      	ldr	r2, [r3, #12]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2220      	movs	r2, #32
 80071c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071e4:	b0c0      	sub	sp, #256	@ 0x100
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fc:	68d9      	ldr	r1, [r3, #12]
 80071fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	ea40 0301 	orr.w	r3, r0, r1
 8007208:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800720a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	431a      	orrs	r2, r3
 8007218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	431a      	orrs	r2, r3
 8007220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	4313      	orrs	r3, r2
 8007228:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007238:	f021 010c 	bic.w	r1, r1, #12
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007246:	430b      	orrs	r3, r1
 8007248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800724a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725a:	6999      	ldr	r1, [r3, #24]
 800725c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	ea40 0301 	orr.w	r3, r0, r1
 8007266:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	4b8f      	ldr	r3, [pc, #572]	@ (80074ac <UART_SetConfig+0x2cc>)
 8007270:	429a      	cmp	r2, r3
 8007272:	d005      	beq.n	8007280 <UART_SetConfig+0xa0>
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	4b8d      	ldr	r3, [pc, #564]	@ (80074b0 <UART_SetConfig+0x2d0>)
 800727c:	429a      	cmp	r2, r3
 800727e:	d104      	bne.n	800728a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007280:	f7fe fd70 	bl	8005d64 <HAL_RCC_GetPCLK2Freq>
 8007284:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007288:	e003      	b.n	8007292 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800728a:	f7fe fd57 	bl	8005d3c <HAL_RCC_GetPCLK1Freq>
 800728e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800729c:	f040 810c 	bne.w	80074b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072a4:	2200      	movs	r2, #0
 80072a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80072ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80072b2:	4622      	mov	r2, r4
 80072b4:	462b      	mov	r3, r5
 80072b6:	1891      	adds	r1, r2, r2
 80072b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072ba:	415b      	adcs	r3, r3
 80072bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072c2:	4621      	mov	r1, r4
 80072c4:	eb12 0801 	adds.w	r8, r2, r1
 80072c8:	4629      	mov	r1, r5
 80072ca:	eb43 0901 	adc.w	r9, r3, r1
 80072ce:	f04f 0200 	mov.w	r2, #0
 80072d2:	f04f 0300 	mov.w	r3, #0
 80072d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072e2:	4690      	mov	r8, r2
 80072e4:	4699      	mov	r9, r3
 80072e6:	4623      	mov	r3, r4
 80072e8:	eb18 0303 	adds.w	r3, r8, r3
 80072ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072f0:	462b      	mov	r3, r5
 80072f2:	eb49 0303 	adc.w	r3, r9, r3
 80072f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007306:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800730a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800730e:	460b      	mov	r3, r1
 8007310:	18db      	adds	r3, r3, r3
 8007312:	653b      	str	r3, [r7, #80]	@ 0x50
 8007314:	4613      	mov	r3, r2
 8007316:	eb42 0303 	adc.w	r3, r2, r3
 800731a:	657b      	str	r3, [r7, #84]	@ 0x54
 800731c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007320:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007324:	f7f9 fc90 	bl	8000c48 <__aeabi_uldivmod>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4b61      	ldr	r3, [pc, #388]	@ (80074b4 <UART_SetConfig+0x2d4>)
 800732e:	fba3 2302 	umull	r2, r3, r3, r2
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	011c      	lsls	r4, r3, #4
 8007336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800733a:	2200      	movs	r2, #0
 800733c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007340:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007344:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007348:	4642      	mov	r2, r8
 800734a:	464b      	mov	r3, r9
 800734c:	1891      	adds	r1, r2, r2
 800734e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007350:	415b      	adcs	r3, r3
 8007352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007354:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007358:	4641      	mov	r1, r8
 800735a:	eb12 0a01 	adds.w	sl, r2, r1
 800735e:	4649      	mov	r1, r9
 8007360:	eb43 0b01 	adc.w	fp, r3, r1
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007370:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007374:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007378:	4692      	mov	sl, r2
 800737a:	469b      	mov	fp, r3
 800737c:	4643      	mov	r3, r8
 800737e:	eb1a 0303 	adds.w	r3, sl, r3
 8007382:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007386:	464b      	mov	r3, r9
 8007388:	eb4b 0303 	adc.w	r3, fp, r3
 800738c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800739c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80073a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80073a4:	460b      	mov	r3, r1
 80073a6:	18db      	adds	r3, r3, r3
 80073a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80073aa:	4613      	mov	r3, r2
 80073ac:	eb42 0303 	adc.w	r3, r2, r3
 80073b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80073b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80073ba:	f7f9 fc45 	bl	8000c48 <__aeabi_uldivmod>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4611      	mov	r1, r2
 80073c4:	4b3b      	ldr	r3, [pc, #236]	@ (80074b4 <UART_SetConfig+0x2d4>)
 80073c6:	fba3 2301 	umull	r2, r3, r3, r1
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	2264      	movs	r2, #100	@ 0x64
 80073ce:	fb02 f303 	mul.w	r3, r2, r3
 80073d2:	1acb      	subs	r3, r1, r3
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80073da:	4b36      	ldr	r3, [pc, #216]	@ (80074b4 <UART_SetConfig+0x2d4>)
 80073dc:	fba3 2302 	umull	r2, r3, r3, r2
 80073e0:	095b      	lsrs	r3, r3, #5
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80073e8:	441c      	add	r4, r3
 80073ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80073f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80073fc:	4642      	mov	r2, r8
 80073fe:	464b      	mov	r3, r9
 8007400:	1891      	adds	r1, r2, r2
 8007402:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007404:	415b      	adcs	r3, r3
 8007406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800740c:	4641      	mov	r1, r8
 800740e:	1851      	adds	r1, r2, r1
 8007410:	6339      	str	r1, [r7, #48]	@ 0x30
 8007412:	4649      	mov	r1, r9
 8007414:	414b      	adcs	r3, r1
 8007416:	637b      	str	r3, [r7, #52]	@ 0x34
 8007418:	f04f 0200 	mov.w	r2, #0
 800741c:	f04f 0300 	mov.w	r3, #0
 8007420:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007424:	4659      	mov	r1, fp
 8007426:	00cb      	lsls	r3, r1, #3
 8007428:	4651      	mov	r1, sl
 800742a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800742e:	4651      	mov	r1, sl
 8007430:	00ca      	lsls	r2, r1, #3
 8007432:	4610      	mov	r0, r2
 8007434:	4619      	mov	r1, r3
 8007436:	4603      	mov	r3, r0
 8007438:	4642      	mov	r2, r8
 800743a:	189b      	adds	r3, r3, r2
 800743c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007440:	464b      	mov	r3, r9
 8007442:	460a      	mov	r2, r1
 8007444:	eb42 0303 	adc.w	r3, r2, r3
 8007448:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800744c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007458:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800745c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007460:	460b      	mov	r3, r1
 8007462:	18db      	adds	r3, r3, r3
 8007464:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007466:	4613      	mov	r3, r2
 8007468:	eb42 0303 	adc.w	r3, r2, r3
 800746c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800746e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007472:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007476:	f7f9 fbe7 	bl	8000c48 <__aeabi_uldivmod>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4b0d      	ldr	r3, [pc, #52]	@ (80074b4 <UART_SetConfig+0x2d4>)
 8007480:	fba3 1302 	umull	r1, r3, r3, r2
 8007484:	095b      	lsrs	r3, r3, #5
 8007486:	2164      	movs	r1, #100	@ 0x64
 8007488:	fb01 f303 	mul.w	r3, r1, r3
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	3332      	adds	r3, #50	@ 0x32
 8007492:	4a08      	ldr	r2, [pc, #32]	@ (80074b4 <UART_SetConfig+0x2d4>)
 8007494:	fba2 2303 	umull	r2, r3, r2, r3
 8007498:	095b      	lsrs	r3, r3, #5
 800749a:	f003 0207 	and.w	r2, r3, #7
 800749e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4422      	add	r2, r4
 80074a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074a8:	e106      	b.n	80076b8 <UART_SetConfig+0x4d8>
 80074aa:	bf00      	nop
 80074ac:	40011000 	.word	0x40011000
 80074b0:	40011400 	.word	0x40011400
 80074b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074bc:	2200      	movs	r2, #0
 80074be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80074c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80074ca:	4642      	mov	r2, r8
 80074cc:	464b      	mov	r3, r9
 80074ce:	1891      	adds	r1, r2, r2
 80074d0:	6239      	str	r1, [r7, #32]
 80074d2:	415b      	adcs	r3, r3
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80074d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074da:	4641      	mov	r1, r8
 80074dc:	1854      	adds	r4, r2, r1
 80074de:	4649      	mov	r1, r9
 80074e0:	eb43 0501 	adc.w	r5, r3, r1
 80074e4:	f04f 0200 	mov.w	r2, #0
 80074e8:	f04f 0300 	mov.w	r3, #0
 80074ec:	00eb      	lsls	r3, r5, #3
 80074ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074f2:	00e2      	lsls	r2, r4, #3
 80074f4:	4614      	mov	r4, r2
 80074f6:	461d      	mov	r5, r3
 80074f8:	4643      	mov	r3, r8
 80074fa:	18e3      	adds	r3, r4, r3
 80074fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007500:	464b      	mov	r3, r9
 8007502:	eb45 0303 	adc.w	r3, r5, r3
 8007506:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800750a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007516:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800751a:	f04f 0200 	mov.w	r2, #0
 800751e:	f04f 0300 	mov.w	r3, #0
 8007522:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007526:	4629      	mov	r1, r5
 8007528:	008b      	lsls	r3, r1, #2
 800752a:	4621      	mov	r1, r4
 800752c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007530:	4621      	mov	r1, r4
 8007532:	008a      	lsls	r2, r1, #2
 8007534:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007538:	f7f9 fb86 	bl	8000c48 <__aeabi_uldivmod>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4b60      	ldr	r3, [pc, #384]	@ (80076c4 <UART_SetConfig+0x4e4>)
 8007542:	fba3 2302 	umull	r2, r3, r3, r2
 8007546:	095b      	lsrs	r3, r3, #5
 8007548:	011c      	lsls	r4, r3, #4
 800754a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800754e:	2200      	movs	r2, #0
 8007550:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007554:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007558:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800755c:	4642      	mov	r2, r8
 800755e:	464b      	mov	r3, r9
 8007560:	1891      	adds	r1, r2, r2
 8007562:	61b9      	str	r1, [r7, #24]
 8007564:	415b      	adcs	r3, r3
 8007566:	61fb      	str	r3, [r7, #28]
 8007568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800756c:	4641      	mov	r1, r8
 800756e:	1851      	adds	r1, r2, r1
 8007570:	6139      	str	r1, [r7, #16]
 8007572:	4649      	mov	r1, r9
 8007574:	414b      	adcs	r3, r1
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	f04f 0200 	mov.w	r2, #0
 800757c:	f04f 0300 	mov.w	r3, #0
 8007580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007584:	4659      	mov	r1, fp
 8007586:	00cb      	lsls	r3, r1, #3
 8007588:	4651      	mov	r1, sl
 800758a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800758e:	4651      	mov	r1, sl
 8007590:	00ca      	lsls	r2, r1, #3
 8007592:	4610      	mov	r0, r2
 8007594:	4619      	mov	r1, r3
 8007596:	4603      	mov	r3, r0
 8007598:	4642      	mov	r2, r8
 800759a:	189b      	adds	r3, r3, r2
 800759c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075a0:	464b      	mov	r3, r9
 80075a2:	460a      	mov	r2, r1
 80075a4:	eb42 0303 	adc.w	r3, r2, r3
 80075a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	f04f 0300 	mov.w	r3, #0
 80075c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80075c4:	4649      	mov	r1, r9
 80075c6:	008b      	lsls	r3, r1, #2
 80075c8:	4641      	mov	r1, r8
 80075ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075ce:	4641      	mov	r1, r8
 80075d0:	008a      	lsls	r2, r1, #2
 80075d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80075d6:	f7f9 fb37 	bl	8000c48 <__aeabi_uldivmod>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4611      	mov	r1, r2
 80075e0:	4b38      	ldr	r3, [pc, #224]	@ (80076c4 <UART_SetConfig+0x4e4>)
 80075e2:	fba3 2301 	umull	r2, r3, r3, r1
 80075e6:	095b      	lsrs	r3, r3, #5
 80075e8:	2264      	movs	r2, #100	@ 0x64
 80075ea:	fb02 f303 	mul.w	r3, r2, r3
 80075ee:	1acb      	subs	r3, r1, r3
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	3332      	adds	r3, #50	@ 0x32
 80075f4:	4a33      	ldr	r2, [pc, #204]	@ (80076c4 <UART_SetConfig+0x4e4>)
 80075f6:	fba2 2303 	umull	r2, r3, r2, r3
 80075fa:	095b      	lsrs	r3, r3, #5
 80075fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007600:	441c      	add	r4, r3
 8007602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007606:	2200      	movs	r2, #0
 8007608:	673b      	str	r3, [r7, #112]	@ 0x70
 800760a:	677a      	str	r2, [r7, #116]	@ 0x74
 800760c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007610:	4642      	mov	r2, r8
 8007612:	464b      	mov	r3, r9
 8007614:	1891      	adds	r1, r2, r2
 8007616:	60b9      	str	r1, [r7, #8]
 8007618:	415b      	adcs	r3, r3
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007620:	4641      	mov	r1, r8
 8007622:	1851      	adds	r1, r2, r1
 8007624:	6039      	str	r1, [r7, #0]
 8007626:	4649      	mov	r1, r9
 8007628:	414b      	adcs	r3, r1
 800762a:	607b      	str	r3, [r7, #4]
 800762c:	f04f 0200 	mov.w	r2, #0
 8007630:	f04f 0300 	mov.w	r3, #0
 8007634:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007638:	4659      	mov	r1, fp
 800763a:	00cb      	lsls	r3, r1, #3
 800763c:	4651      	mov	r1, sl
 800763e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007642:	4651      	mov	r1, sl
 8007644:	00ca      	lsls	r2, r1, #3
 8007646:	4610      	mov	r0, r2
 8007648:	4619      	mov	r1, r3
 800764a:	4603      	mov	r3, r0
 800764c:	4642      	mov	r2, r8
 800764e:	189b      	adds	r3, r3, r2
 8007650:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007652:	464b      	mov	r3, r9
 8007654:	460a      	mov	r2, r1
 8007656:	eb42 0303 	adc.w	r3, r2, r3
 800765a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800765c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	663b      	str	r3, [r7, #96]	@ 0x60
 8007666:	667a      	str	r2, [r7, #100]	@ 0x64
 8007668:	f04f 0200 	mov.w	r2, #0
 800766c:	f04f 0300 	mov.w	r3, #0
 8007670:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007674:	4649      	mov	r1, r9
 8007676:	008b      	lsls	r3, r1, #2
 8007678:	4641      	mov	r1, r8
 800767a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800767e:	4641      	mov	r1, r8
 8007680:	008a      	lsls	r2, r1, #2
 8007682:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007686:	f7f9 fadf 	bl	8000c48 <__aeabi_uldivmod>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	4b0d      	ldr	r3, [pc, #52]	@ (80076c4 <UART_SetConfig+0x4e4>)
 8007690:	fba3 1302 	umull	r1, r3, r3, r2
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	2164      	movs	r1, #100	@ 0x64
 8007698:	fb01 f303 	mul.w	r3, r1, r3
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	3332      	adds	r3, #50	@ 0x32
 80076a2:	4a08      	ldr	r2, [pc, #32]	@ (80076c4 <UART_SetConfig+0x4e4>)
 80076a4:	fba2 2303 	umull	r2, r3, r2, r3
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	f003 020f 	and.w	r2, r3, #15
 80076ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4422      	add	r2, r4
 80076b6:	609a      	str	r2, [r3, #8]
}
 80076b8:	bf00      	nop
 80076ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076be:	46bd      	mov	sp, r7
 80076c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076c4:	51eb851f 	.word	0x51eb851f

080076c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076c8:	b084      	sub	sp, #16
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	f107 001c 	add.w	r0, r7, #28
 80076d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d123      	bne.n	800772a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80076f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800770a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800770e:	2b01      	cmp	r3, #1
 8007710:	d105      	bne.n	800771e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f9dc 	bl	8007adc <USB_CoreReset>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
 8007728:	e01b      	b.n	8007762 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f9d0 	bl	8007adc <USB_CoreReset>
 800773c:	4603      	mov	r3, r0
 800773e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007740:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007744:	2b00      	cmp	r3, #0
 8007746:	d106      	bne.n	8007756 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	639a      	str	r2, [r3, #56]	@ 0x38
 8007754:	e005      	b.n	8007762 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007762:	7fbb      	ldrb	r3, [r7, #30]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d10b      	bne.n	8007780 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f043 0206 	orr.w	r2, r3, #6
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f043 0220 	orr.w	r2, r3, #32
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800778c:	b004      	add	sp, #16
 800778e:	4770      	bx	lr

08007790 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f043 0201 	orr.w	r2, r3, #1
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f023 0201 	bic.w	r2, r3, #1
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d115      	bne.n	8007822 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007802:	200a      	movs	r0, #10
 8007804:	f7fa fc26 	bl	8002054 <HAL_Delay>
      ms += 10U;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	330a      	adds	r3, #10
 800780c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f956 	bl	8007ac0 <USB_GetMode>
 8007814:	4603      	mov	r3, r0
 8007816:	2b01      	cmp	r3, #1
 8007818:	d01e      	beq.n	8007858 <USB_SetCurrentMode+0x84>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2bc7      	cmp	r3, #199	@ 0xc7
 800781e:	d9f0      	bls.n	8007802 <USB_SetCurrentMode+0x2e>
 8007820:	e01a      	b.n	8007858 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d115      	bne.n	8007854 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007834:	200a      	movs	r0, #10
 8007836:	f7fa fc0d 	bl	8002054 <HAL_Delay>
      ms += 10U;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	330a      	adds	r3, #10
 800783e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f93d 	bl	8007ac0 <USB_GetMode>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <USB_SetCurrentMode+0x84>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007850:	d9f0      	bls.n	8007834 <USB_SetCurrentMode+0x60>
 8007852:	e001      	b.n	8007858 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e005      	b.n	8007864 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2bc8      	cmp	r3, #200	@ 0xc8
 800785c:	d101      	bne.n	8007862 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3301      	adds	r3, #1
 800787e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007886:	d901      	bls.n	800788c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e01b      	b.n	80078c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	daf2      	bge.n	800787a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007894:	2300      	movs	r3, #0
 8007896:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	019b      	lsls	r3, r3, #6
 800789c:	f043 0220 	orr.w	r2, r3, #32
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3301      	adds	r3, #1
 80078a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078b0:	d901      	bls.n	80078b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e006      	b.n	80078c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	f003 0320 	and.w	r3, r3, #32
 80078be:	2b20      	cmp	r3, #32
 80078c0:	d0f0      	beq.n	80078a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3301      	adds	r3, #1
 80078e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078e8:	d901      	bls.n	80078ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e018      	b.n	8007920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	daf2      	bge.n	80078dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2210      	movs	r2, #16
 80078fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3301      	adds	r3, #1
 8007904:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800790c:	d901      	bls.n	8007912 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e006      	b.n	8007920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	2b10      	cmp	r3, #16
 800791c:	d0f0      	beq.n	8007900 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800792c:	b480      	push	{r7}
 800792e:	b089      	sub	sp, #36	@ 0x24
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	4611      	mov	r1, r2
 8007938:	461a      	mov	r2, r3
 800793a:	460b      	mov	r3, r1
 800793c:	71fb      	strb	r3, [r7, #7]
 800793e:	4613      	mov	r3, r2
 8007940:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800794a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800794e:	2b00      	cmp	r3, #0
 8007950:	d123      	bne.n	800799a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007952:	88bb      	ldrh	r3, [r7, #4]
 8007954:	3303      	adds	r3, #3
 8007956:	089b      	lsrs	r3, r3, #2
 8007958:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800795a:	2300      	movs	r3, #0
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	e018      	b.n	8007992 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	031a      	lsls	r2, r3, #12
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	4413      	add	r3, r2
 8007968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800796c:	461a      	mov	r2, r3
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	3301      	adds	r3, #1
 8007978:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	3301      	adds	r3, #1
 800797e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	3301      	adds	r3, #1
 8007984:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	3301      	adds	r3, #1
 800798a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	3301      	adds	r3, #1
 8007990:	61bb      	str	r3, [r7, #24]
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	429a      	cmp	r2, r3
 8007998:	d3e2      	bcc.n	8007960 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3724      	adds	r7, #36	@ 0x24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b08b      	sub	sp, #44	@ 0x2c
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	4613      	mov	r3, r2
 80079b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80079be:	88fb      	ldrh	r3, [r7, #6]
 80079c0:	089b      	lsrs	r3, r3, #2
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80079c6:	88fb      	ldrh	r3, [r7, #6]
 80079c8:	f003 0303 	and.w	r3, r3, #3
 80079cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80079ce:	2300      	movs	r3, #0
 80079d0:	623b      	str	r3, [r7, #32]
 80079d2:	e014      	b.n	80079fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079de:	601a      	str	r2, [r3, #0]
    pDest++;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e2:	3301      	adds	r3, #1
 80079e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80079e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e8:	3301      	adds	r3, #1
 80079ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80079ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ee:	3301      	adds	r3, #1
 80079f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	3301      	adds	r3, #1
 80079f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	3301      	adds	r3, #1
 80079fc:	623b      	str	r3, [r7, #32]
 80079fe:	6a3a      	ldr	r2, [r7, #32]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d3e6      	bcc.n	80079d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a06:	8bfb      	ldrh	r3, [r7, #30]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01e      	beq.n	8007a4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a16:	461a      	mov	r2, r3
 8007a18:	f107 0310 	add.w	r3, r7, #16
 8007a1c:	6812      	ldr	r2, [r2, #0]
 8007a1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	fa22 f303 	lsr.w	r3, r2, r3
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	701a      	strb	r2, [r3, #0]
      i++;
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	3301      	adds	r3, #1
 8007a36:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007a3e:	8bfb      	ldrh	r3, [r7, #30]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a44:	8bfb      	ldrh	r3, [r7, #30]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1ea      	bne.n	8007a20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	372c      	adds	r7, #44	@ 0x2c
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a70:	68fb      	ldr	r3, [r7, #12]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b085      	sub	sp, #20
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	460b      	mov	r3, r1
 8007a88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	f003 0301 	and.w	r3, r3, #1
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3301      	adds	r3, #1
 8007aec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007af4:	d901      	bls.n	8007afa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e022      	b.n	8007b40 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	daf2      	bge.n	8007ae8 <USB_CoreReset+0xc>

  count = 10U;
 8007b02:	230a      	movs	r3, #10
 8007b04:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007b06:	e002      	b.n	8007b0e <USB_CoreReset+0x32>
  {
    count--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1f9      	bne.n	8007b08 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f043 0201 	orr.w	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3301      	adds	r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b2c:	d901      	bls.n	8007b32 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e006      	b.n	8007b40 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d0f0      	beq.n	8007b20 <USB_CoreReset+0x44>

  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b086      	sub	sp, #24
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	2300      	movs	r3, #0
 8007b70:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b82:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b8e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d119      	bne.n	8007bd6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d10a      	bne.n	8007bc0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007bb8:	f043 0304 	orr.w	r3, r3, #4
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	e014      	b.n	8007bea <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007bce:	f023 0304 	bic.w	r3, r3, #4
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	e009      	b.n	8007bea <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007be4:	f023 0304 	bic.w	r3, r3, #4
 8007be8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bea:	2110      	movs	r1, #16
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff fe3d 	bl	800786c <USB_FlushTxFifo>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7ff fe67 	bl	80078d0 <USB_FlushRxFifo>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	613b      	str	r3, [r7, #16]
 8007c10:	e015      	b.n	8007c3e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f04f 33ff 	mov.w	r3, #4294967295
 8007c24:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c32:	461a      	mov	r2, r3
 8007c34:	2300      	movs	r3, #0
 8007c36:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	613b      	str	r3, [r7, #16]
 8007c3e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007c42:	461a      	mov	r2, r3
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d3e3      	bcc.n	8007c12 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f04f 32ff 	mov.w	r2, #4294967295
 8007c56:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a18      	ldr	r2, [pc, #96]	@ (8007cbc <USB_HostInit+0x170>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d10b      	bne.n	8007c78 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c66:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a15      	ldr	r2, [pc, #84]	@ (8007cc0 <USB_HostInit+0x174>)
 8007c6c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a14      	ldr	r2, [pc, #80]	@ (8007cc4 <USB_HostInit+0x178>)
 8007c72:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007c76:	e009      	b.n	8007c8c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2280      	movs	r2, #128	@ 0x80
 8007c7c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a11      	ldr	r2, [pc, #68]	@ (8007cc8 <USB_HostInit+0x17c>)
 8007c82:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a11      	ldr	r2, [pc, #68]	@ (8007ccc <USB_HostInit+0x180>)
 8007c88:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d105      	bne.n	8007ca0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	f043 0210 	orr.w	r2, r3, #16
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	699a      	ldr	r2, [r3, #24]
 8007ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd0 <USB_HostInit+0x184>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cb8:	b004      	add	sp, #16
 8007cba:	4770      	bx	lr
 8007cbc:	40040000 	.word	0x40040000
 8007cc0:	01000200 	.word	0x01000200
 8007cc4:	00e00300 	.word	0x00e00300
 8007cc8:	00600080 	.word	0x00600080
 8007ccc:	004000e0 	.word	0x004000e0
 8007cd0:	a3200008 	.word	0xa3200008

08007cd4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007cf2:	f023 0303 	bic.w	r3, r3, #3
 8007cf6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	f003 0303 	and.w	r3, r3, #3
 8007d06:	68f9      	ldr	r1, [r7, #12]
 8007d08:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d107      	bne.n	8007d26 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007d22:	6053      	str	r3, [r2, #4]
 8007d24:	e00c      	b.n	8007d40 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d107      	bne.n	8007d3c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d32:	461a      	mov	r2, r3
 8007d34:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007d38:	6053      	str	r3, [r2, #4]
 8007d3a:	e001      	b.n	8007d40 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e000      	b.n	8007d42 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007d6e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d7c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007d7e:	2064      	movs	r0, #100	@ 0x64
 8007d80:	f7fa f968 	bl	8002054 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007d8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d90:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007d92:	200a      	movs	r0, #10
 8007d94:	f7fa f95e 	bl	8002054 <HAL_Delay>

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b085      	sub	sp, #20
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	460b      	mov	r3, r1
 8007dac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007dc6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <USB_DriveVbus+0x44>
 8007dd2:	78fb      	ldrb	r3, [r7, #3]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d106      	bne.n	8007de6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007de0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007de4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007df0:	d109      	bne.n	8007e06 <USB_DriveVbus+0x64>
 8007df2:	78fb      	ldrb	r3, [r7, #3]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d106      	bne.n	8007e06 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007e00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e04:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	0c5b      	lsrs	r3, r3, #17
 8007e32:	f003 0303 	and.w	r3, r3, #3
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b085      	sub	sp, #20
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	b29b      	uxth	r3, r3
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	4611      	mov	r1, r2
 8007e70:	461a      	mov	r2, r3
 8007e72:	4603      	mov	r3, r0
 8007e74:	70fb      	strb	r3, [r7, #3]
 8007e76:	460b      	mov	r3, r1
 8007e78:	70bb      	strb	r3, [r7, #2]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007e86:	78fb      	ldrb	r3, [r7, #3]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e92:	461a      	mov	r2, r3
 8007e94:	f04f 33ff 	mov.w	r3, #4294967295
 8007e98:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007e9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d87c      	bhi.n	8007f9c <USB_HC_Init+0x138>
 8007ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea8 <USB_HC_Init+0x44>)
 8007ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea8:	08007eb9 	.word	0x08007eb9
 8007eac:	08007f5f 	.word	0x08007f5f
 8007eb0:	08007eb9 	.word	0x08007eb9
 8007eb4:	08007f21 	.word	0x08007f21
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007eb8:	78fb      	ldrb	r3, [r7, #3]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007eca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007ecc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	da10      	bge.n	8007ef6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	78fa      	ldrb	r2, [r7, #3]
 8007ee4:	0151      	lsls	r1, r2, #5
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	440a      	add	r2, r1
 8007eea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ef2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007ef4:	e055      	b.n	8007fa2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a6f      	ldr	r2, [pc, #444]	@ (80080b8 <USB_HC_Init+0x254>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d151      	bne.n	8007fa2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	0151      	lsls	r1, r2, #5
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	440a      	add	r2, r1
 8007f14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f18:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007f1c:	60d3      	str	r3, [r2, #12]
      break;
 8007f1e:	e040      	b.n	8007fa2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007f32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007f34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	da34      	bge.n	8007fa6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	78fa      	ldrb	r2, [r7, #3]
 8007f4c:	0151      	lsls	r1, r2, #5
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	440a      	add	r2, r1
 8007f52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f5a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007f5c:	e023      	b.n	8007fa6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	f240 2325 	movw	r3, #549	@ 0x225
 8007f70:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007f72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	da17      	bge.n	8007faa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	78fa      	ldrb	r2, [r7, #3]
 8007f8a:	0151      	lsls	r1, r2, #5
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	440a      	add	r2, r1
 8007f90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f94:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007f98:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007f9a:	e006      	b.n	8007faa <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	77fb      	strb	r3, [r7, #31]
      break;
 8007fa0:	e004      	b.n	8007fac <USB_HC_Init+0x148>
      break;
 8007fa2:	bf00      	nop
 8007fa4:	e002      	b.n	8007fac <USB_HC_Init+0x148>
      break;
 8007fa6:	bf00      	nop
 8007fa8:	e000      	b.n	8007fac <USB_HC_Init+0x148>
      break;
 8007faa:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007fac:	78fb      	ldrb	r3, [r7, #3]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fb8:	461a      	mov	r2, r3
 8007fba:	2300      	movs	r3, #0
 8007fbc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007fbe:	78fb      	ldrb	r3, [r7, #3]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	78fa      	ldrb	r2, [r7, #3]
 8007fce:	0151      	lsls	r1, r2, #5
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	440a      	add	r2, r1
 8007fd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fd8:	f043 0302 	orr.w	r3, r3, #2
 8007fdc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fe4:	699a      	ldr	r2, [r3, #24]
 8007fe6:	78fb      	ldrb	r3, [r7, #3]
 8007fe8:	f003 030f 	and.w	r3, r3, #15
 8007fec:	2101      	movs	r1, #1
 8007fee:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff2:	6939      	ldr	r1, [r7, #16]
 8007ff4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008008:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800800c:	2b00      	cmp	r3, #0
 800800e:	da03      	bge.n	8008018 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008010:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008014:	61bb      	str	r3, [r7, #24]
 8008016:	e001      	b.n	800801c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff fef9 	bl	8007e14 <USB_GetHostSpeed>
 8008022:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008024:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008028:	2b02      	cmp	r3, #2
 800802a:	d106      	bne.n	800803a <USB_HC_Init+0x1d6>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b02      	cmp	r3, #2
 8008030:	d003      	beq.n	800803a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008032:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	e001      	b.n	800803e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800803e:	787b      	ldrb	r3, [r7, #1]
 8008040:	059b      	lsls	r3, r3, #22
 8008042:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008046:	78bb      	ldrb	r3, [r7, #2]
 8008048:	02db      	lsls	r3, r3, #11
 800804a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800804e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008050:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008054:	049b      	lsls	r3, r3, #18
 8008056:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800805a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800805c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800805e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008062:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	431a      	orrs	r2, r3
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800806c:	78fa      	ldrb	r2, [r7, #3]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	440a      	add	r2, r1
 8008074:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008078:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800807c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800807e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008082:	2b03      	cmp	r3, #3
 8008084:	d003      	beq.n	800808e <USB_HC_Init+0x22a>
 8008086:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800808a:	2b01      	cmp	r3, #1
 800808c:	d10f      	bne.n	80080ae <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800808e:	78fb      	ldrb	r3, [r7, #3]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	4413      	add	r3, r2
 8008096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	78fa      	ldrb	r2, [r7, #3]
 800809e:	0151      	lsls	r1, r2, #5
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	440a      	add	r2, r1
 80080a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80080ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80080ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3720      	adds	r7, #32
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40040000 	.word	0x40040000

080080bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08c      	sub	sp, #48	@ 0x30
 80080c0:	af02      	add	r7, sp, #8
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	4613      	mov	r3, r2
 80080c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80080d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80080d8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4a5d      	ldr	r2, [pc, #372]	@ (8008254 <USB_HC_StartXfer+0x198>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d12f      	bne.n	8008142 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d11c      	bne.n	8008122 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	7c9b      	ldrb	r3, [r3, #18]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <USB_HC_StartXfer+0x3c>
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	7c9b      	ldrb	r3, [r3, #18]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d124      	bne.n	8008142 <USB_HC_StartXfer+0x86>
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	799b      	ldrb	r3, [r3, #6]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d120      	bne.n	8008142 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	4413      	add	r3, r2
 8008108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	69fa      	ldr	r2, [r7, #28]
 8008110:	0151      	lsls	r1, r2, #5
 8008112:	6a3a      	ldr	r2, [r7, #32]
 8008114:	440a      	add	r2, r1
 8008116:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800811a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811e:	60d3      	str	r3, [r2, #12]
 8008120:	e00f      	b.n	8008142 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	791b      	ldrb	r3, [r3, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10b      	bne.n	8008142 <USB_HC_StartXfer+0x86>
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	795b      	ldrb	r3, [r3, #5]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d107      	bne.n	8008142 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	785b      	ldrb	r3, [r3, #1]
 8008136:	4619      	mov	r1, r3
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 fb6b 	bl	8008814 <USB_DoPing>
        return HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	e232      	b.n	80085a8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	799b      	ldrb	r3, [r3, #6]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d158      	bne.n	80081fc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800814a:	2301      	movs	r3, #1
 800814c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	78db      	ldrb	r3, [r3, #3]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d007      	beq.n	8008166 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008156:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	8a92      	ldrh	r2, [r2, #20]
 800815c:	fb03 f202 	mul.w	r2, r3, r2
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	61da      	str	r2, [r3, #28]
 8008164:	e07c      	b.n	8008260 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	7c9b      	ldrb	r3, [r3, #18]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d130      	bne.n	80081d0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	2bbc      	cmp	r3, #188	@ 0xbc
 8008174:	d918      	bls.n	80081a8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	8a9b      	ldrh	r3, [r3, #20]
 800817a:	461a      	mov	r2, r3
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	69da      	ldr	r2, [r3, #28]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d003      	beq.n	8008198 <USB_HC_StartXfer+0xdc>
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	2b02      	cmp	r3, #2
 8008196:	d103      	bne.n	80081a0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2202      	movs	r2, #2
 800819c:	60da      	str	r2, [r3, #12]
 800819e:	e05f      	b.n	8008260 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2201      	movs	r2, #1
 80081a4:	60da      	str	r2, [r3, #12]
 80081a6:	e05b      	b.n	8008260 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	6a1a      	ldr	r2, [r3, #32]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d007      	beq.n	80081c8 <USB_HC_StartXfer+0x10c>
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d003      	beq.n	80081c8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2204      	movs	r2, #4
 80081c4:	60da      	str	r2, [r3, #12]
 80081c6:	e04b      	b.n	8008260 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2203      	movs	r2, #3
 80081cc:	60da      	str	r2, [r3, #12]
 80081ce:	e047      	b.n	8008260 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80081d0:	79fb      	ldrb	r3, [r7, #7]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d10d      	bne.n	80081f2 <USB_HC_StartXfer+0x136>
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	8a92      	ldrh	r2, [r2, #20]
 80081de:	4293      	cmp	r3, r2
 80081e0:	d907      	bls.n	80081f2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	8a92      	ldrh	r2, [r2, #20]
 80081e8:	fb03 f202 	mul.w	r2, r3, r2
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	61da      	str	r2, [r3, #28]
 80081f0:	e036      	b.n	8008260 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	6a1a      	ldr	r2, [r3, #32]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	61da      	str	r2, [r3, #28]
 80081fa:	e031      	b.n	8008260 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d018      	beq.n	8008236 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	8a92      	ldrh	r2, [r2, #20]
 800820c:	4413      	add	r3, r2
 800820e:	3b01      	subs	r3, #1
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	8a92      	ldrh	r2, [r2, #20]
 8008214:	fbb3 f3f2 	udiv	r3, r3, r2
 8008218:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800821a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800821c:	8b7b      	ldrh	r3, [r7, #26]
 800821e:	429a      	cmp	r2, r3
 8008220:	d90b      	bls.n	800823a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008222:	8b7b      	ldrh	r3, [r7, #26]
 8008224:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008226:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	8a92      	ldrh	r2, [r2, #20]
 800822c:	fb03 f202 	mul.w	r2, r3, r2
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	61da      	str	r2, [r3, #28]
 8008234:	e001      	b.n	800823a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008236:	2301      	movs	r3, #1
 8008238:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	78db      	ldrb	r3, [r3, #3]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008242:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	8a92      	ldrh	r2, [r2, #20]
 8008248:	fb03 f202 	mul.w	r2, r3, r2
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	61da      	str	r2, [r3, #28]
 8008250:	e006      	b.n	8008260 <USB_HC_StartXfer+0x1a4>
 8008252:	bf00      	nop
 8008254:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	6a1a      	ldr	r2, [r3, #32]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008268:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800826a:	04d9      	lsls	r1, r3, #19
 800826c:	4ba3      	ldr	r3, [pc, #652]	@ (80084fc <USB_HC_StartXfer+0x440>)
 800826e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008270:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	7d9b      	ldrb	r3, [r3, #22]
 8008276:	075b      	lsls	r3, r3, #29
 8008278:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800827c:	69f9      	ldr	r1, [r7, #28]
 800827e:	0148      	lsls	r0, r1, #5
 8008280:	6a39      	ldr	r1, [r7, #32]
 8008282:	4401      	add	r1, r0
 8008284:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008288:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800828a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800828c:	79fb      	ldrb	r3, [r7, #7]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d009      	beq.n	80082a6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	6999      	ldr	r1, [r3, #24]
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	4413      	add	r3, r2
 800829e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082a2:	460a      	mov	r2, r1
 80082a4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	bf0c      	ite	eq
 80082b6:	2301      	moveq	r3, #1
 80082b8:	2300      	movne	r3, #0
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69fa      	ldr	r2, [r7, #28]
 80082ce:	0151      	lsls	r1, r2, #5
 80082d0:	6a3a      	ldr	r2, [r7, #32]
 80082d2:	440a      	add	r2, r1
 80082d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80082dc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	7e7b      	ldrb	r3, [r7, #25]
 80082ee:	075b      	lsls	r3, r3, #29
 80082f0:	69f9      	ldr	r1, [r7, #28]
 80082f2:	0148      	lsls	r0, r1, #5
 80082f4:	6a39      	ldr	r1, [r7, #32]
 80082f6:	4401      	add	r1, r0
 80082f8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80082fc:	4313      	orrs	r3, r2
 80082fe:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	799b      	ldrb	r3, [r3, #6]
 8008304:	2b01      	cmp	r3, #1
 8008306:	f040 80c3 	bne.w	8008490 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	7c5b      	ldrb	r3, [r3, #17]
 800830e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008314:	4313      	orrs	r3, r2
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	0151      	lsls	r1, r2, #5
 800831a:	6a3a      	ldr	r2, [r7, #32]
 800831c:	440a      	add	r2, r1
 800831e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008322:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008326:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	4413      	add	r3, r2
 8008330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	69fa      	ldr	r2, [r7, #28]
 8008338:	0151      	lsls	r1, r2, #5
 800833a:	6a3a      	ldr	r2, [r7, #32]
 800833c:	440a      	add	r2, r1
 800833e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008342:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008346:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	79db      	ldrb	r3, [r3, #7]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d123      	bne.n	8008398 <USB_HC_StartXfer+0x2dc>
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	78db      	ldrb	r3, [r3, #3]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d11f      	bne.n	8008398 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	4413      	add	r3, r2
 8008360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	69fa      	ldr	r2, [r7, #28]
 8008368:	0151      	lsls	r1, r2, #5
 800836a:	6a3a      	ldr	r2, [r7, #32]
 800836c:	440a      	add	r2, r1
 800836e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008376:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	4413      	add	r3, r2
 8008380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	69fa      	ldr	r2, [r7, #28]
 8008388:	0151      	lsls	r1, r2, #5
 800838a:	6a3a      	ldr	r2, [r7, #32]
 800838c:	440a      	add	r2, r1
 800838e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008396:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	7c9b      	ldrb	r3, [r3, #18]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d003      	beq.n	80083a8 <USB_HC_StartXfer+0x2ec>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	7c9b      	ldrb	r3, [r3, #18]
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d117      	bne.n	80083d8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d113      	bne.n	80083d8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	78db      	ldrb	r3, [r3, #3]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d10f      	bne.n	80083d8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	0151      	lsls	r1, r2, #5
 80083ca:	6a3a      	ldr	r2, [r7, #32]
 80083cc:	440a      	add	r2, r1
 80083ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083d6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	7c9b      	ldrb	r3, [r3, #18]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d162      	bne.n	80084a6 <USB_HC_StartXfer+0x3ea>
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	78db      	ldrb	r3, [r3, #3]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d15e      	bne.n	80084a6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d858      	bhi.n	80084a4 <USB_HC_StartXfer+0x3e8>
 80083f2:	a201      	add	r2, pc, #4	@ (adr r2, 80083f8 <USB_HC_StartXfer+0x33c>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	08008409 	.word	0x08008409
 80083fc:	0800842b 	.word	0x0800842b
 8008400:	0800844d 	.word	0x0800844d
 8008404:	0800846f 	.word	0x0800846f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	4413      	add	r3, r2
 8008410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	69fa      	ldr	r2, [r7, #28]
 8008418:	0151      	lsls	r1, r2, #5
 800841a:	6a3a      	ldr	r2, [r7, #32]
 800841c:	440a      	add	r2, r1
 800841e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008426:	6053      	str	r3, [r2, #4]
          break;
 8008428:	e03d      	b.n	80084a6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	4413      	add	r3, r2
 8008432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	69fa      	ldr	r2, [r7, #28]
 800843a:	0151      	lsls	r1, r2, #5
 800843c:	6a3a      	ldr	r2, [r7, #32]
 800843e:	440a      	add	r2, r1
 8008440:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008444:	f043 030e 	orr.w	r3, r3, #14
 8008448:	6053      	str	r3, [r2, #4]
          break;
 800844a:	e02c      	b.n	80084a6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	4413      	add	r3, r2
 8008454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	6a3a      	ldr	r2, [r7, #32]
 8008460:	440a      	add	r2, r1
 8008462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008466:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800846a:	6053      	str	r3, [r2, #4]
          break;
 800846c:	e01b      	b.n	80084a6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	4413      	add	r3, r2
 8008476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	69fa      	ldr	r2, [r7, #28]
 800847e:	0151      	lsls	r1, r2, #5
 8008480:	6a3a      	ldr	r2, [r7, #32]
 8008482:	440a      	add	r2, r1
 8008484:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008488:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800848c:	6053      	str	r3, [r2, #4]
          break;
 800848e:	e00a      	b.n	80084a6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	4413      	add	r3, r2
 8008498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800849c:	461a      	mov	r2, r3
 800849e:	2300      	movs	r3, #0
 80084a0:	6053      	str	r3, [r2, #4]
 80084a2:	e000      	b.n	80084a6 <USB_HC_StartXfer+0x3ea>
          break;
 80084a4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80084bc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	78db      	ldrb	r3, [r3, #3]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d004      	beq.n	80084d0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084cc:	613b      	str	r3, [r7, #16]
 80084ce:	e003      	b.n	80084d8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084d6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084de:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ec:	461a      	mov	r2, r3
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	e055      	b.n	80085a8 <USB_HC_StartXfer+0x4ec>
 80084fc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	78db      	ldrb	r3, [r3, #3]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d14e      	bne.n	80085a6 <USB_HC_StartXfer+0x4ea>
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d04a      	beq.n	80085a6 <USB_HC_StartXfer+0x4ea>
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	79db      	ldrb	r3, [r3, #7]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d146      	bne.n	80085a6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	7c9b      	ldrb	r3, [r3, #18]
 800851c:	2b03      	cmp	r3, #3
 800851e:	d831      	bhi.n	8008584 <USB_HC_StartXfer+0x4c8>
 8008520:	a201      	add	r2, pc, #4	@ (adr r2, 8008528 <USB_HC_StartXfer+0x46c>)
 8008522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008526:	bf00      	nop
 8008528:	08008539 	.word	0x08008539
 800852c:	0800855d 	.word	0x0800855d
 8008530:	08008539 	.word	0x08008539
 8008534:	0800855d 	.word	0x0800855d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	3303      	adds	r3, #3
 800853e:	089b      	lsrs	r3, r3, #2
 8008540:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008542:	8afa      	ldrh	r2, [r7, #22]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008548:	b29b      	uxth	r3, r3
 800854a:	429a      	cmp	r2, r3
 800854c:	d91c      	bls.n	8008588 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	f043 0220 	orr.w	r2, r3, #32
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	619a      	str	r2, [r3, #24]
        }
        break;
 800855a:	e015      	b.n	8008588 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	3303      	adds	r3, #3
 8008562:	089b      	lsrs	r3, r3, #2
 8008564:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008566:	8afa      	ldrh	r2, [r7, #22]
 8008568:	6a3b      	ldr	r3, [r7, #32]
 800856a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	b29b      	uxth	r3, r3
 8008572:	429a      	cmp	r2, r3
 8008574:	d90a      	bls.n	800858c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	619a      	str	r2, [r3, #24]
        }
        break;
 8008582:	e003      	b.n	800858c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008584:	bf00      	nop
 8008586:	e002      	b.n	800858e <USB_HC_StartXfer+0x4d2>
        break;
 8008588:	bf00      	nop
 800858a:	e000      	b.n	800858e <USB_HC_StartXfer+0x4d2>
        break;
 800858c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	6999      	ldr	r1, [r3, #24]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	785a      	ldrb	r2, [r3, #1]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	b29b      	uxth	r3, r3
 800859c:	2000      	movs	r0, #0
 800859e:	9000      	str	r0, [sp, #0]
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7ff f9c3 	bl	800792c <USB_WritePacket>
  }

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3728      	adds	r7, #40	@ 0x28
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	b29b      	uxth	r3, r3
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b089      	sub	sp, #36	@ 0x24
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80085e2:	78fb      	ldrb	r3, [r7, #3]
 80085e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80085e6:	2300      	movs	r3, #0
 80085e8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	0c9b      	lsrs	r3, r3, #18
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	4413      	add	r3, r2
 8008608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	0fdb      	lsrs	r3, r3, #31
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	4413      	add	r3, r2
 800861e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	0fdb      	lsrs	r3, r3, #31
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f003 0320 	and.w	r3, r3, #32
 8008634:	2b20      	cmp	r3, #32
 8008636:	d10d      	bne.n	8008654 <USB_HC_Halt+0x82>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10a      	bne.n	8008654 <USB_HC_Halt+0x82>
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d005      	beq.n	8008650 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d002      	beq.n	8008650 <USB_HC_Halt+0x7e>
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2b03      	cmp	r3, #3
 800864e:	d101      	bne.n	8008654 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	e0d8      	b.n	8008806 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <USB_HC_Halt+0x8e>
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d173      	bne.n	8008748 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	4413      	add	r3, r2
 8008668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	0151      	lsls	r1, r2, #5
 8008672:	69fa      	ldr	r2, [r7, #28]
 8008674:	440a      	add	r2, r1
 8008676:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800867a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800867e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b00      	cmp	r3, #0
 800868a:	d14a      	bne.n	8008722 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008690:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d133      	bne.n	8008700 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	69fa      	ldr	r2, [r7, #28]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086b6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	0151      	lsls	r1, r2, #5
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	440a      	add	r2, r1
 80086ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80086d6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	3301      	adds	r3, #1
 80086dc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80086e4:	d82e      	bhi.n	8008744 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086fc:	d0ec      	beq.n	80086d8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80086fe:	e081      	b.n	8008804 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	4413      	add	r3, r2
 8008708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	0151      	lsls	r1, r2, #5
 8008712:	69fa      	ldr	r2, [r7, #28]
 8008714:	440a      	add	r2, r1
 8008716:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800871a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800871e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008720:	e070      	b.n	8008804 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	4413      	add	r3, r2
 800872a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	0151      	lsls	r1, r2, #5
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	440a      	add	r2, r1
 8008738:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800873c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008740:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008742:	e05f      	b.n	8008804 <USB_HC_Halt+0x232>
            break;
 8008744:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008746:	e05d      	b.n	8008804 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	4413      	add	r3, r2
 8008750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	0151      	lsls	r1, r2, #5
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	440a      	add	r2, r1
 800875e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008762:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008766:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d133      	bne.n	80087e0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	4413      	add	r3, r2
 8008780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	0151      	lsls	r1, r2, #5
 800878a:	69fa      	ldr	r2, [r7, #28]
 800878c:	440a      	add	r2, r1
 800878e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008792:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008796:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	69ba      	ldr	r2, [r7, #24]
 80087a8:	0151      	lsls	r1, r2, #5
 80087aa:	69fa      	ldr	r2, [r7, #28]
 80087ac:	440a      	add	r2, r1
 80087ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087b6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	3301      	adds	r3, #1
 80087bc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80087c4:	d81d      	bhi.n	8008802 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087dc:	d0ec      	beq.n	80087b8 <USB_HC_Halt+0x1e6>
 80087de:	e011      	b.n	8008804 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	0151      	lsls	r1, r2, #5
 80087f2:	69fa      	ldr	r2, [r7, #28]
 80087f4:	440a      	add	r2, r1
 80087f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	e000      	b.n	8008804 <USB_HC_Halt+0x232>
          break;
 8008802:	bf00      	nop
    }
  }

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3724      	adds	r7, #36	@ 0x24
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
	...

08008814 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008828:	2301      	movs	r3, #1
 800882a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	04da      	lsls	r2, r3, #19
 8008830:	4b15      	ldr	r3, [pc, #84]	@ (8008888 <USB_DoPing+0x74>)
 8008832:	4013      	ands	r3, r2
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	0151      	lsls	r1, r2, #5
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	440a      	add	r2, r1
 800883c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008840:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008844:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	015a      	lsls	r2, r3, #5
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	4413      	add	r3, r2
 800884e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800885c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008864:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	4413      	add	r3, r2
 800886e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008872:	461a      	mov	r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	1ff80000 	.word	0x1ff80000

0800888c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7fe ff86 	bl	80077b2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80088a6:	2110      	movs	r1, #16
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7fe ffdf 	bl	800786c <USB_FlushTxFifo>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d001      	beq.n	80088b8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff f809 	bl	80078d0 <USB_FlushRxFifo>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80088c8:	2300      	movs	r3, #0
 80088ca:	61bb      	str	r3, [r7, #24]
 80088cc:	e01f      	b.n	800890e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80088f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008902:	461a      	mov	r2, r3
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	3301      	adds	r3, #1
 800890c:	61bb      	str	r3, [r7, #24]
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	2b0f      	cmp	r3, #15
 8008912:	d9dc      	bls.n	80088ce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008914:	2300      	movs	r3, #0
 8008916:	61bb      	str	r3, [r7, #24]
 8008918:	e034      	b.n	8008984 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	4413      	add	r3, r2
 8008922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008930:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008938:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008940:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	4413      	add	r3, r2
 800894a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800894e:	461a      	mov	r2, r3
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3301      	adds	r3, #1
 8008958:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008960:	d80c      	bhi.n	800897c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	4413      	add	r3, r2
 800896a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008974:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008978:	d0ec      	beq.n	8008954 <USB_StopHost+0xc8>
 800897a:	e000      	b.n	800897e <USB_StopHost+0xf2>
        break;
 800897c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	3301      	adds	r3, #1
 8008982:	61bb      	str	r3, [r7, #24]
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	2b0f      	cmp	r3, #15
 8008988:	d9c7      	bls.n	800891a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008990:	461a      	mov	r2, r3
 8008992:	f04f 33ff 	mov.w	r3, #4294967295
 8008996:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f04f 32ff 	mov.w	r2, #4294967295
 800899e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7fe fef5 	bl	8007790 <USB_EnableGlobalInt>

  return ret;
 80089a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3720      	adds	r7, #32
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80089b0:	b590      	push	{r4, r7, lr}
 80089b2:	b089      	sub	sp, #36	@ 0x24
 80089b4:	af04      	add	r7, sp, #16
 80089b6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80089b8:	2301      	movs	r3, #1
 80089ba:	2202      	movs	r2, #2
 80089bc:	2102      	movs	r1, #2
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fc83 	bl	80092ca <USBH_FindInterface>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	2bff      	cmp	r3, #255	@ 0xff
 80089cc:	d002      	beq.n	80089d4 <USBH_CDC_InterfaceInit+0x24>
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d901      	bls.n	80089d8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80089d4:	2302      	movs	r3, #2
 80089d6:	e13d      	b.n	8008c54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fc58 	bl	8009292 <USBH_SelectInterface>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80089ec:	2302      	movs	r3, #2
 80089ee:	e131      	b.n	8008c54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80089f6:	2050      	movs	r0, #80	@ 0x50
 80089f8:	f002 fb6a 	bl	800b0d0 <malloc>
 80089fc:	4603      	mov	r3, r0
 80089fe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008a10:	2302      	movs	r3, #2
 8008a12:	e11f      	b.n	8008c54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008a14:	2250      	movs	r2, #80	@ 0x50
 8008a16:	2100      	movs	r1, #0
 8008a18:	68b8      	ldr	r0, [r7, #8]
 8008a1a:	f003 f984 	bl	800bd26 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	211a      	movs	r1, #26
 8008a24:	fb01 f303 	mul.w	r3, r1, r3
 8008a28:	4413      	add	r3, r2
 8008a2a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	b25b      	sxtb	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	da15      	bge.n	8008a62 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	211a      	movs	r1, #26
 8008a3c:	fb01 f303 	mul.w	r3, r1, r3
 8008a40:	4413      	add	r3, r2
 8008a42:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008a46:	781a      	ldrb	r2, [r3, #0]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	211a      	movs	r1, #26
 8008a52:	fb01 f303 	mul.w	r3, r1, r3
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008a5c:	881a      	ldrh	r2, [r3, #0]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f001 ffc4 	bl	800a9f6 <USBH_AllocPipe>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	461a      	mov	r2, r3
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	7819      	ldrb	r1, [r3, #0]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	7858      	ldrb	r0, [r3, #1]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	8952      	ldrh	r2, [r2, #10]
 8008a8e:	9202      	str	r2, [sp, #8]
 8008a90:	2203      	movs	r2, #3
 8008a92:	9201      	str	r2, [sp, #4]
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	4623      	mov	r3, r4
 8008a98:	4602      	mov	r2, r0
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f001 ff7c 	bl	800a998 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f002 fa8b 	bl	800afc4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008aae:	2300      	movs	r3, #0
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	210a      	movs	r1, #10
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fc08 	bl	80092ca <USBH_FindInterface>
 8008aba:	4603      	mov	r3, r0
 8008abc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	2bff      	cmp	r3, #255	@ 0xff
 8008ac2:	d002      	beq.n	8008aca <USBH_CDC_InterfaceInit+0x11a>
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d901      	bls.n	8008ace <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008aca:	2302      	movs	r3, #2
 8008acc:	e0c2      	b.n	8008c54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	211a      	movs	r1, #26
 8008ad4:	fb01 f303 	mul.w	r3, r1, r3
 8008ad8:	4413      	add	r3, r2
 8008ada:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	b25b      	sxtb	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	da16      	bge.n	8008b14 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	211a      	movs	r1, #26
 8008aec:	fb01 f303 	mul.w	r3, r1, r3
 8008af0:	4413      	add	r3, r2
 8008af2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008af6:	781a      	ldrb	r2, [r3, #0]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	211a      	movs	r1, #26
 8008b02:	fb01 f303 	mul.w	r3, r1, r3
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008b0c:	881a      	ldrh	r2, [r3, #0]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	835a      	strh	r2, [r3, #26]
 8008b12:	e015      	b.n	8008b40 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	211a      	movs	r1, #26
 8008b1a:	fb01 f303 	mul.w	r3, r1, r3
 8008b1e:	4413      	add	r3, r2
 8008b20:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008b24:	781a      	ldrb	r2, [r3, #0]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	211a      	movs	r1, #26
 8008b30:	fb01 f303 	mul.w	r3, r1, r3
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008b3a:	881a      	ldrh	r2, [r3, #0]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	211a      	movs	r1, #26
 8008b46:	fb01 f303 	mul.w	r3, r1, r3
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	b25b      	sxtb	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	da16      	bge.n	8008b86 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	211a      	movs	r1, #26
 8008b5e:	fb01 f303 	mul.w	r3, r1, r3
 8008b62:	4413      	add	r3, r2
 8008b64:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008b68:	781a      	ldrb	r2, [r3, #0]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	211a      	movs	r1, #26
 8008b74:	fb01 f303 	mul.w	r3, r1, r3
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008b7e:	881a      	ldrh	r2, [r3, #0]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	835a      	strh	r2, [r3, #26]
 8008b84:	e015      	b.n	8008bb2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	211a      	movs	r1, #26
 8008b8c:	fb01 f303 	mul.w	r3, r1, r3
 8008b90:	4413      	add	r3, r2
 8008b92:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008b96:	781a      	ldrb	r2, [r3, #0]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	211a      	movs	r1, #26
 8008ba2:	fb01 f303 	mul.w	r3, r1, r3
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008bac:	881a      	ldrh	r2, [r3, #0]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	7b9b      	ldrb	r3, [r3, #14]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 ff1c 	bl	800a9f6 <USBH_AllocPipe>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	7bdb      	ldrb	r3, [r3, #15]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f001 ff12 	bl	800a9f6 <USBH_AllocPipe>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	7b59      	ldrb	r1, [r3, #13]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	7b98      	ldrb	r0, [r3, #14]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	8b12      	ldrh	r2, [r2, #24]
 8008bf2:	9202      	str	r2, [sp, #8]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	9201      	str	r2, [sp, #4]
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f001 feca 	bl	800a998 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	7b19      	ldrb	r1, [r3, #12]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	7bd8      	ldrb	r0, [r3, #15]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	8b52      	ldrh	r2, [r2, #26]
 8008c1c:	9202      	str	r2, [sp, #8]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	9201      	str	r2, [sp, #4]
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	4623      	mov	r3, r4
 8008c26:	4602      	mov	r2, r0
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f001 feb5 	bl	800a998 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	7b5b      	ldrb	r3, [r3, #13]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f002 f9c0 	bl	800afc4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	7b1b      	ldrb	r3, [r3, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f002 f9b9 	bl	800afc4 <USBH_LL_SetToggle>

  return USBH_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd90      	pop	{r4, r7, pc}

08008c5c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c6a:	69db      	ldr	r3, [r3, #28]
 8008c6c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00e      	beq.n	8008c94 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f001 feaa 	bl	800a9d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f001 fed5 	bl	800aa38 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	7b1b      	ldrb	r3, [r3, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00e      	beq.n	8008cba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	7b1b      	ldrb	r3, [r3, #12]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 fe97 	bl	800a9d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	7b1b      	ldrb	r3, [r3, #12]
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f001 fec2 	bl	800aa38 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	7b5b      	ldrb	r3, [r3, #13]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00e      	beq.n	8008ce0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	7b5b      	ldrb	r3, [r3, #13]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 fe84 	bl	800a9d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	7b5b      	ldrb	r3, [r3, #13]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f001 feaf 	bl	800aa38 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00b      	beq.n	8008d04 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f002 f9f3 	bl	800b0e0 <free>
    phost->pActiveClass->pData = 0U;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d00:	2200      	movs	r2, #0
 8008d02:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3340      	adds	r3, #64	@ 0x40
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f8b1 	bl	8008e8e <GetLineCoding>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d105      	bne.n	8008d42 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d3c:	2102      	movs	r1, #2
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008d42:	7afb      	ldrb	r3, [r7, #11]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d54:	2301      	movs	r3, #1
 8008d56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d877      	bhi.n	8008e60 <USBH_CDC_Process+0x114>
 8008d70:	a201      	add	r2, pc, #4	@ (adr r2, 8008d78 <USBH_CDC_Process+0x2c>)
 8008d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d76:	bf00      	nop
 8008d78:	08008d8d 	.word	0x08008d8d
 8008d7c:	08008d93 	.word	0x08008d93
 8008d80:	08008dc3 	.word	0x08008dc3
 8008d84:	08008e37 	.word	0x08008e37
 8008d88:	08008e45 	.word	0x08008e45
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d90:	e06d      	b.n	8008e6e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f897 	bl	8008ecc <SetLineCoding>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d104      	bne.n	8008db2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008db0:	e058      	b.n	8008e64 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008db2:	7bbb      	ldrb	r3, [r7, #14]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d055      	beq.n	8008e64 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2204      	movs	r2, #4
 8008dbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008dc0:	e050      	b.n	8008e64 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	3340      	adds	r3, #64	@ 0x40
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f860 	bl	8008e8e <GetLineCoding>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d126      	bne.n	8008e26 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dea:	791b      	ldrb	r3, [r3, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d13b      	bne.n	8008e68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dfa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d133      	bne.n	8008e68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e0a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d12b      	bne.n	8008e68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e18:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d124      	bne.n	8008e68 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f958 	bl	80090d4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e24:	e020      	b.n	8008e68 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d01d      	beq.n	8008e68 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2204      	movs	r2, #4
 8008e30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008e34:	e018      	b.n	8008e68 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f867 	bl	8008f0a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f8da 	bl	8008ff6 <CDC_ProcessReception>
      break;
 8008e42:	e014      	b.n	8008e6e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008e44:	2100      	movs	r1, #0
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 f81e 	bl	8009e88 <USBH_ClrFeature>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e50:	7bbb      	ldrb	r3, [r7, #14]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10a      	bne.n	8008e6c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008e5e:	e005      	b.n	8008e6c <USBH_CDC_Process+0x120>

    default:
      break;
 8008e60:	bf00      	nop
 8008e62:	e004      	b.n	8008e6e <USBH_CDC_Process+0x122>
      break;
 8008e64:	bf00      	nop
 8008e66:	e002      	b.n	8008e6e <USBH_CDC_Process+0x122>
      break;
 8008e68:	bf00      	nop
 8008e6a:	e000      	b.n	8008e6e <USBH_CDC_Process+0x122>
      break;
 8008e6c:	bf00      	nop

  }

  return status;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	22a1      	movs	r2, #161	@ 0xa1
 8008e9c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2221      	movs	r2, #33	@ 0x21
 8008ea2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2207      	movs	r2, #7
 8008eb4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2207      	movs	r2, #7
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f001 fb17 	bl	800a4f0 <USBH_CtlReq>
 8008ec2:	4603      	mov	r3, r0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2221      	movs	r2, #33	@ 0x21
 8008eda:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2207      	movs	r2, #7
 8008ef2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2207      	movs	r2, #7
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 faf8 	bl	800a4f0 <USBH_CtlReq>
 8008f00:	4603      	mov	r3, r0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b086      	sub	sp, #24
 8008f0e:	af02      	add	r7, sp, #8
 8008f10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d002      	beq.n	8008f30 <CDC_ProcessTransmission+0x26>
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d023      	beq.n	8008f76 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008f2e:	e05e      	b.n	8008fee <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	8b12      	ldrh	r2, [r2, #24]
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d90b      	bls.n	8008f54 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	69d9      	ldr	r1, [r3, #28]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	8b1a      	ldrh	r2, [r3, #24]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	7b5b      	ldrb	r3, [r3, #13]
 8008f48:	2001      	movs	r0, #1
 8008f4a:	9000      	str	r0, [sp, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 fce0 	bl	800a912 <USBH_BulkSendData>
 8008f52:	e00b      	b.n	8008f6c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	7b5b      	ldrb	r3, [r3, #13]
 8008f62:	2001      	movs	r0, #1
 8008f64:	9000      	str	r0, [sp, #0]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f001 fcd3 	bl	800a912 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2202      	movs	r2, #2
 8008f70:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008f74:	e03b      	b.n	8008fee <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	7b5b      	ldrb	r3, [r3, #13]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 fff7 	bl	800af70 <USBH_LL_GetURBState>
 8008f82:	4603      	mov	r3, r0
 8008f84:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008f86:	7afb      	ldrb	r3, [r7, #11]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d128      	bne.n	8008fde <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	8b12      	ldrh	r2, [r2, #24]
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d90e      	bls.n	8008fb6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	8b12      	ldrh	r2, [r2, #24]
 8008fa0:	1a9a      	subs	r2, r3, r2
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	8b12      	ldrh	r2, [r2, #24]
 8008fae:	441a      	add	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	61da      	str	r2, [r3, #28]
 8008fb4:	e002      	b.n	8008fbc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d004      	beq.n	8008fce <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008fcc:	e00e      	b.n	8008fec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f868 	bl	80090ac <USBH_CDC_TransmitCallback>
      break;
 8008fdc:	e006      	b.n	8008fec <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008fde:	7afb      	ldrb	r3, [r7, #11]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d103      	bne.n	8008fec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008fec:	bf00      	nop
  }
}
 8008fee:	bf00      	nop
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b086      	sub	sp, #24
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009008:	2300      	movs	r3, #0
 800900a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009012:	2b03      	cmp	r3, #3
 8009014:	d002      	beq.n	800901c <CDC_ProcessReception+0x26>
 8009016:	2b04      	cmp	r3, #4
 8009018:	d00e      	beq.n	8009038 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800901a:	e043      	b.n	80090a4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	6a19      	ldr	r1, [r3, #32]
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	8b5a      	ldrh	r2, [r3, #26]
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	7b1b      	ldrb	r3, [r3, #12]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 fc97 	bl	800a95c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2204      	movs	r2, #4
 8009032:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009036:	e035      	b.n	80090a4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	7b1b      	ldrb	r3, [r3, #12]
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f001 ff96 	bl	800af70 <USBH_LL_GetURBState>
 8009044:	4603      	mov	r3, r0
 8009046:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009048:	7cfb      	ldrb	r3, [r7, #19]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d129      	bne.n	80090a2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	7b1b      	ldrb	r3, [r3, #12]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 fef9 	bl	800ae4c <USBH_LL_GetLastXferSize>
 800905a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	429a      	cmp	r2, r3
 8009064:	d016      	beq.n	8009094 <CDC_ProcessReception+0x9e>
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	8b5b      	ldrh	r3, [r3, #26]
 800906a:	461a      	mov	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4293      	cmp	r3, r2
 8009070:	d110      	bne.n	8009094 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	1ad2      	subs	r2, r2, r3
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	6a1a      	ldr	r2, [r3, #32]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	441a      	add	r2, r3
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2203      	movs	r2, #3
 800908e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009092:	e006      	b.n	80090a2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f80f 	bl	80090c0 <USBH_CDC_ReceiveCallback>
      break;
 80090a2:	bf00      	nop
  }
}
 80090a4:	bf00      	nop
 80090a6:	3718      	adds	r7, #24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4613      	mov	r3, r2
 80090f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d101      	bne.n	8009100 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80090fc:	2302      	movs	r3, #2
 80090fe:	e029      	b.n	8009154 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	79fa      	ldrb	r2, [r7, #7]
 8009104:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 f81f 	bl	800915c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d003      	beq.n	800914c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f001 fdc9 	bl	800ace4 <USBH_LL_Init>

  return USBH_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	e009      	b.n	800917e <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	33e0      	adds	r3, #224	@ 0xe0
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	2200      	movs	r2, #0
 8009176:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3301      	adds	r3, #1
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2b0f      	cmp	r3, #15
 8009182:	d9f2      	bls.n	800916a <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009184:	2300      	movs	r3, #0
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	e009      	b.n	800919e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4413      	add	r3, r2
 8009190:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009194:	2200      	movs	r2, #0
 8009196:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3301      	adds	r3, #1
 800919c:	60fb      	str	r3, [r7, #12]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091a4:	d3f1      	bcc.n	800918a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2240      	movs	r2, #64	@ 0x40
 80091ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	331c      	adds	r3, #28
 80091f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80091fa:	2100      	movs	r1, #0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f002 fd92 	bl	800bd26 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800920c:	2100      	movs	r1, #0
 800920e:	4618      	mov	r0, r3
 8009210:	f002 fd89 	bl	800bd26 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800921a:	2212      	movs	r2, #18
 800921c:	2100      	movs	r1, #0
 800921e:	4618      	mov	r0, r3
 8009220:	f002 fd81 	bl	800bd26 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800922a:	223e      	movs	r2, #62	@ 0x3e
 800922c:	2100      	movs	r1, #0
 800922e:	4618      	mov	r0, r3
 8009230:	f002 fd79 	bl	800bd26 <memset>

  return USBH_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800923e:	b480      	push	{r7}
 8009240:	b085      	sub	sp, #20
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d016      	beq.n	8009280 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10e      	bne.n	800927a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009262:	1c59      	adds	r1, r3, #1
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	33de      	adds	r3, #222	@ 0xde
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]
 8009278:	e004      	b.n	8009284 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800927a:	2302      	movs	r3, #2
 800927c:	73fb      	strb	r3, [r7, #15]
 800927e:	e001      	b.n	8009284 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009280:	2302      	movs	r3, #2
 8009282:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009284:	7bfb      	ldrb	r3, [r7, #15]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009292:	b480      	push	{r7}
 8009294:	b085      	sub	sp, #20
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	460b      	mov	r3, r1
 800929c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80092a8:	78fa      	ldrb	r2, [r7, #3]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d204      	bcs.n	80092b8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	78fa      	ldrb	r2, [r7, #3]
 80092b2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80092b6:	e001      	b.n	80092bc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80092b8:	2302      	movs	r3, #2
 80092ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b087      	sub	sp, #28
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	4608      	mov	r0, r1
 80092d4:	4611      	mov	r1, r2
 80092d6:	461a      	mov	r2, r3
 80092d8:	4603      	mov	r3, r0
 80092da:	70fb      	strb	r3, [r7, #3]
 80092dc:	460b      	mov	r3, r1
 80092de:	70bb      	strb	r3, [r7, #2]
 80092e0:	4613      	mov	r3, r2
 80092e2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80092e8:	2300      	movs	r3, #0
 80092ea:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80092f2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80092f4:	e025      	b.n	8009342 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	221a      	movs	r2, #26
 80092fa:	fb02 f303 	mul.w	r3, r2, r3
 80092fe:	3308      	adds	r3, #8
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	4413      	add	r3, r2
 8009304:	3302      	adds	r3, #2
 8009306:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	795b      	ldrb	r3, [r3, #5]
 800930c:	78fa      	ldrb	r2, [r7, #3]
 800930e:	429a      	cmp	r2, r3
 8009310:	d002      	beq.n	8009318 <USBH_FindInterface+0x4e>
 8009312:	78fb      	ldrb	r3, [r7, #3]
 8009314:	2bff      	cmp	r3, #255	@ 0xff
 8009316:	d111      	bne.n	800933c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800931c:	78ba      	ldrb	r2, [r7, #2]
 800931e:	429a      	cmp	r2, r3
 8009320:	d002      	beq.n	8009328 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009322:	78bb      	ldrb	r3, [r7, #2]
 8009324:	2bff      	cmp	r3, #255	@ 0xff
 8009326:	d109      	bne.n	800933c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800932c:	787a      	ldrb	r2, [r7, #1]
 800932e:	429a      	cmp	r2, r3
 8009330:	d002      	beq.n	8009338 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009332:	787b      	ldrb	r3, [r7, #1]
 8009334:	2bff      	cmp	r3, #255	@ 0xff
 8009336:	d101      	bne.n	800933c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009338:	7dfb      	ldrb	r3, [r7, #23]
 800933a:	e006      	b.n	800934a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800933c:	7dfb      	ldrb	r3, [r7, #23]
 800933e:	3301      	adds	r3, #1
 8009340:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009342:	7dfb      	ldrb	r3, [r7, #23]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d9d6      	bls.n	80092f6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009348:	23ff      	movs	r3, #255	@ 0xff
}
 800934a:	4618      	mov	r0, r3
 800934c:	371c      	adds	r7, #28
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f001 fcfc 	bl	800ad5c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009364:	2101      	movs	r1, #1
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 fe15 	bl	800af96 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af04      	add	r7, sp, #16
 800937e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009380:	2302      	movs	r3, #2
 8009382:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b01      	cmp	r3, #1
 8009392:	d102      	bne.n	800939a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2203      	movs	r2, #3
 8009398:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b0b      	cmp	r3, #11
 80093a2:	f200 81bc 	bhi.w	800971e <USBH_Process+0x3a6>
 80093a6:	a201      	add	r2, pc, #4	@ (adr r2, 80093ac <USBH_Process+0x34>)
 80093a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ac:	080093dd 	.word	0x080093dd
 80093b0:	0800940f 	.word	0x0800940f
 80093b4:	08009479 	.word	0x08009479
 80093b8:	080096b9 	.word	0x080096b9
 80093bc:	0800971f 	.word	0x0800971f
 80093c0:	08009519 	.word	0x08009519
 80093c4:	0800965f 	.word	0x0800965f
 80093c8:	0800954f 	.word	0x0800954f
 80093cc:	0800956f 	.word	0x0800956f
 80093d0:	0800958d 	.word	0x0800958d
 80093d4:	080095d1 	.word	0x080095d1
 80093d8:	080096a1 	.word	0x080096a1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 819c 	beq.w	8009722 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80093f0:	20c8      	movs	r0, #200	@ 0xc8
 80093f2:	f001 fe1a 	bl	800b02a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f001 fd0d 	bl	800ae16 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800940c:	e189      	b.n	8009722 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b01      	cmp	r3, #1
 8009418:	d107      	bne.n	800942a <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2202      	movs	r2, #2
 8009426:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009428:	e18a      	b.n	8009740 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009430:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009434:	d914      	bls.n	8009460 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800943c:	3301      	adds	r3, #1
 800943e:	b2da      	uxtb	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800944c:	2b03      	cmp	r3, #3
 800944e:	d903      	bls.n	8009458 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	220d      	movs	r2, #13
 8009454:	701a      	strb	r2, [r3, #0]
      break;
 8009456:	e173      	b.n	8009740 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	701a      	strb	r2, [r3, #0]
      break;
 800945e:	e16f      	b.n	8009740 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009466:	f103 020a 	add.w	r2, r3, #10
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009470:	200a      	movs	r0, #10
 8009472:	f001 fdda 	bl	800b02a <USBH_Delay>
      break;
 8009476:	e163      	b.n	8009740 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800947e:	2b00      	cmp	r3, #0
 8009480:	d005      	beq.n	800948e <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009488:	2104      	movs	r1, #4
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800948e:	2064      	movs	r0, #100	@ 0x64
 8009490:	f001 fdcb 	bl	800b02a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f001 fc97 	bl	800adc8 <USBH_LL_GetSpeed>
 800949a:	4603      	mov	r3, r0
 800949c:	461a      	mov	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2205      	movs	r2, #5
 80094a8:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80094aa:	2100      	movs	r1, #0
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f001 faa2 	bl	800a9f6 <USBH_AllocPipe>
 80094b2:	4603      	mov	r3, r0
 80094b4:	461a      	mov	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80094ba:	2180      	movs	r1, #128	@ 0x80
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 fa9a 	bl	800a9f6 <USBH_AllocPipe>
 80094c2:	4603      	mov	r3, r0
 80094c4:	461a      	mov	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	7919      	ldrb	r1, [r3, #4]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80094de:	9202      	str	r2, [sp, #8]
 80094e0:	2200      	movs	r2, #0
 80094e2:	9201      	str	r2, [sp, #4]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	4603      	mov	r3, r0
 80094e8:	2280      	movs	r2, #128	@ 0x80
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f001 fa54 	bl	800a998 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	7959      	ldrb	r1, [r3, #5]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009504:	9202      	str	r2, [sp, #8]
 8009506:	2200      	movs	r2, #0
 8009508:	9201      	str	r2, [sp, #4]
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	4603      	mov	r3, r0
 800950e:	2200      	movs	r2, #0
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f001 fa41 	bl	800a998 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009516:	e113      	b.n	8009740 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f917 	bl	800974c <USBH_HandleEnum>
 800951e:	4603      	mov	r3, r0
 8009520:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009522:	7bbb      	ldrb	r3, [r7, #14]
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b00      	cmp	r3, #0
 8009528:	f040 80fd 	bne.w	8009726 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800953a:	2b01      	cmp	r3, #1
 800953c:	d103      	bne.n	8009546 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2208      	movs	r2, #8
 8009542:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009544:	e0ef      	b.n	8009726 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2207      	movs	r2, #7
 800954a:	701a      	strb	r2, [r3, #0]
      break;
 800954c:	e0eb      	b.n	8009726 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 80e8 	beq.w	800972a <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009560:	2101      	movs	r1, #1
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2208      	movs	r2, #8
 800956a:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800956c:	e0dd      	b.n	800972a <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fc3f 	bl	8009dfa <USBH_SetCfg>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	f040 80d5 	bne.w	800972e <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2209      	movs	r2, #9
 8009588:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800958a:	e0d0      	b.n	800972e <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009592:	f003 0320 	and.w	r3, r3, #32
 8009596:	2b00      	cmp	r3, #0
 8009598:	d016      	beq.n	80095c8 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800959a:	2101      	movs	r1, #1
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fc4f 	bl	8009e40 <USBH_SetFeature>
 80095a2:	4603      	mov	r3, r0
 80095a4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d103      	bne.n	80095b6 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	220a      	movs	r2, #10
 80095b2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80095b4:	e0bd      	b.n	8009732 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	f040 80b9 	bne.w	8009732 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	220a      	movs	r2, #10
 80095c4:	701a      	strb	r2, [r3, #0]
      break;
 80095c6:	e0b4      	b.n	8009732 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	220a      	movs	r2, #10
 80095cc:	701a      	strb	r2, [r3, #0]
      break;
 80095ce:	e0b0      	b.n	8009732 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 80ad 	beq.w	8009736 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80095e4:	2300      	movs	r3, #0
 80095e6:	73fb      	strb	r3, [r7, #15]
 80095e8:	e016      	b.n	8009618 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80095ea:	7bfa      	ldrb	r2, [r7, #15]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	32de      	adds	r2, #222	@ 0xde
 80095f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f4:	791a      	ldrb	r2, [r3, #4]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d108      	bne.n	8009612 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009600:	7bfa      	ldrb	r2, [r7, #15]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	32de      	adds	r2, #222	@ 0xde
 8009606:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009610:	e005      	b.n	800961e <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	3301      	adds	r3, #1
 8009616:	73fb      	strb	r3, [r7, #15]
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d0e5      	beq.n	80095ea <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009624:	2b00      	cmp	r3, #0
 8009626:	d016      	beq.n	8009656 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	4798      	blx	r3
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d109      	bne.n	800964e <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2206      	movs	r2, #6
 800963e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009646:	2103      	movs	r1, #3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800964c:	e073      	b.n	8009736 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	220d      	movs	r2, #13
 8009652:	701a      	strb	r2, [r3, #0]
      break;
 8009654:	e06f      	b.n	8009736 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	220d      	movs	r2, #13
 800965a:	701a      	strb	r2, [r3, #0]
      break;
 800965c:	e06b      	b.n	8009736 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d017      	beq.n	8009698 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	4798      	blx	r3
 8009674:	4603      	mov	r3, r0
 8009676:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b00      	cmp	r3, #0
 800967e:	d103      	bne.n	8009688 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	220b      	movs	r2, #11
 8009684:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009686:	e058      	b.n	800973a <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8009688:	7bbb      	ldrb	r3, [r7, #14]
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b02      	cmp	r3, #2
 800968e:	d154      	bne.n	800973a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	220d      	movs	r2, #13
 8009694:	701a      	strb	r2, [r3, #0]
      break;
 8009696:	e050      	b.n	800973a <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	220d      	movs	r2, #13
 800969c:	701a      	strb	r2, [r3, #0]
      break;
 800969e:	e04c      	b.n	800973a <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d049      	beq.n	800973e <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
      }
      break;
 80096b6:	e042      	b.n	800973e <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff fd4b 	bl	800915c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d009      	beq.n	80096e4 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80096f4:	2105      	movs	r1, #5
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b01      	cmp	r3, #1
 8009704:	d107      	bne.n	8009716 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7ff fe21 	bl	8009356 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009714:	e014      	b.n	8009740 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f001 fb20 	bl	800ad5c <USBH_LL_Start>
      break;
 800971c:	e010      	b.n	8009740 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800971e:	bf00      	nop
 8009720:	e00e      	b.n	8009740 <USBH_Process+0x3c8>
      break;
 8009722:	bf00      	nop
 8009724:	e00c      	b.n	8009740 <USBH_Process+0x3c8>
      break;
 8009726:	bf00      	nop
 8009728:	e00a      	b.n	8009740 <USBH_Process+0x3c8>
    break;
 800972a:	bf00      	nop
 800972c:	e008      	b.n	8009740 <USBH_Process+0x3c8>
      break;
 800972e:	bf00      	nop
 8009730:	e006      	b.n	8009740 <USBH_Process+0x3c8>
      break;
 8009732:	bf00      	nop
 8009734:	e004      	b.n	8009740 <USBH_Process+0x3c8>
      break;
 8009736:	bf00      	nop
 8009738:	e002      	b.n	8009740 <USBH_Process+0x3c8>
      break;
 800973a:	bf00      	nop
 800973c:	e000      	b.n	8009740 <USBH_Process+0x3c8>
      break;
 800973e:	bf00      	nop
  }
  return USBH_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop

0800974c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af04      	add	r7, sp, #16
 8009752:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009754:	2301      	movs	r3, #1
 8009756:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009758:	2301      	movs	r3, #1
 800975a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	785b      	ldrb	r3, [r3, #1]
 8009760:	2b07      	cmp	r3, #7
 8009762:	f200 81bd 	bhi.w	8009ae0 <USBH_HandleEnum+0x394>
 8009766:	a201      	add	r2, pc, #4	@ (adr r2, 800976c <USBH_HandleEnum+0x20>)
 8009768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976c:	0800978d 	.word	0x0800978d
 8009770:	08009847 	.word	0x08009847
 8009774:	080098b1 	.word	0x080098b1
 8009778:	0800993b 	.word	0x0800993b
 800977c:	080099a5 	.word	0x080099a5
 8009780:	08009a15 	.word	0x08009a15
 8009784:	08009a5b 	.word	0x08009a5b
 8009788:	08009aa1 	.word	0x08009aa1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800978c:	2108      	movs	r1, #8
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fa50 	bl	8009c34 <USBH_Get_DevDesc>
 8009794:	4603      	mov	r3, r0
 8009796:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d12e      	bne.n	80097fc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	7919      	ldrb	r1, [r3, #4]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80097c2:	9202      	str	r2, [sp, #8]
 80097c4:	2200      	movs	r2, #0
 80097c6:	9201      	str	r2, [sp, #4]
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	4603      	mov	r3, r0
 80097cc:	2280      	movs	r2, #128	@ 0x80
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f001 f8e2 	bl	800a998 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	7959      	ldrb	r1, [r3, #5]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80097e8:	9202      	str	r2, [sp, #8]
 80097ea:	2200      	movs	r2, #0
 80097ec:	9201      	str	r2, [sp, #4]
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	4603      	mov	r3, r0
 80097f2:	2200      	movs	r2, #0
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 f8cf 	bl	800a998 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80097fa:	e173      	b.n	8009ae4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	2b03      	cmp	r3, #3
 8009800:	f040 8170 	bne.w	8009ae4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800980a:	3301      	adds	r3, #1
 800980c:	b2da      	uxtb	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800981a:	2b03      	cmp	r3, #3
 800981c:	d903      	bls.n	8009826 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	220d      	movs	r2, #13
 8009822:	701a      	strb	r2, [r3, #0]
      break;
 8009824:	e15e      	b.n	8009ae4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	795b      	ldrb	r3, [r3, #5]
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f001 f903 	bl	800aa38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	791b      	ldrb	r3, [r3, #4]
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 f8fd 	bl	800aa38 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	701a      	strb	r2, [r3, #0]
      break;
 8009844:	e14e      	b.n	8009ae4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009846:	2112      	movs	r1, #18
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f9f3 	bl	8009c34 <USBH_Get_DevDesc>
 800984e:	4603      	mov	r3, r0
 8009850:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009852:	7bbb      	ldrb	r3, [r7, #14]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d103      	bne.n	8009860 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2202      	movs	r2, #2
 800985c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800985e:	e143      	b.n	8009ae8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	2b03      	cmp	r3, #3
 8009864:	f040 8140 	bne.w	8009ae8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800986e:	3301      	adds	r3, #1
 8009870:	b2da      	uxtb	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800987e:	2b03      	cmp	r3, #3
 8009880:	d903      	bls.n	800988a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	220d      	movs	r2, #13
 8009886:	701a      	strb	r2, [r3, #0]
      break;
 8009888:	e12e      	b.n	8009ae8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	795b      	ldrb	r3, [r3, #5]
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f001 f8d1 	bl	800aa38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	791b      	ldrb	r3, [r3, #4]
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f001 f8cb 	bl	800aa38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	701a      	strb	r2, [r3, #0]
      break;
 80098ae:	e11b      	b.n	8009ae8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80098b0:	2101      	movs	r1, #1
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fa7d 	bl	8009db2 <USBH_SetAddress>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d130      	bne.n	8009924 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80098c2:	2002      	movs	r0, #2
 80098c4:	f001 fbb1 	bl	800b02a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2203      	movs	r2, #3
 80098d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	7919      	ldrb	r1, [r3, #4]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80098ea:	9202      	str	r2, [sp, #8]
 80098ec:	2200      	movs	r2, #0
 80098ee:	9201      	str	r2, [sp, #4]
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	4603      	mov	r3, r0
 80098f4:	2280      	movs	r2, #128	@ 0x80
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f001 f84e 	bl	800a998 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	7959      	ldrb	r1, [r3, #5]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009910:	9202      	str	r2, [sp, #8]
 8009912:	2200      	movs	r2, #0
 8009914:	9201      	str	r2, [sp, #4]
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	4603      	mov	r3, r0
 800991a:	2200      	movs	r2, #0
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 f83b 	bl	800a998 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009922:	e0e3      	b.n	8009aec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	2b03      	cmp	r3, #3
 8009928:	f040 80e0 	bne.w	8009aec <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	220d      	movs	r2, #13
 8009930:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	705a      	strb	r2, [r3, #1]
      break;
 8009938:	e0d8      	b.n	8009aec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800993a:	2109      	movs	r1, #9
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f9a5 	bl	8009c8c <USBH_Get_CfgDesc>
 8009942:	4603      	mov	r3, r0
 8009944:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009946:	7bbb      	ldrb	r3, [r7, #14]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d103      	bne.n	8009954 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2204      	movs	r2, #4
 8009950:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009952:	e0cd      	b.n	8009af0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009954:	7bbb      	ldrb	r3, [r7, #14]
 8009956:	2b03      	cmp	r3, #3
 8009958:	f040 80ca 	bne.w	8009af0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009962:	3301      	adds	r3, #1
 8009964:	b2da      	uxtb	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009972:	2b03      	cmp	r3, #3
 8009974:	d903      	bls.n	800997e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	220d      	movs	r2, #13
 800997a:	701a      	strb	r2, [r3, #0]
      break;
 800997c:	e0b8      	b.n	8009af0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	795b      	ldrb	r3, [r3, #5]
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f001 f857 	bl	800aa38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	791b      	ldrb	r3, [r3, #4]
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 f851 	bl	800aa38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	701a      	strb	r2, [r3, #0]
      break;
 80099a2:	e0a5      	b.n	8009af0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f96d 	bl	8009c8c <USBH_Get_CfgDesc>
 80099b2:	4603      	mov	r3, r0
 80099b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099b6:	7bbb      	ldrb	r3, [r7, #14]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d103      	bne.n	80099c4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2205      	movs	r2, #5
 80099c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099c2:	e097      	b.n	8009af4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099c4:	7bbb      	ldrb	r3, [r7, #14]
 80099c6:	2b03      	cmp	r3, #3
 80099c8:	f040 8094 	bne.w	8009af4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099d2:	3301      	adds	r3, #1
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d903      	bls.n	80099ee <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	220d      	movs	r2, #13
 80099ea:	701a      	strb	r2, [r3, #0]
      break;
 80099ec:	e082      	b.n	8009af4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	795b      	ldrb	r3, [r3, #5]
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f001 f81f 	bl	800aa38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	791b      	ldrb	r3, [r3, #4]
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f001 f819 	bl	800aa38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	701a      	strb	r2, [r3, #0]
      break;
 8009a12:	e06f      	b.n	8009af4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d019      	beq.n	8009a52 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a2a:	23ff      	movs	r3, #255	@ 0xff
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f957 	bl	8009ce0 <USBH_Get_StringDesc>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d103      	bne.n	8009a44 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2206      	movs	r2, #6
 8009a40:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009a42:	e059      	b.n	8009af8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d156      	bne.n	8009af8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2206      	movs	r2, #6
 8009a4e:	705a      	strb	r2, [r3, #1]
      break;
 8009a50:	e052      	b.n	8009af8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2206      	movs	r2, #6
 8009a56:	705a      	strb	r2, [r3, #1]
      break;
 8009a58:	e04e      	b.n	8009af8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d019      	beq.n	8009a98 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009a70:	23ff      	movs	r3, #255	@ 0xff
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f934 	bl	8009ce0 <USBH_Get_StringDesc>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d103      	bne.n	8009a8a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2207      	movs	r2, #7
 8009a86:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009a88:	e038      	b.n	8009afc <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a8a:	7bbb      	ldrb	r3, [r7, #14]
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d135      	bne.n	8009afc <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2207      	movs	r2, #7
 8009a94:	705a      	strb	r2, [r3, #1]
      break;
 8009a96:	e031      	b.n	8009afc <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2207      	movs	r2, #7
 8009a9c:	705a      	strb	r2, [r3, #1]
      break;
 8009a9e:	e02d      	b.n	8009afc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d017      	beq.n	8009ada <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009ab6:	23ff      	movs	r3, #255	@ 0xff
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f911 	bl	8009ce0 <USBH_Get_StringDesc>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d102      	bne.n	8009ace <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009acc:	e018      	b.n	8009b00 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b03      	cmp	r3, #3
 8009ad2:	d115      	bne.n	8009b00 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ad8:	e012      	b.n	8009b00 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ade:	e00f      	b.n	8009b00 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009ae0:	bf00      	nop
 8009ae2:	e00e      	b.n	8009b02 <USBH_HandleEnum+0x3b6>
      break;
 8009ae4:	bf00      	nop
 8009ae6:	e00c      	b.n	8009b02 <USBH_HandleEnum+0x3b6>
      break;
 8009ae8:	bf00      	nop
 8009aea:	e00a      	b.n	8009b02 <USBH_HandleEnum+0x3b6>
      break;
 8009aec:	bf00      	nop
 8009aee:	e008      	b.n	8009b02 <USBH_HandleEnum+0x3b6>
      break;
 8009af0:	bf00      	nop
 8009af2:	e006      	b.n	8009b02 <USBH_HandleEnum+0x3b6>
      break;
 8009af4:	bf00      	nop
 8009af6:	e004      	b.n	8009b02 <USBH_HandleEnum+0x3b6>
      break;
 8009af8:	bf00      	nop
 8009afa:	e002      	b.n	8009b02 <USBH_HandleEnum+0x3b6>
      break;
 8009afc:	bf00      	nop
 8009afe:	e000      	b.n	8009b02 <USBH_HandleEnum+0x3b6>
      break;
 8009b00:	bf00      	nop
  }
  return Status;
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009b1e:	bf00      	nop
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f804 	bl	8009b4e <USBH_HandleSof>
}
 8009b46:	bf00      	nop
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b082      	sub	sp, #8
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b0b      	cmp	r3, #11
 8009b5e:	d10a      	bne.n	8009b76 <USBH_HandleSof+0x28>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d005      	beq.n	8009b76 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	4798      	blx	r3
  }
}
 8009b76:	bf00      	nop
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b083      	sub	sp, #12
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8009b8e:	bf00      	nop
}
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8009bb2:	bf00      	nop
}
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr

08009bbe <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009bbe:	b480      	push	{r7}
 8009bc0:	b083      	sub	sp, #12
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f001 f8c0 	bl	800ad92 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	791b      	ldrb	r3, [r3, #4]
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 ff0d 	bl	800aa38 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	795b      	ldrb	r3, [r3, #5]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 ff07 	bl	800aa38 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af02      	add	r7, sp, #8
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009c40:	887b      	ldrh	r3, [r7, #2]
 8009c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c46:	d901      	bls.n	8009c4c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e01b      	b.n	8009c84 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009c52:	887b      	ldrh	r3, [r7, #2]
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	4613      	mov	r3, r2
 8009c58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f872 	bl	8009d48 <USBH_GetDescriptor>
 8009c64:	4603      	mov	r3, r0
 8009c66:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d109      	bne.n	8009c82 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009c74:	887a      	ldrh	r2, [r7, #2]
 8009c76:	4619      	mov	r1, r3
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f929 	bl	8009ed0 <USBH_ParseDevDesc>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af02      	add	r7, sp, #8
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	331c      	adds	r3, #28
 8009c9c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009c9e:	887b      	ldrh	r3, [r7, #2]
 8009ca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ca4:	d901      	bls.n	8009caa <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e016      	b.n	8009cd8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009caa:	887b      	ldrh	r3, [r7, #2]
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f846 	bl	8009d48 <USBH_GetDescriptor>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d107      	bne.n	8009cd6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009cc6:	887b      	ldrh	r3, [r7, #2]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	68b9      	ldr	r1, [r7, #8]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f9af 	bl	800a030 <USBH_ParseCfgDesc>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b088      	sub	sp, #32
 8009ce4:	af02      	add	r7, sp, #8
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	607a      	str	r2, [r7, #4]
 8009cea:	461a      	mov	r2, r3
 8009cec:	460b      	mov	r3, r1
 8009cee:	72fb      	strb	r3, [r7, #11]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009cf4:	893b      	ldrh	r3, [r7, #8]
 8009cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cfa:	d802      	bhi.n	8009d02 <USBH_Get_StringDesc+0x22>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e01c      	b.n	8009d40 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009d06:	7afb      	ldrb	r3, [r7, #11]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009d0e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009d16:	893b      	ldrh	r3, [r7, #8]
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f000 f812 	bl	8009d48 <USBH_GetDescriptor>
 8009d24:	4603      	mov	r3, r0
 8009d26:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d107      	bne.n	8009d3e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009d34:	893a      	ldrh	r2, [r7, #8]
 8009d36:	6879      	ldr	r1, [r7, #4]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 fb8c 	bl	800a456 <USBH_ParseStringDesc>
  }

  return status;
 8009d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	607b      	str	r3, [r7, #4]
 8009d52:	460b      	mov	r3, r1
 8009d54:	72fb      	strb	r3, [r7, #11]
 8009d56:	4613      	mov	r3, r2
 8009d58:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	789b      	ldrb	r3, [r3, #2]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d11c      	bne.n	8009d9c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009d62:	7afb      	ldrb	r3, [r7, #11]
 8009d64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2206      	movs	r2, #6
 8009d72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	893a      	ldrh	r2, [r7, #8]
 8009d78:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009d7a:	893b      	ldrh	r3, [r7, #8]
 8009d7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009d80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d84:	d104      	bne.n	8009d90 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f240 4209 	movw	r2, #1033	@ 0x409
 8009d8c:	829a      	strh	r2, [r3, #20]
 8009d8e:	e002      	b.n	8009d96 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	8b3a      	ldrh	r2, [r7, #24]
 8009d9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009d9c:	8b3b      	ldrh	r3, [r7, #24]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6879      	ldr	r1, [r7, #4]
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 fba4 	bl	800a4f0 <USBH_CtlReq>
 8009da8:	4603      	mov	r3, r0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b082      	sub	sp, #8
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	460b      	mov	r3, r1
 8009dbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	789b      	ldrb	r3, [r3, #2]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d10f      	bne.n	8009de6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2205      	movs	r2, #5
 8009dd0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009dd2:	78fb      	ldrb	r3, [r7, #3]
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009de6:	2200      	movs	r2, #0
 8009de8:	2100      	movs	r1, #0
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fb80 	bl	800a4f0 <USBH_CtlReq>
 8009df0:	4603      	mov	r3, r0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	460b      	mov	r3, r1
 8009e04:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	789b      	ldrb	r3, [r3, #2]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d10e      	bne.n	8009e2c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2209      	movs	r2, #9
 8009e18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	887a      	ldrh	r2, [r7, #2]
 8009e1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2100      	movs	r1, #0
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fb5d 	bl	800a4f0 <USBH_CtlReq>
 8009e36:	4603      	mov	r3, r0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	789b      	ldrb	r3, [r3, #2]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d10f      	bne.n	8009e74 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2203      	movs	r2, #3
 8009e5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009e60:	78fb      	ldrb	r3, [r7, #3]
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e74:	2200      	movs	r2, #0
 8009e76:	2100      	movs	r1, #0
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fb39 	bl	800a4f0 <USBH_CtlReq>
 8009e7e:	4603      	mov	r3, r0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	460b      	mov	r3, r1
 8009e92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	789b      	ldrb	r3, [r3, #2]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d10f      	bne.n	8009ebc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009eae:	78fb      	ldrb	r3, [r7, #3]
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fb15 	bl	800a4f0 <USBH_CtlReq>
 8009ec6:	4603      	mov	r3, r0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b087      	sub	sp, #28
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	4613      	mov	r3, r2
 8009edc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009ee4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	e094      	b.n	800a01e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	781a      	ldrb	r2, [r3, #0]
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	785a      	ldrb	r2, [r3, #1]
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	3302      	adds	r3, #2
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	3303      	adds	r3, #3
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	021b      	lsls	r3, r3, #8
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	4313      	orrs	r3, r2
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	791a      	ldrb	r2, [r3, #4]
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	795a      	ldrb	r2, [r3, #5]
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	799a      	ldrb	r2, [r3, #6]
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	79da      	ldrb	r2, [r3, #7]
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d004      	beq.n	8009f52 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d11b      	bne.n	8009f8a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	79db      	ldrb	r3, [r3, #7]
 8009f56:	2b20      	cmp	r3, #32
 8009f58:	dc0f      	bgt.n	8009f7a <USBH_ParseDevDesc+0xaa>
 8009f5a:	2b08      	cmp	r3, #8
 8009f5c:	db0f      	blt.n	8009f7e <USBH_ParseDevDesc+0xae>
 8009f5e:	3b08      	subs	r3, #8
 8009f60:	4a32      	ldr	r2, [pc, #200]	@ (800a02c <USBH_ParseDevDesc+0x15c>)
 8009f62:	fa22 f303 	lsr.w	r3, r2, r3
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	bf14      	ite	ne
 8009f6e:	2301      	movne	r3, #1
 8009f70:	2300      	moveq	r3, #0
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d106      	bne.n	8009f86 <USBH_ParseDevDesc+0xb6>
 8009f78:	e001      	b.n	8009f7e <USBH_ParseDevDesc+0xae>
 8009f7a:	2b40      	cmp	r3, #64	@ 0x40
 8009f7c:	d003      	beq.n	8009f86 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	2208      	movs	r2, #8
 8009f82:	71da      	strb	r2, [r3, #7]
        break;
 8009f84:	e000      	b.n	8009f88 <USBH_ParseDevDesc+0xb8>
        break;
 8009f86:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009f88:	e00e      	b.n	8009fa8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d107      	bne.n	8009fa4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	79db      	ldrb	r3, [r3, #7]
 8009f98:	2b08      	cmp	r3, #8
 8009f9a:	d005      	beq.n	8009fa8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	2208      	movs	r2, #8
 8009fa0:	71da      	strb	r2, [r3, #7]
 8009fa2:	e001      	b.n	8009fa8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009fa8:	88fb      	ldrh	r3, [r7, #6]
 8009faa:	2b08      	cmp	r3, #8
 8009fac:	d936      	bls.n	800a01c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	3309      	adds	r3, #9
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	021b      	lsls	r3, r3, #8
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	330a      	adds	r3, #10
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	330b      	adds	r3, #11
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	021b      	lsls	r3, r3, #8
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	330c      	adds	r3, #12
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	330d      	adds	r3, #13
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	021b      	lsls	r3, r3, #8
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	7b9a      	ldrb	r2, [r3, #14]
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	7bda      	ldrb	r2, [r3, #15]
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	7c1a      	ldrb	r2, [r3, #16]
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	7c5a      	ldrb	r2, [r3, #17]
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a01c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	371c      	adds	r7, #28
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	01000101 	.word	0x01000101

0800a030 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08c      	sub	sp, #48	@ 0x30
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	4613      	mov	r3, r2
 800a03c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a044:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a05e:	2302      	movs	r3, #2
 800a060:	e0de      	b.n	800a220 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	2b09      	cmp	r3, #9
 800a06c:	d002      	beq.n	800a074 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a070:	2209      	movs	r2, #9
 800a072:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	781a      	ldrb	r2, [r3, #0]
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	785a      	ldrb	r2, [r3, #1]
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	3302      	adds	r3, #2
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	3303      	adds	r3, #3
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	b29b      	uxth	r3, r3
 800a096:	4313      	orrs	r3, r2
 800a098:	b29b      	uxth	r3, r3
 800a09a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a09e:	bf28      	it	cs
 800a0a0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	791a      	ldrb	r2, [r3, #4]
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	795a      	ldrb	r2, [r3, #5]
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	799a      	ldrb	r2, [r3, #6]
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	79da      	ldrb	r2, [r3, #7]
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	7a1a      	ldrb	r2, [r3, #8]
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a0d2:	88fb      	ldrh	r3, [r7, #6]
 800a0d4:	2b09      	cmp	r3, #9
 800a0d6:	f240 80a1 	bls.w	800a21c <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800a0da:	2309      	movs	r3, #9
 800a0dc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a0e2:	e085      	b.n	800a1f0 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0e4:	f107 0316 	add.w	r3, r7, #22
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0ec:	f000 f9e6 	bl	800a4bc <USBH_GetNextDesc>
 800a0f0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f4:	785b      	ldrb	r3, [r3, #1]
 800a0f6:	2b04      	cmp	r3, #4
 800a0f8:	d17a      	bne.n	800a1f0 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	2b09      	cmp	r3, #9
 800a100:	d002      	beq.n	800a108 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a104:	2209      	movs	r2, #9
 800a106:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a10c:	221a      	movs	r2, #26
 800a10e:	fb02 f303 	mul.w	r3, r2, r3
 800a112:	3308      	adds	r3, #8
 800a114:	6a3a      	ldr	r2, [r7, #32]
 800a116:	4413      	add	r3, r2
 800a118:	3302      	adds	r3, #2
 800a11a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a11c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a11e:	69f8      	ldr	r0, [r7, #28]
 800a120:	f000 f882 	bl	800a228 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a124:	2300      	movs	r3, #0
 800a126:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a12e:	e043      	b.n	800a1b8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a130:	f107 0316 	add.w	r3, r7, #22
 800a134:	4619      	mov	r1, r3
 800a136:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a138:	f000 f9c0 	bl	800a4bc <USBH_GetNextDesc>
 800a13c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a140:	785b      	ldrb	r3, [r3, #1]
 800a142:	2b05      	cmp	r3, #5
 800a144:	d138      	bne.n	800a1b8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	795b      	ldrb	r3, [r3, #5]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d113      	bne.n	800a176 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a152:	2b02      	cmp	r3, #2
 800a154:	d003      	beq.n	800a15e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	799b      	ldrb	r3, [r3, #6]
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d10b      	bne.n	800a176 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	79db      	ldrb	r3, [r3, #7]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10b      	bne.n	800a17e <USBH_ParseCfgDesc+0x14e>
 800a166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b09      	cmp	r3, #9
 800a16c:	d007      	beq.n	800a17e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a170:	2209      	movs	r2, #9
 800a172:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a174:	e003      	b.n	800a17e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a178:	2207      	movs	r2, #7
 800a17a:	701a      	strb	r2, [r3, #0]
 800a17c:	e000      	b.n	800a180 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a17e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a184:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a188:	3201      	adds	r2, #1
 800a18a:	00d2      	lsls	r2, r2, #3
 800a18c:	211a      	movs	r1, #26
 800a18e:	fb01 f303 	mul.w	r3, r1, r3
 800a192:	4413      	add	r3, r2
 800a194:	3308      	adds	r3, #8
 800a196:	6a3a      	ldr	r2, [r7, #32]
 800a198:	4413      	add	r3, r2
 800a19a:	3304      	adds	r3, #4
 800a19c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a19e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1a0:	69b9      	ldr	r1, [r7, #24]
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f000 f86f 	bl	800a286 <USBH_ParseEPDesc>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a1ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a1b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d80a      	bhi.n	800a1d6 <USBH_ParseCfgDesc+0x1a6>
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	791b      	ldrb	r3, [r3, #4]
 800a1c4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d204      	bcs.n	800a1d6 <USBH_ParseCfgDesc+0x1a6>
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	885a      	ldrh	r2, [r3, #2]
 800a1d0:	8afb      	ldrh	r3, [r7, #22]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d8ac      	bhi.n	800a130 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	791b      	ldrb	r3, [r3, #4]
 800a1da:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d201      	bcs.n	800a1e6 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e01c      	b.n	800a220 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800a1e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d805      	bhi.n	800a204 <USBH_ParseCfgDesc+0x1d4>
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	885a      	ldrh	r2, [r3, #2]
 800a1fc:	8afb      	ldrh	r3, [r7, #22]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	f63f af70 	bhi.w	800a0e4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	791b      	ldrb	r3, [r3, #4]
 800a208:	2b02      	cmp	r3, #2
 800a20a:	bf28      	it	cs
 800a20c:	2302      	movcs	r3, #2
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a214:	429a      	cmp	r2, r3
 800a216:	d201      	bcs.n	800a21c <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800a218:	2303      	movs	r3, #3
 800a21a:	e001      	b.n	800a220 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800a21c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a220:	4618      	mov	r0, r3
 800a222:	3730      	adds	r7, #48	@ 0x30
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	781a      	ldrb	r2, [r3, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	785a      	ldrb	r2, [r3, #1]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	789a      	ldrb	r2, [r3, #2]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	78da      	ldrb	r2, [r3, #3]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	791a      	ldrb	r2, [r3, #4]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	795a      	ldrb	r2, [r3, #5]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	799a      	ldrb	r2, [r3, #6]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	79da      	ldrb	r2, [r3, #7]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	7a1a      	ldrb	r2, [r3, #8]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	721a      	strb	r2, [r3, #8]
}
 800a27a:	bf00      	nop
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a286:	b480      	push	{r7}
 800a288:	b087      	sub	sp, #28
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	781a      	ldrb	r2, [r3, #0]
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	785a      	ldrb	r2, [r3, #1]
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	789a      	ldrb	r2, [r3, #2]
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	78da      	ldrb	r2, [r3, #3]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	3305      	adds	r3, #5
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	021b      	lsls	r3, r3, #8
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	799a      	ldrb	r2, [r3, #6]
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	889b      	ldrh	r3, [r3, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d009      	beq.n	800a2f4 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a2e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2e8:	d804      	bhi.n	800a2f4 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a2ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2f2:	d901      	bls.n	800a2f8 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d136      	bne.n	800a370 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	78db      	ldrb	r3, [r3, #3]
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d108      	bne.n	800a320 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	889b      	ldrh	r3, [r3, #4]
 800a312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a316:	f240 8097 	bls.w	800a448 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a31a:	2303      	movs	r3, #3
 800a31c:	75fb      	strb	r3, [r7, #23]
 800a31e:	e093      	b.n	800a448 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	78db      	ldrb	r3, [r3, #3]
 800a324:	f003 0303 	and.w	r3, r3, #3
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d107      	bne.n	800a33c <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	889b      	ldrh	r3, [r3, #4]
 800a330:	2b40      	cmp	r3, #64	@ 0x40
 800a332:	f240 8089 	bls.w	800a448 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a336:	2303      	movs	r3, #3
 800a338:	75fb      	strb	r3, [r7, #23]
 800a33a:	e085      	b.n	800a448 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	78db      	ldrb	r3, [r3, #3]
 800a340:	f003 0303 	and.w	r3, r3, #3
 800a344:	2b01      	cmp	r3, #1
 800a346:	d005      	beq.n	800a354 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	78db      	ldrb	r3, [r3, #3]
 800a34c:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a350:	2b03      	cmp	r3, #3
 800a352:	d10a      	bne.n	800a36a <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	799b      	ldrb	r3, [r3, #6]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d003      	beq.n	800a364 <USBH_ParseEPDesc+0xde>
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	799b      	ldrb	r3, [r3, #6]
 800a360:	2b10      	cmp	r3, #16
 800a362:	d970      	bls.n	800a446 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a364:	2303      	movs	r3, #3
 800a366:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a368:	e06d      	b.n	800a446 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a36a:	2303      	movs	r3, #3
 800a36c:	75fb      	strb	r3, [r7, #23]
 800a36e:	e06b      	b.n	800a448 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a376:	2b01      	cmp	r3, #1
 800a378:	d13c      	bne.n	800a3f4 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	78db      	ldrb	r3, [r3, #3]
 800a37e:	f003 0303 	and.w	r3, r3, #3
 800a382:	2b02      	cmp	r3, #2
 800a384:	d005      	beq.n	800a392 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	78db      	ldrb	r3, [r3, #3]
 800a38a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d106      	bne.n	800a3a0 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	889b      	ldrh	r3, [r3, #4]
 800a396:	2b40      	cmp	r3, #64	@ 0x40
 800a398:	d956      	bls.n	800a448 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a39a:	2303      	movs	r3, #3
 800a39c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a39e:	e053      	b.n	800a448 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	78db      	ldrb	r3, [r3, #3]
 800a3a4:	f003 0303 	and.w	r3, r3, #3
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d10e      	bne.n	800a3ca <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	799b      	ldrb	r3, [r3, #6]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d007      	beq.n	800a3c4 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a3b8:	2b10      	cmp	r3, #16
 800a3ba:	d803      	bhi.n	800a3c4 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a3c0:	2b40      	cmp	r3, #64	@ 0x40
 800a3c2:	d941      	bls.n	800a448 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	75fb      	strb	r3, [r7, #23]
 800a3c8:	e03e      	b.n	800a448 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	78db      	ldrb	r3, [r3, #3]
 800a3ce:	f003 0303 	and.w	r3, r3, #3
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d10b      	bne.n	800a3ee <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	799b      	ldrb	r3, [r3, #6]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d004      	beq.n	800a3e8 <USBH_ParseEPDesc+0x162>
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	889b      	ldrh	r3, [r3, #4]
 800a3e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3e6:	d32f      	bcc.n	800a448 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	75fb      	strb	r3, [r7, #23]
 800a3ec:	e02c      	b.n	800a448 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	75fb      	strb	r3, [r7, #23]
 800a3f2:	e029      	b.n	800a448 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d120      	bne.n	800a440 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	78db      	ldrb	r3, [r3, #3]
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	889b      	ldrh	r3, [r3, #4]
 800a40e:	2b08      	cmp	r3, #8
 800a410:	d01a      	beq.n	800a448 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a412:	2303      	movs	r3, #3
 800a414:	75fb      	strb	r3, [r7, #23]
 800a416:	e017      	b.n	800a448 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	78db      	ldrb	r3, [r3, #3]
 800a41c:	f003 0303 	and.w	r3, r3, #3
 800a420:	2b03      	cmp	r3, #3
 800a422:	d10a      	bne.n	800a43a <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	799b      	ldrb	r3, [r3, #6]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d003      	beq.n	800a434 <USBH_ParseEPDesc+0x1ae>
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	889b      	ldrh	r3, [r3, #4]
 800a430:	2b08      	cmp	r3, #8
 800a432:	d909      	bls.n	800a448 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a434:	2303      	movs	r3, #3
 800a436:	75fb      	strb	r3, [r7, #23]
 800a438:	e006      	b.n	800a448 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a43a:	2303      	movs	r3, #3
 800a43c:	75fb      	strb	r3, [r7, #23]
 800a43e:	e003      	b.n	800a448 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a440:	2303      	movs	r3, #3
 800a442:	75fb      	strb	r3, [r7, #23]
 800a444:	e000      	b.n	800a448 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a446:	bf00      	nop
  }

  return status;
 800a448:	7dfb      	ldrb	r3, [r7, #23]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	371c      	adds	r7, #28
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a456:	b480      	push	{r7}
 800a458:	b087      	sub	sp, #28
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	60b9      	str	r1, [r7, #8]
 800a460:	4613      	mov	r3, r2
 800a462:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3301      	adds	r3, #1
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d120      	bne.n	800a4b0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	1e9a      	subs	r2, r3, #2
 800a474:	88fb      	ldrh	r3, [r7, #6]
 800a476:	4293      	cmp	r3, r2
 800a478:	bf28      	it	cs
 800a47a:	4613      	movcs	r3, r2
 800a47c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3302      	adds	r3, #2
 800a482:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a484:	2300      	movs	r3, #0
 800a486:	82fb      	strh	r3, [r7, #22]
 800a488:	e00b      	b.n	800a4a2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a48a:	8afb      	ldrh	r3, [r7, #22]
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	4413      	add	r3, r2
 800a490:	781a      	ldrb	r2, [r3, #0]
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	3301      	adds	r3, #1
 800a49a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a49c:	8afb      	ldrh	r3, [r7, #22]
 800a49e:	3302      	adds	r3, #2
 800a4a0:	82fb      	strh	r3, [r7, #22]
 800a4a2:	8afa      	ldrh	r2, [r7, #22]
 800a4a4:	8abb      	ldrh	r3, [r7, #20]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d3ef      	bcc.n	800a48a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	701a      	strb	r2, [r3, #0]
  }
}
 800a4b0:	bf00      	nop
 800a4b2:	371c      	adds	r7, #28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	7812      	ldrb	r2, [r2, #0]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4413      	add	r3, r2
 800a4e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a4fe:	2301      	movs	r3, #1
 800a500:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	789b      	ldrb	r3, [r3, #2]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d002      	beq.n	800a510 <USBH_CtlReq+0x20>
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d00f      	beq.n	800a52e <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800a50e:	e027      	b.n	800a560 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	88fa      	ldrh	r2, [r7, #6]
 800a51a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2201      	movs	r2, #1
 800a520:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2202      	movs	r2, #2
 800a526:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a528:	2301      	movs	r3, #1
 800a52a:	75fb      	strb	r3, [r7, #23]
      break;
 800a52c:	e018      	b.n	800a560 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f000 f81c 	bl	800a56c <USBH_HandleControl>
 800a534:	4603      	mov	r3, r0
 800a536:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a538:	7dfb      	ldrb	r3, [r7, #23]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d002      	beq.n	800a544 <USBH_CtlReq+0x54>
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	2b03      	cmp	r3, #3
 800a542:	d106      	bne.n	800a552 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2201      	movs	r2, #1
 800a548:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	761a      	strb	r2, [r3, #24]
      break;
 800a550:	e005      	b.n	800a55e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a552:	7dfb      	ldrb	r3, [r7, #23]
 800a554:	2b02      	cmp	r3, #2
 800a556:	d102      	bne.n	800a55e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2201      	movs	r2, #1
 800a55c:	709a      	strb	r2, [r3, #2]
      break;
 800a55e:	bf00      	nop
  }
  return status;
 800a560:	7dfb      	ldrb	r3, [r7, #23]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
	...

0800a56c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af02      	add	r7, sp, #8
 800a572:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a574:	2301      	movs	r3, #1
 800a576:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a578:	2300      	movs	r3, #0
 800a57a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	7e1b      	ldrb	r3, [r3, #24]
 800a580:	3b01      	subs	r3, #1
 800a582:	2b0a      	cmp	r3, #10
 800a584:	f200 8157 	bhi.w	800a836 <USBH_HandleControl+0x2ca>
 800a588:	a201      	add	r2, pc, #4	@ (adr r2, 800a590 <USBH_HandleControl+0x24>)
 800a58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58e:	bf00      	nop
 800a590:	0800a5bd 	.word	0x0800a5bd
 800a594:	0800a5d7 	.word	0x0800a5d7
 800a598:	0800a641 	.word	0x0800a641
 800a59c:	0800a667 	.word	0x0800a667
 800a5a0:	0800a6a1 	.word	0x0800a6a1
 800a5a4:	0800a6cb 	.word	0x0800a6cb
 800a5a8:	0800a71d 	.word	0x0800a71d
 800a5ac:	0800a73f 	.word	0x0800a73f
 800a5b0:	0800a77b 	.word	0x0800a77b
 800a5b4:	0800a7a1 	.word	0x0800a7a1
 800a5b8:	0800a7df 	.word	0x0800a7df
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f103 0110 	add.w	r1, r3, #16
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	795b      	ldrb	r3, [r3, #5]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 f945 	bl	800a858 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	761a      	strb	r2, [r3, #24]
      break;
 800a5d4:	e13a      	b.n	800a84c <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	795b      	ldrb	r3, [r3, #5]
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 fcc7 	bl	800af70 <USBH_LL_GetURBState>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a5e6:	7bbb      	ldrb	r3, [r7, #14]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d11e      	bne.n	800a62a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	7c1b      	ldrb	r3, [r3, #16]
 800a5f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a5f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	8adb      	ldrh	r3, [r3, #22]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a5fe:	7b7b      	ldrb	r3, [r7, #13]
 800a600:	2b80      	cmp	r3, #128	@ 0x80
 800a602:	d103      	bne.n	800a60c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2203      	movs	r2, #3
 800a608:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a60a:	e116      	b.n	800a83a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2205      	movs	r2, #5
 800a610:	761a      	strb	r2, [r3, #24]
      break;
 800a612:	e112      	b.n	800a83a <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800a614:	7b7b      	ldrb	r3, [r7, #13]
 800a616:	2b80      	cmp	r3, #128	@ 0x80
 800a618:	d103      	bne.n	800a622 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2209      	movs	r2, #9
 800a61e:	761a      	strb	r2, [r3, #24]
      break;
 800a620:	e10b      	b.n	800a83a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2207      	movs	r2, #7
 800a626:	761a      	strb	r2, [r3, #24]
      break;
 800a628:	e107      	b.n	800a83a <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a62a:	7bbb      	ldrb	r3, [r7, #14]
 800a62c:	2b04      	cmp	r3, #4
 800a62e:	d003      	beq.n	800a638 <USBH_HandleControl+0xcc>
 800a630:	7bbb      	ldrb	r3, [r7, #14]
 800a632:	2b02      	cmp	r3, #2
 800a634:	f040 8101 	bne.w	800a83a <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	220b      	movs	r2, #11
 800a63c:	761a      	strb	r2, [r3, #24]
      break;
 800a63e:	e0fc      	b.n	800a83a <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a646:	b29a      	uxth	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6899      	ldr	r1, [r3, #8]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	899a      	ldrh	r2, [r3, #12]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	791b      	ldrb	r3, [r3, #4]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f93c 	bl	800a8d6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2204      	movs	r2, #4
 800a662:	761a      	strb	r2, [r3, #24]
      break;
 800a664:	e0f2      	b.n	800a84c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	791b      	ldrb	r3, [r3, #4]
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fc7f 	bl	800af70 <USBH_LL_GetURBState>
 800a672:	4603      	mov	r3, r0
 800a674:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a676:	7bbb      	ldrb	r3, [r7, #14]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d103      	bne.n	800a684 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2209      	movs	r2, #9
 800a680:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a682:	e0dc      	b.n	800a83e <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800a684:	7bbb      	ldrb	r3, [r7, #14]
 800a686:	2b05      	cmp	r3, #5
 800a688:	d102      	bne.n	800a690 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800a68a:	2303      	movs	r3, #3
 800a68c:	73fb      	strb	r3, [r7, #15]
      break;
 800a68e:	e0d6      	b.n	800a83e <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800a690:	7bbb      	ldrb	r3, [r7, #14]
 800a692:	2b04      	cmp	r3, #4
 800a694:	f040 80d3 	bne.w	800a83e <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	220b      	movs	r2, #11
 800a69c:	761a      	strb	r2, [r3, #24]
      break;
 800a69e:	e0ce      	b.n	800a83e <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6899      	ldr	r1, [r3, #8]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	899a      	ldrh	r2, [r3, #12]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	795b      	ldrb	r3, [r3, #5]
 800a6ac:	2001      	movs	r0, #1
 800a6ae:	9000      	str	r0, [sp, #0]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f8eb 	bl	800a88c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2206      	movs	r2, #6
 800a6c6:	761a      	strb	r2, [r3, #24]
      break;
 800a6c8:	e0c0      	b.n	800a84c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	795b      	ldrb	r3, [r3, #5]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fc4d 	bl	800af70 <USBH_LL_GetURBState>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a6da:	7bbb      	ldrb	r3, [r7, #14]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d103      	bne.n	800a6e8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2207      	movs	r2, #7
 800a6e4:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a6e6:	e0ac      	b.n	800a842 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800a6e8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ea:	2b05      	cmp	r3, #5
 800a6ec:	d105      	bne.n	800a6fa <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	220c      	movs	r2, #12
 800a6f2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6f8:	e0a3      	b.n	800a842 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a6fa:	7bbb      	ldrb	r3, [r7, #14]
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d103      	bne.n	800a708 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2205      	movs	r2, #5
 800a704:	761a      	strb	r2, [r3, #24]
      break;
 800a706:	e09c      	b.n	800a842 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800a708:	7bbb      	ldrb	r3, [r7, #14]
 800a70a:	2b04      	cmp	r3, #4
 800a70c:	f040 8099 	bne.w	800a842 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	220b      	movs	r2, #11
 800a714:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a716:	2302      	movs	r3, #2
 800a718:	73fb      	strb	r3, [r7, #15]
      break;
 800a71a:	e092      	b.n	800a842 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	791b      	ldrb	r3, [r3, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	2100      	movs	r1, #0
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f8d6 	bl	800a8d6 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a730:	b29a      	uxth	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2208      	movs	r2, #8
 800a73a:	761a      	strb	r2, [r3, #24]

      break;
 800a73c:	e086      	b.n	800a84c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	791b      	ldrb	r3, [r3, #4]
 800a742:	4619      	mov	r1, r3
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 fc13 	bl	800af70 <USBH_LL_GetURBState>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a74e:	7bbb      	ldrb	r3, [r7, #14]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d105      	bne.n	800a760 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	220d      	movs	r2, #13
 800a758:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a75e:	e072      	b.n	800a846 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800a760:	7bbb      	ldrb	r3, [r7, #14]
 800a762:	2b04      	cmp	r3, #4
 800a764:	d103      	bne.n	800a76e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	220b      	movs	r2, #11
 800a76a:	761a      	strb	r2, [r3, #24]
      break;
 800a76c:	e06b      	b.n	800a846 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800a76e:	7bbb      	ldrb	r3, [r7, #14]
 800a770:	2b05      	cmp	r3, #5
 800a772:	d168      	bne.n	800a846 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800a774:	2303      	movs	r3, #3
 800a776:	73fb      	strb	r3, [r7, #15]
      break;
 800a778:	e065      	b.n	800a846 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	795b      	ldrb	r3, [r3, #5]
 800a77e:	2201      	movs	r2, #1
 800a780:	9200      	str	r2, [sp, #0]
 800a782:	2200      	movs	r2, #0
 800a784:	2100      	movs	r1, #0
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f880 	bl	800a88c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a792:	b29a      	uxth	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	220a      	movs	r2, #10
 800a79c:	761a      	strb	r2, [r3, #24]
      break;
 800a79e:	e055      	b.n	800a84c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	795b      	ldrb	r3, [r3, #5]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fbe2 	bl	800af70 <USBH_LL_GetURBState>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d105      	bne.n	800a7c2 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	220d      	movs	r2, #13
 800a7be:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a7c0:	e043      	b.n	800a84a <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a7c2:	7bbb      	ldrb	r3, [r7, #14]
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d103      	bne.n	800a7d0 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2209      	movs	r2, #9
 800a7cc:	761a      	strb	r2, [r3, #24]
      break;
 800a7ce:	e03c      	b.n	800a84a <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800a7d0:	7bbb      	ldrb	r3, [r7, #14]
 800a7d2:	2b04      	cmp	r3, #4
 800a7d4:	d139      	bne.n	800a84a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	220b      	movs	r2, #11
 800a7da:	761a      	strb	r2, [r3, #24]
      break;
 800a7dc:	e035      	b.n	800a84a <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	7e5b      	ldrb	r3, [r3, #25]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	765a      	strb	r2, [r3, #25]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	7e5b      	ldrb	r3, [r3, #25]
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	d806      	bhi.n	800a800 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a7fe:	e025      	b.n	800a84c <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a806:	2106      	movs	r1, #6
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	795b      	ldrb	r3, [r3, #5]
 800a816:	4619      	mov	r1, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f90d 	bl	800aa38 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	791b      	ldrb	r3, [r3, #4]
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f907 	bl	800aa38 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a830:	2302      	movs	r3, #2
 800a832:	73fb      	strb	r3, [r7, #15]
      break;
 800a834:	e00a      	b.n	800a84c <USBH_HandleControl+0x2e0>

    default:
      break;
 800a836:	bf00      	nop
 800a838:	e008      	b.n	800a84c <USBH_HandleControl+0x2e0>
      break;
 800a83a:	bf00      	nop
 800a83c:	e006      	b.n	800a84c <USBH_HandleControl+0x2e0>
      break;
 800a83e:	bf00      	nop
 800a840:	e004      	b.n	800a84c <USBH_HandleControl+0x2e0>
      break;
 800a842:	bf00      	nop
 800a844:	e002      	b.n	800a84c <USBH_HandleControl+0x2e0>
      break;
 800a846:	bf00      	nop
 800a848:	e000      	b.n	800a84c <USBH_HandleControl+0x2e0>
      break;
 800a84a:	bf00      	nop
  }

  return status;
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop

0800a858 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af04      	add	r7, sp, #16
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	4613      	mov	r3, r2
 800a864:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a866:	79f9      	ldrb	r1, [r7, #7]
 800a868:	2300      	movs	r3, #0
 800a86a:	9303      	str	r3, [sp, #12]
 800a86c:	2308      	movs	r3, #8
 800a86e:	9302      	str	r3, [sp, #8]
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	9301      	str	r3, [sp, #4]
 800a874:	2300      	movs	r3, #0
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	2300      	movs	r3, #0
 800a87a:	2200      	movs	r2, #0
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f000 fb46 	bl	800af0e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b088      	sub	sp, #32
 800a890:	af04      	add	r7, sp, #16
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	4611      	mov	r1, r2
 800a898:	461a      	mov	r2, r3
 800a89a:	460b      	mov	r3, r1
 800a89c:	80fb      	strh	r3, [r7, #6]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a8b0:	7979      	ldrb	r1, [r7, #5]
 800a8b2:	7e3b      	ldrb	r3, [r7, #24]
 800a8b4:	9303      	str	r3, [sp, #12]
 800a8b6:	88fb      	ldrh	r3, [r7, #6]
 800a8b8:	9302      	str	r3, [sp, #8]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	2301      	movs	r3, #1
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f000 fb21 	bl	800af0e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b088      	sub	sp, #32
 800a8da:	af04      	add	r7, sp, #16
 800a8dc:	60f8      	str	r0, [r7, #12]
 800a8de:	60b9      	str	r1, [r7, #8]
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	80fb      	strh	r3, [r7, #6]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a8ec:	7979      	ldrb	r1, [r7, #5]
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	9303      	str	r3, [sp, #12]
 800a8f2:	88fb      	ldrh	r3, [r7, #6]
 800a8f4:	9302      	str	r3, [sp, #8]
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	9301      	str	r3, [sp, #4]
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	2300      	movs	r3, #0
 800a900:	2201      	movs	r2, #1
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 fb03 	bl	800af0e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a908:	2300      	movs	r3, #0

}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b088      	sub	sp, #32
 800a916:	af04      	add	r7, sp, #16
 800a918:	60f8      	str	r0, [r7, #12]
 800a91a:	60b9      	str	r1, [r7, #8]
 800a91c:	4611      	mov	r1, r2
 800a91e:	461a      	mov	r2, r3
 800a920:	460b      	mov	r3, r1
 800a922:	80fb      	strh	r3, [r7, #6]
 800a924:	4613      	mov	r3, r2
 800a926:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a932:	2300      	movs	r3, #0
 800a934:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a936:	7979      	ldrb	r1, [r7, #5]
 800a938:	7e3b      	ldrb	r3, [r7, #24]
 800a93a:	9303      	str	r3, [sp, #12]
 800a93c:	88fb      	ldrh	r3, [r7, #6]
 800a93e:	9302      	str	r3, [sp, #8]
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	9301      	str	r3, [sp, #4]
 800a944:	2301      	movs	r3, #1
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	2302      	movs	r3, #2
 800a94a:	2200      	movs	r2, #0
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 fade 	bl	800af0e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b088      	sub	sp, #32
 800a960:	af04      	add	r7, sp, #16
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	4611      	mov	r1, r2
 800a968:	461a      	mov	r2, r3
 800a96a:	460b      	mov	r3, r1
 800a96c:	80fb      	strh	r3, [r7, #6]
 800a96e:	4613      	mov	r3, r2
 800a970:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a972:	7979      	ldrb	r1, [r7, #5]
 800a974:	2300      	movs	r3, #0
 800a976:	9303      	str	r3, [sp, #12]
 800a978:	88fb      	ldrh	r3, [r7, #6]
 800a97a:	9302      	str	r3, [sp, #8]
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	9301      	str	r3, [sp, #4]
 800a980:	2301      	movs	r3, #1
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	2302      	movs	r3, #2
 800a986:	2201      	movs	r2, #1
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f000 fac0 	bl	800af0e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b086      	sub	sp, #24
 800a99c:	af04      	add	r7, sp, #16
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	4608      	mov	r0, r1
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	70fb      	strb	r3, [r7, #3]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	70bb      	strb	r3, [r7, #2]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a9b2:	7878      	ldrb	r0, [r7, #1]
 800a9b4:	78ba      	ldrb	r2, [r7, #2]
 800a9b6:	78f9      	ldrb	r1, [r7, #3]
 800a9b8:	8b3b      	ldrh	r3, [r7, #24]
 800a9ba:	9302      	str	r3, [sp, #8]
 800a9bc:	7d3b      	ldrb	r3, [r7, #20]
 800a9be:	9301      	str	r3, [sp, #4]
 800a9c0:	7c3b      	ldrb	r3, [r7, #16]
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fa53 	bl	800ae72 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b082      	sub	sp, #8
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	460b      	mov	r3, r1
 800a9e0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a9e2:	78fb      	ldrb	r3, [r7, #3]
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fa72 	bl	800aed0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	460b      	mov	r3, r1
 800aa00:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f836 	bl	800aa74 <USBH_GetFreePipe>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800aa0c:	89fb      	ldrh	r3, [r7, #14]
 800aa0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d00a      	beq.n	800aa2c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800aa16:	78fa      	ldrb	r2, [r7, #3]
 800aa18:	89fb      	ldrh	r3, [r7, #14]
 800aa1a:	f003 030f 	and.w	r3, r3, #15
 800aa1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aa22:	6879      	ldr	r1, [r7, #4]
 800aa24:	33e0      	adds	r3, #224	@ 0xe0
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	440b      	add	r3, r1
 800aa2a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aa2c:	89fb      	ldrh	r3, [r7, #14]
 800aa2e:	b2db      	uxtb	r3, r3
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	460b      	mov	r3, r1
 800aa42:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800aa44:	78fb      	ldrb	r3, [r7, #3]
 800aa46:	2b0f      	cmp	r3, #15
 800aa48:	d80d      	bhi.n	800aa66 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aa4a:	78fb      	ldrb	r3, [r7, #3]
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	33e0      	adds	r3, #224	@ 0xe0
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	78fb      	ldrb	r3, [r7, #3]
 800aa58:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800aa5c:	6879      	ldr	r1, [r7, #4]
 800aa5e:	33e0      	adds	r3, #224	@ 0xe0
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	440b      	add	r3, r1
 800aa64:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800aa80:	2300      	movs	r3, #0
 800aa82:	73fb      	strb	r3, [r7, #15]
 800aa84:	e00f      	b.n	800aaa6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800aa86:	7bfb      	ldrb	r3, [r7, #15]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	33e0      	adds	r3, #224	@ 0xe0
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d102      	bne.n	800aaa0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800aa9a:	7bfb      	ldrb	r3, [r7, #15]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	e007      	b.n	800aab0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	73fb      	strb	r3, [r7, #15]
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
 800aaa8:	2b0f      	cmp	r3, #15
 800aaaa:	d9ec      	bls.n	800aa86 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800aaac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800aac0:	2201      	movs	r2, #1
 800aac2:	490e      	ldr	r1, [pc, #56]	@ (800aafc <MX_USB_HOST_Init+0x40>)
 800aac4:	480e      	ldr	r0, [pc, #56]	@ (800ab00 <MX_USB_HOST_Init+0x44>)
 800aac6:	f7fe fb0f 	bl	80090e8 <USBH_Init>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aad0:	f7f6 fee2 	bl	8001898 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800aad4:	490b      	ldr	r1, [pc, #44]	@ (800ab04 <MX_USB_HOST_Init+0x48>)
 800aad6:	480a      	ldr	r0, [pc, #40]	@ (800ab00 <MX_USB_HOST_Init+0x44>)
 800aad8:	f7fe fbb1 	bl	800923e <USBH_RegisterClass>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aae2:	f7f6 fed9 	bl	8001898 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aae6:	4806      	ldr	r0, [pc, #24]	@ (800ab00 <MX_USB_HOST_Init+0x44>)
 800aae8:	f7fe fc35 	bl	8009356 <USBH_Start>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d001      	beq.n	800aaf6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aaf2:	f7f6 fed1 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aaf6:	bf00      	nop
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	0800ab1d 	.word	0x0800ab1d
 800ab00:	2000042c 	.word	0x2000042c
 800ab04:	2000000c 	.word	0x2000000c

0800ab08 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ab0c:	4802      	ldr	r0, [pc, #8]	@ (800ab18 <MX_USB_HOST_Process+0x10>)
 800ab0e:	f7fe fc33 	bl	8009378 <USBH_Process>
}
 800ab12:	bf00      	nop
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	2000042c 	.word	0x2000042c

0800ab1c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	460b      	mov	r3, r1
 800ab26:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ab28:	78fb      	ldrb	r3, [r7, #3]
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d819      	bhi.n	800ab64 <USBH_UserProcess+0x48>
 800ab30:	a201      	add	r2, pc, #4	@ (adr r2, 800ab38 <USBH_UserProcess+0x1c>)
 800ab32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab36:	bf00      	nop
 800ab38:	0800ab65 	.word	0x0800ab65
 800ab3c:	0800ab55 	.word	0x0800ab55
 800ab40:	0800ab65 	.word	0x0800ab65
 800ab44:	0800ab5d 	.word	0x0800ab5d
 800ab48:	0800ab4d 	.word	0x0800ab4d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ab4c:	4b09      	ldr	r3, [pc, #36]	@ (800ab74 <USBH_UserProcess+0x58>)
 800ab4e:	2203      	movs	r2, #3
 800ab50:	701a      	strb	r2, [r3, #0]
  break;
 800ab52:	e008      	b.n	800ab66 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ab54:	4b07      	ldr	r3, [pc, #28]	@ (800ab74 <USBH_UserProcess+0x58>)
 800ab56:	2202      	movs	r2, #2
 800ab58:	701a      	strb	r2, [r3, #0]
  break;
 800ab5a:	e004      	b.n	800ab66 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ab5c:	4b05      	ldr	r3, [pc, #20]	@ (800ab74 <USBH_UserProcess+0x58>)
 800ab5e:	2201      	movs	r2, #1
 800ab60:	701a      	strb	r2, [r3, #0]
  break;
 800ab62:	e000      	b.n	800ab66 <USBH_UserProcess+0x4a>

  default:
  break;
 800ab64:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ab66:	bf00      	nop
 800ab68:	370c      	adds	r7, #12
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	20000804 	.word	0x20000804

0800ab78 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b08a      	sub	sp, #40	@ 0x28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab80:	f107 0314 	add.w	r3, r7, #20
 800ab84:	2200      	movs	r2, #0
 800ab86:	601a      	str	r2, [r3, #0]
 800ab88:	605a      	str	r2, [r3, #4]
 800ab8a:	609a      	str	r2, [r3, #8]
 800ab8c:	60da      	str	r2, [r3, #12]
 800ab8e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab98:	d147      	bne.n	800ac2a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	613b      	str	r3, [r7, #16]
 800ab9e:	4b25      	ldr	r3, [pc, #148]	@ (800ac34 <HAL_HCD_MspInit+0xbc>)
 800aba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aba2:	4a24      	ldr	r2, [pc, #144]	@ (800ac34 <HAL_HCD_MspInit+0xbc>)
 800aba4:	f043 0301 	orr.w	r3, r3, #1
 800aba8:	6313      	str	r3, [r2, #48]	@ 0x30
 800abaa:	4b22      	ldr	r3, [pc, #136]	@ (800ac34 <HAL_HCD_MspInit+0xbc>)
 800abac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abae:	f003 0301 	and.w	r3, r3, #1
 800abb2:	613b      	str	r3, [r7, #16]
 800abb4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800abb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800abbc:	2300      	movs	r3, #0
 800abbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abc0:	2300      	movs	r3, #0
 800abc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800abc4:	f107 0314 	add.w	r3, r7, #20
 800abc8:	4619      	mov	r1, r3
 800abca:	481b      	ldr	r0, [pc, #108]	@ (800ac38 <HAL_HCD_MspInit+0xc0>)
 800abcc:	f7f7 fb78 	bl	80022c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800abd0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800abd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abd6:	2302      	movs	r3, #2
 800abd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abde:	2300      	movs	r3, #0
 800abe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800abe2:	230a      	movs	r3, #10
 800abe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abe6:	f107 0314 	add.w	r3, r7, #20
 800abea:	4619      	mov	r1, r3
 800abec:	4812      	ldr	r0, [pc, #72]	@ (800ac38 <HAL_HCD_MspInit+0xc0>)
 800abee:	f7f7 fb67 	bl	80022c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800abf2:	4b10      	ldr	r3, [pc, #64]	@ (800ac34 <HAL_HCD_MspInit+0xbc>)
 800abf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abf6:	4a0f      	ldr	r2, [pc, #60]	@ (800ac34 <HAL_HCD_MspInit+0xbc>)
 800abf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abfc:	6353      	str	r3, [r2, #52]	@ 0x34
 800abfe:	2300      	movs	r3, #0
 800ac00:	60fb      	str	r3, [r7, #12]
 800ac02:	4b0c      	ldr	r3, [pc, #48]	@ (800ac34 <HAL_HCD_MspInit+0xbc>)
 800ac04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac06:	4a0b      	ldr	r2, [pc, #44]	@ (800ac34 <HAL_HCD_MspInit+0xbc>)
 800ac08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ac0c:	6453      	str	r3, [r2, #68]	@ 0x44
 800ac0e:	4b09      	ldr	r3, [pc, #36]	@ (800ac34 <HAL_HCD_MspInit+0xbc>)
 800ac10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac16:	60fb      	str	r3, [r7, #12]
 800ac18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	2043      	movs	r0, #67	@ 0x43
 800ac20:	f7f7 fb17 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac24:	2043      	movs	r0, #67	@ 0x43
 800ac26:	f7f7 fb30 	bl	800228a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac2a:	bf00      	nop
 800ac2c:	3728      	adds	r7, #40	@ 0x28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	40023800 	.word	0x40023800
 800ac38:	40020000 	.word	0x40020000

0800ac3c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fe ff6d 	bl	8009b2a <USBH_LL_IncTimer>
}
 800ac50:	bf00      	nop
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fe ffa9 	bl	8009bbe <USBH_LL_Connect>
}
 800ac6c:	bf00      	nop
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7fe ffb2 	bl	8009bec <USBH_LL_Disconnect>
}
 800ac88:	bf00      	nop
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	70fb      	strb	r3, [r7, #3]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aca0:	bf00      	nop
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800acba:	4618      	mov	r0, r3
 800acbc:	f7fe ff5f 	bl	8009b7e <USBH_LL_PortEnabled>
}
 800acc0:	bf00      	nop
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fe ff5f 	bl	8009b9a <USBH_LL_PortDisabled>
}
 800acdc:	bf00      	nop
 800acde:	3708      	adds	r7, #8
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d12a      	bne.n	800ad4c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800acf6:	4a18      	ldr	r2, [pc, #96]	@ (800ad58 <USBH_LL_Init+0x74>)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a15      	ldr	r2, [pc, #84]	@ (800ad58 <USBH_LL_Init+0x74>)
 800ad02:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad06:	4b14      	ldr	r3, [pc, #80]	@ (800ad58 <USBH_LL_Init+0x74>)
 800ad08:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ad0c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ad0e:	4b12      	ldr	r3, [pc, #72]	@ (800ad58 <USBH_LL_Init+0x74>)
 800ad10:	2208      	movs	r2, #8
 800ad12:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ad14:	4b10      	ldr	r3, [pc, #64]	@ (800ad58 <USBH_LL_Init+0x74>)
 800ad16:	2201      	movs	r2, #1
 800ad18:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ad58 <USBH_LL_Init+0x74>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ad20:	4b0d      	ldr	r3, [pc, #52]	@ (800ad58 <USBH_LL_Init+0x74>)
 800ad22:	2202      	movs	r2, #2
 800ad24:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ad26:	4b0c      	ldr	r3, [pc, #48]	@ (800ad58 <USBH_LL_Init+0x74>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ad2c:	480a      	ldr	r0, [pc, #40]	@ (800ad58 <USBH_LL_Init+0x74>)
 800ad2e:	f7f7 fc7c 	bl	800262a <HAL_HCD_Init>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d001      	beq.n	800ad3c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ad38:	f7f6 fdae 	bl	8001898 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ad3c:	4806      	ldr	r0, [pc, #24]	@ (800ad58 <USBH_LL_Init+0x74>)
 800ad3e:	f7f8 f8dd 	bl	8002efc <HAL_HCD_GetCurrentFrame>
 800ad42:	4603      	mov	r3, r0
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7fe fee0 	bl	8009b0c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20000808 	.word	0x20000808

0800ad5c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7f8 f84a 	bl	8002e0c <HAL_HCD_Start>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 f95e 	bl	800b040 <USBH_Get_USB_Status>
 800ad84:	4603      	mov	r3, r0
 800ad86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b084      	sub	sp, #16
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7f8 f852 	bl	8002e52 <HAL_HCD_Stop>
 800adae:	4603      	mov	r3, r0
 800adb0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f000 f943 	bl	800b040 <USBH_Get_USB_Status>
 800adba:	4603      	mov	r3, r0
 800adbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800add0:	2301      	movs	r3, #1
 800add2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800adda:	4618      	mov	r0, r3
 800addc:	f7f8 f89c 	bl	8002f18 <HAL_HCD_GetCurrentSpeed>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d00c      	beq.n	800ae00 <USBH_LL_GetSpeed+0x38>
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d80d      	bhi.n	800ae06 <USBH_LL_GetSpeed+0x3e>
 800adea:	2b00      	cmp	r3, #0
 800adec:	d002      	beq.n	800adf4 <USBH_LL_GetSpeed+0x2c>
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d003      	beq.n	800adfa <USBH_LL_GetSpeed+0x32>
 800adf2:	e008      	b.n	800ae06 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800adf4:	2300      	movs	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]
    break;
 800adf8:	e008      	b.n	800ae0c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800adfa:	2301      	movs	r3, #1
 800adfc:	73fb      	strb	r3, [r7, #15]
    break;
 800adfe:	e005      	b.n	800ae0c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ae00:	2302      	movs	r3, #2
 800ae02:	73fb      	strb	r3, [r7, #15]
    break;
 800ae04:	e002      	b.n	800ae0c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ae06:	2301      	movs	r3, #1
 800ae08:	73fb      	strb	r3, [r7, #15]
    break;
 800ae0a:	bf00      	nop
  }
  return  speed;
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b084      	sub	sp, #16
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7f8 f82d 	bl	8002e8c <HAL_HCD_ResetPort>
 800ae32:	4603      	mov	r3, r0
 800ae34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae36:	7bfb      	ldrb	r3, [r7, #15]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 f901 	bl	800b040 <USBH_Get_USB_Status>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ae5e:	78fa      	ldrb	r2, [r7, #3]
 800ae60:	4611      	mov	r1, r2
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7f8 f835 	bl	8002ed2 <HAL_HCD_HC_GetXferCount>
 800ae68:	4603      	mov	r3, r0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ae72:	b590      	push	{r4, r7, lr}
 800ae74:	b089      	sub	sp, #36	@ 0x24
 800ae76:	af04      	add	r7, sp, #16
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	4608      	mov	r0, r1
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	461a      	mov	r2, r3
 800ae80:	4603      	mov	r3, r0
 800ae82:	70fb      	strb	r3, [r7, #3]
 800ae84:	460b      	mov	r3, r1
 800ae86:	70bb      	strb	r3, [r7, #2]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ae9a:	787c      	ldrb	r4, [r7, #1]
 800ae9c:	78ba      	ldrb	r2, [r7, #2]
 800ae9e:	78f9      	ldrb	r1, [r7, #3]
 800aea0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aea2:	9302      	str	r3, [sp, #8]
 800aea4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aea8:	9301      	str	r3, [sp, #4]
 800aeaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	4623      	mov	r3, r4
 800aeb2:	f7f7 fc21 	bl	80026f8 <HAL_HCD_HC_Init>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f000 f8bf 	bl	800b040 <USBH_Get_USB_Status>
 800aec2:	4603      	mov	r3, r0
 800aec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aec6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd90      	pop	{r4, r7, pc}

0800aed0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aeea:	78fa      	ldrb	r2, [r7, #3]
 800aeec:	4611      	mov	r1, r2
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7f7 fcba 	bl	8002868 <HAL_HCD_HC_Halt>
 800aef4:	4603      	mov	r3, r0
 800aef6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 f8a0 	bl	800b040 <USBH_Get_USB_Status>
 800af00:	4603      	mov	r3, r0
 800af02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af04:	7bbb      	ldrb	r3, [r7, #14]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800af0e:	b590      	push	{r4, r7, lr}
 800af10:	b089      	sub	sp, #36	@ 0x24
 800af12:	af04      	add	r7, sp, #16
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	4608      	mov	r0, r1
 800af18:	4611      	mov	r1, r2
 800af1a:	461a      	mov	r2, r3
 800af1c:	4603      	mov	r3, r0
 800af1e:	70fb      	strb	r3, [r7, #3]
 800af20:	460b      	mov	r3, r1
 800af22:	70bb      	strb	r3, [r7, #2]
 800af24:	4613      	mov	r3, r2
 800af26:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af2c:	2300      	movs	r3, #0
 800af2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800af36:	787c      	ldrb	r4, [r7, #1]
 800af38:	78ba      	ldrb	r2, [r7, #2]
 800af3a:	78f9      	ldrb	r1, [r7, #3]
 800af3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800af40:	9303      	str	r3, [sp, #12]
 800af42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800af44:	9302      	str	r3, [sp, #8]
 800af46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	4623      	mov	r3, r4
 800af52:	f7f7 fcad 	bl	80028b0 <HAL_HCD_HC_SubmitRequest>
 800af56:	4603      	mov	r3, r0
 800af58:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f000 f86f 	bl	800b040 <USBH_Get_USB_Status>
 800af62:	4603      	mov	r3, r0
 800af64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af66:	7bbb      	ldrb	r3, [r7, #14]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3714      	adds	r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd90      	pop	{r4, r7, pc}

0800af70 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	460b      	mov	r3, r1
 800af7a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af82:	78fa      	ldrb	r2, [r7, #3]
 800af84:	4611      	mov	r1, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f7f7 ff8e 	bl	8002ea8 <HAL_HCD_HC_GetURBState>
 800af8c:	4603      	mov	r3, r0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b082      	sub	sp, #8
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	460b      	mov	r3, r1
 800afa0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d103      	bne.n	800afb4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800afac:	78fb      	ldrb	r3, [r7, #3]
 800afae:	4618      	mov	r0, r3
 800afb0:	f000 f872 	bl	800b098 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800afb4:	20c8      	movs	r0, #200	@ 0xc8
 800afb6:	f7f7 f84d 	bl	8002054 <HAL_Delay>
  return USBH_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	460b      	mov	r3, r1
 800afce:	70fb      	strb	r3, [r7, #3]
 800afd0:	4613      	mov	r3, r2
 800afd2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800afda:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800afdc:	78fa      	ldrb	r2, [r7, #3]
 800afde:	68f9      	ldr	r1, [r7, #12]
 800afe0:	4613      	mov	r3, r2
 800afe2:	011b      	lsls	r3, r3, #4
 800afe4:	1a9b      	subs	r3, r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	440b      	add	r3, r1
 800afea:	3317      	adds	r3, #23
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00a      	beq.n	800b008 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aff2:	78fa      	ldrb	r2, [r7, #3]
 800aff4:	68f9      	ldr	r1, [r7, #12]
 800aff6:	4613      	mov	r3, r2
 800aff8:	011b      	lsls	r3, r3, #4
 800affa:	1a9b      	subs	r3, r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	440b      	add	r3, r1
 800b000:	333c      	adds	r3, #60	@ 0x3c
 800b002:	78ba      	ldrb	r2, [r7, #2]
 800b004:	701a      	strb	r2, [r3, #0]
 800b006:	e009      	b.n	800b01c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b008:	78fa      	ldrb	r2, [r7, #3]
 800b00a:	68f9      	ldr	r1, [r7, #12]
 800b00c:	4613      	mov	r3, r2
 800b00e:	011b      	lsls	r3, r3, #4
 800b010:	1a9b      	subs	r3, r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	440b      	add	r3, r1
 800b016:	333d      	adds	r3, #61	@ 0x3d
 800b018:	78ba      	ldrb	r2, [r7, #2]
 800b01a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b082      	sub	sp, #8
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7f7 f80e 	bl	8002054 <HAL_Delay>
}
 800b038:	bf00      	nop
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	4603      	mov	r3, r0
 800b048:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b04e:	79fb      	ldrb	r3, [r7, #7]
 800b050:	2b03      	cmp	r3, #3
 800b052:	d817      	bhi.n	800b084 <USBH_Get_USB_Status+0x44>
 800b054:	a201      	add	r2, pc, #4	@ (adr r2, 800b05c <USBH_Get_USB_Status+0x1c>)
 800b056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05a:	bf00      	nop
 800b05c:	0800b06d 	.word	0x0800b06d
 800b060:	0800b073 	.word	0x0800b073
 800b064:	0800b079 	.word	0x0800b079
 800b068:	0800b07f 	.word	0x0800b07f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	73fb      	strb	r3, [r7, #15]
    break;
 800b070:	e00b      	b.n	800b08a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b072:	2302      	movs	r3, #2
 800b074:	73fb      	strb	r3, [r7, #15]
    break;
 800b076:	e008      	b.n	800b08a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b078:	2301      	movs	r3, #1
 800b07a:	73fb      	strb	r3, [r7, #15]
    break;
 800b07c:	e005      	b.n	800b08a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b07e:	2302      	movs	r3, #2
 800b080:	73fb      	strb	r3, [r7, #15]
    break;
 800b082:	e002      	b.n	800b08a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b084:	2302      	movs	r3, #2
 800b086:	73fb      	strb	r3, [r7, #15]
    break;
 800b088:	bf00      	nop
  }
  return usb_status;
 800b08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	4603      	mov	r3, r0
 800b0a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b0a2:	79fb      	ldrb	r3, [r7, #7]
 800b0a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b0a6:	79fb      	ldrb	r3, [r7, #7]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d102      	bne.n	800b0b2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	73fb      	strb	r3, [r7, #15]
 800b0b0:	e001      	b.n	800b0b6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b0b6:	7bfb      	ldrb	r3, [r7, #15]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	2101      	movs	r1, #1
 800b0bc:	4803      	ldr	r0, [pc, #12]	@ (800b0cc <MX_DriverVbusFS+0x34>)
 800b0be:	f7f7 fa9b 	bl	80025f8 <HAL_GPIO_WritePin>
}
 800b0c2:	bf00      	nop
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	40020800 	.word	0x40020800

0800b0d0 <malloc>:
 800b0d0:	4b02      	ldr	r3, [pc, #8]	@ (800b0dc <malloc+0xc>)
 800b0d2:	4601      	mov	r1, r0
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	f000 b82d 	b.w	800b134 <_malloc_r>
 800b0da:	bf00      	nop
 800b0dc:	20000038 	.word	0x20000038

0800b0e0 <free>:
 800b0e0:	4b02      	ldr	r3, [pc, #8]	@ (800b0ec <free+0xc>)
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	6818      	ldr	r0, [r3, #0]
 800b0e6:	f001 bd07 	b.w	800caf8 <_free_r>
 800b0ea:	bf00      	nop
 800b0ec:	20000038 	.word	0x20000038

0800b0f0 <sbrk_aligned>:
 800b0f0:	b570      	push	{r4, r5, r6, lr}
 800b0f2:	4e0f      	ldr	r6, [pc, #60]	@ (800b130 <sbrk_aligned+0x40>)
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	6831      	ldr	r1, [r6, #0]
 800b0f8:	4605      	mov	r5, r0
 800b0fa:	b911      	cbnz	r1, 800b102 <sbrk_aligned+0x12>
 800b0fc:	f000 fe54 	bl	800bda8 <_sbrk_r>
 800b100:	6030      	str	r0, [r6, #0]
 800b102:	4621      	mov	r1, r4
 800b104:	4628      	mov	r0, r5
 800b106:	f000 fe4f 	bl	800bda8 <_sbrk_r>
 800b10a:	1c43      	adds	r3, r0, #1
 800b10c:	d103      	bne.n	800b116 <sbrk_aligned+0x26>
 800b10e:	f04f 34ff 	mov.w	r4, #4294967295
 800b112:	4620      	mov	r0, r4
 800b114:	bd70      	pop	{r4, r5, r6, pc}
 800b116:	1cc4      	adds	r4, r0, #3
 800b118:	f024 0403 	bic.w	r4, r4, #3
 800b11c:	42a0      	cmp	r0, r4
 800b11e:	d0f8      	beq.n	800b112 <sbrk_aligned+0x22>
 800b120:	1a21      	subs	r1, r4, r0
 800b122:	4628      	mov	r0, r5
 800b124:	f000 fe40 	bl	800bda8 <_sbrk_r>
 800b128:	3001      	adds	r0, #1
 800b12a:	d1f2      	bne.n	800b112 <sbrk_aligned+0x22>
 800b12c:	e7ef      	b.n	800b10e <sbrk_aligned+0x1e>
 800b12e:	bf00      	nop
 800b130:	20000be8 	.word	0x20000be8

0800b134 <_malloc_r>:
 800b134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b138:	1ccd      	adds	r5, r1, #3
 800b13a:	f025 0503 	bic.w	r5, r5, #3
 800b13e:	3508      	adds	r5, #8
 800b140:	2d0c      	cmp	r5, #12
 800b142:	bf38      	it	cc
 800b144:	250c      	movcc	r5, #12
 800b146:	2d00      	cmp	r5, #0
 800b148:	4606      	mov	r6, r0
 800b14a:	db01      	blt.n	800b150 <_malloc_r+0x1c>
 800b14c:	42a9      	cmp	r1, r5
 800b14e:	d904      	bls.n	800b15a <_malloc_r+0x26>
 800b150:	230c      	movs	r3, #12
 800b152:	6033      	str	r3, [r6, #0]
 800b154:	2000      	movs	r0, #0
 800b156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b15a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b230 <_malloc_r+0xfc>
 800b15e:	f000 f869 	bl	800b234 <__malloc_lock>
 800b162:	f8d8 3000 	ldr.w	r3, [r8]
 800b166:	461c      	mov	r4, r3
 800b168:	bb44      	cbnz	r4, 800b1bc <_malloc_r+0x88>
 800b16a:	4629      	mov	r1, r5
 800b16c:	4630      	mov	r0, r6
 800b16e:	f7ff ffbf 	bl	800b0f0 <sbrk_aligned>
 800b172:	1c43      	adds	r3, r0, #1
 800b174:	4604      	mov	r4, r0
 800b176:	d158      	bne.n	800b22a <_malloc_r+0xf6>
 800b178:	f8d8 4000 	ldr.w	r4, [r8]
 800b17c:	4627      	mov	r7, r4
 800b17e:	2f00      	cmp	r7, #0
 800b180:	d143      	bne.n	800b20a <_malloc_r+0xd6>
 800b182:	2c00      	cmp	r4, #0
 800b184:	d04b      	beq.n	800b21e <_malloc_r+0xea>
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	4639      	mov	r1, r7
 800b18a:	4630      	mov	r0, r6
 800b18c:	eb04 0903 	add.w	r9, r4, r3
 800b190:	f000 fe0a 	bl	800bda8 <_sbrk_r>
 800b194:	4581      	cmp	r9, r0
 800b196:	d142      	bne.n	800b21e <_malloc_r+0xea>
 800b198:	6821      	ldr	r1, [r4, #0]
 800b19a:	1a6d      	subs	r5, r5, r1
 800b19c:	4629      	mov	r1, r5
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f7ff ffa6 	bl	800b0f0 <sbrk_aligned>
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d03a      	beq.n	800b21e <_malloc_r+0xea>
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	442b      	add	r3, r5
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b2:	685a      	ldr	r2, [r3, #4]
 800b1b4:	bb62      	cbnz	r2, 800b210 <_malloc_r+0xdc>
 800b1b6:	f8c8 7000 	str.w	r7, [r8]
 800b1ba:	e00f      	b.n	800b1dc <_malloc_r+0xa8>
 800b1bc:	6822      	ldr	r2, [r4, #0]
 800b1be:	1b52      	subs	r2, r2, r5
 800b1c0:	d420      	bmi.n	800b204 <_malloc_r+0xd0>
 800b1c2:	2a0b      	cmp	r2, #11
 800b1c4:	d917      	bls.n	800b1f6 <_malloc_r+0xc2>
 800b1c6:	1961      	adds	r1, r4, r5
 800b1c8:	42a3      	cmp	r3, r4
 800b1ca:	6025      	str	r5, [r4, #0]
 800b1cc:	bf18      	it	ne
 800b1ce:	6059      	strne	r1, [r3, #4]
 800b1d0:	6863      	ldr	r3, [r4, #4]
 800b1d2:	bf08      	it	eq
 800b1d4:	f8c8 1000 	streq.w	r1, [r8]
 800b1d8:	5162      	str	r2, [r4, r5]
 800b1da:	604b      	str	r3, [r1, #4]
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f000 f82f 	bl	800b240 <__malloc_unlock>
 800b1e2:	f104 000b 	add.w	r0, r4, #11
 800b1e6:	1d23      	adds	r3, r4, #4
 800b1e8:	f020 0007 	bic.w	r0, r0, #7
 800b1ec:	1ac2      	subs	r2, r0, r3
 800b1ee:	bf1c      	itt	ne
 800b1f0:	1a1b      	subne	r3, r3, r0
 800b1f2:	50a3      	strne	r3, [r4, r2]
 800b1f4:	e7af      	b.n	800b156 <_malloc_r+0x22>
 800b1f6:	6862      	ldr	r2, [r4, #4]
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	bf0c      	ite	eq
 800b1fc:	f8c8 2000 	streq.w	r2, [r8]
 800b200:	605a      	strne	r2, [r3, #4]
 800b202:	e7eb      	b.n	800b1dc <_malloc_r+0xa8>
 800b204:	4623      	mov	r3, r4
 800b206:	6864      	ldr	r4, [r4, #4]
 800b208:	e7ae      	b.n	800b168 <_malloc_r+0x34>
 800b20a:	463c      	mov	r4, r7
 800b20c:	687f      	ldr	r7, [r7, #4]
 800b20e:	e7b6      	b.n	800b17e <_malloc_r+0x4a>
 800b210:	461a      	mov	r2, r3
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	42a3      	cmp	r3, r4
 800b216:	d1fb      	bne.n	800b210 <_malloc_r+0xdc>
 800b218:	2300      	movs	r3, #0
 800b21a:	6053      	str	r3, [r2, #4]
 800b21c:	e7de      	b.n	800b1dc <_malloc_r+0xa8>
 800b21e:	230c      	movs	r3, #12
 800b220:	6033      	str	r3, [r6, #0]
 800b222:	4630      	mov	r0, r6
 800b224:	f000 f80c 	bl	800b240 <__malloc_unlock>
 800b228:	e794      	b.n	800b154 <_malloc_r+0x20>
 800b22a:	6005      	str	r5, [r0, #0]
 800b22c:	e7d6      	b.n	800b1dc <_malloc_r+0xa8>
 800b22e:	bf00      	nop
 800b230:	20000bec 	.word	0x20000bec

0800b234 <__malloc_lock>:
 800b234:	4801      	ldr	r0, [pc, #4]	@ (800b23c <__malloc_lock+0x8>)
 800b236:	f000 be04 	b.w	800be42 <__retarget_lock_acquire_recursive>
 800b23a:	bf00      	nop
 800b23c:	20000d30 	.word	0x20000d30

0800b240 <__malloc_unlock>:
 800b240:	4801      	ldr	r0, [pc, #4]	@ (800b248 <__malloc_unlock+0x8>)
 800b242:	f000 bdff 	b.w	800be44 <__retarget_lock_release_recursive>
 800b246:	bf00      	nop
 800b248:	20000d30 	.word	0x20000d30

0800b24c <__cvt>:
 800b24c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b250:	ec57 6b10 	vmov	r6, r7, d0
 800b254:	2f00      	cmp	r7, #0
 800b256:	460c      	mov	r4, r1
 800b258:	4619      	mov	r1, r3
 800b25a:	463b      	mov	r3, r7
 800b25c:	bfbb      	ittet	lt
 800b25e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b262:	461f      	movlt	r7, r3
 800b264:	2300      	movge	r3, #0
 800b266:	232d      	movlt	r3, #45	@ 0x2d
 800b268:	700b      	strb	r3, [r1, #0]
 800b26a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b26c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b270:	4691      	mov	r9, r2
 800b272:	f023 0820 	bic.w	r8, r3, #32
 800b276:	bfbc      	itt	lt
 800b278:	4632      	movlt	r2, r6
 800b27a:	4616      	movlt	r6, r2
 800b27c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b280:	d005      	beq.n	800b28e <__cvt+0x42>
 800b282:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b286:	d100      	bne.n	800b28a <__cvt+0x3e>
 800b288:	3401      	adds	r4, #1
 800b28a:	2102      	movs	r1, #2
 800b28c:	e000      	b.n	800b290 <__cvt+0x44>
 800b28e:	2103      	movs	r1, #3
 800b290:	ab03      	add	r3, sp, #12
 800b292:	9301      	str	r3, [sp, #4]
 800b294:	ab02      	add	r3, sp, #8
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	ec47 6b10 	vmov	d0, r6, r7
 800b29c:	4653      	mov	r3, sl
 800b29e:	4622      	mov	r2, r4
 800b2a0:	f000 fe5a 	bl	800bf58 <_dtoa_r>
 800b2a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b2a8:	4605      	mov	r5, r0
 800b2aa:	d119      	bne.n	800b2e0 <__cvt+0x94>
 800b2ac:	f019 0f01 	tst.w	r9, #1
 800b2b0:	d00e      	beq.n	800b2d0 <__cvt+0x84>
 800b2b2:	eb00 0904 	add.w	r9, r0, r4
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	4639      	mov	r1, r7
 800b2be:	f7f5 fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2c2:	b108      	cbz	r0, 800b2c8 <__cvt+0x7c>
 800b2c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b2c8:	2230      	movs	r2, #48	@ 0x30
 800b2ca:	9b03      	ldr	r3, [sp, #12]
 800b2cc:	454b      	cmp	r3, r9
 800b2ce:	d31e      	bcc.n	800b30e <__cvt+0xc2>
 800b2d0:	9b03      	ldr	r3, [sp, #12]
 800b2d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2d4:	1b5b      	subs	r3, r3, r5
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	6013      	str	r3, [r2, #0]
 800b2da:	b004      	add	sp, #16
 800b2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b2e4:	eb00 0904 	add.w	r9, r0, r4
 800b2e8:	d1e5      	bne.n	800b2b6 <__cvt+0x6a>
 800b2ea:	7803      	ldrb	r3, [r0, #0]
 800b2ec:	2b30      	cmp	r3, #48	@ 0x30
 800b2ee:	d10a      	bne.n	800b306 <__cvt+0xba>
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	4639      	mov	r1, r7
 800b2f8:	f7f5 fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2fc:	b918      	cbnz	r0, 800b306 <__cvt+0xba>
 800b2fe:	f1c4 0401 	rsb	r4, r4, #1
 800b302:	f8ca 4000 	str.w	r4, [sl]
 800b306:	f8da 3000 	ldr.w	r3, [sl]
 800b30a:	4499      	add	r9, r3
 800b30c:	e7d3      	b.n	800b2b6 <__cvt+0x6a>
 800b30e:	1c59      	adds	r1, r3, #1
 800b310:	9103      	str	r1, [sp, #12]
 800b312:	701a      	strb	r2, [r3, #0]
 800b314:	e7d9      	b.n	800b2ca <__cvt+0x7e>

0800b316 <__exponent>:
 800b316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b318:	2900      	cmp	r1, #0
 800b31a:	bfba      	itte	lt
 800b31c:	4249      	neglt	r1, r1
 800b31e:	232d      	movlt	r3, #45	@ 0x2d
 800b320:	232b      	movge	r3, #43	@ 0x2b
 800b322:	2909      	cmp	r1, #9
 800b324:	7002      	strb	r2, [r0, #0]
 800b326:	7043      	strb	r3, [r0, #1]
 800b328:	dd29      	ble.n	800b37e <__exponent+0x68>
 800b32a:	f10d 0307 	add.w	r3, sp, #7
 800b32e:	461d      	mov	r5, r3
 800b330:	270a      	movs	r7, #10
 800b332:	461a      	mov	r2, r3
 800b334:	fbb1 f6f7 	udiv	r6, r1, r7
 800b338:	fb07 1416 	mls	r4, r7, r6, r1
 800b33c:	3430      	adds	r4, #48	@ 0x30
 800b33e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b342:	460c      	mov	r4, r1
 800b344:	2c63      	cmp	r4, #99	@ 0x63
 800b346:	f103 33ff 	add.w	r3, r3, #4294967295
 800b34a:	4631      	mov	r1, r6
 800b34c:	dcf1      	bgt.n	800b332 <__exponent+0x1c>
 800b34e:	3130      	adds	r1, #48	@ 0x30
 800b350:	1e94      	subs	r4, r2, #2
 800b352:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b356:	1c41      	adds	r1, r0, #1
 800b358:	4623      	mov	r3, r4
 800b35a:	42ab      	cmp	r3, r5
 800b35c:	d30a      	bcc.n	800b374 <__exponent+0x5e>
 800b35e:	f10d 0309 	add.w	r3, sp, #9
 800b362:	1a9b      	subs	r3, r3, r2
 800b364:	42ac      	cmp	r4, r5
 800b366:	bf88      	it	hi
 800b368:	2300      	movhi	r3, #0
 800b36a:	3302      	adds	r3, #2
 800b36c:	4403      	add	r3, r0
 800b36e:	1a18      	subs	r0, r3, r0
 800b370:	b003      	add	sp, #12
 800b372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b374:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b378:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b37c:	e7ed      	b.n	800b35a <__exponent+0x44>
 800b37e:	2330      	movs	r3, #48	@ 0x30
 800b380:	3130      	adds	r1, #48	@ 0x30
 800b382:	7083      	strb	r3, [r0, #2]
 800b384:	70c1      	strb	r1, [r0, #3]
 800b386:	1d03      	adds	r3, r0, #4
 800b388:	e7f1      	b.n	800b36e <__exponent+0x58>
	...

0800b38c <_printf_float>:
 800b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b390:	b08d      	sub	sp, #52	@ 0x34
 800b392:	460c      	mov	r4, r1
 800b394:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b398:	4616      	mov	r6, r2
 800b39a:	461f      	mov	r7, r3
 800b39c:	4605      	mov	r5, r0
 800b39e:	f000 fccb 	bl	800bd38 <_localeconv_r>
 800b3a2:	6803      	ldr	r3, [r0, #0]
 800b3a4:	9304      	str	r3, [sp, #16]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7f4 ff62 	bl	8000270 <strlen>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3b0:	f8d8 3000 	ldr.w	r3, [r8]
 800b3b4:	9005      	str	r0, [sp, #20]
 800b3b6:	3307      	adds	r3, #7
 800b3b8:	f023 0307 	bic.w	r3, r3, #7
 800b3bc:	f103 0208 	add.w	r2, r3, #8
 800b3c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b3c4:	f8d4 b000 	ldr.w	fp, [r4]
 800b3c8:	f8c8 2000 	str.w	r2, [r8]
 800b3cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b3d4:	9307      	str	r3, [sp, #28]
 800b3d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b3de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3e2:	4b9c      	ldr	r3, [pc, #624]	@ (800b654 <_printf_float+0x2c8>)
 800b3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e8:	f7f5 fba0 	bl	8000b2c <__aeabi_dcmpun>
 800b3ec:	bb70      	cbnz	r0, 800b44c <_printf_float+0xc0>
 800b3ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3f2:	4b98      	ldr	r3, [pc, #608]	@ (800b654 <_printf_float+0x2c8>)
 800b3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f8:	f7f5 fb7a 	bl	8000af0 <__aeabi_dcmple>
 800b3fc:	bb30      	cbnz	r0, 800b44c <_printf_float+0xc0>
 800b3fe:	2200      	movs	r2, #0
 800b400:	2300      	movs	r3, #0
 800b402:	4640      	mov	r0, r8
 800b404:	4649      	mov	r1, r9
 800b406:	f7f5 fb69 	bl	8000adc <__aeabi_dcmplt>
 800b40a:	b110      	cbz	r0, 800b412 <_printf_float+0x86>
 800b40c:	232d      	movs	r3, #45	@ 0x2d
 800b40e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b412:	4a91      	ldr	r2, [pc, #580]	@ (800b658 <_printf_float+0x2cc>)
 800b414:	4b91      	ldr	r3, [pc, #580]	@ (800b65c <_printf_float+0x2d0>)
 800b416:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b41a:	bf8c      	ite	hi
 800b41c:	4690      	movhi	r8, r2
 800b41e:	4698      	movls	r8, r3
 800b420:	2303      	movs	r3, #3
 800b422:	6123      	str	r3, [r4, #16]
 800b424:	f02b 0304 	bic.w	r3, fp, #4
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	f04f 0900 	mov.w	r9, #0
 800b42e:	9700      	str	r7, [sp, #0]
 800b430:	4633      	mov	r3, r6
 800b432:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b434:	4621      	mov	r1, r4
 800b436:	4628      	mov	r0, r5
 800b438:	f000 f9d2 	bl	800b7e0 <_printf_common>
 800b43c:	3001      	adds	r0, #1
 800b43e:	f040 808d 	bne.w	800b55c <_printf_float+0x1d0>
 800b442:	f04f 30ff 	mov.w	r0, #4294967295
 800b446:	b00d      	add	sp, #52	@ 0x34
 800b448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44c:	4642      	mov	r2, r8
 800b44e:	464b      	mov	r3, r9
 800b450:	4640      	mov	r0, r8
 800b452:	4649      	mov	r1, r9
 800b454:	f7f5 fb6a 	bl	8000b2c <__aeabi_dcmpun>
 800b458:	b140      	cbz	r0, 800b46c <_printf_float+0xe0>
 800b45a:	464b      	mov	r3, r9
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	bfbc      	itt	lt
 800b460:	232d      	movlt	r3, #45	@ 0x2d
 800b462:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b466:	4a7e      	ldr	r2, [pc, #504]	@ (800b660 <_printf_float+0x2d4>)
 800b468:	4b7e      	ldr	r3, [pc, #504]	@ (800b664 <_printf_float+0x2d8>)
 800b46a:	e7d4      	b.n	800b416 <_printf_float+0x8a>
 800b46c:	6863      	ldr	r3, [r4, #4]
 800b46e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b472:	9206      	str	r2, [sp, #24]
 800b474:	1c5a      	adds	r2, r3, #1
 800b476:	d13b      	bne.n	800b4f0 <_printf_float+0x164>
 800b478:	2306      	movs	r3, #6
 800b47a:	6063      	str	r3, [r4, #4]
 800b47c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b480:	2300      	movs	r3, #0
 800b482:	6022      	str	r2, [r4, #0]
 800b484:	9303      	str	r3, [sp, #12]
 800b486:	ab0a      	add	r3, sp, #40	@ 0x28
 800b488:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b48c:	ab09      	add	r3, sp, #36	@ 0x24
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	6861      	ldr	r1, [r4, #4]
 800b492:	ec49 8b10 	vmov	d0, r8, r9
 800b496:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b49a:	4628      	mov	r0, r5
 800b49c:	f7ff fed6 	bl	800b24c <__cvt>
 800b4a0:	9b06      	ldr	r3, [sp, #24]
 800b4a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b4a4:	2b47      	cmp	r3, #71	@ 0x47
 800b4a6:	4680      	mov	r8, r0
 800b4a8:	d129      	bne.n	800b4fe <_printf_float+0x172>
 800b4aa:	1cc8      	adds	r0, r1, #3
 800b4ac:	db02      	blt.n	800b4b4 <_printf_float+0x128>
 800b4ae:	6863      	ldr	r3, [r4, #4]
 800b4b0:	4299      	cmp	r1, r3
 800b4b2:	dd41      	ble.n	800b538 <_printf_float+0x1ac>
 800b4b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800b4b8:	fa5f fa8a 	uxtb.w	sl, sl
 800b4bc:	3901      	subs	r1, #1
 800b4be:	4652      	mov	r2, sl
 800b4c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b4c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4c6:	f7ff ff26 	bl	800b316 <__exponent>
 800b4ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4cc:	1813      	adds	r3, r2, r0
 800b4ce:	2a01      	cmp	r2, #1
 800b4d0:	4681      	mov	r9, r0
 800b4d2:	6123      	str	r3, [r4, #16]
 800b4d4:	dc02      	bgt.n	800b4dc <_printf_float+0x150>
 800b4d6:	6822      	ldr	r2, [r4, #0]
 800b4d8:	07d2      	lsls	r2, r2, #31
 800b4da:	d501      	bpl.n	800b4e0 <_printf_float+0x154>
 800b4dc:	3301      	adds	r3, #1
 800b4de:	6123      	str	r3, [r4, #16]
 800b4e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d0a2      	beq.n	800b42e <_printf_float+0xa2>
 800b4e8:	232d      	movs	r3, #45	@ 0x2d
 800b4ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4ee:	e79e      	b.n	800b42e <_printf_float+0xa2>
 800b4f0:	9a06      	ldr	r2, [sp, #24]
 800b4f2:	2a47      	cmp	r2, #71	@ 0x47
 800b4f4:	d1c2      	bne.n	800b47c <_printf_float+0xf0>
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1c0      	bne.n	800b47c <_printf_float+0xf0>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e7bd      	b.n	800b47a <_printf_float+0xee>
 800b4fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b502:	d9db      	bls.n	800b4bc <_printf_float+0x130>
 800b504:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b508:	d118      	bne.n	800b53c <_printf_float+0x1b0>
 800b50a:	2900      	cmp	r1, #0
 800b50c:	6863      	ldr	r3, [r4, #4]
 800b50e:	dd0b      	ble.n	800b528 <_printf_float+0x19c>
 800b510:	6121      	str	r1, [r4, #16]
 800b512:	b913      	cbnz	r3, 800b51a <_printf_float+0x18e>
 800b514:	6822      	ldr	r2, [r4, #0]
 800b516:	07d0      	lsls	r0, r2, #31
 800b518:	d502      	bpl.n	800b520 <_printf_float+0x194>
 800b51a:	3301      	adds	r3, #1
 800b51c:	440b      	add	r3, r1
 800b51e:	6123      	str	r3, [r4, #16]
 800b520:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b522:	f04f 0900 	mov.w	r9, #0
 800b526:	e7db      	b.n	800b4e0 <_printf_float+0x154>
 800b528:	b913      	cbnz	r3, 800b530 <_printf_float+0x1a4>
 800b52a:	6822      	ldr	r2, [r4, #0]
 800b52c:	07d2      	lsls	r2, r2, #31
 800b52e:	d501      	bpl.n	800b534 <_printf_float+0x1a8>
 800b530:	3302      	adds	r3, #2
 800b532:	e7f4      	b.n	800b51e <_printf_float+0x192>
 800b534:	2301      	movs	r3, #1
 800b536:	e7f2      	b.n	800b51e <_printf_float+0x192>
 800b538:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b53e:	4299      	cmp	r1, r3
 800b540:	db05      	blt.n	800b54e <_printf_float+0x1c2>
 800b542:	6823      	ldr	r3, [r4, #0]
 800b544:	6121      	str	r1, [r4, #16]
 800b546:	07d8      	lsls	r0, r3, #31
 800b548:	d5ea      	bpl.n	800b520 <_printf_float+0x194>
 800b54a:	1c4b      	adds	r3, r1, #1
 800b54c:	e7e7      	b.n	800b51e <_printf_float+0x192>
 800b54e:	2900      	cmp	r1, #0
 800b550:	bfd4      	ite	le
 800b552:	f1c1 0202 	rsble	r2, r1, #2
 800b556:	2201      	movgt	r2, #1
 800b558:	4413      	add	r3, r2
 800b55a:	e7e0      	b.n	800b51e <_printf_float+0x192>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	055a      	lsls	r2, r3, #21
 800b560:	d407      	bmi.n	800b572 <_printf_float+0x1e6>
 800b562:	6923      	ldr	r3, [r4, #16]
 800b564:	4642      	mov	r2, r8
 800b566:	4631      	mov	r1, r6
 800b568:	4628      	mov	r0, r5
 800b56a:	47b8      	blx	r7
 800b56c:	3001      	adds	r0, #1
 800b56e:	d12b      	bne.n	800b5c8 <_printf_float+0x23c>
 800b570:	e767      	b.n	800b442 <_printf_float+0xb6>
 800b572:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b576:	f240 80dd 	bls.w	800b734 <_printf_float+0x3a8>
 800b57a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b57e:	2200      	movs	r2, #0
 800b580:	2300      	movs	r3, #0
 800b582:	f7f5 faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b586:	2800      	cmp	r0, #0
 800b588:	d033      	beq.n	800b5f2 <_printf_float+0x266>
 800b58a:	4a37      	ldr	r2, [pc, #220]	@ (800b668 <_printf_float+0x2dc>)
 800b58c:	2301      	movs	r3, #1
 800b58e:	4631      	mov	r1, r6
 800b590:	4628      	mov	r0, r5
 800b592:	47b8      	blx	r7
 800b594:	3001      	adds	r0, #1
 800b596:	f43f af54 	beq.w	800b442 <_printf_float+0xb6>
 800b59a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b59e:	4543      	cmp	r3, r8
 800b5a0:	db02      	blt.n	800b5a8 <_printf_float+0x21c>
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	07d8      	lsls	r0, r3, #31
 800b5a6:	d50f      	bpl.n	800b5c8 <_printf_float+0x23c>
 800b5a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5ac:	4631      	mov	r1, r6
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	47b8      	blx	r7
 800b5b2:	3001      	adds	r0, #1
 800b5b4:	f43f af45 	beq.w	800b442 <_printf_float+0xb6>
 800b5b8:	f04f 0900 	mov.w	r9, #0
 800b5bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5c0:	f104 0a1a 	add.w	sl, r4, #26
 800b5c4:	45c8      	cmp	r8, r9
 800b5c6:	dc09      	bgt.n	800b5dc <_printf_float+0x250>
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	079b      	lsls	r3, r3, #30
 800b5cc:	f100 8103 	bmi.w	800b7d6 <_printf_float+0x44a>
 800b5d0:	68e0      	ldr	r0, [r4, #12]
 800b5d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5d4:	4298      	cmp	r0, r3
 800b5d6:	bfb8      	it	lt
 800b5d8:	4618      	movlt	r0, r3
 800b5da:	e734      	b.n	800b446 <_printf_float+0xba>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	4652      	mov	r2, sl
 800b5e0:	4631      	mov	r1, r6
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	47b8      	blx	r7
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	f43f af2b 	beq.w	800b442 <_printf_float+0xb6>
 800b5ec:	f109 0901 	add.w	r9, r9, #1
 800b5f0:	e7e8      	b.n	800b5c4 <_printf_float+0x238>
 800b5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	dc39      	bgt.n	800b66c <_printf_float+0x2e0>
 800b5f8:	4a1b      	ldr	r2, [pc, #108]	@ (800b668 <_printf_float+0x2dc>)
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4628      	mov	r0, r5
 800b600:	47b8      	blx	r7
 800b602:	3001      	adds	r0, #1
 800b604:	f43f af1d 	beq.w	800b442 <_printf_float+0xb6>
 800b608:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b60c:	ea59 0303 	orrs.w	r3, r9, r3
 800b610:	d102      	bne.n	800b618 <_printf_float+0x28c>
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	07d9      	lsls	r1, r3, #31
 800b616:	d5d7      	bpl.n	800b5c8 <_printf_float+0x23c>
 800b618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b61c:	4631      	mov	r1, r6
 800b61e:	4628      	mov	r0, r5
 800b620:	47b8      	blx	r7
 800b622:	3001      	adds	r0, #1
 800b624:	f43f af0d 	beq.w	800b442 <_printf_float+0xb6>
 800b628:	f04f 0a00 	mov.w	sl, #0
 800b62c:	f104 0b1a 	add.w	fp, r4, #26
 800b630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b632:	425b      	negs	r3, r3
 800b634:	4553      	cmp	r3, sl
 800b636:	dc01      	bgt.n	800b63c <_printf_float+0x2b0>
 800b638:	464b      	mov	r3, r9
 800b63a:	e793      	b.n	800b564 <_printf_float+0x1d8>
 800b63c:	2301      	movs	r3, #1
 800b63e:	465a      	mov	r2, fp
 800b640:	4631      	mov	r1, r6
 800b642:	4628      	mov	r0, r5
 800b644:	47b8      	blx	r7
 800b646:	3001      	adds	r0, #1
 800b648:	f43f aefb 	beq.w	800b442 <_printf_float+0xb6>
 800b64c:	f10a 0a01 	add.w	sl, sl, #1
 800b650:	e7ee      	b.n	800b630 <_printf_float+0x2a4>
 800b652:	bf00      	nop
 800b654:	7fefffff 	.word	0x7fefffff
 800b658:	0800da78 	.word	0x0800da78
 800b65c:	0800da74 	.word	0x0800da74
 800b660:	0800da80 	.word	0x0800da80
 800b664:	0800da7c 	.word	0x0800da7c
 800b668:	0800da84 	.word	0x0800da84
 800b66c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b66e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b672:	4553      	cmp	r3, sl
 800b674:	bfa8      	it	ge
 800b676:	4653      	movge	r3, sl
 800b678:	2b00      	cmp	r3, #0
 800b67a:	4699      	mov	r9, r3
 800b67c:	dc36      	bgt.n	800b6ec <_printf_float+0x360>
 800b67e:	f04f 0b00 	mov.w	fp, #0
 800b682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b686:	f104 021a 	add.w	r2, r4, #26
 800b68a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b68c:	9306      	str	r3, [sp, #24]
 800b68e:	eba3 0309 	sub.w	r3, r3, r9
 800b692:	455b      	cmp	r3, fp
 800b694:	dc31      	bgt.n	800b6fa <_printf_float+0x36e>
 800b696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b698:	459a      	cmp	sl, r3
 800b69a:	dc3a      	bgt.n	800b712 <_printf_float+0x386>
 800b69c:	6823      	ldr	r3, [r4, #0]
 800b69e:	07da      	lsls	r2, r3, #31
 800b6a0:	d437      	bmi.n	800b712 <_printf_float+0x386>
 800b6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6a4:	ebaa 0903 	sub.w	r9, sl, r3
 800b6a8:	9b06      	ldr	r3, [sp, #24]
 800b6aa:	ebaa 0303 	sub.w	r3, sl, r3
 800b6ae:	4599      	cmp	r9, r3
 800b6b0:	bfa8      	it	ge
 800b6b2:	4699      	movge	r9, r3
 800b6b4:	f1b9 0f00 	cmp.w	r9, #0
 800b6b8:	dc33      	bgt.n	800b722 <_printf_float+0x396>
 800b6ba:	f04f 0800 	mov.w	r8, #0
 800b6be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6c2:	f104 0b1a 	add.w	fp, r4, #26
 800b6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6c8:	ebaa 0303 	sub.w	r3, sl, r3
 800b6cc:	eba3 0309 	sub.w	r3, r3, r9
 800b6d0:	4543      	cmp	r3, r8
 800b6d2:	f77f af79 	ble.w	800b5c8 <_printf_float+0x23c>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	465a      	mov	r2, fp
 800b6da:	4631      	mov	r1, r6
 800b6dc:	4628      	mov	r0, r5
 800b6de:	47b8      	blx	r7
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	f43f aeae 	beq.w	800b442 <_printf_float+0xb6>
 800b6e6:	f108 0801 	add.w	r8, r8, #1
 800b6ea:	e7ec      	b.n	800b6c6 <_printf_float+0x33a>
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	47b8      	blx	r7
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	d1c2      	bne.n	800b67e <_printf_float+0x2f2>
 800b6f8:	e6a3      	b.n	800b442 <_printf_float+0xb6>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	4628      	mov	r0, r5
 800b700:	9206      	str	r2, [sp, #24]
 800b702:	47b8      	blx	r7
 800b704:	3001      	adds	r0, #1
 800b706:	f43f ae9c 	beq.w	800b442 <_printf_float+0xb6>
 800b70a:	9a06      	ldr	r2, [sp, #24]
 800b70c:	f10b 0b01 	add.w	fp, fp, #1
 800b710:	e7bb      	b.n	800b68a <_printf_float+0x2fe>
 800b712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b716:	4631      	mov	r1, r6
 800b718:	4628      	mov	r0, r5
 800b71a:	47b8      	blx	r7
 800b71c:	3001      	adds	r0, #1
 800b71e:	d1c0      	bne.n	800b6a2 <_printf_float+0x316>
 800b720:	e68f      	b.n	800b442 <_printf_float+0xb6>
 800b722:	9a06      	ldr	r2, [sp, #24]
 800b724:	464b      	mov	r3, r9
 800b726:	4442      	add	r2, r8
 800b728:	4631      	mov	r1, r6
 800b72a:	4628      	mov	r0, r5
 800b72c:	47b8      	blx	r7
 800b72e:	3001      	adds	r0, #1
 800b730:	d1c3      	bne.n	800b6ba <_printf_float+0x32e>
 800b732:	e686      	b.n	800b442 <_printf_float+0xb6>
 800b734:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b738:	f1ba 0f01 	cmp.w	sl, #1
 800b73c:	dc01      	bgt.n	800b742 <_printf_float+0x3b6>
 800b73e:	07db      	lsls	r3, r3, #31
 800b740:	d536      	bpl.n	800b7b0 <_printf_float+0x424>
 800b742:	2301      	movs	r3, #1
 800b744:	4642      	mov	r2, r8
 800b746:	4631      	mov	r1, r6
 800b748:	4628      	mov	r0, r5
 800b74a:	47b8      	blx	r7
 800b74c:	3001      	adds	r0, #1
 800b74e:	f43f ae78 	beq.w	800b442 <_printf_float+0xb6>
 800b752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b756:	4631      	mov	r1, r6
 800b758:	4628      	mov	r0, r5
 800b75a:	47b8      	blx	r7
 800b75c:	3001      	adds	r0, #1
 800b75e:	f43f ae70 	beq.w	800b442 <_printf_float+0xb6>
 800b762:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b766:	2200      	movs	r2, #0
 800b768:	2300      	movs	r3, #0
 800b76a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b76e:	f7f5 f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 800b772:	b9c0      	cbnz	r0, 800b7a6 <_printf_float+0x41a>
 800b774:	4653      	mov	r3, sl
 800b776:	f108 0201 	add.w	r2, r8, #1
 800b77a:	4631      	mov	r1, r6
 800b77c:	4628      	mov	r0, r5
 800b77e:	47b8      	blx	r7
 800b780:	3001      	adds	r0, #1
 800b782:	d10c      	bne.n	800b79e <_printf_float+0x412>
 800b784:	e65d      	b.n	800b442 <_printf_float+0xb6>
 800b786:	2301      	movs	r3, #1
 800b788:	465a      	mov	r2, fp
 800b78a:	4631      	mov	r1, r6
 800b78c:	4628      	mov	r0, r5
 800b78e:	47b8      	blx	r7
 800b790:	3001      	adds	r0, #1
 800b792:	f43f ae56 	beq.w	800b442 <_printf_float+0xb6>
 800b796:	f108 0801 	add.w	r8, r8, #1
 800b79a:	45d0      	cmp	r8, sl
 800b79c:	dbf3      	blt.n	800b786 <_printf_float+0x3fa>
 800b79e:	464b      	mov	r3, r9
 800b7a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b7a4:	e6df      	b.n	800b566 <_printf_float+0x1da>
 800b7a6:	f04f 0800 	mov.w	r8, #0
 800b7aa:	f104 0b1a 	add.w	fp, r4, #26
 800b7ae:	e7f4      	b.n	800b79a <_printf_float+0x40e>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	4642      	mov	r2, r8
 800b7b4:	e7e1      	b.n	800b77a <_printf_float+0x3ee>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	464a      	mov	r2, r9
 800b7ba:	4631      	mov	r1, r6
 800b7bc:	4628      	mov	r0, r5
 800b7be:	47b8      	blx	r7
 800b7c0:	3001      	adds	r0, #1
 800b7c2:	f43f ae3e 	beq.w	800b442 <_printf_float+0xb6>
 800b7c6:	f108 0801 	add.w	r8, r8, #1
 800b7ca:	68e3      	ldr	r3, [r4, #12]
 800b7cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b7ce:	1a5b      	subs	r3, r3, r1
 800b7d0:	4543      	cmp	r3, r8
 800b7d2:	dcf0      	bgt.n	800b7b6 <_printf_float+0x42a>
 800b7d4:	e6fc      	b.n	800b5d0 <_printf_float+0x244>
 800b7d6:	f04f 0800 	mov.w	r8, #0
 800b7da:	f104 0919 	add.w	r9, r4, #25
 800b7de:	e7f4      	b.n	800b7ca <_printf_float+0x43e>

0800b7e0 <_printf_common>:
 800b7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7e4:	4616      	mov	r6, r2
 800b7e6:	4698      	mov	r8, r3
 800b7e8:	688a      	ldr	r2, [r1, #8]
 800b7ea:	690b      	ldr	r3, [r1, #16]
 800b7ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	bfb8      	it	lt
 800b7f4:	4613      	movlt	r3, r2
 800b7f6:	6033      	str	r3, [r6, #0]
 800b7f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7fc:	4607      	mov	r7, r0
 800b7fe:	460c      	mov	r4, r1
 800b800:	b10a      	cbz	r2, 800b806 <_printf_common+0x26>
 800b802:	3301      	adds	r3, #1
 800b804:	6033      	str	r3, [r6, #0]
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	0699      	lsls	r1, r3, #26
 800b80a:	bf42      	ittt	mi
 800b80c:	6833      	ldrmi	r3, [r6, #0]
 800b80e:	3302      	addmi	r3, #2
 800b810:	6033      	strmi	r3, [r6, #0]
 800b812:	6825      	ldr	r5, [r4, #0]
 800b814:	f015 0506 	ands.w	r5, r5, #6
 800b818:	d106      	bne.n	800b828 <_printf_common+0x48>
 800b81a:	f104 0a19 	add.w	sl, r4, #25
 800b81e:	68e3      	ldr	r3, [r4, #12]
 800b820:	6832      	ldr	r2, [r6, #0]
 800b822:	1a9b      	subs	r3, r3, r2
 800b824:	42ab      	cmp	r3, r5
 800b826:	dc26      	bgt.n	800b876 <_printf_common+0x96>
 800b828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b82c:	6822      	ldr	r2, [r4, #0]
 800b82e:	3b00      	subs	r3, #0
 800b830:	bf18      	it	ne
 800b832:	2301      	movne	r3, #1
 800b834:	0692      	lsls	r2, r2, #26
 800b836:	d42b      	bmi.n	800b890 <_printf_common+0xb0>
 800b838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b83c:	4641      	mov	r1, r8
 800b83e:	4638      	mov	r0, r7
 800b840:	47c8      	blx	r9
 800b842:	3001      	adds	r0, #1
 800b844:	d01e      	beq.n	800b884 <_printf_common+0xa4>
 800b846:	6823      	ldr	r3, [r4, #0]
 800b848:	6922      	ldr	r2, [r4, #16]
 800b84a:	f003 0306 	and.w	r3, r3, #6
 800b84e:	2b04      	cmp	r3, #4
 800b850:	bf02      	ittt	eq
 800b852:	68e5      	ldreq	r5, [r4, #12]
 800b854:	6833      	ldreq	r3, [r6, #0]
 800b856:	1aed      	subeq	r5, r5, r3
 800b858:	68a3      	ldr	r3, [r4, #8]
 800b85a:	bf0c      	ite	eq
 800b85c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b860:	2500      	movne	r5, #0
 800b862:	4293      	cmp	r3, r2
 800b864:	bfc4      	itt	gt
 800b866:	1a9b      	subgt	r3, r3, r2
 800b868:	18ed      	addgt	r5, r5, r3
 800b86a:	2600      	movs	r6, #0
 800b86c:	341a      	adds	r4, #26
 800b86e:	42b5      	cmp	r5, r6
 800b870:	d11a      	bne.n	800b8a8 <_printf_common+0xc8>
 800b872:	2000      	movs	r0, #0
 800b874:	e008      	b.n	800b888 <_printf_common+0xa8>
 800b876:	2301      	movs	r3, #1
 800b878:	4652      	mov	r2, sl
 800b87a:	4641      	mov	r1, r8
 800b87c:	4638      	mov	r0, r7
 800b87e:	47c8      	blx	r9
 800b880:	3001      	adds	r0, #1
 800b882:	d103      	bne.n	800b88c <_printf_common+0xac>
 800b884:	f04f 30ff 	mov.w	r0, #4294967295
 800b888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b88c:	3501      	adds	r5, #1
 800b88e:	e7c6      	b.n	800b81e <_printf_common+0x3e>
 800b890:	18e1      	adds	r1, r4, r3
 800b892:	1c5a      	adds	r2, r3, #1
 800b894:	2030      	movs	r0, #48	@ 0x30
 800b896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b89a:	4422      	add	r2, r4
 800b89c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8a4:	3302      	adds	r3, #2
 800b8a6:	e7c7      	b.n	800b838 <_printf_common+0x58>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	4622      	mov	r2, r4
 800b8ac:	4641      	mov	r1, r8
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	47c8      	blx	r9
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	d0e6      	beq.n	800b884 <_printf_common+0xa4>
 800b8b6:	3601      	adds	r6, #1
 800b8b8:	e7d9      	b.n	800b86e <_printf_common+0x8e>
	...

0800b8bc <_printf_i>:
 800b8bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c0:	7e0f      	ldrb	r7, [r1, #24]
 800b8c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8c4:	2f78      	cmp	r7, #120	@ 0x78
 800b8c6:	4691      	mov	r9, r2
 800b8c8:	4680      	mov	r8, r0
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	469a      	mov	sl, r3
 800b8ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8d2:	d807      	bhi.n	800b8e4 <_printf_i+0x28>
 800b8d4:	2f62      	cmp	r7, #98	@ 0x62
 800b8d6:	d80a      	bhi.n	800b8ee <_printf_i+0x32>
 800b8d8:	2f00      	cmp	r7, #0
 800b8da:	f000 80d1 	beq.w	800ba80 <_printf_i+0x1c4>
 800b8de:	2f58      	cmp	r7, #88	@ 0x58
 800b8e0:	f000 80b8 	beq.w	800ba54 <_printf_i+0x198>
 800b8e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8ec:	e03a      	b.n	800b964 <_printf_i+0xa8>
 800b8ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8f2:	2b15      	cmp	r3, #21
 800b8f4:	d8f6      	bhi.n	800b8e4 <_printf_i+0x28>
 800b8f6:	a101      	add	r1, pc, #4	@ (adr r1, 800b8fc <_printf_i+0x40>)
 800b8f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8fc:	0800b955 	.word	0x0800b955
 800b900:	0800b969 	.word	0x0800b969
 800b904:	0800b8e5 	.word	0x0800b8e5
 800b908:	0800b8e5 	.word	0x0800b8e5
 800b90c:	0800b8e5 	.word	0x0800b8e5
 800b910:	0800b8e5 	.word	0x0800b8e5
 800b914:	0800b969 	.word	0x0800b969
 800b918:	0800b8e5 	.word	0x0800b8e5
 800b91c:	0800b8e5 	.word	0x0800b8e5
 800b920:	0800b8e5 	.word	0x0800b8e5
 800b924:	0800b8e5 	.word	0x0800b8e5
 800b928:	0800ba67 	.word	0x0800ba67
 800b92c:	0800b993 	.word	0x0800b993
 800b930:	0800ba21 	.word	0x0800ba21
 800b934:	0800b8e5 	.word	0x0800b8e5
 800b938:	0800b8e5 	.word	0x0800b8e5
 800b93c:	0800ba89 	.word	0x0800ba89
 800b940:	0800b8e5 	.word	0x0800b8e5
 800b944:	0800b993 	.word	0x0800b993
 800b948:	0800b8e5 	.word	0x0800b8e5
 800b94c:	0800b8e5 	.word	0x0800b8e5
 800b950:	0800ba29 	.word	0x0800ba29
 800b954:	6833      	ldr	r3, [r6, #0]
 800b956:	1d1a      	adds	r2, r3, #4
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	6032      	str	r2, [r6, #0]
 800b95c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b964:	2301      	movs	r3, #1
 800b966:	e09c      	b.n	800baa2 <_printf_i+0x1e6>
 800b968:	6833      	ldr	r3, [r6, #0]
 800b96a:	6820      	ldr	r0, [r4, #0]
 800b96c:	1d19      	adds	r1, r3, #4
 800b96e:	6031      	str	r1, [r6, #0]
 800b970:	0606      	lsls	r6, r0, #24
 800b972:	d501      	bpl.n	800b978 <_printf_i+0xbc>
 800b974:	681d      	ldr	r5, [r3, #0]
 800b976:	e003      	b.n	800b980 <_printf_i+0xc4>
 800b978:	0645      	lsls	r5, r0, #25
 800b97a:	d5fb      	bpl.n	800b974 <_printf_i+0xb8>
 800b97c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b980:	2d00      	cmp	r5, #0
 800b982:	da03      	bge.n	800b98c <_printf_i+0xd0>
 800b984:	232d      	movs	r3, #45	@ 0x2d
 800b986:	426d      	negs	r5, r5
 800b988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b98c:	4858      	ldr	r0, [pc, #352]	@ (800baf0 <_printf_i+0x234>)
 800b98e:	230a      	movs	r3, #10
 800b990:	e011      	b.n	800b9b6 <_printf_i+0xfa>
 800b992:	6821      	ldr	r1, [r4, #0]
 800b994:	6833      	ldr	r3, [r6, #0]
 800b996:	0608      	lsls	r0, r1, #24
 800b998:	f853 5b04 	ldr.w	r5, [r3], #4
 800b99c:	d402      	bmi.n	800b9a4 <_printf_i+0xe8>
 800b99e:	0649      	lsls	r1, r1, #25
 800b9a0:	bf48      	it	mi
 800b9a2:	b2ad      	uxthmi	r5, r5
 800b9a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9a6:	4852      	ldr	r0, [pc, #328]	@ (800baf0 <_printf_i+0x234>)
 800b9a8:	6033      	str	r3, [r6, #0]
 800b9aa:	bf14      	ite	ne
 800b9ac:	230a      	movne	r3, #10
 800b9ae:	2308      	moveq	r3, #8
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9b6:	6866      	ldr	r6, [r4, #4]
 800b9b8:	60a6      	str	r6, [r4, #8]
 800b9ba:	2e00      	cmp	r6, #0
 800b9bc:	db05      	blt.n	800b9ca <_printf_i+0x10e>
 800b9be:	6821      	ldr	r1, [r4, #0]
 800b9c0:	432e      	orrs	r6, r5
 800b9c2:	f021 0104 	bic.w	r1, r1, #4
 800b9c6:	6021      	str	r1, [r4, #0]
 800b9c8:	d04b      	beq.n	800ba62 <_printf_i+0x1a6>
 800b9ca:	4616      	mov	r6, r2
 800b9cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9d0:	fb03 5711 	mls	r7, r3, r1, r5
 800b9d4:	5dc7      	ldrb	r7, [r0, r7]
 800b9d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9da:	462f      	mov	r7, r5
 800b9dc:	42bb      	cmp	r3, r7
 800b9de:	460d      	mov	r5, r1
 800b9e0:	d9f4      	bls.n	800b9cc <_printf_i+0x110>
 800b9e2:	2b08      	cmp	r3, #8
 800b9e4:	d10b      	bne.n	800b9fe <_printf_i+0x142>
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	07df      	lsls	r7, r3, #31
 800b9ea:	d508      	bpl.n	800b9fe <_printf_i+0x142>
 800b9ec:	6923      	ldr	r3, [r4, #16]
 800b9ee:	6861      	ldr	r1, [r4, #4]
 800b9f0:	4299      	cmp	r1, r3
 800b9f2:	bfde      	ittt	le
 800b9f4:	2330      	movle	r3, #48	@ 0x30
 800b9f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9fe:	1b92      	subs	r2, r2, r6
 800ba00:	6122      	str	r2, [r4, #16]
 800ba02:	f8cd a000 	str.w	sl, [sp]
 800ba06:	464b      	mov	r3, r9
 800ba08:	aa03      	add	r2, sp, #12
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	4640      	mov	r0, r8
 800ba0e:	f7ff fee7 	bl	800b7e0 <_printf_common>
 800ba12:	3001      	adds	r0, #1
 800ba14:	d14a      	bne.n	800baac <_printf_i+0x1f0>
 800ba16:	f04f 30ff 	mov.w	r0, #4294967295
 800ba1a:	b004      	add	sp, #16
 800ba1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	f043 0320 	orr.w	r3, r3, #32
 800ba26:	6023      	str	r3, [r4, #0]
 800ba28:	4832      	ldr	r0, [pc, #200]	@ (800baf4 <_printf_i+0x238>)
 800ba2a:	2778      	movs	r7, #120	@ 0x78
 800ba2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba30:	6823      	ldr	r3, [r4, #0]
 800ba32:	6831      	ldr	r1, [r6, #0]
 800ba34:	061f      	lsls	r7, r3, #24
 800ba36:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba3a:	d402      	bmi.n	800ba42 <_printf_i+0x186>
 800ba3c:	065f      	lsls	r7, r3, #25
 800ba3e:	bf48      	it	mi
 800ba40:	b2ad      	uxthmi	r5, r5
 800ba42:	6031      	str	r1, [r6, #0]
 800ba44:	07d9      	lsls	r1, r3, #31
 800ba46:	bf44      	itt	mi
 800ba48:	f043 0320 	orrmi.w	r3, r3, #32
 800ba4c:	6023      	strmi	r3, [r4, #0]
 800ba4e:	b11d      	cbz	r5, 800ba58 <_printf_i+0x19c>
 800ba50:	2310      	movs	r3, #16
 800ba52:	e7ad      	b.n	800b9b0 <_printf_i+0xf4>
 800ba54:	4826      	ldr	r0, [pc, #152]	@ (800baf0 <_printf_i+0x234>)
 800ba56:	e7e9      	b.n	800ba2c <_printf_i+0x170>
 800ba58:	6823      	ldr	r3, [r4, #0]
 800ba5a:	f023 0320 	bic.w	r3, r3, #32
 800ba5e:	6023      	str	r3, [r4, #0]
 800ba60:	e7f6      	b.n	800ba50 <_printf_i+0x194>
 800ba62:	4616      	mov	r6, r2
 800ba64:	e7bd      	b.n	800b9e2 <_printf_i+0x126>
 800ba66:	6833      	ldr	r3, [r6, #0]
 800ba68:	6825      	ldr	r5, [r4, #0]
 800ba6a:	6961      	ldr	r1, [r4, #20]
 800ba6c:	1d18      	adds	r0, r3, #4
 800ba6e:	6030      	str	r0, [r6, #0]
 800ba70:	062e      	lsls	r6, r5, #24
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	d501      	bpl.n	800ba7a <_printf_i+0x1be>
 800ba76:	6019      	str	r1, [r3, #0]
 800ba78:	e002      	b.n	800ba80 <_printf_i+0x1c4>
 800ba7a:	0668      	lsls	r0, r5, #25
 800ba7c:	d5fb      	bpl.n	800ba76 <_printf_i+0x1ba>
 800ba7e:	8019      	strh	r1, [r3, #0]
 800ba80:	2300      	movs	r3, #0
 800ba82:	6123      	str	r3, [r4, #16]
 800ba84:	4616      	mov	r6, r2
 800ba86:	e7bc      	b.n	800ba02 <_printf_i+0x146>
 800ba88:	6833      	ldr	r3, [r6, #0]
 800ba8a:	1d1a      	adds	r2, r3, #4
 800ba8c:	6032      	str	r2, [r6, #0]
 800ba8e:	681e      	ldr	r6, [r3, #0]
 800ba90:	6862      	ldr	r2, [r4, #4]
 800ba92:	2100      	movs	r1, #0
 800ba94:	4630      	mov	r0, r6
 800ba96:	f7f4 fb9b 	bl	80001d0 <memchr>
 800ba9a:	b108      	cbz	r0, 800baa0 <_printf_i+0x1e4>
 800ba9c:	1b80      	subs	r0, r0, r6
 800ba9e:	6060      	str	r0, [r4, #4]
 800baa0:	6863      	ldr	r3, [r4, #4]
 800baa2:	6123      	str	r3, [r4, #16]
 800baa4:	2300      	movs	r3, #0
 800baa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baaa:	e7aa      	b.n	800ba02 <_printf_i+0x146>
 800baac:	6923      	ldr	r3, [r4, #16]
 800baae:	4632      	mov	r2, r6
 800bab0:	4649      	mov	r1, r9
 800bab2:	4640      	mov	r0, r8
 800bab4:	47d0      	blx	sl
 800bab6:	3001      	adds	r0, #1
 800bab8:	d0ad      	beq.n	800ba16 <_printf_i+0x15a>
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	079b      	lsls	r3, r3, #30
 800babe:	d413      	bmi.n	800bae8 <_printf_i+0x22c>
 800bac0:	68e0      	ldr	r0, [r4, #12]
 800bac2:	9b03      	ldr	r3, [sp, #12]
 800bac4:	4298      	cmp	r0, r3
 800bac6:	bfb8      	it	lt
 800bac8:	4618      	movlt	r0, r3
 800baca:	e7a6      	b.n	800ba1a <_printf_i+0x15e>
 800bacc:	2301      	movs	r3, #1
 800bace:	4632      	mov	r2, r6
 800bad0:	4649      	mov	r1, r9
 800bad2:	4640      	mov	r0, r8
 800bad4:	47d0      	blx	sl
 800bad6:	3001      	adds	r0, #1
 800bad8:	d09d      	beq.n	800ba16 <_printf_i+0x15a>
 800bada:	3501      	adds	r5, #1
 800badc:	68e3      	ldr	r3, [r4, #12]
 800bade:	9903      	ldr	r1, [sp, #12]
 800bae0:	1a5b      	subs	r3, r3, r1
 800bae2:	42ab      	cmp	r3, r5
 800bae4:	dcf2      	bgt.n	800bacc <_printf_i+0x210>
 800bae6:	e7eb      	b.n	800bac0 <_printf_i+0x204>
 800bae8:	2500      	movs	r5, #0
 800baea:	f104 0619 	add.w	r6, r4, #25
 800baee:	e7f5      	b.n	800badc <_printf_i+0x220>
 800baf0:	0800da86 	.word	0x0800da86
 800baf4:	0800da97 	.word	0x0800da97

0800baf8 <std>:
 800baf8:	2300      	movs	r3, #0
 800bafa:	b510      	push	{r4, lr}
 800bafc:	4604      	mov	r4, r0
 800bafe:	e9c0 3300 	strd	r3, r3, [r0]
 800bb02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb06:	6083      	str	r3, [r0, #8]
 800bb08:	8181      	strh	r1, [r0, #12]
 800bb0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb0c:	81c2      	strh	r2, [r0, #14]
 800bb0e:	6183      	str	r3, [r0, #24]
 800bb10:	4619      	mov	r1, r3
 800bb12:	2208      	movs	r2, #8
 800bb14:	305c      	adds	r0, #92	@ 0x5c
 800bb16:	f000 f906 	bl	800bd26 <memset>
 800bb1a:	4b0d      	ldr	r3, [pc, #52]	@ (800bb50 <std+0x58>)
 800bb1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb1e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb54 <std+0x5c>)
 800bb20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb22:	4b0d      	ldr	r3, [pc, #52]	@ (800bb58 <std+0x60>)
 800bb24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb26:	4b0d      	ldr	r3, [pc, #52]	@ (800bb5c <std+0x64>)
 800bb28:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb2a:	4b0d      	ldr	r3, [pc, #52]	@ (800bb60 <std+0x68>)
 800bb2c:	6224      	str	r4, [r4, #32]
 800bb2e:	429c      	cmp	r4, r3
 800bb30:	d006      	beq.n	800bb40 <std+0x48>
 800bb32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb36:	4294      	cmp	r4, r2
 800bb38:	d002      	beq.n	800bb40 <std+0x48>
 800bb3a:	33d0      	adds	r3, #208	@ 0xd0
 800bb3c:	429c      	cmp	r4, r3
 800bb3e:	d105      	bne.n	800bb4c <std+0x54>
 800bb40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bb44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb48:	f000 b97a 	b.w	800be40 <__retarget_lock_init_recursive>
 800bb4c:	bd10      	pop	{r4, pc}
 800bb4e:	bf00      	nop
 800bb50:	0800bca1 	.word	0x0800bca1
 800bb54:	0800bcc3 	.word	0x0800bcc3
 800bb58:	0800bcfb 	.word	0x0800bcfb
 800bb5c:	0800bd1f 	.word	0x0800bd1f
 800bb60:	20000bf0 	.word	0x20000bf0

0800bb64 <stdio_exit_handler>:
 800bb64:	4a02      	ldr	r2, [pc, #8]	@ (800bb70 <stdio_exit_handler+0xc>)
 800bb66:	4903      	ldr	r1, [pc, #12]	@ (800bb74 <stdio_exit_handler+0x10>)
 800bb68:	4803      	ldr	r0, [pc, #12]	@ (800bb78 <stdio_exit_handler+0x14>)
 800bb6a:	f000 b869 	b.w	800bc40 <_fwalk_sglue>
 800bb6e:	bf00      	nop
 800bb70:	2000002c 	.word	0x2000002c
 800bb74:	0800d60d 	.word	0x0800d60d
 800bb78:	2000003c 	.word	0x2000003c

0800bb7c <cleanup_stdio>:
 800bb7c:	6841      	ldr	r1, [r0, #4]
 800bb7e:	4b0c      	ldr	r3, [pc, #48]	@ (800bbb0 <cleanup_stdio+0x34>)
 800bb80:	4299      	cmp	r1, r3
 800bb82:	b510      	push	{r4, lr}
 800bb84:	4604      	mov	r4, r0
 800bb86:	d001      	beq.n	800bb8c <cleanup_stdio+0x10>
 800bb88:	f001 fd40 	bl	800d60c <_fflush_r>
 800bb8c:	68a1      	ldr	r1, [r4, #8]
 800bb8e:	4b09      	ldr	r3, [pc, #36]	@ (800bbb4 <cleanup_stdio+0x38>)
 800bb90:	4299      	cmp	r1, r3
 800bb92:	d002      	beq.n	800bb9a <cleanup_stdio+0x1e>
 800bb94:	4620      	mov	r0, r4
 800bb96:	f001 fd39 	bl	800d60c <_fflush_r>
 800bb9a:	68e1      	ldr	r1, [r4, #12]
 800bb9c:	4b06      	ldr	r3, [pc, #24]	@ (800bbb8 <cleanup_stdio+0x3c>)
 800bb9e:	4299      	cmp	r1, r3
 800bba0:	d004      	beq.n	800bbac <cleanup_stdio+0x30>
 800bba2:	4620      	mov	r0, r4
 800bba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bba8:	f001 bd30 	b.w	800d60c <_fflush_r>
 800bbac:	bd10      	pop	{r4, pc}
 800bbae:	bf00      	nop
 800bbb0:	20000bf0 	.word	0x20000bf0
 800bbb4:	20000c58 	.word	0x20000c58
 800bbb8:	20000cc0 	.word	0x20000cc0

0800bbbc <global_stdio_init.part.0>:
 800bbbc:	b510      	push	{r4, lr}
 800bbbe:	4b0b      	ldr	r3, [pc, #44]	@ (800bbec <global_stdio_init.part.0+0x30>)
 800bbc0:	4c0b      	ldr	r4, [pc, #44]	@ (800bbf0 <global_stdio_init.part.0+0x34>)
 800bbc2:	4a0c      	ldr	r2, [pc, #48]	@ (800bbf4 <global_stdio_init.part.0+0x38>)
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	2200      	movs	r2, #0
 800bbca:	2104      	movs	r1, #4
 800bbcc:	f7ff ff94 	bl	800baf8 <std>
 800bbd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	2109      	movs	r1, #9
 800bbd8:	f7ff ff8e 	bl	800baf8 <std>
 800bbdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbe6:	2112      	movs	r1, #18
 800bbe8:	f7ff bf86 	b.w	800baf8 <std>
 800bbec:	20000d28 	.word	0x20000d28
 800bbf0:	20000bf0 	.word	0x20000bf0
 800bbf4:	0800bb65 	.word	0x0800bb65

0800bbf8 <__sfp_lock_acquire>:
 800bbf8:	4801      	ldr	r0, [pc, #4]	@ (800bc00 <__sfp_lock_acquire+0x8>)
 800bbfa:	f000 b922 	b.w	800be42 <__retarget_lock_acquire_recursive>
 800bbfe:	bf00      	nop
 800bc00:	20000d31 	.word	0x20000d31

0800bc04 <__sfp_lock_release>:
 800bc04:	4801      	ldr	r0, [pc, #4]	@ (800bc0c <__sfp_lock_release+0x8>)
 800bc06:	f000 b91d 	b.w	800be44 <__retarget_lock_release_recursive>
 800bc0a:	bf00      	nop
 800bc0c:	20000d31 	.word	0x20000d31

0800bc10 <__sinit>:
 800bc10:	b510      	push	{r4, lr}
 800bc12:	4604      	mov	r4, r0
 800bc14:	f7ff fff0 	bl	800bbf8 <__sfp_lock_acquire>
 800bc18:	6a23      	ldr	r3, [r4, #32]
 800bc1a:	b11b      	cbz	r3, 800bc24 <__sinit+0x14>
 800bc1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc20:	f7ff bff0 	b.w	800bc04 <__sfp_lock_release>
 800bc24:	4b04      	ldr	r3, [pc, #16]	@ (800bc38 <__sinit+0x28>)
 800bc26:	6223      	str	r3, [r4, #32]
 800bc28:	4b04      	ldr	r3, [pc, #16]	@ (800bc3c <__sinit+0x2c>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d1f5      	bne.n	800bc1c <__sinit+0xc>
 800bc30:	f7ff ffc4 	bl	800bbbc <global_stdio_init.part.0>
 800bc34:	e7f2      	b.n	800bc1c <__sinit+0xc>
 800bc36:	bf00      	nop
 800bc38:	0800bb7d 	.word	0x0800bb7d
 800bc3c:	20000d28 	.word	0x20000d28

0800bc40 <_fwalk_sglue>:
 800bc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc44:	4607      	mov	r7, r0
 800bc46:	4688      	mov	r8, r1
 800bc48:	4614      	mov	r4, r2
 800bc4a:	2600      	movs	r6, #0
 800bc4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc50:	f1b9 0901 	subs.w	r9, r9, #1
 800bc54:	d505      	bpl.n	800bc62 <_fwalk_sglue+0x22>
 800bc56:	6824      	ldr	r4, [r4, #0]
 800bc58:	2c00      	cmp	r4, #0
 800bc5a:	d1f7      	bne.n	800bc4c <_fwalk_sglue+0xc>
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc62:	89ab      	ldrh	r3, [r5, #12]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d907      	bls.n	800bc78 <_fwalk_sglue+0x38>
 800bc68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	d003      	beq.n	800bc78 <_fwalk_sglue+0x38>
 800bc70:	4629      	mov	r1, r5
 800bc72:	4638      	mov	r0, r7
 800bc74:	47c0      	blx	r8
 800bc76:	4306      	orrs	r6, r0
 800bc78:	3568      	adds	r5, #104	@ 0x68
 800bc7a:	e7e9      	b.n	800bc50 <_fwalk_sglue+0x10>

0800bc7c <iprintf>:
 800bc7c:	b40f      	push	{r0, r1, r2, r3}
 800bc7e:	b507      	push	{r0, r1, r2, lr}
 800bc80:	4906      	ldr	r1, [pc, #24]	@ (800bc9c <iprintf+0x20>)
 800bc82:	ab04      	add	r3, sp, #16
 800bc84:	6808      	ldr	r0, [r1, #0]
 800bc86:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc8a:	6881      	ldr	r1, [r0, #8]
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	f001 fb21 	bl	800d2d4 <_vfiprintf_r>
 800bc92:	b003      	add	sp, #12
 800bc94:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc98:	b004      	add	sp, #16
 800bc9a:	4770      	bx	lr
 800bc9c:	20000038 	.word	0x20000038

0800bca0 <__sread>:
 800bca0:	b510      	push	{r4, lr}
 800bca2:	460c      	mov	r4, r1
 800bca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca8:	f000 f86c 	bl	800bd84 <_read_r>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	bfab      	itete	ge
 800bcb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bcb2:	89a3      	ldrhlt	r3, [r4, #12]
 800bcb4:	181b      	addge	r3, r3, r0
 800bcb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bcba:	bfac      	ite	ge
 800bcbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bcbe:	81a3      	strhlt	r3, [r4, #12]
 800bcc0:	bd10      	pop	{r4, pc}

0800bcc2 <__swrite>:
 800bcc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc6:	461f      	mov	r7, r3
 800bcc8:	898b      	ldrh	r3, [r1, #12]
 800bcca:	05db      	lsls	r3, r3, #23
 800bccc:	4605      	mov	r5, r0
 800bcce:	460c      	mov	r4, r1
 800bcd0:	4616      	mov	r6, r2
 800bcd2:	d505      	bpl.n	800bce0 <__swrite+0x1e>
 800bcd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd8:	2302      	movs	r3, #2
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f000 f840 	bl	800bd60 <_lseek_r>
 800bce0:	89a3      	ldrh	r3, [r4, #12]
 800bce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bce6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bcea:	81a3      	strh	r3, [r4, #12]
 800bcec:	4632      	mov	r2, r6
 800bcee:	463b      	mov	r3, r7
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf6:	f000 b867 	b.w	800bdc8 <_write_r>

0800bcfa <__sseek>:
 800bcfa:	b510      	push	{r4, lr}
 800bcfc:	460c      	mov	r4, r1
 800bcfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd02:	f000 f82d 	bl	800bd60 <_lseek_r>
 800bd06:	1c43      	adds	r3, r0, #1
 800bd08:	89a3      	ldrh	r3, [r4, #12]
 800bd0a:	bf15      	itete	ne
 800bd0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bd12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bd16:	81a3      	strheq	r3, [r4, #12]
 800bd18:	bf18      	it	ne
 800bd1a:	81a3      	strhne	r3, [r4, #12]
 800bd1c:	bd10      	pop	{r4, pc}

0800bd1e <__sclose>:
 800bd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd22:	f000 b80d 	b.w	800bd40 <_close_r>

0800bd26 <memset>:
 800bd26:	4402      	add	r2, r0
 800bd28:	4603      	mov	r3, r0
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d100      	bne.n	800bd30 <memset+0xa>
 800bd2e:	4770      	bx	lr
 800bd30:	f803 1b01 	strb.w	r1, [r3], #1
 800bd34:	e7f9      	b.n	800bd2a <memset+0x4>
	...

0800bd38 <_localeconv_r>:
 800bd38:	4800      	ldr	r0, [pc, #0]	@ (800bd3c <_localeconv_r+0x4>)
 800bd3a:	4770      	bx	lr
 800bd3c:	20000178 	.word	0x20000178

0800bd40 <_close_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	4d06      	ldr	r5, [pc, #24]	@ (800bd5c <_close_r+0x1c>)
 800bd44:	2300      	movs	r3, #0
 800bd46:	4604      	mov	r4, r0
 800bd48:	4608      	mov	r0, r1
 800bd4a:	602b      	str	r3, [r5, #0]
 800bd4c:	f7f6 f86a 	bl	8001e24 <_close>
 800bd50:	1c43      	adds	r3, r0, #1
 800bd52:	d102      	bne.n	800bd5a <_close_r+0x1a>
 800bd54:	682b      	ldr	r3, [r5, #0]
 800bd56:	b103      	cbz	r3, 800bd5a <_close_r+0x1a>
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	bd38      	pop	{r3, r4, r5, pc}
 800bd5c:	20000d2c 	.word	0x20000d2c

0800bd60 <_lseek_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4d07      	ldr	r5, [pc, #28]	@ (800bd80 <_lseek_r+0x20>)
 800bd64:	4604      	mov	r4, r0
 800bd66:	4608      	mov	r0, r1
 800bd68:	4611      	mov	r1, r2
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	602a      	str	r2, [r5, #0]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	f7f6 f87f 	bl	8001e72 <_lseek>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d102      	bne.n	800bd7e <_lseek_r+0x1e>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	b103      	cbz	r3, 800bd7e <_lseek_r+0x1e>
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	20000d2c 	.word	0x20000d2c

0800bd84 <_read_r>:
 800bd84:	b538      	push	{r3, r4, r5, lr}
 800bd86:	4d07      	ldr	r5, [pc, #28]	@ (800bda4 <_read_r+0x20>)
 800bd88:	4604      	mov	r4, r0
 800bd8a:	4608      	mov	r0, r1
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	2200      	movs	r2, #0
 800bd90:	602a      	str	r2, [r5, #0]
 800bd92:	461a      	mov	r2, r3
 800bd94:	f7f6 f829 	bl	8001dea <_read>
 800bd98:	1c43      	adds	r3, r0, #1
 800bd9a:	d102      	bne.n	800bda2 <_read_r+0x1e>
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	b103      	cbz	r3, 800bda2 <_read_r+0x1e>
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	bd38      	pop	{r3, r4, r5, pc}
 800bda4:	20000d2c 	.word	0x20000d2c

0800bda8 <_sbrk_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4d06      	ldr	r5, [pc, #24]	@ (800bdc4 <_sbrk_r+0x1c>)
 800bdac:	2300      	movs	r3, #0
 800bdae:	4604      	mov	r4, r0
 800bdb0:	4608      	mov	r0, r1
 800bdb2:	602b      	str	r3, [r5, #0]
 800bdb4:	f7f6 f86a 	bl	8001e8c <_sbrk>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d102      	bne.n	800bdc2 <_sbrk_r+0x1a>
 800bdbc:	682b      	ldr	r3, [r5, #0]
 800bdbe:	b103      	cbz	r3, 800bdc2 <_sbrk_r+0x1a>
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	20000d2c 	.word	0x20000d2c

0800bdc8 <_write_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d07      	ldr	r5, [pc, #28]	@ (800bde8 <_write_r+0x20>)
 800bdcc:	4604      	mov	r4, r0
 800bdce:	4608      	mov	r0, r1
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	602a      	str	r2, [r5, #0]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	f7f5 fd42 	bl	8001860 <_write>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_write_r+0x1e>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_write_r+0x1e>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	20000d2c 	.word	0x20000d2c

0800bdec <__errno>:
 800bdec:	4b01      	ldr	r3, [pc, #4]	@ (800bdf4 <__errno+0x8>)
 800bdee:	6818      	ldr	r0, [r3, #0]
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	20000038 	.word	0x20000038

0800bdf8 <__libc_init_array>:
 800bdf8:	b570      	push	{r4, r5, r6, lr}
 800bdfa:	4d0d      	ldr	r5, [pc, #52]	@ (800be30 <__libc_init_array+0x38>)
 800bdfc:	4c0d      	ldr	r4, [pc, #52]	@ (800be34 <__libc_init_array+0x3c>)
 800bdfe:	1b64      	subs	r4, r4, r5
 800be00:	10a4      	asrs	r4, r4, #2
 800be02:	2600      	movs	r6, #0
 800be04:	42a6      	cmp	r6, r4
 800be06:	d109      	bne.n	800be1c <__libc_init_array+0x24>
 800be08:	4d0b      	ldr	r5, [pc, #44]	@ (800be38 <__libc_init_array+0x40>)
 800be0a:	4c0c      	ldr	r4, [pc, #48]	@ (800be3c <__libc_init_array+0x44>)
 800be0c:	f001 fdfc 	bl	800da08 <_init>
 800be10:	1b64      	subs	r4, r4, r5
 800be12:	10a4      	asrs	r4, r4, #2
 800be14:	2600      	movs	r6, #0
 800be16:	42a6      	cmp	r6, r4
 800be18:	d105      	bne.n	800be26 <__libc_init_array+0x2e>
 800be1a:	bd70      	pop	{r4, r5, r6, pc}
 800be1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be20:	4798      	blx	r3
 800be22:	3601      	adds	r6, #1
 800be24:	e7ee      	b.n	800be04 <__libc_init_array+0xc>
 800be26:	f855 3b04 	ldr.w	r3, [r5], #4
 800be2a:	4798      	blx	r3
 800be2c:	3601      	adds	r6, #1
 800be2e:	e7f2      	b.n	800be16 <__libc_init_array+0x1e>
 800be30:	0800ddf4 	.word	0x0800ddf4
 800be34:	0800ddf4 	.word	0x0800ddf4
 800be38:	0800ddf4 	.word	0x0800ddf4
 800be3c:	0800ddf8 	.word	0x0800ddf8

0800be40 <__retarget_lock_init_recursive>:
 800be40:	4770      	bx	lr

0800be42 <__retarget_lock_acquire_recursive>:
 800be42:	4770      	bx	lr

0800be44 <__retarget_lock_release_recursive>:
 800be44:	4770      	bx	lr

0800be46 <quorem>:
 800be46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4a:	6903      	ldr	r3, [r0, #16]
 800be4c:	690c      	ldr	r4, [r1, #16]
 800be4e:	42a3      	cmp	r3, r4
 800be50:	4607      	mov	r7, r0
 800be52:	db7e      	blt.n	800bf52 <quorem+0x10c>
 800be54:	3c01      	subs	r4, #1
 800be56:	f101 0814 	add.w	r8, r1, #20
 800be5a:	00a3      	lsls	r3, r4, #2
 800be5c:	f100 0514 	add.w	r5, r0, #20
 800be60:	9300      	str	r3, [sp, #0]
 800be62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be66:	9301      	str	r3, [sp, #4]
 800be68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be70:	3301      	adds	r3, #1
 800be72:	429a      	cmp	r2, r3
 800be74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be78:	fbb2 f6f3 	udiv	r6, r2, r3
 800be7c:	d32e      	bcc.n	800bedc <quorem+0x96>
 800be7e:	f04f 0a00 	mov.w	sl, #0
 800be82:	46c4      	mov	ip, r8
 800be84:	46ae      	mov	lr, r5
 800be86:	46d3      	mov	fp, sl
 800be88:	f85c 3b04 	ldr.w	r3, [ip], #4
 800be8c:	b298      	uxth	r0, r3
 800be8e:	fb06 a000 	mla	r0, r6, r0, sl
 800be92:	0c02      	lsrs	r2, r0, #16
 800be94:	0c1b      	lsrs	r3, r3, #16
 800be96:	fb06 2303 	mla	r3, r6, r3, r2
 800be9a:	f8de 2000 	ldr.w	r2, [lr]
 800be9e:	b280      	uxth	r0, r0
 800bea0:	b292      	uxth	r2, r2
 800bea2:	1a12      	subs	r2, r2, r0
 800bea4:	445a      	add	r2, fp
 800bea6:	f8de 0000 	ldr.w	r0, [lr]
 800beaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800beae:	b29b      	uxth	r3, r3
 800beb0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800beb4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800beb8:	b292      	uxth	r2, r2
 800beba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bebe:	45e1      	cmp	r9, ip
 800bec0:	f84e 2b04 	str.w	r2, [lr], #4
 800bec4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bec8:	d2de      	bcs.n	800be88 <quorem+0x42>
 800beca:	9b00      	ldr	r3, [sp, #0]
 800becc:	58eb      	ldr	r3, [r5, r3]
 800bece:	b92b      	cbnz	r3, 800bedc <quorem+0x96>
 800bed0:	9b01      	ldr	r3, [sp, #4]
 800bed2:	3b04      	subs	r3, #4
 800bed4:	429d      	cmp	r5, r3
 800bed6:	461a      	mov	r2, r3
 800bed8:	d32f      	bcc.n	800bf3a <quorem+0xf4>
 800beda:	613c      	str	r4, [r7, #16]
 800bedc:	4638      	mov	r0, r7
 800bede:	f001 f8c7 	bl	800d070 <__mcmp>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	db25      	blt.n	800bf32 <quorem+0xec>
 800bee6:	4629      	mov	r1, r5
 800bee8:	2000      	movs	r0, #0
 800beea:	f858 2b04 	ldr.w	r2, [r8], #4
 800beee:	f8d1 c000 	ldr.w	ip, [r1]
 800bef2:	fa1f fe82 	uxth.w	lr, r2
 800bef6:	fa1f f38c 	uxth.w	r3, ip
 800befa:	eba3 030e 	sub.w	r3, r3, lr
 800befe:	4403      	add	r3, r0
 800bf00:	0c12      	lsrs	r2, r2, #16
 800bf02:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bf06:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf10:	45c1      	cmp	r9, r8
 800bf12:	f841 3b04 	str.w	r3, [r1], #4
 800bf16:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bf1a:	d2e6      	bcs.n	800beea <quorem+0xa4>
 800bf1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf24:	b922      	cbnz	r2, 800bf30 <quorem+0xea>
 800bf26:	3b04      	subs	r3, #4
 800bf28:	429d      	cmp	r5, r3
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	d30b      	bcc.n	800bf46 <quorem+0x100>
 800bf2e:	613c      	str	r4, [r7, #16]
 800bf30:	3601      	adds	r6, #1
 800bf32:	4630      	mov	r0, r6
 800bf34:	b003      	add	sp, #12
 800bf36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3a:	6812      	ldr	r2, [r2, #0]
 800bf3c:	3b04      	subs	r3, #4
 800bf3e:	2a00      	cmp	r2, #0
 800bf40:	d1cb      	bne.n	800beda <quorem+0x94>
 800bf42:	3c01      	subs	r4, #1
 800bf44:	e7c6      	b.n	800bed4 <quorem+0x8e>
 800bf46:	6812      	ldr	r2, [r2, #0]
 800bf48:	3b04      	subs	r3, #4
 800bf4a:	2a00      	cmp	r2, #0
 800bf4c:	d1ef      	bne.n	800bf2e <quorem+0xe8>
 800bf4e:	3c01      	subs	r4, #1
 800bf50:	e7ea      	b.n	800bf28 <quorem+0xe2>
 800bf52:	2000      	movs	r0, #0
 800bf54:	e7ee      	b.n	800bf34 <quorem+0xee>
	...

0800bf58 <_dtoa_r>:
 800bf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf5c:	69c7      	ldr	r7, [r0, #28]
 800bf5e:	b097      	sub	sp, #92	@ 0x5c
 800bf60:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bf64:	ec55 4b10 	vmov	r4, r5, d0
 800bf68:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bf6a:	9107      	str	r1, [sp, #28]
 800bf6c:	4681      	mov	r9, r0
 800bf6e:	920c      	str	r2, [sp, #48]	@ 0x30
 800bf70:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf72:	b97f      	cbnz	r7, 800bf94 <_dtoa_r+0x3c>
 800bf74:	2010      	movs	r0, #16
 800bf76:	f7ff f8ab 	bl	800b0d0 <malloc>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	f8c9 001c 	str.w	r0, [r9, #28]
 800bf80:	b920      	cbnz	r0, 800bf8c <_dtoa_r+0x34>
 800bf82:	4ba9      	ldr	r3, [pc, #676]	@ (800c228 <_dtoa_r+0x2d0>)
 800bf84:	21ef      	movs	r1, #239	@ 0xef
 800bf86:	48a9      	ldr	r0, [pc, #676]	@ (800c22c <_dtoa_r+0x2d4>)
 800bf88:	f001 fc0a 	bl	800d7a0 <__assert_func>
 800bf8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bf90:	6007      	str	r7, [r0, #0]
 800bf92:	60c7      	str	r7, [r0, #12]
 800bf94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bf98:	6819      	ldr	r1, [r3, #0]
 800bf9a:	b159      	cbz	r1, 800bfb4 <_dtoa_r+0x5c>
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	604a      	str	r2, [r1, #4]
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	4093      	lsls	r3, r2
 800bfa4:	608b      	str	r3, [r1, #8]
 800bfa6:	4648      	mov	r0, r9
 800bfa8:	f000 fe30 	bl	800cc0c <_Bfree>
 800bfac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	601a      	str	r2, [r3, #0]
 800bfb4:	1e2b      	subs	r3, r5, #0
 800bfb6:	bfb9      	ittee	lt
 800bfb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bfbc:	9305      	strlt	r3, [sp, #20]
 800bfbe:	2300      	movge	r3, #0
 800bfc0:	6033      	strge	r3, [r6, #0]
 800bfc2:	9f05      	ldr	r7, [sp, #20]
 800bfc4:	4b9a      	ldr	r3, [pc, #616]	@ (800c230 <_dtoa_r+0x2d8>)
 800bfc6:	bfbc      	itt	lt
 800bfc8:	2201      	movlt	r2, #1
 800bfca:	6032      	strlt	r2, [r6, #0]
 800bfcc:	43bb      	bics	r3, r7
 800bfce:	d112      	bne.n	800bff6 <_dtoa_r+0x9e>
 800bfd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bfd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bfd6:	6013      	str	r3, [r2, #0]
 800bfd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bfdc:	4323      	orrs	r3, r4
 800bfde:	f000 855a 	beq.w	800ca96 <_dtoa_r+0xb3e>
 800bfe2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bfe4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c244 <_dtoa_r+0x2ec>
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f000 855c 	beq.w	800caa6 <_dtoa_r+0xb4e>
 800bfee:	f10a 0303 	add.w	r3, sl, #3
 800bff2:	f000 bd56 	b.w	800caa2 <_dtoa_r+0xb4a>
 800bff6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bffa:	2200      	movs	r2, #0
 800bffc:	ec51 0b17 	vmov	r0, r1, d7
 800c000:	2300      	movs	r3, #0
 800c002:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c006:	f7f4 fd5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c00a:	4680      	mov	r8, r0
 800c00c:	b158      	cbz	r0, 800c026 <_dtoa_r+0xce>
 800c00e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c010:	2301      	movs	r3, #1
 800c012:	6013      	str	r3, [r2, #0]
 800c014:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c016:	b113      	cbz	r3, 800c01e <_dtoa_r+0xc6>
 800c018:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c01a:	4b86      	ldr	r3, [pc, #536]	@ (800c234 <_dtoa_r+0x2dc>)
 800c01c:	6013      	str	r3, [r2, #0]
 800c01e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c248 <_dtoa_r+0x2f0>
 800c022:	f000 bd40 	b.w	800caa6 <_dtoa_r+0xb4e>
 800c026:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c02a:	aa14      	add	r2, sp, #80	@ 0x50
 800c02c:	a915      	add	r1, sp, #84	@ 0x54
 800c02e:	4648      	mov	r0, r9
 800c030:	f001 f8ce 	bl	800d1d0 <__d2b>
 800c034:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c038:	9002      	str	r0, [sp, #8]
 800c03a:	2e00      	cmp	r6, #0
 800c03c:	d078      	beq.n	800c130 <_dtoa_r+0x1d8>
 800c03e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c040:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c048:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c04c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c050:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c054:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c058:	4619      	mov	r1, r3
 800c05a:	2200      	movs	r2, #0
 800c05c:	4b76      	ldr	r3, [pc, #472]	@ (800c238 <_dtoa_r+0x2e0>)
 800c05e:	f7f4 f913 	bl	8000288 <__aeabi_dsub>
 800c062:	a36b      	add	r3, pc, #428	@ (adr r3, 800c210 <_dtoa_r+0x2b8>)
 800c064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c068:	f7f4 fac6 	bl	80005f8 <__aeabi_dmul>
 800c06c:	a36a      	add	r3, pc, #424	@ (adr r3, 800c218 <_dtoa_r+0x2c0>)
 800c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c072:	f7f4 f90b 	bl	800028c <__adddf3>
 800c076:	4604      	mov	r4, r0
 800c078:	4630      	mov	r0, r6
 800c07a:	460d      	mov	r5, r1
 800c07c:	f7f4 fa52 	bl	8000524 <__aeabi_i2d>
 800c080:	a367      	add	r3, pc, #412	@ (adr r3, 800c220 <_dtoa_r+0x2c8>)
 800c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c086:	f7f4 fab7 	bl	80005f8 <__aeabi_dmul>
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	4620      	mov	r0, r4
 800c090:	4629      	mov	r1, r5
 800c092:	f7f4 f8fb 	bl	800028c <__adddf3>
 800c096:	4604      	mov	r4, r0
 800c098:	460d      	mov	r5, r1
 800c09a:	f7f4 fd5d 	bl	8000b58 <__aeabi_d2iz>
 800c09e:	2200      	movs	r2, #0
 800c0a0:	4607      	mov	r7, r0
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	4629      	mov	r1, r5
 800c0a8:	f7f4 fd18 	bl	8000adc <__aeabi_dcmplt>
 800c0ac:	b140      	cbz	r0, 800c0c0 <_dtoa_r+0x168>
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	f7f4 fa38 	bl	8000524 <__aeabi_i2d>
 800c0b4:	4622      	mov	r2, r4
 800c0b6:	462b      	mov	r3, r5
 800c0b8:	f7f4 fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0bc:	b900      	cbnz	r0, 800c0c0 <_dtoa_r+0x168>
 800c0be:	3f01      	subs	r7, #1
 800c0c0:	2f16      	cmp	r7, #22
 800c0c2:	d852      	bhi.n	800c16a <_dtoa_r+0x212>
 800c0c4:	4b5d      	ldr	r3, [pc, #372]	@ (800c23c <_dtoa_r+0x2e4>)
 800c0c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c0d2:	f7f4 fd03 	bl	8000adc <__aeabi_dcmplt>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d049      	beq.n	800c16e <_dtoa_r+0x216>
 800c0da:	3f01      	subs	r7, #1
 800c0dc:	2300      	movs	r3, #0
 800c0de:	9310      	str	r3, [sp, #64]	@ 0x40
 800c0e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c0e2:	1b9b      	subs	r3, r3, r6
 800c0e4:	1e5a      	subs	r2, r3, #1
 800c0e6:	bf45      	ittet	mi
 800c0e8:	f1c3 0301 	rsbmi	r3, r3, #1
 800c0ec:	9300      	strmi	r3, [sp, #0]
 800c0ee:	2300      	movpl	r3, #0
 800c0f0:	2300      	movmi	r3, #0
 800c0f2:	9206      	str	r2, [sp, #24]
 800c0f4:	bf54      	ite	pl
 800c0f6:	9300      	strpl	r3, [sp, #0]
 800c0f8:	9306      	strmi	r3, [sp, #24]
 800c0fa:	2f00      	cmp	r7, #0
 800c0fc:	db39      	blt.n	800c172 <_dtoa_r+0x21a>
 800c0fe:	9b06      	ldr	r3, [sp, #24]
 800c100:	970d      	str	r7, [sp, #52]	@ 0x34
 800c102:	443b      	add	r3, r7
 800c104:	9306      	str	r3, [sp, #24]
 800c106:	2300      	movs	r3, #0
 800c108:	9308      	str	r3, [sp, #32]
 800c10a:	9b07      	ldr	r3, [sp, #28]
 800c10c:	2b09      	cmp	r3, #9
 800c10e:	d863      	bhi.n	800c1d8 <_dtoa_r+0x280>
 800c110:	2b05      	cmp	r3, #5
 800c112:	bfc4      	itt	gt
 800c114:	3b04      	subgt	r3, #4
 800c116:	9307      	strgt	r3, [sp, #28]
 800c118:	9b07      	ldr	r3, [sp, #28]
 800c11a:	f1a3 0302 	sub.w	r3, r3, #2
 800c11e:	bfcc      	ite	gt
 800c120:	2400      	movgt	r4, #0
 800c122:	2401      	movle	r4, #1
 800c124:	2b03      	cmp	r3, #3
 800c126:	d863      	bhi.n	800c1f0 <_dtoa_r+0x298>
 800c128:	e8df f003 	tbb	[pc, r3]
 800c12c:	2b375452 	.word	0x2b375452
 800c130:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c134:	441e      	add	r6, r3
 800c136:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c13a:	2b20      	cmp	r3, #32
 800c13c:	bfc1      	itttt	gt
 800c13e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c142:	409f      	lslgt	r7, r3
 800c144:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c148:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c14c:	bfd6      	itet	le
 800c14e:	f1c3 0320 	rsble	r3, r3, #32
 800c152:	ea47 0003 	orrgt.w	r0, r7, r3
 800c156:	fa04 f003 	lslle.w	r0, r4, r3
 800c15a:	f7f4 f9d3 	bl	8000504 <__aeabi_ui2d>
 800c15e:	2201      	movs	r2, #1
 800c160:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c164:	3e01      	subs	r6, #1
 800c166:	9212      	str	r2, [sp, #72]	@ 0x48
 800c168:	e776      	b.n	800c058 <_dtoa_r+0x100>
 800c16a:	2301      	movs	r3, #1
 800c16c:	e7b7      	b.n	800c0de <_dtoa_r+0x186>
 800c16e:	9010      	str	r0, [sp, #64]	@ 0x40
 800c170:	e7b6      	b.n	800c0e0 <_dtoa_r+0x188>
 800c172:	9b00      	ldr	r3, [sp, #0]
 800c174:	1bdb      	subs	r3, r3, r7
 800c176:	9300      	str	r3, [sp, #0]
 800c178:	427b      	negs	r3, r7
 800c17a:	9308      	str	r3, [sp, #32]
 800c17c:	2300      	movs	r3, #0
 800c17e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c180:	e7c3      	b.n	800c10a <_dtoa_r+0x1b2>
 800c182:	2301      	movs	r3, #1
 800c184:	9309      	str	r3, [sp, #36]	@ 0x24
 800c186:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c188:	eb07 0b03 	add.w	fp, r7, r3
 800c18c:	f10b 0301 	add.w	r3, fp, #1
 800c190:	2b01      	cmp	r3, #1
 800c192:	9303      	str	r3, [sp, #12]
 800c194:	bfb8      	it	lt
 800c196:	2301      	movlt	r3, #1
 800c198:	e006      	b.n	800c1a8 <_dtoa_r+0x250>
 800c19a:	2301      	movs	r3, #1
 800c19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c19e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	dd28      	ble.n	800c1f6 <_dtoa_r+0x29e>
 800c1a4:	469b      	mov	fp, r3
 800c1a6:	9303      	str	r3, [sp, #12]
 800c1a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	2204      	movs	r2, #4
 800c1b0:	f102 0514 	add.w	r5, r2, #20
 800c1b4:	429d      	cmp	r5, r3
 800c1b6:	d926      	bls.n	800c206 <_dtoa_r+0x2ae>
 800c1b8:	6041      	str	r1, [r0, #4]
 800c1ba:	4648      	mov	r0, r9
 800c1bc:	f000 fce6 	bl	800cb8c <_Balloc>
 800c1c0:	4682      	mov	sl, r0
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d142      	bne.n	800c24c <_dtoa_r+0x2f4>
 800c1c6:	4b1e      	ldr	r3, [pc, #120]	@ (800c240 <_dtoa_r+0x2e8>)
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	f240 11af 	movw	r1, #431	@ 0x1af
 800c1ce:	e6da      	b.n	800bf86 <_dtoa_r+0x2e>
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	e7e3      	b.n	800c19c <_dtoa_r+0x244>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	e7d5      	b.n	800c184 <_dtoa_r+0x22c>
 800c1d8:	2401      	movs	r4, #1
 800c1da:	2300      	movs	r3, #0
 800c1dc:	9307      	str	r3, [sp, #28]
 800c1de:	9409      	str	r4, [sp, #36]	@ 0x24
 800c1e0:	f04f 3bff 	mov.w	fp, #4294967295
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f8cd b00c 	str.w	fp, [sp, #12]
 800c1ea:	2312      	movs	r3, #18
 800c1ec:	920c      	str	r2, [sp, #48]	@ 0x30
 800c1ee:	e7db      	b.n	800c1a8 <_dtoa_r+0x250>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1f4:	e7f4      	b.n	800c1e0 <_dtoa_r+0x288>
 800c1f6:	f04f 0b01 	mov.w	fp, #1
 800c1fa:	f8cd b00c 	str.w	fp, [sp, #12]
 800c1fe:	465b      	mov	r3, fp
 800c200:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c204:	e7d0      	b.n	800c1a8 <_dtoa_r+0x250>
 800c206:	3101      	adds	r1, #1
 800c208:	0052      	lsls	r2, r2, #1
 800c20a:	e7d1      	b.n	800c1b0 <_dtoa_r+0x258>
 800c20c:	f3af 8000 	nop.w
 800c210:	636f4361 	.word	0x636f4361
 800c214:	3fd287a7 	.word	0x3fd287a7
 800c218:	8b60c8b3 	.word	0x8b60c8b3
 800c21c:	3fc68a28 	.word	0x3fc68a28
 800c220:	509f79fb 	.word	0x509f79fb
 800c224:	3fd34413 	.word	0x3fd34413
 800c228:	0800dab5 	.word	0x0800dab5
 800c22c:	0800dacc 	.word	0x0800dacc
 800c230:	7ff00000 	.word	0x7ff00000
 800c234:	0800da85 	.word	0x0800da85
 800c238:	3ff80000 	.word	0x3ff80000
 800c23c:	0800dc20 	.word	0x0800dc20
 800c240:	0800db24 	.word	0x0800db24
 800c244:	0800dab1 	.word	0x0800dab1
 800c248:	0800da84 	.word	0x0800da84
 800c24c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c250:	6018      	str	r0, [r3, #0]
 800c252:	9b03      	ldr	r3, [sp, #12]
 800c254:	2b0e      	cmp	r3, #14
 800c256:	f200 80a1 	bhi.w	800c39c <_dtoa_r+0x444>
 800c25a:	2c00      	cmp	r4, #0
 800c25c:	f000 809e 	beq.w	800c39c <_dtoa_r+0x444>
 800c260:	2f00      	cmp	r7, #0
 800c262:	dd33      	ble.n	800c2cc <_dtoa_r+0x374>
 800c264:	4b9c      	ldr	r3, [pc, #624]	@ (800c4d8 <_dtoa_r+0x580>)
 800c266:	f007 020f 	and.w	r2, r7, #15
 800c26a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c26e:	ed93 7b00 	vldr	d7, [r3]
 800c272:	05f8      	lsls	r0, r7, #23
 800c274:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c278:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c27c:	d516      	bpl.n	800c2ac <_dtoa_r+0x354>
 800c27e:	4b97      	ldr	r3, [pc, #604]	@ (800c4dc <_dtoa_r+0x584>)
 800c280:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c284:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c288:	f7f4 fae0 	bl	800084c <__aeabi_ddiv>
 800c28c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c290:	f004 040f 	and.w	r4, r4, #15
 800c294:	2603      	movs	r6, #3
 800c296:	4d91      	ldr	r5, [pc, #580]	@ (800c4dc <_dtoa_r+0x584>)
 800c298:	b954      	cbnz	r4, 800c2b0 <_dtoa_r+0x358>
 800c29a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c29e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2a2:	f7f4 fad3 	bl	800084c <__aeabi_ddiv>
 800c2a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2aa:	e028      	b.n	800c2fe <_dtoa_r+0x3a6>
 800c2ac:	2602      	movs	r6, #2
 800c2ae:	e7f2      	b.n	800c296 <_dtoa_r+0x33e>
 800c2b0:	07e1      	lsls	r1, r4, #31
 800c2b2:	d508      	bpl.n	800c2c6 <_dtoa_r+0x36e>
 800c2b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c2b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2bc:	f7f4 f99c 	bl	80005f8 <__aeabi_dmul>
 800c2c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c2c4:	3601      	adds	r6, #1
 800c2c6:	1064      	asrs	r4, r4, #1
 800c2c8:	3508      	adds	r5, #8
 800c2ca:	e7e5      	b.n	800c298 <_dtoa_r+0x340>
 800c2cc:	f000 80af 	beq.w	800c42e <_dtoa_r+0x4d6>
 800c2d0:	427c      	negs	r4, r7
 800c2d2:	4b81      	ldr	r3, [pc, #516]	@ (800c4d8 <_dtoa_r+0x580>)
 800c2d4:	4d81      	ldr	r5, [pc, #516]	@ (800c4dc <_dtoa_r+0x584>)
 800c2d6:	f004 020f 	and.w	r2, r4, #15
 800c2da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c2e6:	f7f4 f987 	bl	80005f8 <__aeabi_dmul>
 800c2ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2ee:	1124      	asrs	r4, r4, #4
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	2602      	movs	r6, #2
 800c2f4:	2c00      	cmp	r4, #0
 800c2f6:	f040 808f 	bne.w	800c418 <_dtoa_r+0x4c0>
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1d3      	bne.n	800c2a6 <_dtoa_r+0x34e>
 800c2fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c300:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c304:	2b00      	cmp	r3, #0
 800c306:	f000 8094 	beq.w	800c432 <_dtoa_r+0x4da>
 800c30a:	4b75      	ldr	r3, [pc, #468]	@ (800c4e0 <_dtoa_r+0x588>)
 800c30c:	2200      	movs	r2, #0
 800c30e:	4620      	mov	r0, r4
 800c310:	4629      	mov	r1, r5
 800c312:	f7f4 fbe3 	bl	8000adc <__aeabi_dcmplt>
 800c316:	2800      	cmp	r0, #0
 800c318:	f000 808b 	beq.w	800c432 <_dtoa_r+0x4da>
 800c31c:	9b03      	ldr	r3, [sp, #12]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f000 8087 	beq.w	800c432 <_dtoa_r+0x4da>
 800c324:	f1bb 0f00 	cmp.w	fp, #0
 800c328:	dd34      	ble.n	800c394 <_dtoa_r+0x43c>
 800c32a:	4620      	mov	r0, r4
 800c32c:	4b6d      	ldr	r3, [pc, #436]	@ (800c4e4 <_dtoa_r+0x58c>)
 800c32e:	2200      	movs	r2, #0
 800c330:	4629      	mov	r1, r5
 800c332:	f7f4 f961 	bl	80005f8 <__aeabi_dmul>
 800c336:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c33a:	f107 38ff 	add.w	r8, r7, #4294967295
 800c33e:	3601      	adds	r6, #1
 800c340:	465c      	mov	r4, fp
 800c342:	4630      	mov	r0, r6
 800c344:	f7f4 f8ee 	bl	8000524 <__aeabi_i2d>
 800c348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c34c:	f7f4 f954 	bl	80005f8 <__aeabi_dmul>
 800c350:	4b65      	ldr	r3, [pc, #404]	@ (800c4e8 <_dtoa_r+0x590>)
 800c352:	2200      	movs	r2, #0
 800c354:	f7f3 ff9a 	bl	800028c <__adddf3>
 800c358:	4605      	mov	r5, r0
 800c35a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c35e:	2c00      	cmp	r4, #0
 800c360:	d16a      	bne.n	800c438 <_dtoa_r+0x4e0>
 800c362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c366:	4b61      	ldr	r3, [pc, #388]	@ (800c4ec <_dtoa_r+0x594>)
 800c368:	2200      	movs	r2, #0
 800c36a:	f7f3 ff8d 	bl	8000288 <__aeabi_dsub>
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c376:	462a      	mov	r2, r5
 800c378:	4633      	mov	r3, r6
 800c37a:	f7f4 fbcd 	bl	8000b18 <__aeabi_dcmpgt>
 800c37e:	2800      	cmp	r0, #0
 800c380:	f040 8298 	bne.w	800c8b4 <_dtoa_r+0x95c>
 800c384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c388:	462a      	mov	r2, r5
 800c38a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c38e:	f7f4 fba5 	bl	8000adc <__aeabi_dcmplt>
 800c392:	bb38      	cbnz	r0, 800c3e4 <_dtoa_r+0x48c>
 800c394:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c398:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c39c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f2c0 8157 	blt.w	800c652 <_dtoa_r+0x6fa>
 800c3a4:	2f0e      	cmp	r7, #14
 800c3a6:	f300 8154 	bgt.w	800c652 <_dtoa_r+0x6fa>
 800c3aa:	4b4b      	ldr	r3, [pc, #300]	@ (800c4d8 <_dtoa_r+0x580>)
 800c3ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c3b0:	ed93 7b00 	vldr	d7, [r3]
 800c3b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	ed8d 7b00 	vstr	d7, [sp]
 800c3bc:	f280 80e5 	bge.w	800c58a <_dtoa_r+0x632>
 800c3c0:	9b03      	ldr	r3, [sp, #12]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f300 80e1 	bgt.w	800c58a <_dtoa_r+0x632>
 800c3c8:	d10c      	bne.n	800c3e4 <_dtoa_r+0x48c>
 800c3ca:	4b48      	ldr	r3, [pc, #288]	@ (800c4ec <_dtoa_r+0x594>)
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	ec51 0b17 	vmov	r0, r1, d7
 800c3d2:	f7f4 f911 	bl	80005f8 <__aeabi_dmul>
 800c3d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3da:	f7f4 fb93 	bl	8000b04 <__aeabi_dcmpge>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	f000 8266 	beq.w	800c8b0 <_dtoa_r+0x958>
 800c3e4:	2400      	movs	r4, #0
 800c3e6:	4625      	mov	r5, r4
 800c3e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c3ea:	4656      	mov	r6, sl
 800c3ec:	ea6f 0803 	mvn.w	r8, r3
 800c3f0:	2700      	movs	r7, #0
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	4648      	mov	r0, r9
 800c3f6:	f000 fc09 	bl	800cc0c <_Bfree>
 800c3fa:	2d00      	cmp	r5, #0
 800c3fc:	f000 80bd 	beq.w	800c57a <_dtoa_r+0x622>
 800c400:	b12f      	cbz	r7, 800c40e <_dtoa_r+0x4b6>
 800c402:	42af      	cmp	r7, r5
 800c404:	d003      	beq.n	800c40e <_dtoa_r+0x4b6>
 800c406:	4639      	mov	r1, r7
 800c408:	4648      	mov	r0, r9
 800c40a:	f000 fbff 	bl	800cc0c <_Bfree>
 800c40e:	4629      	mov	r1, r5
 800c410:	4648      	mov	r0, r9
 800c412:	f000 fbfb 	bl	800cc0c <_Bfree>
 800c416:	e0b0      	b.n	800c57a <_dtoa_r+0x622>
 800c418:	07e2      	lsls	r2, r4, #31
 800c41a:	d505      	bpl.n	800c428 <_dtoa_r+0x4d0>
 800c41c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c420:	f7f4 f8ea 	bl	80005f8 <__aeabi_dmul>
 800c424:	3601      	adds	r6, #1
 800c426:	2301      	movs	r3, #1
 800c428:	1064      	asrs	r4, r4, #1
 800c42a:	3508      	adds	r5, #8
 800c42c:	e762      	b.n	800c2f4 <_dtoa_r+0x39c>
 800c42e:	2602      	movs	r6, #2
 800c430:	e765      	b.n	800c2fe <_dtoa_r+0x3a6>
 800c432:	9c03      	ldr	r4, [sp, #12]
 800c434:	46b8      	mov	r8, r7
 800c436:	e784      	b.n	800c342 <_dtoa_r+0x3ea>
 800c438:	4b27      	ldr	r3, [pc, #156]	@ (800c4d8 <_dtoa_r+0x580>)
 800c43a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c43c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c440:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c444:	4454      	add	r4, sl
 800c446:	2900      	cmp	r1, #0
 800c448:	d054      	beq.n	800c4f4 <_dtoa_r+0x59c>
 800c44a:	4929      	ldr	r1, [pc, #164]	@ (800c4f0 <_dtoa_r+0x598>)
 800c44c:	2000      	movs	r0, #0
 800c44e:	f7f4 f9fd 	bl	800084c <__aeabi_ddiv>
 800c452:	4633      	mov	r3, r6
 800c454:	462a      	mov	r2, r5
 800c456:	f7f3 ff17 	bl	8000288 <__aeabi_dsub>
 800c45a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c45e:	4656      	mov	r6, sl
 800c460:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c464:	f7f4 fb78 	bl	8000b58 <__aeabi_d2iz>
 800c468:	4605      	mov	r5, r0
 800c46a:	f7f4 f85b 	bl	8000524 <__aeabi_i2d>
 800c46e:	4602      	mov	r2, r0
 800c470:	460b      	mov	r3, r1
 800c472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c476:	f7f3 ff07 	bl	8000288 <__aeabi_dsub>
 800c47a:	3530      	adds	r5, #48	@ 0x30
 800c47c:	4602      	mov	r2, r0
 800c47e:	460b      	mov	r3, r1
 800c480:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c484:	f806 5b01 	strb.w	r5, [r6], #1
 800c488:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c48c:	f7f4 fb26 	bl	8000adc <__aeabi_dcmplt>
 800c490:	2800      	cmp	r0, #0
 800c492:	d172      	bne.n	800c57a <_dtoa_r+0x622>
 800c494:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c498:	4911      	ldr	r1, [pc, #68]	@ (800c4e0 <_dtoa_r+0x588>)
 800c49a:	2000      	movs	r0, #0
 800c49c:	f7f3 fef4 	bl	8000288 <__aeabi_dsub>
 800c4a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4a4:	f7f4 fb1a 	bl	8000adc <__aeabi_dcmplt>
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	f040 80b4 	bne.w	800c616 <_dtoa_r+0x6be>
 800c4ae:	42a6      	cmp	r6, r4
 800c4b0:	f43f af70 	beq.w	800c394 <_dtoa_r+0x43c>
 800c4b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c4b8:	4b0a      	ldr	r3, [pc, #40]	@ (800c4e4 <_dtoa_r+0x58c>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f7f4 f89c 	bl	80005f8 <__aeabi_dmul>
 800c4c0:	4b08      	ldr	r3, [pc, #32]	@ (800c4e4 <_dtoa_r+0x58c>)
 800c4c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4cc:	f7f4 f894 	bl	80005f8 <__aeabi_dmul>
 800c4d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4d4:	e7c4      	b.n	800c460 <_dtoa_r+0x508>
 800c4d6:	bf00      	nop
 800c4d8:	0800dc20 	.word	0x0800dc20
 800c4dc:	0800dbf8 	.word	0x0800dbf8
 800c4e0:	3ff00000 	.word	0x3ff00000
 800c4e4:	40240000 	.word	0x40240000
 800c4e8:	401c0000 	.word	0x401c0000
 800c4ec:	40140000 	.word	0x40140000
 800c4f0:	3fe00000 	.word	0x3fe00000
 800c4f4:	4631      	mov	r1, r6
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f7f4 f87e 	bl	80005f8 <__aeabi_dmul>
 800c4fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c500:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c502:	4656      	mov	r6, sl
 800c504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c508:	f7f4 fb26 	bl	8000b58 <__aeabi_d2iz>
 800c50c:	4605      	mov	r5, r0
 800c50e:	f7f4 f809 	bl	8000524 <__aeabi_i2d>
 800c512:	4602      	mov	r2, r0
 800c514:	460b      	mov	r3, r1
 800c516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c51a:	f7f3 feb5 	bl	8000288 <__aeabi_dsub>
 800c51e:	3530      	adds	r5, #48	@ 0x30
 800c520:	f806 5b01 	strb.w	r5, [r6], #1
 800c524:	4602      	mov	r2, r0
 800c526:	460b      	mov	r3, r1
 800c528:	42a6      	cmp	r6, r4
 800c52a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c52e:	f04f 0200 	mov.w	r2, #0
 800c532:	d124      	bne.n	800c57e <_dtoa_r+0x626>
 800c534:	4baf      	ldr	r3, [pc, #700]	@ (800c7f4 <_dtoa_r+0x89c>)
 800c536:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c53a:	f7f3 fea7 	bl	800028c <__adddf3>
 800c53e:	4602      	mov	r2, r0
 800c540:	460b      	mov	r3, r1
 800c542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c546:	f7f4 fae7 	bl	8000b18 <__aeabi_dcmpgt>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d163      	bne.n	800c616 <_dtoa_r+0x6be>
 800c54e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c552:	49a8      	ldr	r1, [pc, #672]	@ (800c7f4 <_dtoa_r+0x89c>)
 800c554:	2000      	movs	r0, #0
 800c556:	f7f3 fe97 	bl	8000288 <__aeabi_dsub>
 800c55a:	4602      	mov	r2, r0
 800c55c:	460b      	mov	r3, r1
 800c55e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c562:	f7f4 fabb 	bl	8000adc <__aeabi_dcmplt>
 800c566:	2800      	cmp	r0, #0
 800c568:	f43f af14 	beq.w	800c394 <_dtoa_r+0x43c>
 800c56c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c56e:	1e73      	subs	r3, r6, #1
 800c570:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c572:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c576:	2b30      	cmp	r3, #48	@ 0x30
 800c578:	d0f8      	beq.n	800c56c <_dtoa_r+0x614>
 800c57a:	4647      	mov	r7, r8
 800c57c:	e03b      	b.n	800c5f6 <_dtoa_r+0x69e>
 800c57e:	4b9e      	ldr	r3, [pc, #632]	@ (800c7f8 <_dtoa_r+0x8a0>)
 800c580:	f7f4 f83a 	bl	80005f8 <__aeabi_dmul>
 800c584:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c588:	e7bc      	b.n	800c504 <_dtoa_r+0x5ac>
 800c58a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c58e:	4656      	mov	r6, sl
 800c590:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c594:	4620      	mov	r0, r4
 800c596:	4629      	mov	r1, r5
 800c598:	f7f4 f958 	bl	800084c <__aeabi_ddiv>
 800c59c:	f7f4 fadc 	bl	8000b58 <__aeabi_d2iz>
 800c5a0:	4680      	mov	r8, r0
 800c5a2:	f7f3 ffbf 	bl	8000524 <__aeabi_i2d>
 800c5a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5aa:	f7f4 f825 	bl	80005f8 <__aeabi_dmul>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c5ba:	f7f3 fe65 	bl	8000288 <__aeabi_dsub>
 800c5be:	f806 4b01 	strb.w	r4, [r6], #1
 800c5c2:	9d03      	ldr	r5, [sp, #12]
 800c5c4:	eba6 040a 	sub.w	r4, r6, sl
 800c5c8:	42a5      	cmp	r5, r4
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	d133      	bne.n	800c638 <_dtoa_r+0x6e0>
 800c5d0:	f7f3 fe5c 	bl	800028c <__adddf3>
 800c5d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5d8:	4604      	mov	r4, r0
 800c5da:	460d      	mov	r5, r1
 800c5dc:	f7f4 fa9c 	bl	8000b18 <__aeabi_dcmpgt>
 800c5e0:	b9c0      	cbnz	r0, 800c614 <_dtoa_r+0x6bc>
 800c5e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	4629      	mov	r1, r5
 800c5ea:	f7f4 fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5ee:	b110      	cbz	r0, 800c5f6 <_dtoa_r+0x69e>
 800c5f0:	f018 0f01 	tst.w	r8, #1
 800c5f4:	d10e      	bne.n	800c614 <_dtoa_r+0x6bc>
 800c5f6:	9902      	ldr	r1, [sp, #8]
 800c5f8:	4648      	mov	r0, r9
 800c5fa:	f000 fb07 	bl	800cc0c <_Bfree>
 800c5fe:	2300      	movs	r3, #0
 800c600:	7033      	strb	r3, [r6, #0]
 800c602:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c604:	3701      	adds	r7, #1
 800c606:	601f      	str	r7, [r3, #0]
 800c608:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f000 824b 	beq.w	800caa6 <_dtoa_r+0xb4e>
 800c610:	601e      	str	r6, [r3, #0]
 800c612:	e248      	b.n	800caa6 <_dtoa_r+0xb4e>
 800c614:	46b8      	mov	r8, r7
 800c616:	4633      	mov	r3, r6
 800c618:	461e      	mov	r6, r3
 800c61a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c61e:	2a39      	cmp	r2, #57	@ 0x39
 800c620:	d106      	bne.n	800c630 <_dtoa_r+0x6d8>
 800c622:	459a      	cmp	sl, r3
 800c624:	d1f8      	bne.n	800c618 <_dtoa_r+0x6c0>
 800c626:	2230      	movs	r2, #48	@ 0x30
 800c628:	f108 0801 	add.w	r8, r8, #1
 800c62c:	f88a 2000 	strb.w	r2, [sl]
 800c630:	781a      	ldrb	r2, [r3, #0]
 800c632:	3201      	adds	r2, #1
 800c634:	701a      	strb	r2, [r3, #0]
 800c636:	e7a0      	b.n	800c57a <_dtoa_r+0x622>
 800c638:	4b6f      	ldr	r3, [pc, #444]	@ (800c7f8 <_dtoa_r+0x8a0>)
 800c63a:	2200      	movs	r2, #0
 800c63c:	f7f3 ffdc 	bl	80005f8 <__aeabi_dmul>
 800c640:	2200      	movs	r2, #0
 800c642:	2300      	movs	r3, #0
 800c644:	4604      	mov	r4, r0
 800c646:	460d      	mov	r5, r1
 800c648:	f7f4 fa3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d09f      	beq.n	800c590 <_dtoa_r+0x638>
 800c650:	e7d1      	b.n	800c5f6 <_dtoa_r+0x69e>
 800c652:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c654:	2a00      	cmp	r2, #0
 800c656:	f000 80ea 	beq.w	800c82e <_dtoa_r+0x8d6>
 800c65a:	9a07      	ldr	r2, [sp, #28]
 800c65c:	2a01      	cmp	r2, #1
 800c65e:	f300 80cd 	bgt.w	800c7fc <_dtoa_r+0x8a4>
 800c662:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c664:	2a00      	cmp	r2, #0
 800c666:	f000 80c1 	beq.w	800c7ec <_dtoa_r+0x894>
 800c66a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c66e:	9c08      	ldr	r4, [sp, #32]
 800c670:	9e00      	ldr	r6, [sp, #0]
 800c672:	9a00      	ldr	r2, [sp, #0]
 800c674:	441a      	add	r2, r3
 800c676:	9200      	str	r2, [sp, #0]
 800c678:	9a06      	ldr	r2, [sp, #24]
 800c67a:	2101      	movs	r1, #1
 800c67c:	441a      	add	r2, r3
 800c67e:	4648      	mov	r0, r9
 800c680:	9206      	str	r2, [sp, #24]
 800c682:	f000 fb77 	bl	800cd74 <__i2b>
 800c686:	4605      	mov	r5, r0
 800c688:	b166      	cbz	r6, 800c6a4 <_dtoa_r+0x74c>
 800c68a:	9b06      	ldr	r3, [sp, #24]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	dd09      	ble.n	800c6a4 <_dtoa_r+0x74c>
 800c690:	42b3      	cmp	r3, r6
 800c692:	9a00      	ldr	r2, [sp, #0]
 800c694:	bfa8      	it	ge
 800c696:	4633      	movge	r3, r6
 800c698:	1ad2      	subs	r2, r2, r3
 800c69a:	9200      	str	r2, [sp, #0]
 800c69c:	9a06      	ldr	r2, [sp, #24]
 800c69e:	1af6      	subs	r6, r6, r3
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	9306      	str	r3, [sp, #24]
 800c6a4:	9b08      	ldr	r3, [sp, #32]
 800c6a6:	b30b      	cbz	r3, 800c6ec <_dtoa_r+0x794>
 800c6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f000 80c6 	beq.w	800c83c <_dtoa_r+0x8e4>
 800c6b0:	2c00      	cmp	r4, #0
 800c6b2:	f000 80c0 	beq.w	800c836 <_dtoa_r+0x8de>
 800c6b6:	4629      	mov	r1, r5
 800c6b8:	4622      	mov	r2, r4
 800c6ba:	4648      	mov	r0, r9
 800c6bc:	f000 fc12 	bl	800cee4 <__pow5mult>
 800c6c0:	9a02      	ldr	r2, [sp, #8]
 800c6c2:	4601      	mov	r1, r0
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	4648      	mov	r0, r9
 800c6c8:	f000 fb6a 	bl	800cda0 <__multiply>
 800c6cc:	9902      	ldr	r1, [sp, #8]
 800c6ce:	4680      	mov	r8, r0
 800c6d0:	4648      	mov	r0, r9
 800c6d2:	f000 fa9b 	bl	800cc0c <_Bfree>
 800c6d6:	9b08      	ldr	r3, [sp, #32]
 800c6d8:	1b1b      	subs	r3, r3, r4
 800c6da:	9308      	str	r3, [sp, #32]
 800c6dc:	f000 80b1 	beq.w	800c842 <_dtoa_r+0x8ea>
 800c6e0:	9a08      	ldr	r2, [sp, #32]
 800c6e2:	4641      	mov	r1, r8
 800c6e4:	4648      	mov	r0, r9
 800c6e6:	f000 fbfd 	bl	800cee4 <__pow5mult>
 800c6ea:	9002      	str	r0, [sp, #8]
 800c6ec:	2101      	movs	r1, #1
 800c6ee:	4648      	mov	r0, r9
 800c6f0:	f000 fb40 	bl	800cd74 <__i2b>
 800c6f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f000 81d8 	beq.w	800caae <_dtoa_r+0xb56>
 800c6fe:	461a      	mov	r2, r3
 800c700:	4601      	mov	r1, r0
 800c702:	4648      	mov	r0, r9
 800c704:	f000 fbee 	bl	800cee4 <__pow5mult>
 800c708:	9b07      	ldr	r3, [sp, #28]
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	4604      	mov	r4, r0
 800c70e:	f300 809f 	bgt.w	800c850 <_dtoa_r+0x8f8>
 800c712:	9b04      	ldr	r3, [sp, #16]
 800c714:	2b00      	cmp	r3, #0
 800c716:	f040 8097 	bne.w	800c848 <_dtoa_r+0x8f0>
 800c71a:	9b05      	ldr	r3, [sp, #20]
 800c71c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c720:	2b00      	cmp	r3, #0
 800c722:	f040 8093 	bne.w	800c84c <_dtoa_r+0x8f4>
 800c726:	9b05      	ldr	r3, [sp, #20]
 800c728:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c72c:	0d1b      	lsrs	r3, r3, #20
 800c72e:	051b      	lsls	r3, r3, #20
 800c730:	b133      	cbz	r3, 800c740 <_dtoa_r+0x7e8>
 800c732:	9b00      	ldr	r3, [sp, #0]
 800c734:	3301      	adds	r3, #1
 800c736:	9300      	str	r3, [sp, #0]
 800c738:	9b06      	ldr	r3, [sp, #24]
 800c73a:	3301      	adds	r3, #1
 800c73c:	9306      	str	r3, [sp, #24]
 800c73e:	2301      	movs	r3, #1
 800c740:	9308      	str	r3, [sp, #32]
 800c742:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c744:	2b00      	cmp	r3, #0
 800c746:	f000 81b8 	beq.w	800caba <_dtoa_r+0xb62>
 800c74a:	6923      	ldr	r3, [r4, #16]
 800c74c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c750:	6918      	ldr	r0, [r3, #16]
 800c752:	f000 fac3 	bl	800ccdc <__hi0bits>
 800c756:	f1c0 0020 	rsb	r0, r0, #32
 800c75a:	9b06      	ldr	r3, [sp, #24]
 800c75c:	4418      	add	r0, r3
 800c75e:	f010 001f 	ands.w	r0, r0, #31
 800c762:	f000 8082 	beq.w	800c86a <_dtoa_r+0x912>
 800c766:	f1c0 0320 	rsb	r3, r0, #32
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	dd73      	ble.n	800c856 <_dtoa_r+0x8fe>
 800c76e:	9b00      	ldr	r3, [sp, #0]
 800c770:	f1c0 001c 	rsb	r0, r0, #28
 800c774:	4403      	add	r3, r0
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	9b06      	ldr	r3, [sp, #24]
 800c77a:	4403      	add	r3, r0
 800c77c:	4406      	add	r6, r0
 800c77e:	9306      	str	r3, [sp, #24]
 800c780:	9b00      	ldr	r3, [sp, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	dd05      	ble.n	800c792 <_dtoa_r+0x83a>
 800c786:	9902      	ldr	r1, [sp, #8]
 800c788:	461a      	mov	r2, r3
 800c78a:	4648      	mov	r0, r9
 800c78c:	f000 fc04 	bl	800cf98 <__lshift>
 800c790:	9002      	str	r0, [sp, #8]
 800c792:	9b06      	ldr	r3, [sp, #24]
 800c794:	2b00      	cmp	r3, #0
 800c796:	dd05      	ble.n	800c7a4 <_dtoa_r+0x84c>
 800c798:	4621      	mov	r1, r4
 800c79a:	461a      	mov	r2, r3
 800c79c:	4648      	mov	r0, r9
 800c79e:	f000 fbfb 	bl	800cf98 <__lshift>
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d061      	beq.n	800c86e <_dtoa_r+0x916>
 800c7aa:	9802      	ldr	r0, [sp, #8]
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	f000 fc5f 	bl	800d070 <__mcmp>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	da5b      	bge.n	800c86e <_dtoa_r+0x916>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	9902      	ldr	r1, [sp, #8]
 800c7ba:	220a      	movs	r2, #10
 800c7bc:	4648      	mov	r0, r9
 800c7be:	f000 fa47 	bl	800cc50 <__multadd>
 800c7c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7c4:	9002      	str	r0, [sp, #8]
 800c7c6:	f107 38ff 	add.w	r8, r7, #4294967295
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f000 8177 	beq.w	800cabe <_dtoa_r+0xb66>
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	220a      	movs	r2, #10
 800c7d6:	4648      	mov	r0, r9
 800c7d8:	f000 fa3a 	bl	800cc50 <__multadd>
 800c7dc:	f1bb 0f00 	cmp.w	fp, #0
 800c7e0:	4605      	mov	r5, r0
 800c7e2:	dc6f      	bgt.n	800c8c4 <_dtoa_r+0x96c>
 800c7e4:	9b07      	ldr	r3, [sp, #28]
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	dc49      	bgt.n	800c87e <_dtoa_r+0x926>
 800c7ea:	e06b      	b.n	800c8c4 <_dtoa_r+0x96c>
 800c7ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c7ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c7f2:	e73c      	b.n	800c66e <_dtoa_r+0x716>
 800c7f4:	3fe00000 	.word	0x3fe00000
 800c7f8:	40240000 	.word	0x40240000
 800c7fc:	9b03      	ldr	r3, [sp, #12]
 800c7fe:	1e5c      	subs	r4, r3, #1
 800c800:	9b08      	ldr	r3, [sp, #32]
 800c802:	42a3      	cmp	r3, r4
 800c804:	db09      	blt.n	800c81a <_dtoa_r+0x8c2>
 800c806:	1b1c      	subs	r4, r3, r4
 800c808:	9b03      	ldr	r3, [sp, #12]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f6bf af30 	bge.w	800c670 <_dtoa_r+0x718>
 800c810:	9b00      	ldr	r3, [sp, #0]
 800c812:	9a03      	ldr	r2, [sp, #12]
 800c814:	1a9e      	subs	r6, r3, r2
 800c816:	2300      	movs	r3, #0
 800c818:	e72b      	b.n	800c672 <_dtoa_r+0x71a>
 800c81a:	9b08      	ldr	r3, [sp, #32]
 800c81c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c81e:	9408      	str	r4, [sp, #32]
 800c820:	1ae3      	subs	r3, r4, r3
 800c822:	441a      	add	r2, r3
 800c824:	9e00      	ldr	r6, [sp, #0]
 800c826:	9b03      	ldr	r3, [sp, #12]
 800c828:	920d      	str	r2, [sp, #52]	@ 0x34
 800c82a:	2400      	movs	r4, #0
 800c82c:	e721      	b.n	800c672 <_dtoa_r+0x71a>
 800c82e:	9c08      	ldr	r4, [sp, #32]
 800c830:	9e00      	ldr	r6, [sp, #0]
 800c832:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c834:	e728      	b.n	800c688 <_dtoa_r+0x730>
 800c836:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c83a:	e751      	b.n	800c6e0 <_dtoa_r+0x788>
 800c83c:	9a08      	ldr	r2, [sp, #32]
 800c83e:	9902      	ldr	r1, [sp, #8]
 800c840:	e750      	b.n	800c6e4 <_dtoa_r+0x78c>
 800c842:	f8cd 8008 	str.w	r8, [sp, #8]
 800c846:	e751      	b.n	800c6ec <_dtoa_r+0x794>
 800c848:	2300      	movs	r3, #0
 800c84a:	e779      	b.n	800c740 <_dtoa_r+0x7e8>
 800c84c:	9b04      	ldr	r3, [sp, #16]
 800c84e:	e777      	b.n	800c740 <_dtoa_r+0x7e8>
 800c850:	2300      	movs	r3, #0
 800c852:	9308      	str	r3, [sp, #32]
 800c854:	e779      	b.n	800c74a <_dtoa_r+0x7f2>
 800c856:	d093      	beq.n	800c780 <_dtoa_r+0x828>
 800c858:	9a00      	ldr	r2, [sp, #0]
 800c85a:	331c      	adds	r3, #28
 800c85c:	441a      	add	r2, r3
 800c85e:	9200      	str	r2, [sp, #0]
 800c860:	9a06      	ldr	r2, [sp, #24]
 800c862:	441a      	add	r2, r3
 800c864:	441e      	add	r6, r3
 800c866:	9206      	str	r2, [sp, #24]
 800c868:	e78a      	b.n	800c780 <_dtoa_r+0x828>
 800c86a:	4603      	mov	r3, r0
 800c86c:	e7f4      	b.n	800c858 <_dtoa_r+0x900>
 800c86e:	9b03      	ldr	r3, [sp, #12]
 800c870:	2b00      	cmp	r3, #0
 800c872:	46b8      	mov	r8, r7
 800c874:	dc20      	bgt.n	800c8b8 <_dtoa_r+0x960>
 800c876:	469b      	mov	fp, r3
 800c878:	9b07      	ldr	r3, [sp, #28]
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	dd1e      	ble.n	800c8bc <_dtoa_r+0x964>
 800c87e:	f1bb 0f00 	cmp.w	fp, #0
 800c882:	f47f adb1 	bne.w	800c3e8 <_dtoa_r+0x490>
 800c886:	4621      	mov	r1, r4
 800c888:	465b      	mov	r3, fp
 800c88a:	2205      	movs	r2, #5
 800c88c:	4648      	mov	r0, r9
 800c88e:	f000 f9df 	bl	800cc50 <__multadd>
 800c892:	4601      	mov	r1, r0
 800c894:	4604      	mov	r4, r0
 800c896:	9802      	ldr	r0, [sp, #8]
 800c898:	f000 fbea 	bl	800d070 <__mcmp>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	f77f ada3 	ble.w	800c3e8 <_dtoa_r+0x490>
 800c8a2:	4656      	mov	r6, sl
 800c8a4:	2331      	movs	r3, #49	@ 0x31
 800c8a6:	f806 3b01 	strb.w	r3, [r6], #1
 800c8aa:	f108 0801 	add.w	r8, r8, #1
 800c8ae:	e59f      	b.n	800c3f0 <_dtoa_r+0x498>
 800c8b0:	9c03      	ldr	r4, [sp, #12]
 800c8b2:	46b8      	mov	r8, r7
 800c8b4:	4625      	mov	r5, r4
 800c8b6:	e7f4      	b.n	800c8a2 <_dtoa_r+0x94a>
 800c8b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f000 8101 	beq.w	800cac6 <_dtoa_r+0xb6e>
 800c8c4:	2e00      	cmp	r6, #0
 800c8c6:	dd05      	ble.n	800c8d4 <_dtoa_r+0x97c>
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	4632      	mov	r2, r6
 800c8cc:	4648      	mov	r0, r9
 800c8ce:	f000 fb63 	bl	800cf98 <__lshift>
 800c8d2:	4605      	mov	r5, r0
 800c8d4:	9b08      	ldr	r3, [sp, #32]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d05c      	beq.n	800c994 <_dtoa_r+0xa3c>
 800c8da:	6869      	ldr	r1, [r5, #4]
 800c8dc:	4648      	mov	r0, r9
 800c8de:	f000 f955 	bl	800cb8c <_Balloc>
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	b928      	cbnz	r0, 800c8f2 <_dtoa_r+0x99a>
 800c8e6:	4b82      	ldr	r3, [pc, #520]	@ (800caf0 <_dtoa_r+0xb98>)
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c8ee:	f7ff bb4a 	b.w	800bf86 <_dtoa_r+0x2e>
 800c8f2:	692a      	ldr	r2, [r5, #16]
 800c8f4:	3202      	adds	r2, #2
 800c8f6:	0092      	lsls	r2, r2, #2
 800c8f8:	f105 010c 	add.w	r1, r5, #12
 800c8fc:	300c      	adds	r0, #12
 800c8fe:	f000 ff41 	bl	800d784 <memcpy>
 800c902:	2201      	movs	r2, #1
 800c904:	4631      	mov	r1, r6
 800c906:	4648      	mov	r0, r9
 800c908:	f000 fb46 	bl	800cf98 <__lshift>
 800c90c:	f10a 0301 	add.w	r3, sl, #1
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	eb0a 030b 	add.w	r3, sl, fp
 800c916:	9308      	str	r3, [sp, #32]
 800c918:	9b04      	ldr	r3, [sp, #16]
 800c91a:	f003 0301 	and.w	r3, r3, #1
 800c91e:	462f      	mov	r7, r5
 800c920:	9306      	str	r3, [sp, #24]
 800c922:	4605      	mov	r5, r0
 800c924:	9b00      	ldr	r3, [sp, #0]
 800c926:	9802      	ldr	r0, [sp, #8]
 800c928:	4621      	mov	r1, r4
 800c92a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c92e:	f7ff fa8a 	bl	800be46 <quorem>
 800c932:	4603      	mov	r3, r0
 800c934:	3330      	adds	r3, #48	@ 0x30
 800c936:	9003      	str	r0, [sp, #12]
 800c938:	4639      	mov	r1, r7
 800c93a:	9802      	ldr	r0, [sp, #8]
 800c93c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c93e:	f000 fb97 	bl	800d070 <__mcmp>
 800c942:	462a      	mov	r2, r5
 800c944:	9004      	str	r0, [sp, #16]
 800c946:	4621      	mov	r1, r4
 800c948:	4648      	mov	r0, r9
 800c94a:	f000 fbad 	bl	800d0a8 <__mdiff>
 800c94e:	68c2      	ldr	r2, [r0, #12]
 800c950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c952:	4606      	mov	r6, r0
 800c954:	bb02      	cbnz	r2, 800c998 <_dtoa_r+0xa40>
 800c956:	4601      	mov	r1, r0
 800c958:	9802      	ldr	r0, [sp, #8]
 800c95a:	f000 fb89 	bl	800d070 <__mcmp>
 800c95e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c960:	4602      	mov	r2, r0
 800c962:	4631      	mov	r1, r6
 800c964:	4648      	mov	r0, r9
 800c966:	920c      	str	r2, [sp, #48]	@ 0x30
 800c968:	9309      	str	r3, [sp, #36]	@ 0x24
 800c96a:	f000 f94f 	bl	800cc0c <_Bfree>
 800c96e:	9b07      	ldr	r3, [sp, #28]
 800c970:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c972:	9e00      	ldr	r6, [sp, #0]
 800c974:	ea42 0103 	orr.w	r1, r2, r3
 800c978:	9b06      	ldr	r3, [sp, #24]
 800c97a:	4319      	orrs	r1, r3
 800c97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c97e:	d10d      	bne.n	800c99c <_dtoa_r+0xa44>
 800c980:	2b39      	cmp	r3, #57	@ 0x39
 800c982:	d027      	beq.n	800c9d4 <_dtoa_r+0xa7c>
 800c984:	9a04      	ldr	r2, [sp, #16]
 800c986:	2a00      	cmp	r2, #0
 800c988:	dd01      	ble.n	800c98e <_dtoa_r+0xa36>
 800c98a:	9b03      	ldr	r3, [sp, #12]
 800c98c:	3331      	adds	r3, #49	@ 0x31
 800c98e:	f88b 3000 	strb.w	r3, [fp]
 800c992:	e52e      	b.n	800c3f2 <_dtoa_r+0x49a>
 800c994:	4628      	mov	r0, r5
 800c996:	e7b9      	b.n	800c90c <_dtoa_r+0x9b4>
 800c998:	2201      	movs	r2, #1
 800c99a:	e7e2      	b.n	800c962 <_dtoa_r+0xa0a>
 800c99c:	9904      	ldr	r1, [sp, #16]
 800c99e:	2900      	cmp	r1, #0
 800c9a0:	db04      	blt.n	800c9ac <_dtoa_r+0xa54>
 800c9a2:	9807      	ldr	r0, [sp, #28]
 800c9a4:	4301      	orrs	r1, r0
 800c9a6:	9806      	ldr	r0, [sp, #24]
 800c9a8:	4301      	orrs	r1, r0
 800c9aa:	d120      	bne.n	800c9ee <_dtoa_r+0xa96>
 800c9ac:	2a00      	cmp	r2, #0
 800c9ae:	ddee      	ble.n	800c98e <_dtoa_r+0xa36>
 800c9b0:	9902      	ldr	r1, [sp, #8]
 800c9b2:	9300      	str	r3, [sp, #0]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	4648      	mov	r0, r9
 800c9b8:	f000 faee 	bl	800cf98 <__lshift>
 800c9bc:	4621      	mov	r1, r4
 800c9be:	9002      	str	r0, [sp, #8]
 800c9c0:	f000 fb56 	bl	800d070 <__mcmp>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	9b00      	ldr	r3, [sp, #0]
 800c9c8:	dc02      	bgt.n	800c9d0 <_dtoa_r+0xa78>
 800c9ca:	d1e0      	bne.n	800c98e <_dtoa_r+0xa36>
 800c9cc:	07da      	lsls	r2, r3, #31
 800c9ce:	d5de      	bpl.n	800c98e <_dtoa_r+0xa36>
 800c9d0:	2b39      	cmp	r3, #57	@ 0x39
 800c9d2:	d1da      	bne.n	800c98a <_dtoa_r+0xa32>
 800c9d4:	2339      	movs	r3, #57	@ 0x39
 800c9d6:	f88b 3000 	strb.w	r3, [fp]
 800c9da:	4633      	mov	r3, r6
 800c9dc:	461e      	mov	r6, r3
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c9e4:	2a39      	cmp	r2, #57	@ 0x39
 800c9e6:	d04e      	beq.n	800ca86 <_dtoa_r+0xb2e>
 800c9e8:	3201      	adds	r2, #1
 800c9ea:	701a      	strb	r2, [r3, #0]
 800c9ec:	e501      	b.n	800c3f2 <_dtoa_r+0x49a>
 800c9ee:	2a00      	cmp	r2, #0
 800c9f0:	dd03      	ble.n	800c9fa <_dtoa_r+0xaa2>
 800c9f2:	2b39      	cmp	r3, #57	@ 0x39
 800c9f4:	d0ee      	beq.n	800c9d4 <_dtoa_r+0xa7c>
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	e7c9      	b.n	800c98e <_dtoa_r+0xa36>
 800c9fa:	9a00      	ldr	r2, [sp, #0]
 800c9fc:	9908      	ldr	r1, [sp, #32]
 800c9fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ca02:	428a      	cmp	r2, r1
 800ca04:	d028      	beq.n	800ca58 <_dtoa_r+0xb00>
 800ca06:	9902      	ldr	r1, [sp, #8]
 800ca08:	2300      	movs	r3, #0
 800ca0a:	220a      	movs	r2, #10
 800ca0c:	4648      	mov	r0, r9
 800ca0e:	f000 f91f 	bl	800cc50 <__multadd>
 800ca12:	42af      	cmp	r7, r5
 800ca14:	9002      	str	r0, [sp, #8]
 800ca16:	f04f 0300 	mov.w	r3, #0
 800ca1a:	f04f 020a 	mov.w	r2, #10
 800ca1e:	4639      	mov	r1, r7
 800ca20:	4648      	mov	r0, r9
 800ca22:	d107      	bne.n	800ca34 <_dtoa_r+0xadc>
 800ca24:	f000 f914 	bl	800cc50 <__multadd>
 800ca28:	4607      	mov	r7, r0
 800ca2a:	4605      	mov	r5, r0
 800ca2c:	9b00      	ldr	r3, [sp, #0]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	e777      	b.n	800c924 <_dtoa_r+0x9cc>
 800ca34:	f000 f90c 	bl	800cc50 <__multadd>
 800ca38:	4629      	mov	r1, r5
 800ca3a:	4607      	mov	r7, r0
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	220a      	movs	r2, #10
 800ca40:	4648      	mov	r0, r9
 800ca42:	f000 f905 	bl	800cc50 <__multadd>
 800ca46:	4605      	mov	r5, r0
 800ca48:	e7f0      	b.n	800ca2c <_dtoa_r+0xad4>
 800ca4a:	f1bb 0f00 	cmp.w	fp, #0
 800ca4e:	bfcc      	ite	gt
 800ca50:	465e      	movgt	r6, fp
 800ca52:	2601      	movle	r6, #1
 800ca54:	4456      	add	r6, sl
 800ca56:	2700      	movs	r7, #0
 800ca58:	9902      	ldr	r1, [sp, #8]
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	4648      	mov	r0, r9
 800ca60:	f000 fa9a 	bl	800cf98 <__lshift>
 800ca64:	4621      	mov	r1, r4
 800ca66:	9002      	str	r0, [sp, #8]
 800ca68:	f000 fb02 	bl	800d070 <__mcmp>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	dcb4      	bgt.n	800c9da <_dtoa_r+0xa82>
 800ca70:	d102      	bne.n	800ca78 <_dtoa_r+0xb20>
 800ca72:	9b00      	ldr	r3, [sp, #0]
 800ca74:	07db      	lsls	r3, r3, #31
 800ca76:	d4b0      	bmi.n	800c9da <_dtoa_r+0xa82>
 800ca78:	4633      	mov	r3, r6
 800ca7a:	461e      	mov	r6, r3
 800ca7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca80:	2a30      	cmp	r2, #48	@ 0x30
 800ca82:	d0fa      	beq.n	800ca7a <_dtoa_r+0xb22>
 800ca84:	e4b5      	b.n	800c3f2 <_dtoa_r+0x49a>
 800ca86:	459a      	cmp	sl, r3
 800ca88:	d1a8      	bne.n	800c9dc <_dtoa_r+0xa84>
 800ca8a:	2331      	movs	r3, #49	@ 0x31
 800ca8c:	f108 0801 	add.w	r8, r8, #1
 800ca90:	f88a 3000 	strb.w	r3, [sl]
 800ca94:	e4ad      	b.n	800c3f2 <_dtoa_r+0x49a>
 800ca96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca98:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800caf4 <_dtoa_r+0xb9c>
 800ca9c:	b11b      	cbz	r3, 800caa6 <_dtoa_r+0xb4e>
 800ca9e:	f10a 0308 	add.w	r3, sl, #8
 800caa2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800caa4:	6013      	str	r3, [r2, #0]
 800caa6:	4650      	mov	r0, sl
 800caa8:	b017      	add	sp, #92	@ 0x5c
 800caaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caae:	9b07      	ldr	r3, [sp, #28]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	f77f ae2e 	ble.w	800c712 <_dtoa_r+0x7ba>
 800cab6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cab8:	9308      	str	r3, [sp, #32]
 800caba:	2001      	movs	r0, #1
 800cabc:	e64d      	b.n	800c75a <_dtoa_r+0x802>
 800cabe:	f1bb 0f00 	cmp.w	fp, #0
 800cac2:	f77f aed9 	ble.w	800c878 <_dtoa_r+0x920>
 800cac6:	4656      	mov	r6, sl
 800cac8:	9802      	ldr	r0, [sp, #8]
 800caca:	4621      	mov	r1, r4
 800cacc:	f7ff f9bb 	bl	800be46 <quorem>
 800cad0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cad4:	f806 3b01 	strb.w	r3, [r6], #1
 800cad8:	eba6 020a 	sub.w	r2, r6, sl
 800cadc:	4593      	cmp	fp, r2
 800cade:	ddb4      	ble.n	800ca4a <_dtoa_r+0xaf2>
 800cae0:	9902      	ldr	r1, [sp, #8]
 800cae2:	2300      	movs	r3, #0
 800cae4:	220a      	movs	r2, #10
 800cae6:	4648      	mov	r0, r9
 800cae8:	f000 f8b2 	bl	800cc50 <__multadd>
 800caec:	9002      	str	r0, [sp, #8]
 800caee:	e7eb      	b.n	800cac8 <_dtoa_r+0xb70>
 800caf0:	0800db24 	.word	0x0800db24
 800caf4:	0800daa8 	.word	0x0800daa8

0800caf8 <_free_r>:
 800caf8:	b538      	push	{r3, r4, r5, lr}
 800cafa:	4605      	mov	r5, r0
 800cafc:	2900      	cmp	r1, #0
 800cafe:	d041      	beq.n	800cb84 <_free_r+0x8c>
 800cb00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb04:	1f0c      	subs	r4, r1, #4
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	bfb8      	it	lt
 800cb0a:	18e4      	addlt	r4, r4, r3
 800cb0c:	f7fe fb92 	bl	800b234 <__malloc_lock>
 800cb10:	4a1d      	ldr	r2, [pc, #116]	@ (800cb88 <_free_r+0x90>)
 800cb12:	6813      	ldr	r3, [r2, #0]
 800cb14:	b933      	cbnz	r3, 800cb24 <_free_r+0x2c>
 800cb16:	6063      	str	r3, [r4, #4]
 800cb18:	6014      	str	r4, [r2, #0]
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb20:	f7fe bb8e 	b.w	800b240 <__malloc_unlock>
 800cb24:	42a3      	cmp	r3, r4
 800cb26:	d908      	bls.n	800cb3a <_free_r+0x42>
 800cb28:	6820      	ldr	r0, [r4, #0]
 800cb2a:	1821      	adds	r1, r4, r0
 800cb2c:	428b      	cmp	r3, r1
 800cb2e:	bf01      	itttt	eq
 800cb30:	6819      	ldreq	r1, [r3, #0]
 800cb32:	685b      	ldreq	r3, [r3, #4]
 800cb34:	1809      	addeq	r1, r1, r0
 800cb36:	6021      	streq	r1, [r4, #0]
 800cb38:	e7ed      	b.n	800cb16 <_free_r+0x1e>
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	b10b      	cbz	r3, 800cb44 <_free_r+0x4c>
 800cb40:	42a3      	cmp	r3, r4
 800cb42:	d9fa      	bls.n	800cb3a <_free_r+0x42>
 800cb44:	6811      	ldr	r1, [r2, #0]
 800cb46:	1850      	adds	r0, r2, r1
 800cb48:	42a0      	cmp	r0, r4
 800cb4a:	d10b      	bne.n	800cb64 <_free_r+0x6c>
 800cb4c:	6820      	ldr	r0, [r4, #0]
 800cb4e:	4401      	add	r1, r0
 800cb50:	1850      	adds	r0, r2, r1
 800cb52:	4283      	cmp	r3, r0
 800cb54:	6011      	str	r1, [r2, #0]
 800cb56:	d1e0      	bne.n	800cb1a <_free_r+0x22>
 800cb58:	6818      	ldr	r0, [r3, #0]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	6053      	str	r3, [r2, #4]
 800cb5e:	4408      	add	r0, r1
 800cb60:	6010      	str	r0, [r2, #0]
 800cb62:	e7da      	b.n	800cb1a <_free_r+0x22>
 800cb64:	d902      	bls.n	800cb6c <_free_r+0x74>
 800cb66:	230c      	movs	r3, #12
 800cb68:	602b      	str	r3, [r5, #0]
 800cb6a:	e7d6      	b.n	800cb1a <_free_r+0x22>
 800cb6c:	6820      	ldr	r0, [r4, #0]
 800cb6e:	1821      	adds	r1, r4, r0
 800cb70:	428b      	cmp	r3, r1
 800cb72:	bf04      	itt	eq
 800cb74:	6819      	ldreq	r1, [r3, #0]
 800cb76:	685b      	ldreq	r3, [r3, #4]
 800cb78:	6063      	str	r3, [r4, #4]
 800cb7a:	bf04      	itt	eq
 800cb7c:	1809      	addeq	r1, r1, r0
 800cb7e:	6021      	streq	r1, [r4, #0]
 800cb80:	6054      	str	r4, [r2, #4]
 800cb82:	e7ca      	b.n	800cb1a <_free_r+0x22>
 800cb84:	bd38      	pop	{r3, r4, r5, pc}
 800cb86:	bf00      	nop
 800cb88:	20000bec 	.word	0x20000bec

0800cb8c <_Balloc>:
 800cb8c:	b570      	push	{r4, r5, r6, lr}
 800cb8e:	69c6      	ldr	r6, [r0, #28]
 800cb90:	4604      	mov	r4, r0
 800cb92:	460d      	mov	r5, r1
 800cb94:	b976      	cbnz	r6, 800cbb4 <_Balloc+0x28>
 800cb96:	2010      	movs	r0, #16
 800cb98:	f7fe fa9a 	bl	800b0d0 <malloc>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	61e0      	str	r0, [r4, #28]
 800cba0:	b920      	cbnz	r0, 800cbac <_Balloc+0x20>
 800cba2:	4b18      	ldr	r3, [pc, #96]	@ (800cc04 <_Balloc+0x78>)
 800cba4:	4818      	ldr	r0, [pc, #96]	@ (800cc08 <_Balloc+0x7c>)
 800cba6:	216b      	movs	r1, #107	@ 0x6b
 800cba8:	f000 fdfa 	bl	800d7a0 <__assert_func>
 800cbac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbb0:	6006      	str	r6, [r0, #0]
 800cbb2:	60c6      	str	r6, [r0, #12]
 800cbb4:	69e6      	ldr	r6, [r4, #28]
 800cbb6:	68f3      	ldr	r3, [r6, #12]
 800cbb8:	b183      	cbz	r3, 800cbdc <_Balloc+0x50>
 800cbba:	69e3      	ldr	r3, [r4, #28]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cbc2:	b9b8      	cbnz	r0, 800cbf4 <_Balloc+0x68>
 800cbc4:	2101      	movs	r1, #1
 800cbc6:	fa01 f605 	lsl.w	r6, r1, r5
 800cbca:	1d72      	adds	r2, r6, #5
 800cbcc:	0092      	lsls	r2, r2, #2
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f000 fe04 	bl	800d7dc <_calloc_r>
 800cbd4:	b160      	cbz	r0, 800cbf0 <_Balloc+0x64>
 800cbd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbda:	e00e      	b.n	800cbfa <_Balloc+0x6e>
 800cbdc:	2221      	movs	r2, #33	@ 0x21
 800cbde:	2104      	movs	r1, #4
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	f000 fdfb 	bl	800d7dc <_calloc_r>
 800cbe6:	69e3      	ldr	r3, [r4, #28]
 800cbe8:	60f0      	str	r0, [r6, #12]
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1e4      	bne.n	800cbba <_Balloc+0x2e>
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	bd70      	pop	{r4, r5, r6, pc}
 800cbf4:	6802      	ldr	r2, [r0, #0]
 800cbf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc00:	e7f7      	b.n	800cbf2 <_Balloc+0x66>
 800cc02:	bf00      	nop
 800cc04:	0800dab5 	.word	0x0800dab5
 800cc08:	0800db35 	.word	0x0800db35

0800cc0c <_Bfree>:
 800cc0c:	b570      	push	{r4, r5, r6, lr}
 800cc0e:	69c6      	ldr	r6, [r0, #28]
 800cc10:	4605      	mov	r5, r0
 800cc12:	460c      	mov	r4, r1
 800cc14:	b976      	cbnz	r6, 800cc34 <_Bfree+0x28>
 800cc16:	2010      	movs	r0, #16
 800cc18:	f7fe fa5a 	bl	800b0d0 <malloc>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	61e8      	str	r0, [r5, #28]
 800cc20:	b920      	cbnz	r0, 800cc2c <_Bfree+0x20>
 800cc22:	4b09      	ldr	r3, [pc, #36]	@ (800cc48 <_Bfree+0x3c>)
 800cc24:	4809      	ldr	r0, [pc, #36]	@ (800cc4c <_Bfree+0x40>)
 800cc26:	218f      	movs	r1, #143	@ 0x8f
 800cc28:	f000 fdba 	bl	800d7a0 <__assert_func>
 800cc2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc30:	6006      	str	r6, [r0, #0]
 800cc32:	60c6      	str	r6, [r0, #12]
 800cc34:	b13c      	cbz	r4, 800cc46 <_Bfree+0x3a>
 800cc36:	69eb      	ldr	r3, [r5, #28]
 800cc38:	6862      	ldr	r2, [r4, #4]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc40:	6021      	str	r1, [r4, #0]
 800cc42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc46:	bd70      	pop	{r4, r5, r6, pc}
 800cc48:	0800dab5 	.word	0x0800dab5
 800cc4c:	0800db35 	.word	0x0800db35

0800cc50 <__multadd>:
 800cc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc54:	690d      	ldr	r5, [r1, #16]
 800cc56:	4607      	mov	r7, r0
 800cc58:	460c      	mov	r4, r1
 800cc5a:	461e      	mov	r6, r3
 800cc5c:	f101 0c14 	add.w	ip, r1, #20
 800cc60:	2000      	movs	r0, #0
 800cc62:	f8dc 3000 	ldr.w	r3, [ip]
 800cc66:	b299      	uxth	r1, r3
 800cc68:	fb02 6101 	mla	r1, r2, r1, r6
 800cc6c:	0c1e      	lsrs	r6, r3, #16
 800cc6e:	0c0b      	lsrs	r3, r1, #16
 800cc70:	fb02 3306 	mla	r3, r2, r6, r3
 800cc74:	b289      	uxth	r1, r1
 800cc76:	3001      	adds	r0, #1
 800cc78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc7c:	4285      	cmp	r5, r0
 800cc7e:	f84c 1b04 	str.w	r1, [ip], #4
 800cc82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc86:	dcec      	bgt.n	800cc62 <__multadd+0x12>
 800cc88:	b30e      	cbz	r6, 800ccce <__multadd+0x7e>
 800cc8a:	68a3      	ldr	r3, [r4, #8]
 800cc8c:	42ab      	cmp	r3, r5
 800cc8e:	dc19      	bgt.n	800ccc4 <__multadd+0x74>
 800cc90:	6861      	ldr	r1, [r4, #4]
 800cc92:	4638      	mov	r0, r7
 800cc94:	3101      	adds	r1, #1
 800cc96:	f7ff ff79 	bl	800cb8c <_Balloc>
 800cc9a:	4680      	mov	r8, r0
 800cc9c:	b928      	cbnz	r0, 800ccaa <__multadd+0x5a>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	4b0c      	ldr	r3, [pc, #48]	@ (800ccd4 <__multadd+0x84>)
 800cca2:	480d      	ldr	r0, [pc, #52]	@ (800ccd8 <__multadd+0x88>)
 800cca4:	21ba      	movs	r1, #186	@ 0xba
 800cca6:	f000 fd7b 	bl	800d7a0 <__assert_func>
 800ccaa:	6922      	ldr	r2, [r4, #16]
 800ccac:	3202      	adds	r2, #2
 800ccae:	f104 010c 	add.w	r1, r4, #12
 800ccb2:	0092      	lsls	r2, r2, #2
 800ccb4:	300c      	adds	r0, #12
 800ccb6:	f000 fd65 	bl	800d784 <memcpy>
 800ccba:	4621      	mov	r1, r4
 800ccbc:	4638      	mov	r0, r7
 800ccbe:	f7ff ffa5 	bl	800cc0c <_Bfree>
 800ccc2:	4644      	mov	r4, r8
 800ccc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ccc8:	3501      	adds	r5, #1
 800ccca:	615e      	str	r6, [r3, #20]
 800cccc:	6125      	str	r5, [r4, #16]
 800ccce:	4620      	mov	r0, r4
 800ccd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd4:	0800db24 	.word	0x0800db24
 800ccd8:	0800db35 	.word	0x0800db35

0800ccdc <__hi0bits>:
 800ccdc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cce0:	4603      	mov	r3, r0
 800cce2:	bf36      	itet	cc
 800cce4:	0403      	lslcc	r3, r0, #16
 800cce6:	2000      	movcs	r0, #0
 800cce8:	2010      	movcc	r0, #16
 800ccea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ccee:	bf3c      	itt	cc
 800ccf0:	021b      	lslcc	r3, r3, #8
 800ccf2:	3008      	addcc	r0, #8
 800ccf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccf8:	bf3c      	itt	cc
 800ccfa:	011b      	lslcc	r3, r3, #4
 800ccfc:	3004      	addcc	r0, #4
 800ccfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd02:	bf3c      	itt	cc
 800cd04:	009b      	lslcc	r3, r3, #2
 800cd06:	3002      	addcc	r0, #2
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	db05      	blt.n	800cd18 <__hi0bits+0x3c>
 800cd0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd10:	f100 0001 	add.w	r0, r0, #1
 800cd14:	bf08      	it	eq
 800cd16:	2020      	moveq	r0, #32
 800cd18:	4770      	bx	lr

0800cd1a <__lo0bits>:
 800cd1a:	6803      	ldr	r3, [r0, #0]
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	f013 0007 	ands.w	r0, r3, #7
 800cd22:	d00b      	beq.n	800cd3c <__lo0bits+0x22>
 800cd24:	07d9      	lsls	r1, r3, #31
 800cd26:	d421      	bmi.n	800cd6c <__lo0bits+0x52>
 800cd28:	0798      	lsls	r0, r3, #30
 800cd2a:	bf49      	itett	mi
 800cd2c:	085b      	lsrmi	r3, r3, #1
 800cd2e:	089b      	lsrpl	r3, r3, #2
 800cd30:	2001      	movmi	r0, #1
 800cd32:	6013      	strmi	r3, [r2, #0]
 800cd34:	bf5c      	itt	pl
 800cd36:	6013      	strpl	r3, [r2, #0]
 800cd38:	2002      	movpl	r0, #2
 800cd3a:	4770      	bx	lr
 800cd3c:	b299      	uxth	r1, r3
 800cd3e:	b909      	cbnz	r1, 800cd44 <__lo0bits+0x2a>
 800cd40:	0c1b      	lsrs	r3, r3, #16
 800cd42:	2010      	movs	r0, #16
 800cd44:	b2d9      	uxtb	r1, r3
 800cd46:	b909      	cbnz	r1, 800cd4c <__lo0bits+0x32>
 800cd48:	3008      	adds	r0, #8
 800cd4a:	0a1b      	lsrs	r3, r3, #8
 800cd4c:	0719      	lsls	r1, r3, #28
 800cd4e:	bf04      	itt	eq
 800cd50:	091b      	lsreq	r3, r3, #4
 800cd52:	3004      	addeq	r0, #4
 800cd54:	0799      	lsls	r1, r3, #30
 800cd56:	bf04      	itt	eq
 800cd58:	089b      	lsreq	r3, r3, #2
 800cd5a:	3002      	addeq	r0, #2
 800cd5c:	07d9      	lsls	r1, r3, #31
 800cd5e:	d403      	bmi.n	800cd68 <__lo0bits+0x4e>
 800cd60:	085b      	lsrs	r3, r3, #1
 800cd62:	f100 0001 	add.w	r0, r0, #1
 800cd66:	d003      	beq.n	800cd70 <__lo0bits+0x56>
 800cd68:	6013      	str	r3, [r2, #0]
 800cd6a:	4770      	bx	lr
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	4770      	bx	lr
 800cd70:	2020      	movs	r0, #32
 800cd72:	4770      	bx	lr

0800cd74 <__i2b>:
 800cd74:	b510      	push	{r4, lr}
 800cd76:	460c      	mov	r4, r1
 800cd78:	2101      	movs	r1, #1
 800cd7a:	f7ff ff07 	bl	800cb8c <_Balloc>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	b928      	cbnz	r0, 800cd8e <__i2b+0x1a>
 800cd82:	4b05      	ldr	r3, [pc, #20]	@ (800cd98 <__i2b+0x24>)
 800cd84:	4805      	ldr	r0, [pc, #20]	@ (800cd9c <__i2b+0x28>)
 800cd86:	f240 1145 	movw	r1, #325	@ 0x145
 800cd8a:	f000 fd09 	bl	800d7a0 <__assert_func>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	6144      	str	r4, [r0, #20]
 800cd92:	6103      	str	r3, [r0, #16]
 800cd94:	bd10      	pop	{r4, pc}
 800cd96:	bf00      	nop
 800cd98:	0800db24 	.word	0x0800db24
 800cd9c:	0800db35 	.word	0x0800db35

0800cda0 <__multiply>:
 800cda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda4:	4617      	mov	r7, r2
 800cda6:	690a      	ldr	r2, [r1, #16]
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	bfa8      	it	ge
 800cdae:	463b      	movge	r3, r7
 800cdb0:	4689      	mov	r9, r1
 800cdb2:	bfa4      	itt	ge
 800cdb4:	460f      	movge	r7, r1
 800cdb6:	4699      	movge	r9, r3
 800cdb8:	693d      	ldr	r5, [r7, #16]
 800cdba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	eb05 060a 	add.w	r6, r5, sl
 800cdc6:	42b3      	cmp	r3, r6
 800cdc8:	b085      	sub	sp, #20
 800cdca:	bfb8      	it	lt
 800cdcc:	3101      	addlt	r1, #1
 800cdce:	f7ff fedd 	bl	800cb8c <_Balloc>
 800cdd2:	b930      	cbnz	r0, 800cde2 <__multiply+0x42>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	4b41      	ldr	r3, [pc, #260]	@ (800cedc <__multiply+0x13c>)
 800cdd8:	4841      	ldr	r0, [pc, #260]	@ (800cee0 <__multiply+0x140>)
 800cdda:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cdde:	f000 fcdf 	bl	800d7a0 <__assert_func>
 800cde2:	f100 0414 	add.w	r4, r0, #20
 800cde6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cdea:	4623      	mov	r3, r4
 800cdec:	2200      	movs	r2, #0
 800cdee:	4573      	cmp	r3, lr
 800cdf0:	d320      	bcc.n	800ce34 <__multiply+0x94>
 800cdf2:	f107 0814 	add.w	r8, r7, #20
 800cdf6:	f109 0114 	add.w	r1, r9, #20
 800cdfa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cdfe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ce02:	9302      	str	r3, [sp, #8]
 800ce04:	1beb      	subs	r3, r5, r7
 800ce06:	3b15      	subs	r3, #21
 800ce08:	f023 0303 	bic.w	r3, r3, #3
 800ce0c:	3304      	adds	r3, #4
 800ce0e:	3715      	adds	r7, #21
 800ce10:	42bd      	cmp	r5, r7
 800ce12:	bf38      	it	cc
 800ce14:	2304      	movcc	r3, #4
 800ce16:	9301      	str	r3, [sp, #4]
 800ce18:	9b02      	ldr	r3, [sp, #8]
 800ce1a:	9103      	str	r1, [sp, #12]
 800ce1c:	428b      	cmp	r3, r1
 800ce1e:	d80c      	bhi.n	800ce3a <__multiply+0x9a>
 800ce20:	2e00      	cmp	r6, #0
 800ce22:	dd03      	ble.n	800ce2c <__multiply+0x8c>
 800ce24:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d055      	beq.n	800ced8 <__multiply+0x138>
 800ce2c:	6106      	str	r6, [r0, #16]
 800ce2e:	b005      	add	sp, #20
 800ce30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce34:	f843 2b04 	str.w	r2, [r3], #4
 800ce38:	e7d9      	b.n	800cdee <__multiply+0x4e>
 800ce3a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce3e:	f1ba 0f00 	cmp.w	sl, #0
 800ce42:	d01f      	beq.n	800ce84 <__multiply+0xe4>
 800ce44:	46c4      	mov	ip, r8
 800ce46:	46a1      	mov	r9, r4
 800ce48:	2700      	movs	r7, #0
 800ce4a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce4e:	f8d9 3000 	ldr.w	r3, [r9]
 800ce52:	fa1f fb82 	uxth.w	fp, r2
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce5c:	443b      	add	r3, r7
 800ce5e:	f8d9 7000 	ldr.w	r7, [r9]
 800ce62:	0c12      	lsrs	r2, r2, #16
 800ce64:	0c3f      	lsrs	r7, r7, #16
 800ce66:	fb0a 7202 	mla	r2, sl, r2, r7
 800ce6a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce74:	4565      	cmp	r5, ip
 800ce76:	f849 3b04 	str.w	r3, [r9], #4
 800ce7a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ce7e:	d8e4      	bhi.n	800ce4a <__multiply+0xaa>
 800ce80:	9b01      	ldr	r3, [sp, #4]
 800ce82:	50e7      	str	r7, [r4, r3]
 800ce84:	9b03      	ldr	r3, [sp, #12]
 800ce86:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce8a:	3104      	adds	r1, #4
 800ce8c:	f1b9 0f00 	cmp.w	r9, #0
 800ce90:	d020      	beq.n	800ced4 <__multiply+0x134>
 800ce92:	6823      	ldr	r3, [r4, #0]
 800ce94:	4647      	mov	r7, r8
 800ce96:	46a4      	mov	ip, r4
 800ce98:	f04f 0a00 	mov.w	sl, #0
 800ce9c:	f8b7 b000 	ldrh.w	fp, [r7]
 800cea0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cea4:	fb09 220b 	mla	r2, r9, fp, r2
 800cea8:	4452      	add	r2, sl
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ceb0:	f84c 3b04 	str.w	r3, [ip], #4
 800ceb4:	f857 3b04 	ldr.w	r3, [r7], #4
 800ceb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cebc:	f8bc 3000 	ldrh.w	r3, [ip]
 800cec0:	fb09 330a 	mla	r3, r9, sl, r3
 800cec4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cec8:	42bd      	cmp	r5, r7
 800ceca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cece:	d8e5      	bhi.n	800ce9c <__multiply+0xfc>
 800ced0:	9a01      	ldr	r2, [sp, #4]
 800ced2:	50a3      	str	r3, [r4, r2]
 800ced4:	3404      	adds	r4, #4
 800ced6:	e79f      	b.n	800ce18 <__multiply+0x78>
 800ced8:	3e01      	subs	r6, #1
 800ceda:	e7a1      	b.n	800ce20 <__multiply+0x80>
 800cedc:	0800db24 	.word	0x0800db24
 800cee0:	0800db35 	.word	0x0800db35

0800cee4 <__pow5mult>:
 800cee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cee8:	4615      	mov	r5, r2
 800ceea:	f012 0203 	ands.w	r2, r2, #3
 800ceee:	4607      	mov	r7, r0
 800cef0:	460e      	mov	r6, r1
 800cef2:	d007      	beq.n	800cf04 <__pow5mult+0x20>
 800cef4:	4c25      	ldr	r4, [pc, #148]	@ (800cf8c <__pow5mult+0xa8>)
 800cef6:	3a01      	subs	r2, #1
 800cef8:	2300      	movs	r3, #0
 800cefa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cefe:	f7ff fea7 	bl	800cc50 <__multadd>
 800cf02:	4606      	mov	r6, r0
 800cf04:	10ad      	asrs	r5, r5, #2
 800cf06:	d03d      	beq.n	800cf84 <__pow5mult+0xa0>
 800cf08:	69fc      	ldr	r4, [r7, #28]
 800cf0a:	b97c      	cbnz	r4, 800cf2c <__pow5mult+0x48>
 800cf0c:	2010      	movs	r0, #16
 800cf0e:	f7fe f8df 	bl	800b0d0 <malloc>
 800cf12:	4602      	mov	r2, r0
 800cf14:	61f8      	str	r0, [r7, #28]
 800cf16:	b928      	cbnz	r0, 800cf24 <__pow5mult+0x40>
 800cf18:	4b1d      	ldr	r3, [pc, #116]	@ (800cf90 <__pow5mult+0xac>)
 800cf1a:	481e      	ldr	r0, [pc, #120]	@ (800cf94 <__pow5mult+0xb0>)
 800cf1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf20:	f000 fc3e 	bl	800d7a0 <__assert_func>
 800cf24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf28:	6004      	str	r4, [r0, #0]
 800cf2a:	60c4      	str	r4, [r0, #12]
 800cf2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf34:	b94c      	cbnz	r4, 800cf4a <__pow5mult+0x66>
 800cf36:	f240 2171 	movw	r1, #625	@ 0x271
 800cf3a:	4638      	mov	r0, r7
 800cf3c:	f7ff ff1a 	bl	800cd74 <__i2b>
 800cf40:	2300      	movs	r3, #0
 800cf42:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf46:	4604      	mov	r4, r0
 800cf48:	6003      	str	r3, [r0, #0]
 800cf4a:	f04f 0900 	mov.w	r9, #0
 800cf4e:	07eb      	lsls	r3, r5, #31
 800cf50:	d50a      	bpl.n	800cf68 <__pow5mult+0x84>
 800cf52:	4631      	mov	r1, r6
 800cf54:	4622      	mov	r2, r4
 800cf56:	4638      	mov	r0, r7
 800cf58:	f7ff ff22 	bl	800cda0 <__multiply>
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4680      	mov	r8, r0
 800cf60:	4638      	mov	r0, r7
 800cf62:	f7ff fe53 	bl	800cc0c <_Bfree>
 800cf66:	4646      	mov	r6, r8
 800cf68:	106d      	asrs	r5, r5, #1
 800cf6a:	d00b      	beq.n	800cf84 <__pow5mult+0xa0>
 800cf6c:	6820      	ldr	r0, [r4, #0]
 800cf6e:	b938      	cbnz	r0, 800cf80 <__pow5mult+0x9c>
 800cf70:	4622      	mov	r2, r4
 800cf72:	4621      	mov	r1, r4
 800cf74:	4638      	mov	r0, r7
 800cf76:	f7ff ff13 	bl	800cda0 <__multiply>
 800cf7a:	6020      	str	r0, [r4, #0]
 800cf7c:	f8c0 9000 	str.w	r9, [r0]
 800cf80:	4604      	mov	r4, r0
 800cf82:	e7e4      	b.n	800cf4e <__pow5mult+0x6a>
 800cf84:	4630      	mov	r0, r6
 800cf86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf8a:	bf00      	nop
 800cf8c:	0800dbe8 	.word	0x0800dbe8
 800cf90:	0800dab5 	.word	0x0800dab5
 800cf94:	0800db35 	.word	0x0800db35

0800cf98 <__lshift>:
 800cf98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf9c:	460c      	mov	r4, r1
 800cf9e:	6849      	ldr	r1, [r1, #4]
 800cfa0:	6923      	ldr	r3, [r4, #16]
 800cfa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfa6:	68a3      	ldr	r3, [r4, #8]
 800cfa8:	4607      	mov	r7, r0
 800cfaa:	4691      	mov	r9, r2
 800cfac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfb0:	f108 0601 	add.w	r6, r8, #1
 800cfb4:	42b3      	cmp	r3, r6
 800cfb6:	db0b      	blt.n	800cfd0 <__lshift+0x38>
 800cfb8:	4638      	mov	r0, r7
 800cfba:	f7ff fde7 	bl	800cb8c <_Balloc>
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	b948      	cbnz	r0, 800cfd6 <__lshift+0x3e>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	4b28      	ldr	r3, [pc, #160]	@ (800d068 <__lshift+0xd0>)
 800cfc6:	4829      	ldr	r0, [pc, #164]	@ (800d06c <__lshift+0xd4>)
 800cfc8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cfcc:	f000 fbe8 	bl	800d7a0 <__assert_func>
 800cfd0:	3101      	adds	r1, #1
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	e7ee      	b.n	800cfb4 <__lshift+0x1c>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	f100 0114 	add.w	r1, r0, #20
 800cfdc:	f100 0210 	add.w	r2, r0, #16
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	4553      	cmp	r3, sl
 800cfe4:	db33      	blt.n	800d04e <__lshift+0xb6>
 800cfe6:	6920      	ldr	r0, [r4, #16]
 800cfe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfec:	f104 0314 	add.w	r3, r4, #20
 800cff0:	f019 091f 	ands.w	r9, r9, #31
 800cff4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cff8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cffc:	d02b      	beq.n	800d056 <__lshift+0xbe>
 800cffe:	f1c9 0e20 	rsb	lr, r9, #32
 800d002:	468a      	mov	sl, r1
 800d004:	2200      	movs	r2, #0
 800d006:	6818      	ldr	r0, [r3, #0]
 800d008:	fa00 f009 	lsl.w	r0, r0, r9
 800d00c:	4310      	orrs	r0, r2
 800d00e:	f84a 0b04 	str.w	r0, [sl], #4
 800d012:	f853 2b04 	ldr.w	r2, [r3], #4
 800d016:	459c      	cmp	ip, r3
 800d018:	fa22 f20e 	lsr.w	r2, r2, lr
 800d01c:	d8f3      	bhi.n	800d006 <__lshift+0x6e>
 800d01e:	ebac 0304 	sub.w	r3, ip, r4
 800d022:	3b15      	subs	r3, #21
 800d024:	f023 0303 	bic.w	r3, r3, #3
 800d028:	3304      	adds	r3, #4
 800d02a:	f104 0015 	add.w	r0, r4, #21
 800d02e:	4560      	cmp	r0, ip
 800d030:	bf88      	it	hi
 800d032:	2304      	movhi	r3, #4
 800d034:	50ca      	str	r2, [r1, r3]
 800d036:	b10a      	cbz	r2, 800d03c <__lshift+0xa4>
 800d038:	f108 0602 	add.w	r6, r8, #2
 800d03c:	3e01      	subs	r6, #1
 800d03e:	4638      	mov	r0, r7
 800d040:	612e      	str	r6, [r5, #16]
 800d042:	4621      	mov	r1, r4
 800d044:	f7ff fde2 	bl	800cc0c <_Bfree>
 800d048:	4628      	mov	r0, r5
 800d04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d04e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d052:	3301      	adds	r3, #1
 800d054:	e7c5      	b.n	800cfe2 <__lshift+0x4a>
 800d056:	3904      	subs	r1, #4
 800d058:	f853 2b04 	ldr.w	r2, [r3], #4
 800d05c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d060:	459c      	cmp	ip, r3
 800d062:	d8f9      	bhi.n	800d058 <__lshift+0xc0>
 800d064:	e7ea      	b.n	800d03c <__lshift+0xa4>
 800d066:	bf00      	nop
 800d068:	0800db24 	.word	0x0800db24
 800d06c:	0800db35 	.word	0x0800db35

0800d070 <__mcmp>:
 800d070:	690a      	ldr	r2, [r1, #16]
 800d072:	4603      	mov	r3, r0
 800d074:	6900      	ldr	r0, [r0, #16]
 800d076:	1a80      	subs	r0, r0, r2
 800d078:	b530      	push	{r4, r5, lr}
 800d07a:	d10e      	bne.n	800d09a <__mcmp+0x2a>
 800d07c:	3314      	adds	r3, #20
 800d07e:	3114      	adds	r1, #20
 800d080:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d084:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d088:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d08c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d090:	4295      	cmp	r5, r2
 800d092:	d003      	beq.n	800d09c <__mcmp+0x2c>
 800d094:	d205      	bcs.n	800d0a2 <__mcmp+0x32>
 800d096:	f04f 30ff 	mov.w	r0, #4294967295
 800d09a:	bd30      	pop	{r4, r5, pc}
 800d09c:	42a3      	cmp	r3, r4
 800d09e:	d3f3      	bcc.n	800d088 <__mcmp+0x18>
 800d0a0:	e7fb      	b.n	800d09a <__mcmp+0x2a>
 800d0a2:	2001      	movs	r0, #1
 800d0a4:	e7f9      	b.n	800d09a <__mcmp+0x2a>
	...

0800d0a8 <__mdiff>:
 800d0a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ac:	4689      	mov	r9, r1
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	4648      	mov	r0, r9
 800d0b4:	4614      	mov	r4, r2
 800d0b6:	f7ff ffdb 	bl	800d070 <__mcmp>
 800d0ba:	1e05      	subs	r5, r0, #0
 800d0bc:	d112      	bne.n	800d0e4 <__mdiff+0x3c>
 800d0be:	4629      	mov	r1, r5
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f7ff fd63 	bl	800cb8c <_Balloc>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	b928      	cbnz	r0, 800d0d6 <__mdiff+0x2e>
 800d0ca:	4b3f      	ldr	r3, [pc, #252]	@ (800d1c8 <__mdiff+0x120>)
 800d0cc:	f240 2137 	movw	r1, #567	@ 0x237
 800d0d0:	483e      	ldr	r0, [pc, #248]	@ (800d1cc <__mdiff+0x124>)
 800d0d2:	f000 fb65 	bl	800d7a0 <__assert_func>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0dc:	4610      	mov	r0, r2
 800d0de:	b003      	add	sp, #12
 800d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e4:	bfbc      	itt	lt
 800d0e6:	464b      	movlt	r3, r9
 800d0e8:	46a1      	movlt	r9, r4
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0f0:	bfba      	itte	lt
 800d0f2:	461c      	movlt	r4, r3
 800d0f4:	2501      	movlt	r5, #1
 800d0f6:	2500      	movge	r5, #0
 800d0f8:	f7ff fd48 	bl	800cb8c <_Balloc>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	b918      	cbnz	r0, 800d108 <__mdiff+0x60>
 800d100:	4b31      	ldr	r3, [pc, #196]	@ (800d1c8 <__mdiff+0x120>)
 800d102:	f240 2145 	movw	r1, #581	@ 0x245
 800d106:	e7e3      	b.n	800d0d0 <__mdiff+0x28>
 800d108:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d10c:	6926      	ldr	r6, [r4, #16]
 800d10e:	60c5      	str	r5, [r0, #12]
 800d110:	f109 0310 	add.w	r3, r9, #16
 800d114:	f109 0514 	add.w	r5, r9, #20
 800d118:	f104 0e14 	add.w	lr, r4, #20
 800d11c:	f100 0b14 	add.w	fp, r0, #20
 800d120:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d124:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d128:	9301      	str	r3, [sp, #4]
 800d12a:	46d9      	mov	r9, fp
 800d12c:	f04f 0c00 	mov.w	ip, #0
 800d130:	9b01      	ldr	r3, [sp, #4]
 800d132:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d136:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d13a:	9301      	str	r3, [sp, #4]
 800d13c:	fa1f f38a 	uxth.w	r3, sl
 800d140:	4619      	mov	r1, r3
 800d142:	b283      	uxth	r3, r0
 800d144:	1acb      	subs	r3, r1, r3
 800d146:	0c00      	lsrs	r0, r0, #16
 800d148:	4463      	add	r3, ip
 800d14a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d14e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d152:	b29b      	uxth	r3, r3
 800d154:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d158:	4576      	cmp	r6, lr
 800d15a:	f849 3b04 	str.w	r3, [r9], #4
 800d15e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d162:	d8e5      	bhi.n	800d130 <__mdiff+0x88>
 800d164:	1b33      	subs	r3, r6, r4
 800d166:	3b15      	subs	r3, #21
 800d168:	f023 0303 	bic.w	r3, r3, #3
 800d16c:	3415      	adds	r4, #21
 800d16e:	3304      	adds	r3, #4
 800d170:	42a6      	cmp	r6, r4
 800d172:	bf38      	it	cc
 800d174:	2304      	movcc	r3, #4
 800d176:	441d      	add	r5, r3
 800d178:	445b      	add	r3, fp
 800d17a:	461e      	mov	r6, r3
 800d17c:	462c      	mov	r4, r5
 800d17e:	4544      	cmp	r4, r8
 800d180:	d30e      	bcc.n	800d1a0 <__mdiff+0xf8>
 800d182:	f108 0103 	add.w	r1, r8, #3
 800d186:	1b49      	subs	r1, r1, r5
 800d188:	f021 0103 	bic.w	r1, r1, #3
 800d18c:	3d03      	subs	r5, #3
 800d18e:	45a8      	cmp	r8, r5
 800d190:	bf38      	it	cc
 800d192:	2100      	movcc	r1, #0
 800d194:	440b      	add	r3, r1
 800d196:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d19a:	b191      	cbz	r1, 800d1c2 <__mdiff+0x11a>
 800d19c:	6117      	str	r7, [r2, #16]
 800d19e:	e79d      	b.n	800d0dc <__mdiff+0x34>
 800d1a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1a4:	46e6      	mov	lr, ip
 800d1a6:	0c08      	lsrs	r0, r1, #16
 800d1a8:	fa1c fc81 	uxtah	ip, ip, r1
 800d1ac:	4471      	add	r1, lr
 800d1ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d1b2:	b289      	uxth	r1, r1
 800d1b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d1b8:	f846 1b04 	str.w	r1, [r6], #4
 800d1bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1c0:	e7dd      	b.n	800d17e <__mdiff+0xd6>
 800d1c2:	3f01      	subs	r7, #1
 800d1c4:	e7e7      	b.n	800d196 <__mdiff+0xee>
 800d1c6:	bf00      	nop
 800d1c8:	0800db24 	.word	0x0800db24
 800d1cc:	0800db35 	.word	0x0800db35

0800d1d0 <__d2b>:
 800d1d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1d4:	460f      	mov	r7, r1
 800d1d6:	2101      	movs	r1, #1
 800d1d8:	ec59 8b10 	vmov	r8, r9, d0
 800d1dc:	4616      	mov	r6, r2
 800d1de:	f7ff fcd5 	bl	800cb8c <_Balloc>
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	b930      	cbnz	r0, 800d1f4 <__d2b+0x24>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	4b23      	ldr	r3, [pc, #140]	@ (800d278 <__d2b+0xa8>)
 800d1ea:	4824      	ldr	r0, [pc, #144]	@ (800d27c <__d2b+0xac>)
 800d1ec:	f240 310f 	movw	r1, #783	@ 0x30f
 800d1f0:	f000 fad6 	bl	800d7a0 <__assert_func>
 800d1f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d1f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1fc:	b10d      	cbz	r5, 800d202 <__d2b+0x32>
 800d1fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d202:	9301      	str	r3, [sp, #4]
 800d204:	f1b8 0300 	subs.w	r3, r8, #0
 800d208:	d023      	beq.n	800d252 <__d2b+0x82>
 800d20a:	4668      	mov	r0, sp
 800d20c:	9300      	str	r3, [sp, #0]
 800d20e:	f7ff fd84 	bl	800cd1a <__lo0bits>
 800d212:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d216:	b1d0      	cbz	r0, 800d24e <__d2b+0x7e>
 800d218:	f1c0 0320 	rsb	r3, r0, #32
 800d21c:	fa02 f303 	lsl.w	r3, r2, r3
 800d220:	430b      	orrs	r3, r1
 800d222:	40c2      	lsrs	r2, r0
 800d224:	6163      	str	r3, [r4, #20]
 800d226:	9201      	str	r2, [sp, #4]
 800d228:	9b01      	ldr	r3, [sp, #4]
 800d22a:	61a3      	str	r3, [r4, #24]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	bf0c      	ite	eq
 800d230:	2201      	moveq	r2, #1
 800d232:	2202      	movne	r2, #2
 800d234:	6122      	str	r2, [r4, #16]
 800d236:	b1a5      	cbz	r5, 800d262 <__d2b+0x92>
 800d238:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d23c:	4405      	add	r5, r0
 800d23e:	603d      	str	r5, [r7, #0]
 800d240:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d244:	6030      	str	r0, [r6, #0]
 800d246:	4620      	mov	r0, r4
 800d248:	b003      	add	sp, #12
 800d24a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d24e:	6161      	str	r1, [r4, #20]
 800d250:	e7ea      	b.n	800d228 <__d2b+0x58>
 800d252:	a801      	add	r0, sp, #4
 800d254:	f7ff fd61 	bl	800cd1a <__lo0bits>
 800d258:	9b01      	ldr	r3, [sp, #4]
 800d25a:	6163      	str	r3, [r4, #20]
 800d25c:	3020      	adds	r0, #32
 800d25e:	2201      	movs	r2, #1
 800d260:	e7e8      	b.n	800d234 <__d2b+0x64>
 800d262:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d266:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d26a:	6038      	str	r0, [r7, #0]
 800d26c:	6918      	ldr	r0, [r3, #16]
 800d26e:	f7ff fd35 	bl	800ccdc <__hi0bits>
 800d272:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d276:	e7e5      	b.n	800d244 <__d2b+0x74>
 800d278:	0800db24 	.word	0x0800db24
 800d27c:	0800db35 	.word	0x0800db35

0800d280 <__sfputc_r>:
 800d280:	6893      	ldr	r3, [r2, #8]
 800d282:	3b01      	subs	r3, #1
 800d284:	2b00      	cmp	r3, #0
 800d286:	b410      	push	{r4}
 800d288:	6093      	str	r3, [r2, #8]
 800d28a:	da08      	bge.n	800d29e <__sfputc_r+0x1e>
 800d28c:	6994      	ldr	r4, [r2, #24]
 800d28e:	42a3      	cmp	r3, r4
 800d290:	db01      	blt.n	800d296 <__sfputc_r+0x16>
 800d292:	290a      	cmp	r1, #10
 800d294:	d103      	bne.n	800d29e <__sfputc_r+0x1e>
 800d296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d29a:	f000 b9df 	b.w	800d65c <__swbuf_r>
 800d29e:	6813      	ldr	r3, [r2, #0]
 800d2a0:	1c58      	adds	r0, r3, #1
 800d2a2:	6010      	str	r0, [r2, #0]
 800d2a4:	7019      	strb	r1, [r3, #0]
 800d2a6:	4608      	mov	r0, r1
 800d2a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <__sfputs_r>:
 800d2ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b0:	4606      	mov	r6, r0
 800d2b2:	460f      	mov	r7, r1
 800d2b4:	4614      	mov	r4, r2
 800d2b6:	18d5      	adds	r5, r2, r3
 800d2b8:	42ac      	cmp	r4, r5
 800d2ba:	d101      	bne.n	800d2c0 <__sfputs_r+0x12>
 800d2bc:	2000      	movs	r0, #0
 800d2be:	e007      	b.n	800d2d0 <__sfputs_r+0x22>
 800d2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2c4:	463a      	mov	r2, r7
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	f7ff ffda 	bl	800d280 <__sfputc_r>
 800d2cc:	1c43      	adds	r3, r0, #1
 800d2ce:	d1f3      	bne.n	800d2b8 <__sfputs_r+0xa>
 800d2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d2d4 <_vfiprintf_r>:
 800d2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d8:	460d      	mov	r5, r1
 800d2da:	b09d      	sub	sp, #116	@ 0x74
 800d2dc:	4614      	mov	r4, r2
 800d2de:	4698      	mov	r8, r3
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	b118      	cbz	r0, 800d2ec <_vfiprintf_r+0x18>
 800d2e4:	6a03      	ldr	r3, [r0, #32]
 800d2e6:	b90b      	cbnz	r3, 800d2ec <_vfiprintf_r+0x18>
 800d2e8:	f7fe fc92 	bl	800bc10 <__sinit>
 800d2ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2ee:	07d9      	lsls	r1, r3, #31
 800d2f0:	d405      	bmi.n	800d2fe <_vfiprintf_r+0x2a>
 800d2f2:	89ab      	ldrh	r3, [r5, #12]
 800d2f4:	059a      	lsls	r2, r3, #22
 800d2f6:	d402      	bmi.n	800d2fe <_vfiprintf_r+0x2a>
 800d2f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2fa:	f7fe fda2 	bl	800be42 <__retarget_lock_acquire_recursive>
 800d2fe:	89ab      	ldrh	r3, [r5, #12]
 800d300:	071b      	lsls	r3, r3, #28
 800d302:	d501      	bpl.n	800d308 <_vfiprintf_r+0x34>
 800d304:	692b      	ldr	r3, [r5, #16]
 800d306:	b99b      	cbnz	r3, 800d330 <_vfiprintf_r+0x5c>
 800d308:	4629      	mov	r1, r5
 800d30a:	4630      	mov	r0, r6
 800d30c:	f000 f9e4 	bl	800d6d8 <__swsetup_r>
 800d310:	b170      	cbz	r0, 800d330 <_vfiprintf_r+0x5c>
 800d312:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d314:	07dc      	lsls	r4, r3, #31
 800d316:	d504      	bpl.n	800d322 <_vfiprintf_r+0x4e>
 800d318:	f04f 30ff 	mov.w	r0, #4294967295
 800d31c:	b01d      	add	sp, #116	@ 0x74
 800d31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d322:	89ab      	ldrh	r3, [r5, #12]
 800d324:	0598      	lsls	r0, r3, #22
 800d326:	d4f7      	bmi.n	800d318 <_vfiprintf_r+0x44>
 800d328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d32a:	f7fe fd8b 	bl	800be44 <__retarget_lock_release_recursive>
 800d32e:	e7f3      	b.n	800d318 <_vfiprintf_r+0x44>
 800d330:	2300      	movs	r3, #0
 800d332:	9309      	str	r3, [sp, #36]	@ 0x24
 800d334:	2320      	movs	r3, #32
 800d336:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d33a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d33e:	2330      	movs	r3, #48	@ 0x30
 800d340:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d4f0 <_vfiprintf_r+0x21c>
 800d344:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d348:	f04f 0901 	mov.w	r9, #1
 800d34c:	4623      	mov	r3, r4
 800d34e:	469a      	mov	sl, r3
 800d350:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d354:	b10a      	cbz	r2, 800d35a <_vfiprintf_r+0x86>
 800d356:	2a25      	cmp	r2, #37	@ 0x25
 800d358:	d1f9      	bne.n	800d34e <_vfiprintf_r+0x7a>
 800d35a:	ebba 0b04 	subs.w	fp, sl, r4
 800d35e:	d00b      	beq.n	800d378 <_vfiprintf_r+0xa4>
 800d360:	465b      	mov	r3, fp
 800d362:	4622      	mov	r2, r4
 800d364:	4629      	mov	r1, r5
 800d366:	4630      	mov	r0, r6
 800d368:	f7ff ffa1 	bl	800d2ae <__sfputs_r>
 800d36c:	3001      	adds	r0, #1
 800d36e:	f000 80a7 	beq.w	800d4c0 <_vfiprintf_r+0x1ec>
 800d372:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d374:	445a      	add	r2, fp
 800d376:	9209      	str	r2, [sp, #36]	@ 0x24
 800d378:	f89a 3000 	ldrb.w	r3, [sl]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f000 809f 	beq.w	800d4c0 <_vfiprintf_r+0x1ec>
 800d382:	2300      	movs	r3, #0
 800d384:	f04f 32ff 	mov.w	r2, #4294967295
 800d388:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d38c:	f10a 0a01 	add.w	sl, sl, #1
 800d390:	9304      	str	r3, [sp, #16]
 800d392:	9307      	str	r3, [sp, #28]
 800d394:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d398:	931a      	str	r3, [sp, #104]	@ 0x68
 800d39a:	4654      	mov	r4, sl
 800d39c:	2205      	movs	r2, #5
 800d39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3a2:	4853      	ldr	r0, [pc, #332]	@ (800d4f0 <_vfiprintf_r+0x21c>)
 800d3a4:	f7f2 ff14 	bl	80001d0 <memchr>
 800d3a8:	9a04      	ldr	r2, [sp, #16]
 800d3aa:	b9d8      	cbnz	r0, 800d3e4 <_vfiprintf_r+0x110>
 800d3ac:	06d1      	lsls	r1, r2, #27
 800d3ae:	bf44      	itt	mi
 800d3b0:	2320      	movmi	r3, #32
 800d3b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3b6:	0713      	lsls	r3, r2, #28
 800d3b8:	bf44      	itt	mi
 800d3ba:	232b      	movmi	r3, #43	@ 0x2b
 800d3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d3c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3c6:	d015      	beq.n	800d3f4 <_vfiprintf_r+0x120>
 800d3c8:	9a07      	ldr	r2, [sp, #28]
 800d3ca:	4654      	mov	r4, sl
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	f04f 0c0a 	mov.w	ip, #10
 800d3d2:	4621      	mov	r1, r4
 800d3d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3d8:	3b30      	subs	r3, #48	@ 0x30
 800d3da:	2b09      	cmp	r3, #9
 800d3dc:	d94b      	bls.n	800d476 <_vfiprintf_r+0x1a2>
 800d3de:	b1b0      	cbz	r0, 800d40e <_vfiprintf_r+0x13a>
 800d3e0:	9207      	str	r2, [sp, #28]
 800d3e2:	e014      	b.n	800d40e <_vfiprintf_r+0x13a>
 800d3e4:	eba0 0308 	sub.w	r3, r0, r8
 800d3e8:	fa09 f303 	lsl.w	r3, r9, r3
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	9304      	str	r3, [sp, #16]
 800d3f0:	46a2      	mov	sl, r4
 800d3f2:	e7d2      	b.n	800d39a <_vfiprintf_r+0xc6>
 800d3f4:	9b03      	ldr	r3, [sp, #12]
 800d3f6:	1d19      	adds	r1, r3, #4
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	9103      	str	r1, [sp, #12]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	bfbb      	ittet	lt
 800d400:	425b      	neglt	r3, r3
 800d402:	f042 0202 	orrlt.w	r2, r2, #2
 800d406:	9307      	strge	r3, [sp, #28]
 800d408:	9307      	strlt	r3, [sp, #28]
 800d40a:	bfb8      	it	lt
 800d40c:	9204      	strlt	r2, [sp, #16]
 800d40e:	7823      	ldrb	r3, [r4, #0]
 800d410:	2b2e      	cmp	r3, #46	@ 0x2e
 800d412:	d10a      	bne.n	800d42a <_vfiprintf_r+0x156>
 800d414:	7863      	ldrb	r3, [r4, #1]
 800d416:	2b2a      	cmp	r3, #42	@ 0x2a
 800d418:	d132      	bne.n	800d480 <_vfiprintf_r+0x1ac>
 800d41a:	9b03      	ldr	r3, [sp, #12]
 800d41c:	1d1a      	adds	r2, r3, #4
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	9203      	str	r2, [sp, #12]
 800d422:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d426:	3402      	adds	r4, #2
 800d428:	9305      	str	r3, [sp, #20]
 800d42a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d500 <_vfiprintf_r+0x22c>
 800d42e:	7821      	ldrb	r1, [r4, #0]
 800d430:	2203      	movs	r2, #3
 800d432:	4650      	mov	r0, sl
 800d434:	f7f2 fecc 	bl	80001d0 <memchr>
 800d438:	b138      	cbz	r0, 800d44a <_vfiprintf_r+0x176>
 800d43a:	9b04      	ldr	r3, [sp, #16]
 800d43c:	eba0 000a 	sub.w	r0, r0, sl
 800d440:	2240      	movs	r2, #64	@ 0x40
 800d442:	4082      	lsls	r2, r0
 800d444:	4313      	orrs	r3, r2
 800d446:	3401      	adds	r4, #1
 800d448:	9304      	str	r3, [sp, #16]
 800d44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d44e:	4829      	ldr	r0, [pc, #164]	@ (800d4f4 <_vfiprintf_r+0x220>)
 800d450:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d454:	2206      	movs	r2, #6
 800d456:	f7f2 febb 	bl	80001d0 <memchr>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d03f      	beq.n	800d4de <_vfiprintf_r+0x20a>
 800d45e:	4b26      	ldr	r3, [pc, #152]	@ (800d4f8 <_vfiprintf_r+0x224>)
 800d460:	bb1b      	cbnz	r3, 800d4aa <_vfiprintf_r+0x1d6>
 800d462:	9b03      	ldr	r3, [sp, #12]
 800d464:	3307      	adds	r3, #7
 800d466:	f023 0307 	bic.w	r3, r3, #7
 800d46a:	3308      	adds	r3, #8
 800d46c:	9303      	str	r3, [sp, #12]
 800d46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d470:	443b      	add	r3, r7
 800d472:	9309      	str	r3, [sp, #36]	@ 0x24
 800d474:	e76a      	b.n	800d34c <_vfiprintf_r+0x78>
 800d476:	fb0c 3202 	mla	r2, ip, r2, r3
 800d47a:	460c      	mov	r4, r1
 800d47c:	2001      	movs	r0, #1
 800d47e:	e7a8      	b.n	800d3d2 <_vfiprintf_r+0xfe>
 800d480:	2300      	movs	r3, #0
 800d482:	3401      	adds	r4, #1
 800d484:	9305      	str	r3, [sp, #20]
 800d486:	4619      	mov	r1, r3
 800d488:	f04f 0c0a 	mov.w	ip, #10
 800d48c:	4620      	mov	r0, r4
 800d48e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d492:	3a30      	subs	r2, #48	@ 0x30
 800d494:	2a09      	cmp	r2, #9
 800d496:	d903      	bls.n	800d4a0 <_vfiprintf_r+0x1cc>
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d0c6      	beq.n	800d42a <_vfiprintf_r+0x156>
 800d49c:	9105      	str	r1, [sp, #20]
 800d49e:	e7c4      	b.n	800d42a <_vfiprintf_r+0x156>
 800d4a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e7f0      	b.n	800d48c <_vfiprintf_r+0x1b8>
 800d4aa:	ab03      	add	r3, sp, #12
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	462a      	mov	r2, r5
 800d4b0:	4b12      	ldr	r3, [pc, #72]	@ (800d4fc <_vfiprintf_r+0x228>)
 800d4b2:	a904      	add	r1, sp, #16
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	f7fd ff69 	bl	800b38c <_printf_float>
 800d4ba:	4607      	mov	r7, r0
 800d4bc:	1c78      	adds	r0, r7, #1
 800d4be:	d1d6      	bne.n	800d46e <_vfiprintf_r+0x19a>
 800d4c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4c2:	07d9      	lsls	r1, r3, #31
 800d4c4:	d405      	bmi.n	800d4d2 <_vfiprintf_r+0x1fe>
 800d4c6:	89ab      	ldrh	r3, [r5, #12]
 800d4c8:	059a      	lsls	r2, r3, #22
 800d4ca:	d402      	bmi.n	800d4d2 <_vfiprintf_r+0x1fe>
 800d4cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4ce:	f7fe fcb9 	bl	800be44 <__retarget_lock_release_recursive>
 800d4d2:	89ab      	ldrh	r3, [r5, #12]
 800d4d4:	065b      	lsls	r3, r3, #25
 800d4d6:	f53f af1f 	bmi.w	800d318 <_vfiprintf_r+0x44>
 800d4da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4dc:	e71e      	b.n	800d31c <_vfiprintf_r+0x48>
 800d4de:	ab03      	add	r3, sp, #12
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	462a      	mov	r2, r5
 800d4e4:	4b05      	ldr	r3, [pc, #20]	@ (800d4fc <_vfiprintf_r+0x228>)
 800d4e6:	a904      	add	r1, sp, #16
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	f7fe f9e7 	bl	800b8bc <_printf_i>
 800d4ee:	e7e4      	b.n	800d4ba <_vfiprintf_r+0x1e6>
 800d4f0:	0800db8e 	.word	0x0800db8e
 800d4f4:	0800db98 	.word	0x0800db98
 800d4f8:	0800b38d 	.word	0x0800b38d
 800d4fc:	0800d2af 	.word	0x0800d2af
 800d500:	0800db94 	.word	0x0800db94

0800d504 <__sflush_r>:
 800d504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d50c:	0716      	lsls	r6, r2, #28
 800d50e:	4605      	mov	r5, r0
 800d510:	460c      	mov	r4, r1
 800d512:	d454      	bmi.n	800d5be <__sflush_r+0xba>
 800d514:	684b      	ldr	r3, [r1, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	dc02      	bgt.n	800d520 <__sflush_r+0x1c>
 800d51a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	dd48      	ble.n	800d5b2 <__sflush_r+0xae>
 800d520:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d522:	2e00      	cmp	r6, #0
 800d524:	d045      	beq.n	800d5b2 <__sflush_r+0xae>
 800d526:	2300      	movs	r3, #0
 800d528:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d52c:	682f      	ldr	r7, [r5, #0]
 800d52e:	6a21      	ldr	r1, [r4, #32]
 800d530:	602b      	str	r3, [r5, #0]
 800d532:	d030      	beq.n	800d596 <__sflush_r+0x92>
 800d534:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d536:	89a3      	ldrh	r3, [r4, #12]
 800d538:	0759      	lsls	r1, r3, #29
 800d53a:	d505      	bpl.n	800d548 <__sflush_r+0x44>
 800d53c:	6863      	ldr	r3, [r4, #4]
 800d53e:	1ad2      	subs	r2, r2, r3
 800d540:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d542:	b10b      	cbz	r3, 800d548 <__sflush_r+0x44>
 800d544:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d546:	1ad2      	subs	r2, r2, r3
 800d548:	2300      	movs	r3, #0
 800d54a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d54c:	6a21      	ldr	r1, [r4, #32]
 800d54e:	4628      	mov	r0, r5
 800d550:	47b0      	blx	r6
 800d552:	1c43      	adds	r3, r0, #1
 800d554:	89a3      	ldrh	r3, [r4, #12]
 800d556:	d106      	bne.n	800d566 <__sflush_r+0x62>
 800d558:	6829      	ldr	r1, [r5, #0]
 800d55a:	291d      	cmp	r1, #29
 800d55c:	d82b      	bhi.n	800d5b6 <__sflush_r+0xb2>
 800d55e:	4a2a      	ldr	r2, [pc, #168]	@ (800d608 <__sflush_r+0x104>)
 800d560:	40ca      	lsrs	r2, r1
 800d562:	07d6      	lsls	r6, r2, #31
 800d564:	d527      	bpl.n	800d5b6 <__sflush_r+0xb2>
 800d566:	2200      	movs	r2, #0
 800d568:	6062      	str	r2, [r4, #4]
 800d56a:	04d9      	lsls	r1, r3, #19
 800d56c:	6922      	ldr	r2, [r4, #16]
 800d56e:	6022      	str	r2, [r4, #0]
 800d570:	d504      	bpl.n	800d57c <__sflush_r+0x78>
 800d572:	1c42      	adds	r2, r0, #1
 800d574:	d101      	bne.n	800d57a <__sflush_r+0x76>
 800d576:	682b      	ldr	r3, [r5, #0]
 800d578:	b903      	cbnz	r3, 800d57c <__sflush_r+0x78>
 800d57a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d57c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d57e:	602f      	str	r7, [r5, #0]
 800d580:	b1b9      	cbz	r1, 800d5b2 <__sflush_r+0xae>
 800d582:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d586:	4299      	cmp	r1, r3
 800d588:	d002      	beq.n	800d590 <__sflush_r+0x8c>
 800d58a:	4628      	mov	r0, r5
 800d58c:	f7ff fab4 	bl	800caf8 <_free_r>
 800d590:	2300      	movs	r3, #0
 800d592:	6363      	str	r3, [r4, #52]	@ 0x34
 800d594:	e00d      	b.n	800d5b2 <__sflush_r+0xae>
 800d596:	2301      	movs	r3, #1
 800d598:	4628      	mov	r0, r5
 800d59a:	47b0      	blx	r6
 800d59c:	4602      	mov	r2, r0
 800d59e:	1c50      	adds	r0, r2, #1
 800d5a0:	d1c9      	bne.n	800d536 <__sflush_r+0x32>
 800d5a2:	682b      	ldr	r3, [r5, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d0c6      	beq.n	800d536 <__sflush_r+0x32>
 800d5a8:	2b1d      	cmp	r3, #29
 800d5aa:	d001      	beq.n	800d5b0 <__sflush_r+0xac>
 800d5ac:	2b16      	cmp	r3, #22
 800d5ae:	d11e      	bne.n	800d5ee <__sflush_r+0xea>
 800d5b0:	602f      	str	r7, [r5, #0]
 800d5b2:	2000      	movs	r0, #0
 800d5b4:	e022      	b.n	800d5fc <__sflush_r+0xf8>
 800d5b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5ba:	b21b      	sxth	r3, r3
 800d5bc:	e01b      	b.n	800d5f6 <__sflush_r+0xf2>
 800d5be:	690f      	ldr	r7, [r1, #16]
 800d5c0:	2f00      	cmp	r7, #0
 800d5c2:	d0f6      	beq.n	800d5b2 <__sflush_r+0xae>
 800d5c4:	0793      	lsls	r3, r2, #30
 800d5c6:	680e      	ldr	r6, [r1, #0]
 800d5c8:	bf08      	it	eq
 800d5ca:	694b      	ldreq	r3, [r1, #20]
 800d5cc:	600f      	str	r7, [r1, #0]
 800d5ce:	bf18      	it	ne
 800d5d0:	2300      	movne	r3, #0
 800d5d2:	eba6 0807 	sub.w	r8, r6, r7
 800d5d6:	608b      	str	r3, [r1, #8]
 800d5d8:	f1b8 0f00 	cmp.w	r8, #0
 800d5dc:	dde9      	ble.n	800d5b2 <__sflush_r+0xae>
 800d5de:	6a21      	ldr	r1, [r4, #32]
 800d5e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d5e2:	4643      	mov	r3, r8
 800d5e4:	463a      	mov	r2, r7
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	47b0      	blx	r6
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	dc08      	bgt.n	800d600 <__sflush_r+0xfc>
 800d5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5f6:	81a3      	strh	r3, [r4, #12]
 800d5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d600:	4407      	add	r7, r0
 800d602:	eba8 0800 	sub.w	r8, r8, r0
 800d606:	e7e7      	b.n	800d5d8 <__sflush_r+0xd4>
 800d608:	20400001 	.word	0x20400001

0800d60c <_fflush_r>:
 800d60c:	b538      	push	{r3, r4, r5, lr}
 800d60e:	690b      	ldr	r3, [r1, #16]
 800d610:	4605      	mov	r5, r0
 800d612:	460c      	mov	r4, r1
 800d614:	b913      	cbnz	r3, 800d61c <_fflush_r+0x10>
 800d616:	2500      	movs	r5, #0
 800d618:	4628      	mov	r0, r5
 800d61a:	bd38      	pop	{r3, r4, r5, pc}
 800d61c:	b118      	cbz	r0, 800d626 <_fflush_r+0x1a>
 800d61e:	6a03      	ldr	r3, [r0, #32]
 800d620:	b90b      	cbnz	r3, 800d626 <_fflush_r+0x1a>
 800d622:	f7fe faf5 	bl	800bc10 <__sinit>
 800d626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d0f3      	beq.n	800d616 <_fflush_r+0xa>
 800d62e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d630:	07d0      	lsls	r0, r2, #31
 800d632:	d404      	bmi.n	800d63e <_fflush_r+0x32>
 800d634:	0599      	lsls	r1, r3, #22
 800d636:	d402      	bmi.n	800d63e <_fflush_r+0x32>
 800d638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d63a:	f7fe fc02 	bl	800be42 <__retarget_lock_acquire_recursive>
 800d63e:	4628      	mov	r0, r5
 800d640:	4621      	mov	r1, r4
 800d642:	f7ff ff5f 	bl	800d504 <__sflush_r>
 800d646:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d648:	07da      	lsls	r2, r3, #31
 800d64a:	4605      	mov	r5, r0
 800d64c:	d4e4      	bmi.n	800d618 <_fflush_r+0xc>
 800d64e:	89a3      	ldrh	r3, [r4, #12]
 800d650:	059b      	lsls	r3, r3, #22
 800d652:	d4e1      	bmi.n	800d618 <_fflush_r+0xc>
 800d654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d656:	f7fe fbf5 	bl	800be44 <__retarget_lock_release_recursive>
 800d65a:	e7dd      	b.n	800d618 <_fflush_r+0xc>

0800d65c <__swbuf_r>:
 800d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65e:	460e      	mov	r6, r1
 800d660:	4614      	mov	r4, r2
 800d662:	4605      	mov	r5, r0
 800d664:	b118      	cbz	r0, 800d66e <__swbuf_r+0x12>
 800d666:	6a03      	ldr	r3, [r0, #32]
 800d668:	b90b      	cbnz	r3, 800d66e <__swbuf_r+0x12>
 800d66a:	f7fe fad1 	bl	800bc10 <__sinit>
 800d66e:	69a3      	ldr	r3, [r4, #24]
 800d670:	60a3      	str	r3, [r4, #8]
 800d672:	89a3      	ldrh	r3, [r4, #12]
 800d674:	071a      	lsls	r2, r3, #28
 800d676:	d501      	bpl.n	800d67c <__swbuf_r+0x20>
 800d678:	6923      	ldr	r3, [r4, #16]
 800d67a:	b943      	cbnz	r3, 800d68e <__swbuf_r+0x32>
 800d67c:	4621      	mov	r1, r4
 800d67e:	4628      	mov	r0, r5
 800d680:	f000 f82a 	bl	800d6d8 <__swsetup_r>
 800d684:	b118      	cbz	r0, 800d68e <__swbuf_r+0x32>
 800d686:	f04f 37ff 	mov.w	r7, #4294967295
 800d68a:	4638      	mov	r0, r7
 800d68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d68e:	6823      	ldr	r3, [r4, #0]
 800d690:	6922      	ldr	r2, [r4, #16]
 800d692:	1a98      	subs	r0, r3, r2
 800d694:	6963      	ldr	r3, [r4, #20]
 800d696:	b2f6      	uxtb	r6, r6
 800d698:	4283      	cmp	r3, r0
 800d69a:	4637      	mov	r7, r6
 800d69c:	dc05      	bgt.n	800d6aa <__swbuf_r+0x4e>
 800d69e:	4621      	mov	r1, r4
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	f7ff ffb3 	bl	800d60c <_fflush_r>
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d1ed      	bne.n	800d686 <__swbuf_r+0x2a>
 800d6aa:	68a3      	ldr	r3, [r4, #8]
 800d6ac:	3b01      	subs	r3, #1
 800d6ae:	60a3      	str	r3, [r4, #8]
 800d6b0:	6823      	ldr	r3, [r4, #0]
 800d6b2:	1c5a      	adds	r2, r3, #1
 800d6b4:	6022      	str	r2, [r4, #0]
 800d6b6:	701e      	strb	r6, [r3, #0]
 800d6b8:	6962      	ldr	r2, [r4, #20]
 800d6ba:	1c43      	adds	r3, r0, #1
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d004      	beq.n	800d6ca <__swbuf_r+0x6e>
 800d6c0:	89a3      	ldrh	r3, [r4, #12]
 800d6c2:	07db      	lsls	r3, r3, #31
 800d6c4:	d5e1      	bpl.n	800d68a <__swbuf_r+0x2e>
 800d6c6:	2e0a      	cmp	r6, #10
 800d6c8:	d1df      	bne.n	800d68a <__swbuf_r+0x2e>
 800d6ca:	4621      	mov	r1, r4
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	f7ff ff9d 	bl	800d60c <_fflush_r>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	d0d9      	beq.n	800d68a <__swbuf_r+0x2e>
 800d6d6:	e7d6      	b.n	800d686 <__swbuf_r+0x2a>

0800d6d8 <__swsetup_r>:
 800d6d8:	b538      	push	{r3, r4, r5, lr}
 800d6da:	4b29      	ldr	r3, [pc, #164]	@ (800d780 <__swsetup_r+0xa8>)
 800d6dc:	4605      	mov	r5, r0
 800d6de:	6818      	ldr	r0, [r3, #0]
 800d6e0:	460c      	mov	r4, r1
 800d6e2:	b118      	cbz	r0, 800d6ec <__swsetup_r+0x14>
 800d6e4:	6a03      	ldr	r3, [r0, #32]
 800d6e6:	b90b      	cbnz	r3, 800d6ec <__swsetup_r+0x14>
 800d6e8:	f7fe fa92 	bl	800bc10 <__sinit>
 800d6ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6f0:	0719      	lsls	r1, r3, #28
 800d6f2:	d422      	bmi.n	800d73a <__swsetup_r+0x62>
 800d6f4:	06da      	lsls	r2, r3, #27
 800d6f6:	d407      	bmi.n	800d708 <__swsetup_r+0x30>
 800d6f8:	2209      	movs	r2, #9
 800d6fa:	602a      	str	r2, [r5, #0]
 800d6fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d700:	81a3      	strh	r3, [r4, #12]
 800d702:	f04f 30ff 	mov.w	r0, #4294967295
 800d706:	e033      	b.n	800d770 <__swsetup_r+0x98>
 800d708:	0758      	lsls	r0, r3, #29
 800d70a:	d512      	bpl.n	800d732 <__swsetup_r+0x5a>
 800d70c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d70e:	b141      	cbz	r1, 800d722 <__swsetup_r+0x4a>
 800d710:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d714:	4299      	cmp	r1, r3
 800d716:	d002      	beq.n	800d71e <__swsetup_r+0x46>
 800d718:	4628      	mov	r0, r5
 800d71a:	f7ff f9ed 	bl	800caf8 <_free_r>
 800d71e:	2300      	movs	r3, #0
 800d720:	6363      	str	r3, [r4, #52]	@ 0x34
 800d722:	89a3      	ldrh	r3, [r4, #12]
 800d724:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d728:	81a3      	strh	r3, [r4, #12]
 800d72a:	2300      	movs	r3, #0
 800d72c:	6063      	str	r3, [r4, #4]
 800d72e:	6923      	ldr	r3, [r4, #16]
 800d730:	6023      	str	r3, [r4, #0]
 800d732:	89a3      	ldrh	r3, [r4, #12]
 800d734:	f043 0308 	orr.w	r3, r3, #8
 800d738:	81a3      	strh	r3, [r4, #12]
 800d73a:	6923      	ldr	r3, [r4, #16]
 800d73c:	b94b      	cbnz	r3, 800d752 <__swsetup_r+0x7a>
 800d73e:	89a3      	ldrh	r3, [r4, #12]
 800d740:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d748:	d003      	beq.n	800d752 <__swsetup_r+0x7a>
 800d74a:	4621      	mov	r1, r4
 800d74c:	4628      	mov	r0, r5
 800d74e:	f000 f8b1 	bl	800d8b4 <__smakebuf_r>
 800d752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d756:	f013 0201 	ands.w	r2, r3, #1
 800d75a:	d00a      	beq.n	800d772 <__swsetup_r+0x9a>
 800d75c:	2200      	movs	r2, #0
 800d75e:	60a2      	str	r2, [r4, #8]
 800d760:	6962      	ldr	r2, [r4, #20]
 800d762:	4252      	negs	r2, r2
 800d764:	61a2      	str	r2, [r4, #24]
 800d766:	6922      	ldr	r2, [r4, #16]
 800d768:	b942      	cbnz	r2, 800d77c <__swsetup_r+0xa4>
 800d76a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d76e:	d1c5      	bne.n	800d6fc <__swsetup_r+0x24>
 800d770:	bd38      	pop	{r3, r4, r5, pc}
 800d772:	0799      	lsls	r1, r3, #30
 800d774:	bf58      	it	pl
 800d776:	6962      	ldrpl	r2, [r4, #20]
 800d778:	60a2      	str	r2, [r4, #8]
 800d77a:	e7f4      	b.n	800d766 <__swsetup_r+0x8e>
 800d77c:	2000      	movs	r0, #0
 800d77e:	e7f7      	b.n	800d770 <__swsetup_r+0x98>
 800d780:	20000038 	.word	0x20000038

0800d784 <memcpy>:
 800d784:	440a      	add	r2, r1
 800d786:	4291      	cmp	r1, r2
 800d788:	f100 33ff 	add.w	r3, r0, #4294967295
 800d78c:	d100      	bne.n	800d790 <memcpy+0xc>
 800d78e:	4770      	bx	lr
 800d790:	b510      	push	{r4, lr}
 800d792:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d79a:	4291      	cmp	r1, r2
 800d79c:	d1f9      	bne.n	800d792 <memcpy+0xe>
 800d79e:	bd10      	pop	{r4, pc}

0800d7a0 <__assert_func>:
 800d7a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7a2:	4614      	mov	r4, r2
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	4b09      	ldr	r3, [pc, #36]	@ (800d7cc <__assert_func+0x2c>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4605      	mov	r5, r0
 800d7ac:	68d8      	ldr	r0, [r3, #12]
 800d7ae:	b14c      	cbz	r4, 800d7c4 <__assert_func+0x24>
 800d7b0:	4b07      	ldr	r3, [pc, #28]	@ (800d7d0 <__assert_func+0x30>)
 800d7b2:	9100      	str	r1, [sp, #0]
 800d7b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7b8:	4906      	ldr	r1, [pc, #24]	@ (800d7d4 <__assert_func+0x34>)
 800d7ba:	462b      	mov	r3, r5
 800d7bc:	f000 f842 	bl	800d844 <fiprintf>
 800d7c0:	f000 f8d6 	bl	800d970 <abort>
 800d7c4:	4b04      	ldr	r3, [pc, #16]	@ (800d7d8 <__assert_func+0x38>)
 800d7c6:	461c      	mov	r4, r3
 800d7c8:	e7f3      	b.n	800d7b2 <__assert_func+0x12>
 800d7ca:	bf00      	nop
 800d7cc:	20000038 	.word	0x20000038
 800d7d0:	0800dba9 	.word	0x0800dba9
 800d7d4:	0800dbb6 	.word	0x0800dbb6
 800d7d8:	0800dbe4 	.word	0x0800dbe4

0800d7dc <_calloc_r>:
 800d7dc:	b570      	push	{r4, r5, r6, lr}
 800d7de:	fba1 5402 	umull	r5, r4, r1, r2
 800d7e2:	b934      	cbnz	r4, 800d7f2 <_calloc_r+0x16>
 800d7e4:	4629      	mov	r1, r5
 800d7e6:	f7fd fca5 	bl	800b134 <_malloc_r>
 800d7ea:	4606      	mov	r6, r0
 800d7ec:	b928      	cbnz	r0, 800d7fa <_calloc_r+0x1e>
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	bd70      	pop	{r4, r5, r6, pc}
 800d7f2:	220c      	movs	r2, #12
 800d7f4:	6002      	str	r2, [r0, #0]
 800d7f6:	2600      	movs	r6, #0
 800d7f8:	e7f9      	b.n	800d7ee <_calloc_r+0x12>
 800d7fa:	462a      	mov	r2, r5
 800d7fc:	4621      	mov	r1, r4
 800d7fe:	f7fe fa92 	bl	800bd26 <memset>
 800d802:	e7f4      	b.n	800d7ee <_calloc_r+0x12>

0800d804 <__ascii_mbtowc>:
 800d804:	b082      	sub	sp, #8
 800d806:	b901      	cbnz	r1, 800d80a <__ascii_mbtowc+0x6>
 800d808:	a901      	add	r1, sp, #4
 800d80a:	b142      	cbz	r2, 800d81e <__ascii_mbtowc+0x1a>
 800d80c:	b14b      	cbz	r3, 800d822 <__ascii_mbtowc+0x1e>
 800d80e:	7813      	ldrb	r3, [r2, #0]
 800d810:	600b      	str	r3, [r1, #0]
 800d812:	7812      	ldrb	r2, [r2, #0]
 800d814:	1e10      	subs	r0, r2, #0
 800d816:	bf18      	it	ne
 800d818:	2001      	movne	r0, #1
 800d81a:	b002      	add	sp, #8
 800d81c:	4770      	bx	lr
 800d81e:	4610      	mov	r0, r2
 800d820:	e7fb      	b.n	800d81a <__ascii_mbtowc+0x16>
 800d822:	f06f 0001 	mvn.w	r0, #1
 800d826:	e7f8      	b.n	800d81a <__ascii_mbtowc+0x16>

0800d828 <__ascii_wctomb>:
 800d828:	4603      	mov	r3, r0
 800d82a:	4608      	mov	r0, r1
 800d82c:	b141      	cbz	r1, 800d840 <__ascii_wctomb+0x18>
 800d82e:	2aff      	cmp	r2, #255	@ 0xff
 800d830:	d904      	bls.n	800d83c <__ascii_wctomb+0x14>
 800d832:	228a      	movs	r2, #138	@ 0x8a
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	f04f 30ff 	mov.w	r0, #4294967295
 800d83a:	4770      	bx	lr
 800d83c:	700a      	strb	r2, [r1, #0]
 800d83e:	2001      	movs	r0, #1
 800d840:	4770      	bx	lr
	...

0800d844 <fiprintf>:
 800d844:	b40e      	push	{r1, r2, r3}
 800d846:	b503      	push	{r0, r1, lr}
 800d848:	4601      	mov	r1, r0
 800d84a:	ab03      	add	r3, sp, #12
 800d84c:	4805      	ldr	r0, [pc, #20]	@ (800d864 <fiprintf+0x20>)
 800d84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d852:	6800      	ldr	r0, [r0, #0]
 800d854:	9301      	str	r3, [sp, #4]
 800d856:	f7ff fd3d 	bl	800d2d4 <_vfiprintf_r>
 800d85a:	b002      	add	sp, #8
 800d85c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d860:	b003      	add	sp, #12
 800d862:	4770      	bx	lr
 800d864:	20000038 	.word	0x20000038

0800d868 <__swhatbuf_r>:
 800d868:	b570      	push	{r4, r5, r6, lr}
 800d86a:	460c      	mov	r4, r1
 800d86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d870:	2900      	cmp	r1, #0
 800d872:	b096      	sub	sp, #88	@ 0x58
 800d874:	4615      	mov	r5, r2
 800d876:	461e      	mov	r6, r3
 800d878:	da0d      	bge.n	800d896 <__swhatbuf_r+0x2e>
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d880:	f04f 0100 	mov.w	r1, #0
 800d884:	bf14      	ite	ne
 800d886:	2340      	movne	r3, #64	@ 0x40
 800d888:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d88c:	2000      	movs	r0, #0
 800d88e:	6031      	str	r1, [r6, #0]
 800d890:	602b      	str	r3, [r5, #0]
 800d892:	b016      	add	sp, #88	@ 0x58
 800d894:	bd70      	pop	{r4, r5, r6, pc}
 800d896:	466a      	mov	r2, sp
 800d898:	f000 f848 	bl	800d92c <_fstat_r>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	dbec      	blt.n	800d87a <__swhatbuf_r+0x12>
 800d8a0:	9901      	ldr	r1, [sp, #4]
 800d8a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d8a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d8aa:	4259      	negs	r1, r3
 800d8ac:	4159      	adcs	r1, r3
 800d8ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8b2:	e7eb      	b.n	800d88c <__swhatbuf_r+0x24>

0800d8b4 <__smakebuf_r>:
 800d8b4:	898b      	ldrh	r3, [r1, #12]
 800d8b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8b8:	079d      	lsls	r5, r3, #30
 800d8ba:	4606      	mov	r6, r0
 800d8bc:	460c      	mov	r4, r1
 800d8be:	d507      	bpl.n	800d8d0 <__smakebuf_r+0x1c>
 800d8c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d8c4:	6023      	str	r3, [r4, #0]
 800d8c6:	6123      	str	r3, [r4, #16]
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	6163      	str	r3, [r4, #20]
 800d8cc:	b003      	add	sp, #12
 800d8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8d0:	ab01      	add	r3, sp, #4
 800d8d2:	466a      	mov	r2, sp
 800d8d4:	f7ff ffc8 	bl	800d868 <__swhatbuf_r>
 800d8d8:	9f00      	ldr	r7, [sp, #0]
 800d8da:	4605      	mov	r5, r0
 800d8dc:	4639      	mov	r1, r7
 800d8de:	4630      	mov	r0, r6
 800d8e0:	f7fd fc28 	bl	800b134 <_malloc_r>
 800d8e4:	b948      	cbnz	r0, 800d8fa <__smakebuf_r+0x46>
 800d8e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ea:	059a      	lsls	r2, r3, #22
 800d8ec:	d4ee      	bmi.n	800d8cc <__smakebuf_r+0x18>
 800d8ee:	f023 0303 	bic.w	r3, r3, #3
 800d8f2:	f043 0302 	orr.w	r3, r3, #2
 800d8f6:	81a3      	strh	r3, [r4, #12]
 800d8f8:	e7e2      	b.n	800d8c0 <__smakebuf_r+0xc>
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	6020      	str	r0, [r4, #0]
 800d8fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d902:	81a3      	strh	r3, [r4, #12]
 800d904:	9b01      	ldr	r3, [sp, #4]
 800d906:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d90a:	b15b      	cbz	r3, 800d924 <__smakebuf_r+0x70>
 800d90c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d910:	4630      	mov	r0, r6
 800d912:	f000 f81d 	bl	800d950 <_isatty_r>
 800d916:	b128      	cbz	r0, 800d924 <__smakebuf_r+0x70>
 800d918:	89a3      	ldrh	r3, [r4, #12]
 800d91a:	f023 0303 	bic.w	r3, r3, #3
 800d91e:	f043 0301 	orr.w	r3, r3, #1
 800d922:	81a3      	strh	r3, [r4, #12]
 800d924:	89a3      	ldrh	r3, [r4, #12]
 800d926:	431d      	orrs	r5, r3
 800d928:	81a5      	strh	r5, [r4, #12]
 800d92a:	e7cf      	b.n	800d8cc <__smakebuf_r+0x18>

0800d92c <_fstat_r>:
 800d92c:	b538      	push	{r3, r4, r5, lr}
 800d92e:	4d07      	ldr	r5, [pc, #28]	@ (800d94c <_fstat_r+0x20>)
 800d930:	2300      	movs	r3, #0
 800d932:	4604      	mov	r4, r0
 800d934:	4608      	mov	r0, r1
 800d936:	4611      	mov	r1, r2
 800d938:	602b      	str	r3, [r5, #0]
 800d93a:	f7f4 fa7f 	bl	8001e3c <_fstat>
 800d93e:	1c43      	adds	r3, r0, #1
 800d940:	d102      	bne.n	800d948 <_fstat_r+0x1c>
 800d942:	682b      	ldr	r3, [r5, #0]
 800d944:	b103      	cbz	r3, 800d948 <_fstat_r+0x1c>
 800d946:	6023      	str	r3, [r4, #0]
 800d948:	bd38      	pop	{r3, r4, r5, pc}
 800d94a:	bf00      	nop
 800d94c:	20000d2c 	.word	0x20000d2c

0800d950 <_isatty_r>:
 800d950:	b538      	push	{r3, r4, r5, lr}
 800d952:	4d06      	ldr	r5, [pc, #24]	@ (800d96c <_isatty_r+0x1c>)
 800d954:	2300      	movs	r3, #0
 800d956:	4604      	mov	r4, r0
 800d958:	4608      	mov	r0, r1
 800d95a:	602b      	str	r3, [r5, #0]
 800d95c:	f7f4 fa7e 	bl	8001e5c <_isatty>
 800d960:	1c43      	adds	r3, r0, #1
 800d962:	d102      	bne.n	800d96a <_isatty_r+0x1a>
 800d964:	682b      	ldr	r3, [r5, #0]
 800d966:	b103      	cbz	r3, 800d96a <_isatty_r+0x1a>
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	bd38      	pop	{r3, r4, r5, pc}
 800d96c:	20000d2c 	.word	0x20000d2c

0800d970 <abort>:
 800d970:	b508      	push	{r3, lr}
 800d972:	2006      	movs	r0, #6
 800d974:	f000 f82c 	bl	800d9d0 <raise>
 800d978:	2001      	movs	r0, #1
 800d97a:	f7f4 fa2b 	bl	8001dd4 <_exit>

0800d97e <_raise_r>:
 800d97e:	291f      	cmp	r1, #31
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	4605      	mov	r5, r0
 800d984:	460c      	mov	r4, r1
 800d986:	d904      	bls.n	800d992 <_raise_r+0x14>
 800d988:	2316      	movs	r3, #22
 800d98a:	6003      	str	r3, [r0, #0]
 800d98c:	f04f 30ff 	mov.w	r0, #4294967295
 800d990:	bd38      	pop	{r3, r4, r5, pc}
 800d992:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d994:	b112      	cbz	r2, 800d99c <_raise_r+0x1e>
 800d996:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d99a:	b94b      	cbnz	r3, 800d9b0 <_raise_r+0x32>
 800d99c:	4628      	mov	r0, r5
 800d99e:	f000 f831 	bl	800da04 <_getpid_r>
 800d9a2:	4622      	mov	r2, r4
 800d9a4:	4601      	mov	r1, r0
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9ac:	f000 b818 	b.w	800d9e0 <_kill_r>
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d00a      	beq.n	800d9ca <_raise_r+0x4c>
 800d9b4:	1c59      	adds	r1, r3, #1
 800d9b6:	d103      	bne.n	800d9c0 <_raise_r+0x42>
 800d9b8:	2316      	movs	r3, #22
 800d9ba:	6003      	str	r3, [r0, #0]
 800d9bc:	2001      	movs	r0, #1
 800d9be:	e7e7      	b.n	800d990 <_raise_r+0x12>
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	4798      	blx	r3
 800d9ca:	2000      	movs	r0, #0
 800d9cc:	e7e0      	b.n	800d990 <_raise_r+0x12>
	...

0800d9d0 <raise>:
 800d9d0:	4b02      	ldr	r3, [pc, #8]	@ (800d9dc <raise+0xc>)
 800d9d2:	4601      	mov	r1, r0
 800d9d4:	6818      	ldr	r0, [r3, #0]
 800d9d6:	f7ff bfd2 	b.w	800d97e <_raise_r>
 800d9da:	bf00      	nop
 800d9dc:	20000038 	.word	0x20000038

0800d9e0 <_kill_r>:
 800d9e0:	b538      	push	{r3, r4, r5, lr}
 800d9e2:	4d07      	ldr	r5, [pc, #28]	@ (800da00 <_kill_r+0x20>)
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	4608      	mov	r0, r1
 800d9ea:	4611      	mov	r1, r2
 800d9ec:	602b      	str	r3, [r5, #0]
 800d9ee:	f7f4 f9e1 	bl	8001db4 <_kill>
 800d9f2:	1c43      	adds	r3, r0, #1
 800d9f4:	d102      	bne.n	800d9fc <_kill_r+0x1c>
 800d9f6:	682b      	ldr	r3, [r5, #0]
 800d9f8:	b103      	cbz	r3, 800d9fc <_kill_r+0x1c>
 800d9fa:	6023      	str	r3, [r4, #0]
 800d9fc:	bd38      	pop	{r3, r4, r5, pc}
 800d9fe:	bf00      	nop
 800da00:	20000d2c 	.word	0x20000d2c

0800da04 <_getpid_r>:
 800da04:	f7f4 b9ce 	b.w	8001da4 <_getpid>

0800da08 <_init>:
 800da08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0a:	bf00      	nop
 800da0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da0e:	bc08      	pop	{r3}
 800da10:	469e      	mov	lr, r3
 800da12:	4770      	bx	lr

0800da14 <_fini>:
 800da14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da16:	bf00      	nop
 800da18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da1a:	bc08      	pop	{r3}
 800da1c:	469e      	mov	lr, r3
 800da1e:	4770      	bx	lr
