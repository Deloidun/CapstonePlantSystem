
CapstonePlantSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e168  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800e2f8  0800e2f8  0000f2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6c4  0800e6c4  000101f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e6c4  0800e6c4  0000f6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6cc  0800e6cc  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6cc  0800e6cc  0000f6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e6d0  0800e6d0  0000f6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e6d4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101f4  2**0
                  CONTENTS
 10 .bss          00000bdc  200001f4  200001f4  000101f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000dd0  20000dd0  000101f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dbad  00000000  00000000  00010224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004569  00000000  00000000  0002ddd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a30  00000000  00000000  00032340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000145d  00000000  00000000  00033d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006eaa  00000000  00000000  000351cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021c12  00000000  00000000  0003c077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8f38  00000000  00000000  0005dc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136bc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ff8  00000000  00000000  00136c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0013ebfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e2e0 	.word	0x0800e2e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800e2e0 	.word	0x0800e2e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f7c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d013      	beq.n	8000fb4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f8c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f94:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00b      	beq.n	8000fb4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f9c:	e000      	b.n	8000fa0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f9e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fa0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f9      	beq.n	8000f9e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000faa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fca:	f001 fa2d 	bl	8002428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f903 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f000 fb99 	bl	8001708 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fd6:	f000 f969 	bl	80012ac <MX_I2C1_Init>
  MX_I2S3_Init();
 8000fda:	f000 f995 	bl	8001308 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8000fde:	f00a f9d9 	bl	800b394 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000fe2:	f000 fb3d 	bl	8001660 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000fe6:	f000 fa4d 	bl	8001484 <MX_TIM3_Init>
  MX_SPI1_Init();
 8000fea:	f000 f9bd 	bl	8001368 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000fee:	f000 f9f1 	bl	80013d4 <MX_TIM1_Init>
  MX_TIM9_Init();
 8000ff2:	f000 fa97 	bl	8001524 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8000ff6:	f000 fb5d 	bl	80016b4 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8000ffa:	f000 fae3 	bl	80015c4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the encoder
  Encoder_Init();
 8000ffe:	f000 fc81 	bl	8001904 <Encoder_Init>
  Motor_PWM_Init();
 8001002:	f000 fc8d 	bl	8001920 <Motor_PWM_Init>
  TMC2209_Init();  // 🛠️ Init TMC2209 driver
 8001006:	f001 f9d1 	bl	80023ac <TMC2209_Init>
  Stepper_Init();
 800100a:	f000 fcd9 	bl	80019c0 <Stepper_Init>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);  // Enable TMC2209
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001014:	4868      	ldr	r0, [pc, #416]	@ (80011b8 <main+0x1f4>)
 8001016:	f001 fd4b 	bl	8002ab0 <HAL_GPIO_WritePin>
  HAL_Delay(100);  // wait for stable power
 800101a:	2064      	movs	r0, #100	@ 0x64
 800101c:	f001 fa76 	bl	800250c <HAL_Delay>




  int32_t encoderCounts = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
  float travelDistance = 0.0;
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800102a:	f00a f9d9 	bl	800b3e0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	if (encoderCounts > 30000){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001034:	4293      	cmp	r3, r2
 8001036:	dd03      	ble.n	8001040 <main+0x7c>
		 __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001038:	4b60      	ldr	r3, [pc, #384]	@ (80011bc <main+0x1f8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	@ 0x24

	  }

	encoderCounts = Encoder_GetPosition();
 8001040:	f000 fd2a 	bl	8001a98 <Encoder_GetPosition>
 8001044:	6078      	str	r0, [r7, #4]
	travelDistance = CalculateTravelDistance(encoderCounts);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 fd32 	bl	8001ab0 <CalculateTravelDistance>
 800104c:	ed87 0a00 	vstr	s0, [r7]

	Stepper_Update();  // always call this
 8001050:	f000 fd04 	bl	8001a5c <Stepper_Update>

	   switch (currentState)
 8001054:	4b5a      	ldr	r3, [pc, #360]	@ (80011c0 <main+0x1fc>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b03      	cmp	r3, #3
 800105a:	f200 80a0 	bhi.w	800119e <main+0x1da>
 800105e:	a201      	add	r2, pc, #4	@ (adr r2, 8001064 <main+0xa0>)
 8001060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001064:	08001075 	.word	0x08001075
 8001068:	080010a7 	.word	0x080010a7
 800106c:	08001109 	.word	0x08001109
 8001070:	08001137 	.word	0x08001137
	   {
		   case STATE_DC_FORWARD:
			   Motor_SetSpeedAndDirection(50, 0); // forward
 8001074:	2100      	movs	r1, #0
 8001076:	2032      	movs	r0, #50	@ 0x32
 8001078:	f000 fc64 	bl	8001944 <Motor_SetSpeedAndDirection>
			   if (travelDistance >= TARGET_DISTANCE_CM)
 800107c:	edd7 7a00 	vldr	s15, [r7]
 8001080:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80011c4 <main+0x200>
 8001084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108c:	da00      	bge.n	8001090 <main+0xcc>
			   {
				   Motor_SetSpeedAndDirection(0, 0);  // stop DC
				   currentState = STATE_STEPPER_DOWN_UP;
				   stepperPhase = STEPPER_IDLE;
			   }
			   break;
 800108e:	e086      	b.n	800119e <main+0x1da>
				   Motor_SetSpeedAndDirection(0, 0);  // stop DC
 8001090:	2100      	movs	r1, #0
 8001092:	2000      	movs	r0, #0
 8001094:	f000 fc56 	bl	8001944 <Motor_SetSpeedAndDirection>
				   currentState = STATE_STEPPER_DOWN_UP;
 8001098:	4b49      	ldr	r3, [pc, #292]	@ (80011c0 <main+0x1fc>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
				   stepperPhase = STEPPER_IDLE;
 800109e:	4b4a      	ldr	r3, [pc, #296]	@ (80011c8 <main+0x204>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
			   break;
 80010a4:	e07b      	b.n	800119e <main+0x1da>

		   case STATE_STEPPER_DOWN_UP:
			   if (stepperPhase == STEPPER_IDLE)
 80010a6:	4b48      	ldr	r3, [pc, #288]	@ (80011c8 <main+0x204>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10a      	bne.n	80010c4 <main+0x100>
			   {
				   Stepper_SetDirection(0);   // down
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 fc9c 	bl	80019ec <Stepper_SetDirection>
				   Stepper_Start(2000);
 80010b4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010b8:	f000 fcb0 	bl	8001a1c <Stepper_Start>
				   stepperPhase = STEPPER_MOVING_DOWN;
 80010bc:	4b42      	ldr	r3, [pc, #264]	@ (80011c8 <main+0x204>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
			   else if (stepperPhase == STEPPER_MOVING_UP && !stepper_running)
			   {
				   stepperPhase = STEPPER_IDLE;
				   currentState = STATE_DC_BACKWARD;
			   }
			   break;
 80010c2:	e069      	b.n	8001198 <main+0x1d4>
			   else if (stepperPhase == STEPPER_MOVING_DOWN && !stepper_running)
 80010c4:	4b40      	ldr	r3, [pc, #256]	@ (80011c8 <main+0x204>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d10e      	bne.n	80010ea <main+0x126>
 80010cc:	4b3f      	ldr	r3, [pc, #252]	@ (80011cc <main+0x208>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10a      	bne.n	80010ea <main+0x126>
				   Stepper_SetDirection(1);   // up
 80010d4:	2001      	movs	r0, #1
 80010d6:	f000 fc89 	bl	80019ec <Stepper_SetDirection>
				   Stepper_Start(2000);
 80010da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010de:	f000 fc9d 	bl	8001a1c <Stepper_Start>
				   stepperPhase = STEPPER_MOVING_UP;
 80010e2:	4b39      	ldr	r3, [pc, #228]	@ (80011c8 <main+0x204>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	701a      	strb	r2, [r3, #0]
			   break;
 80010e8:	e056      	b.n	8001198 <main+0x1d4>
			   else if (stepperPhase == STEPPER_MOVING_UP && !stepper_running)
 80010ea:	4b37      	ldr	r3, [pc, #220]	@ (80011c8 <main+0x204>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d152      	bne.n	8001198 <main+0x1d4>
 80010f2:	4b36      	ldr	r3, [pc, #216]	@ (80011cc <main+0x208>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d14e      	bne.n	8001198 <main+0x1d4>
				   stepperPhase = STEPPER_IDLE;
 80010fa:	4b33      	ldr	r3, [pc, #204]	@ (80011c8 <main+0x204>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
				   currentState = STATE_DC_BACKWARD;
 8001100:	4b2f      	ldr	r3, [pc, #188]	@ (80011c0 <main+0x1fc>)
 8001102:	2202      	movs	r2, #2
 8001104:	701a      	strb	r2, [r3, #0]
			   break;
 8001106:	e047      	b.n	8001198 <main+0x1d4>

		   case STATE_DC_BACKWARD:
			   Motor_SetSpeedAndDirection(50, 1); // backward
 8001108:	2101      	movs	r1, #1
 800110a:	2032      	movs	r0, #50	@ 0x32
 800110c:	f000 fc1a 	bl	8001944 <Motor_SetSpeedAndDirection>
			   if (travelDistance <= 0.0)
 8001110:	edd7 7a00 	vldr	s15, [r7]
 8001114:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111c:	d900      	bls.n	8001120 <main+0x15c>
			   {
				   Motor_SetSpeedAndDirection(0, 0);
				   currentState = STATE_STEPPER_RETURN;
				   stepperPhase = STEPPER_IDLE;
			   }
			   break;
 800111e:	e03e      	b.n	800119e <main+0x1da>
				   Motor_SetSpeedAndDirection(0, 0);
 8001120:	2100      	movs	r1, #0
 8001122:	2000      	movs	r0, #0
 8001124:	f000 fc0e 	bl	8001944 <Motor_SetSpeedAndDirection>
				   currentState = STATE_STEPPER_RETURN;
 8001128:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <main+0x1fc>)
 800112a:	2203      	movs	r2, #3
 800112c:	701a      	strb	r2, [r3, #0]
				   stepperPhase = STEPPER_IDLE;
 800112e:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <main+0x204>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
			   break;
 8001134:	e033      	b.n	800119e <main+0x1da>

		   case STATE_STEPPER_RETURN:
			   if (stepperPhase == STEPPER_IDLE)
 8001136:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <main+0x204>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10a      	bne.n	8001154 <main+0x190>
			   {
				   Stepper_SetDirection(0);   // down
 800113e:	2000      	movs	r0, #0
 8001140:	f000 fc54 	bl	80019ec <Stepper_SetDirection>
				   Stepper_Start(2000);
 8001144:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001148:	f000 fc68 	bl	8001a1c <Stepper_Start>
				   stepperPhase = STEPPER_MOVING_DOWN;
 800114c:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <main+0x204>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
			   else if (stepperPhase == STEPPER_MOVING_UP && !stepper_running)
			   {
				   stepperPhase = STEPPER_IDLE;
				   currentState = STATE_DC_FORWARD;  // Loop again
			   }
			   break;
 8001152:	e023      	b.n	800119c <main+0x1d8>
			   else if (stepperPhase == STEPPER_MOVING_DOWN && !stepper_running)
 8001154:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <main+0x204>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d10e      	bne.n	800117a <main+0x1b6>
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <main+0x208>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10a      	bne.n	800117a <main+0x1b6>
				   Stepper_SetDirection(1);   // up
 8001164:	2001      	movs	r0, #1
 8001166:	f000 fc41 	bl	80019ec <Stepper_SetDirection>
				   Stepper_Start(2000);
 800116a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800116e:	f000 fc55 	bl	8001a1c <Stepper_Start>
				   stepperPhase = STEPPER_MOVING_UP;
 8001172:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <main+0x204>)
 8001174:	2202      	movs	r2, #2
 8001176:	701a      	strb	r2, [r3, #0]
			   break;
 8001178:	e010      	b.n	800119c <main+0x1d8>
			   else if (stepperPhase == STEPPER_MOVING_UP && !stepper_running)
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <main+0x204>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d10c      	bne.n	800119c <main+0x1d8>
 8001182:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <main+0x208>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d108      	bne.n	800119c <main+0x1d8>
				   stepperPhase = STEPPER_IDLE;
 800118a:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <main+0x204>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
				   currentState = STATE_DC_FORWARD;  // Loop again
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <main+0x1fc>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
			   break;
 8001196:	e001      	b.n	800119c <main+0x1d8>
			   break;
 8001198:	bf00      	nop
 800119a:	e000      	b.n	800119e <main+0x1da>
			   break;
 800119c:	bf00      	nop
//	        // Set the motor direction to forward to go back to 400 cm
//	        Motor_SetSpeedAndDirection(50, 0);
//	    }

	//    // Print the travel distance
			printf("Raw Encoder Counts: %ld\r\n", encoderCounts);
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	480b      	ldr	r0, [pc, #44]	@ (80011d0 <main+0x20c>)
 80011a2:	f00b f9d7 	bl	800c554 <iprintf>
			printf("Travel Distance: %.2f cm\r\n", travelDistance);
 80011a6:	6838      	ldr	r0, [r7, #0]
 80011a8:	f7ff f9ce 	bl	8000548 <__aeabi_f2d>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4808      	ldr	r0, [pc, #32]	@ (80011d4 <main+0x210>)
 80011b2:	f00b f9cf 	bl	800c554 <iprintf>
    MX_USB_HOST_Process();
 80011b6:	e738      	b.n	800102a <main+0x66>
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	20000304 	.word	0x20000304
 80011c0:	200004b4 	.word	0x200004b4
 80011c4:	43c80000 	.word	0x43c80000
 80011c8:	200004bd 	.word	0x200004bd
 80011cc:	200004bc 	.word	0x200004bc
 80011d0:	0800e2f8 	.word	0x0800e2f8
 80011d4:	0800e314 	.word	0x0800e314

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	@ 0x50
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2230      	movs	r2, #48	@ 0x30
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00b fa09 	bl	800c5fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <SystemClock_Config+0xcc>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001204:	4a27      	ldr	r2, [pc, #156]	@ (80012a4 <SystemClock_Config+0xcc>)
 8001206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120a:	6413      	str	r3, [r2, #64]	@ 0x40
 800120c:	4b25      	ldr	r3, [pc, #148]	@ (80012a4 <SystemClock_Config+0xcc>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	4b22      	ldr	r3, [pc, #136]	@ (80012a8 <SystemClock_Config+0xd0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a21      	ldr	r2, [pc, #132]	@ (80012a8 <SystemClock_Config+0xd0>)
 8001222:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <SystemClock_Config+0xd0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001234:	2301      	movs	r3, #1
 8001236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001238:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001248:	2308      	movs	r3, #8
 800124a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800124c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001250:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001256:	2307      	movs	r3, #7
 8001258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	4618      	mov	r0, r3
 8001260:	f004 fb58 	bl	8005914 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800126a:	f000 fc7d 	bl	8001b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2302      	movs	r3, #2
 8001274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800127a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800127e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001284:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2105      	movs	r1, #5
 800128c:	4618      	mov	r0, r3
 800128e:	f004 fdb9 	bl	8005e04 <HAL_RCC_ClockConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001298:	f000 fc66 	bl	8001b68 <Error_Handler>
  }
}
 800129c:	bf00      	nop
 800129e:	3750      	adds	r7, #80	@ 0x50
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40007000 	.word	0x40007000

080012ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012b2:	4a13      	ldr	r2, [pc, #76]	@ (8001300 <MX_I2C1_Init+0x54>)
 80012b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012b8:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <MX_I2C1_Init+0x58>)
 80012ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012dc:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e2:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	@ (80012fc <MX_I2C1_Init+0x50>)
 80012ea:	f003 fd2f 	bl	8004d4c <HAL_I2C_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f4:	f000 fc38 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000210 	.word	0x20000210
 8001300:	40005400 	.word	0x40005400
 8001304:	000186a0 	.word	0x000186a0

08001308 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800130c:	4b13      	ldr	r3, [pc, #76]	@ (800135c <MX_I2S3_Init+0x54>)
 800130e:	4a14      	ldr	r2, [pc, #80]	@ (8001360 <MX_I2S3_Init+0x58>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_I2S3_Init+0x54>)
 8001314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001318:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800131a:	4b10      	ldr	r3, [pc, #64]	@ (800135c <MX_I2S3_Init+0x54>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001320:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_I2S3_Init+0x54>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001326:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <MX_I2S3_Init+0x54>)
 8001328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800132c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <MX_I2S3_Init+0x54>)
 8001330:	4a0c      	ldr	r2, [pc, #48]	@ (8001364 <MX_I2S3_Init+0x5c>)
 8001332:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001334:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_I2S3_Init+0x54>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <MX_I2S3_Init+0x54>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_I2S3_Init+0x54>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_I2S3_Init+0x54>)
 8001348:	f003 fe44 	bl	8004fd4 <HAL_I2S_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001352:	f000 fc09 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000264 	.word	0x20000264
 8001360:	40003c00 	.word	0x40003c00
 8001364:	00017700 	.word	0x00017700

08001368 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800136c:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_SPI1_Init+0x64>)
 800136e:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <MX_SPI1_Init+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <MX_SPI1_Init+0x64>)
 8001374:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001378:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_SPI1_Init+0x64>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_SPI1_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_SPI1_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_SPI1_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_SPI1_Init+0x64>)
 8001394:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001398:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_SPI1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <MX_SPI1_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_SPI1_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <MX_SPI1_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_SPI1_Init+0x64>)
 80013b4:	220a      	movs	r2, #10
 80013b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_SPI1_Init+0x64>)
 80013ba:	f005 f885 	bl	80064c8 <HAL_SPI_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013c4:	f000 fbd0 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200002ac 	.word	0x200002ac
 80013d0:	40013000 	.word	0x40013000

080013d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2224      	movs	r2, #36	@ 0x24
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00b f90b 	bl	800c5fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f0:	4b22      	ldr	r3, [pc, #136]	@ (800147c <MX_TIM1_Init+0xa8>)
 80013f2:	4a23      	ldr	r2, [pc, #140]	@ (8001480 <MX_TIM1_Init+0xac>)
 80013f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013f6:	4b21      	ldr	r3, [pc, #132]	@ (800147c <MX_TIM1_Init+0xa8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <MX_TIM1_Init+0xa8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001402:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <MX_TIM1_Init+0xa8>)
 8001404:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001408:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140a:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <MX_TIM1_Init+0xa8>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001410:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <MX_TIM1_Init+0xa8>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001416:	4b19      	ldr	r3, [pc, #100]	@ (800147c <MX_TIM1_Init+0xa8>)
 8001418:	2280      	movs	r2, #128	@ 0x80
 800141a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800141c:	2303      	movs	r3, #3
 800141e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001424:	2301      	movs	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800142c:	230a      	movs	r3, #10
 800142e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001434:	2301      	movs	r3, #1
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800143c:	230a      	movs	r3, #10
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	4619      	mov	r1, r3
 8001446:	480d      	ldr	r0, [pc, #52]	@ (800147c <MX_TIM1_Init+0xa8>)
 8001448:	f005 fb06 	bl	8006a58 <HAL_TIM_Encoder_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001452:	f000 fb89 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	@ (800147c <MX_TIM1_Init+0xa8>)
 8001464:	f006 f8bc 	bl	80075e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800146e:	f000 fb7b 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3730      	adds	r7, #48	@ 0x30
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000304 	.word	0x20000304
 8001480:	40010000 	.word	0x40010000

08001484 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <MX_TIM3_Init+0x98>)
 80014a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001520 <MX_TIM3_Init+0x9c>)
 80014a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014a8:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <MX_TIM3_Init+0x98>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <MX_TIM3_Init+0x98>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014b4:	4b19      	ldr	r3, [pc, #100]	@ (800151c <MX_TIM3_Init+0x98>)
 80014b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014bc:	4b17      	ldr	r3, [pc, #92]	@ (800151c <MX_TIM3_Init+0x98>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <MX_TIM3_Init+0x98>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014c8:	4814      	ldr	r0, [pc, #80]	@ (800151c <MX_TIM3_Init+0x98>)
 80014ca:	f005 f886 	bl	80065da <HAL_TIM_Base_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014d4:	f000 fb48 	bl	8001b68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80014d8:	2307      	movs	r3, #7
 80014da:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	4619      	mov	r1, r3
 80014e6:	480d      	ldr	r0, [pc, #52]	@ (800151c <MX_TIM3_Init+0x98>)
 80014e8:	f005 fcac 	bl	8006e44 <HAL_TIM_SlaveConfigSynchro>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80014f2:	f000 fb39 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	@ (800151c <MX_TIM3_Init+0x98>)
 8001504:	f006 f86c 	bl	80075e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800150e:	f000 fb2b 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000034c 	.word	0x2000034c
 8001520:	40000400 	.word	0x40000400

08001524 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800153c:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <MX_TIM9_Init+0x98>)
 800153e:	4a20      	ldr	r2, [pc, #128]	@ (80015c0 <MX_TIM9_Init+0x9c>)
 8001540:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001542:	4b1e      	ldr	r3, [pc, #120]	@ (80015bc <MX_TIM9_Init+0x98>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <MX_TIM9_Init+0x98>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <MX_TIM9_Init+0x98>)
 8001550:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001554:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <MX_TIM9_Init+0x98>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_TIM9_Init+0x98>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001562:	4816      	ldr	r0, [pc, #88]	@ (80015bc <MX_TIM9_Init+0x98>)
 8001564:	f005 f8f0 	bl	8006748 <HAL_TIM_PWM_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800156e:	f000 fafb 	bl	8001b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001572:	2360      	movs	r3, #96	@ 0x60
 8001574:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <MX_TIM9_Init+0x98>)
 800158a:	f005 fb99 	bl	8006cc0 <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001594:	f000 fae8 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2204      	movs	r2, #4
 800159c:	4619      	mov	r1, r3
 800159e:	4807      	ldr	r0, [pc, #28]	@ (80015bc <MX_TIM9_Init+0x98>)
 80015a0:	f005 fb8e 	bl	8006cc0 <HAL_TIM_PWM_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80015aa:	f000 fadd 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80015ae:	4803      	ldr	r0, [pc, #12]	@ (80015bc <MX_TIM9_Init+0x98>)
 80015b0:	f000 fcba 	bl	8001f28 <HAL_TIM_MspPostInit>

}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000394 	.word	0x20000394
 80015c0:	40014000 	.word	0x40014000

080015c4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <MX_TIM10_Init+0x94>)
 80015de:	4a1f      	ldr	r2, [pc, #124]	@ (800165c <MX_TIM10_Init+0x98>)
 80015e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <MX_TIM10_Init+0x94>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <MX_TIM10_Init+0x94>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <MX_TIM10_Init+0x94>)
 80015f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015f4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <MX_TIM10_Init+0x94>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fc:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <MX_TIM10_Init+0x94>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001602:	4815      	ldr	r0, [pc, #84]	@ (8001658 <MX_TIM10_Init+0x94>)
 8001604:	f004 ffe9 	bl	80065da <HAL_TIM_Base_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800160e:	f000 faab 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001612:	4811      	ldr	r0, [pc, #68]	@ (8001658 <MX_TIM10_Init+0x94>)
 8001614:	f005 f898 	bl	8006748 <HAL_TIM_PWM_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800161e:	f000 faa3 	bl	8001b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001622:	2360      	movs	r3, #96	@ 0x60
 8001624:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	4619      	mov	r1, r3
 8001638:	4807      	ldr	r0, [pc, #28]	@ (8001658 <MX_TIM10_Init+0x94>)
 800163a:	f005 fb41 	bl	8006cc0 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001644:	f000 fa90 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001648:	4803      	ldr	r0, [pc, #12]	@ (8001658 <MX_TIM10_Init+0x94>)
 800164a:	f000 fc6d 	bl	8001f28 <HAL_TIM_MspPostInit>

}
 800164e:	bf00      	nop
 8001650:	3720      	adds	r7, #32
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200003dc 	.word	0x200003dc
 800165c:	40014400 	.word	0x40014400

08001660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <MX_USART2_UART_Init+0x4c>)
 8001666:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <MX_USART2_UART_Init+0x50>)
 8001668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <MX_USART2_UART_Init+0x4c>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <MX_USART2_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <MX_USART2_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <MX_USART2_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <MX_USART2_UART_Init+0x4c>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <MX_USART2_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <MX_USART2_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	@ (80016ac <MX_USART2_UART_Init+0x4c>)
 8001698:	f006 f81e 	bl	80076d8 <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016a2:	f000 fa61 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000424 	.word	0x20000424
 80016b0:	40004400 	.word	0x40004400

080016b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <MX_USART3_UART_Init+0x4c>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <MX_USART3_UART_Init+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <MX_USART3_UART_Init+0x4c>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <MX_USART3_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <MX_USART3_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <MX_USART3_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <MX_USART3_UART_Init+0x4c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <MX_USART3_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <MX_USART3_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_USART3_UART_Init+0x4c>)
 80016ec:	f006 f844 	bl	8007778 <HAL_HalfDuplex_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016f6:	f000 fa37 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000046c 	.word	0x2000046c
 8001704:	40004800 	.word	0x40004800

08001708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	@ 0x30
 800170c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
 8001722:	4b72      	ldr	r3, [pc, #456]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a71      	ldr	r2, [pc, #452]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 8001728:	f043 0310 	orr.w	r3, r3, #16
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b6f      	ldr	r3, [pc, #444]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	4b6b      	ldr	r3, [pc, #428]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a6a      	ldr	r2, [pc, #424]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b68      	ldr	r3, [pc, #416]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b64      	ldr	r3, [pc, #400]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a63      	ldr	r2, [pc, #396]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b61      	ldr	r3, [pc, #388]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b5d      	ldr	r3, [pc, #372]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a5c      	ldr	r2, [pc, #368]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b5a      	ldr	r3, [pc, #360]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b56      	ldr	r3, [pc, #344]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a55      	ldr	r2, [pc, #340]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b53      	ldr	r3, [pc, #332]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b4f      	ldr	r3, [pc, #316]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a4e      	ldr	r2, [pc, #312]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b4c      	ldr	r3, [pc, #304]	@ (80018ec <MX_GPIO_Init+0x1e4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2108      	movs	r1, #8
 80017ca:	4849      	ldr	r0, [pc, #292]	@ (80018f0 <MX_GPIO_Init+0x1e8>)
 80017cc:	f001 f970 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2101      	movs	r1, #1
 80017d4:	4847      	ldr	r0, [pc, #284]	@ (80018f4 <MX_GPIO_Init+0x1ec>)
 80017d6:	f001 f96b 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|LD5_Pin|LD6_Pin
 80017da:	2200      	movs	r2, #0
 80017dc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80017e0:	4845      	ldr	r0, [pc, #276]	@ (80018f8 <MX_GPIO_Init+0x1f0>)
 80017e2:	f001 f965 	bl	8002ab0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80017e6:	2308      	movs	r3, #8
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4619      	mov	r1, r3
 80017fc:	483c      	ldr	r0, [pc, #240]	@ (80018f0 <MX_GPIO_Init+0x1e8>)
 80017fe:	f000 ffbb 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001802:	2301      	movs	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	4836      	ldr	r0, [pc, #216]	@ (80018f4 <MX_GPIO_Init+0x1ec>)
 800181a:	f000 ffad 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800181e:	2308      	movs	r3, #8
 8001820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800182e:	2305      	movs	r3, #5
 8001830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	482e      	ldr	r0, [pc, #184]	@ (80018f4 <MX_GPIO_Init+0x1ec>)
 800183a:	f000 ff9d 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800183e:	2301      	movs	r3, #1
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001842:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	482a      	ldr	r0, [pc, #168]	@ (80018fc <MX_GPIO_Init+0x1f4>)
 8001854:	f000 ff90 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB13 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_13;
 8001858:	f242 0304 	movw	r3, #8196	@ 0x2004
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	4824      	ldr	r0, [pc, #144]	@ (8001900 <MX_GPIO_Init+0x1f8>)
 800186e:	f000 ff83 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001884:	2305      	movs	r3, #5
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4619      	mov	r1, r3
 800188e:	481c      	ldr	r0, [pc, #112]	@ (8001900 <MX_GPIO_Init+0x1f8>)
 8001890:	f000 ff72 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|LD5_Pin|LD6_Pin
 8001894:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001898:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	4812      	ldr	r0, [pc, #72]	@ (80018f8 <MX_GPIO_Init+0x1f0>)
 80018ae:	f000 ff63 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018b2:	2320      	movs	r3, #32
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <MX_GPIO_Init+0x1f0>)
 80018c6:	f000 ff57 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018ce:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4804      	ldr	r0, [pc, #16]	@ (80018f0 <MX_GPIO_Init+0x1e8>)
 80018e0:	f000 ff4a 	bl	8002778 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018e4:	bf00      	nop
 80018e6:	3730      	adds	r7, #48	@ 0x30
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020400 	.word	0x40020400

08001904 <Encoder_Init>:

/* USER CODE BEGIN 4 */
void Encoder_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
    // Start Timer 1 in encoder mode
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001908:	213c      	movs	r1, #60	@ 0x3c
 800190a:	4804      	ldr	r0, [pc, #16]	@ (800191c <Encoder_Init+0x18>)
 800190c:	f005 f94a 	bl	8006ba4 <HAL_TIM_Encoder_Start>
    // Reset the counter to zero
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001910:	4b02      	ldr	r3, [pc, #8]	@ (800191c <Encoder_Init+0x18>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2200      	movs	r2, #0
 8001916:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000304 	.word	0x20000304

08001920 <Motor_PWM_Init>:
// Function to initialize PWM
void Motor_PWM_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim9);
 8001924:	4806      	ldr	r0, [pc, #24]	@ (8001940 <Motor_PWM_Init+0x20>)
 8001926:	f004 fea7 	bl	8006678 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1); // Start PWM on TIM2 Channel 1
 800192a:	2100      	movs	r1, #0
 800192c:	4804      	ldr	r0, [pc, #16]	@ (8001940 <Motor_PWM_Init+0x20>)
 800192e:	f004 ff5b 	bl	80067e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2); // Start PWM for RPWM
 8001932:	2104      	movs	r1, #4
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <Motor_PWM_Init+0x20>)
 8001936:	f004 ff57 	bl	80067e8 <HAL_TIM_PWM_Start>
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000394 	.word	0x20000394

08001944 <Motor_SetSpeedAndDirection>:
// Function to set motor speed (0-100%)


// Function to set motor direction
void Motor_SetSpeedAndDirection(uint8_t speed, uint8_t direction)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	71bb      	strb	r3, [r7, #6]
    if (speed > 100) speed = 100; // Limit speed to 100%
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	2b64      	cmp	r3, #100	@ 0x64
 8001958:	d901      	bls.n	800195e <Motor_SetSpeedAndDirection+0x1a>
 800195a:	2364      	movs	r3, #100	@ 0x64
 800195c:	71fb      	strb	r3, [r7, #7]

    if (direction == 0) // Forward
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d111      	bne.n	8001988 <Motor_SetSpeedAndDirection+0x44>
    {
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, speed * (htim9.Init.Period + 1) / 100); // LPWM
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	4a14      	ldr	r2, [pc, #80]	@ (80019b8 <Motor_SetSpeedAndDirection+0x74>)
 8001968:	68d2      	ldr	r2, [r2, #12]
 800196a:	3201      	adds	r2, #1
 800196c:	fb03 f202 	mul.w	r2, r3, r2
 8001970:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <Motor_SetSpeedAndDirection+0x74>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4911      	ldr	r1, [pc, #68]	@ (80019bc <Motor_SetSpeedAndDirection+0x78>)
 8001976:	fba1 1202 	umull	r1, r2, r1, r2
 800197a:	0952      	lsrs	r2, r2, #5
 800197c:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0); // RPWM
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <Motor_SetSpeedAndDirection+0x74>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	639a      	str	r2, [r3, #56]	@ 0x38
    else // Reverse
    {
    	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0); // LPWM
    	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, speed * (htim9.Init.Period + 1) / 100); // RPWM
    }
}
 8001986:	e010      	b.n	80019aa <Motor_SetSpeedAndDirection+0x66>
    	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0); // LPWM
 8001988:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <Motor_SetSpeedAndDirection+0x74>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2200      	movs	r2, #0
 800198e:	635a      	str	r2, [r3, #52]	@ 0x34
    	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, speed * (htim9.Init.Period + 1) / 100); // RPWM
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <Motor_SetSpeedAndDirection+0x74>)
 8001994:	68d2      	ldr	r2, [r2, #12]
 8001996:	3201      	adds	r2, #1
 8001998:	fb03 f202 	mul.w	r2, r3, r2
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <Motor_SetSpeedAndDirection+0x74>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4906      	ldr	r1, [pc, #24]	@ (80019bc <Motor_SetSpeedAndDirection+0x78>)
 80019a2:	fba1 1202 	umull	r1, r2, r1, r2
 80019a6:	0952      	lsrs	r2, r2, #5
 80019a8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000394 	.word	0x20000394
 80019bc:	51eb851f 	.word	0x51eb851f

080019c0 <Stepper_Init>:


void Stepper_Init() {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
    // Set DIR pin (PD13) as output in CubeMX or here manually
    HAL_TIM_Base_Start(&htim10);
 80019c4:	4807      	ldr	r0, [pc, #28]	@ (80019e4 <Stepper_Init+0x24>)
 80019c6:	f004 fe57 	bl	8006678 <HAL_TIM_Base_Start>
    // Start PWM for STEP generation
    HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80019ca:	2100      	movs	r1, #0
 80019cc:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <Stepper_Init+0x24>)
 80019ce:	f004 ff0b 	bl	80067e8 <HAL_TIM_PWM_Start>
    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);  // Default direction
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019d8:	4803      	ldr	r0, [pc, #12]	@ (80019e8 <Stepper_Init+0x28>)
 80019da:	f001 f869 	bl	8002ab0 <HAL_GPIO_WritePin>
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200003dc 	.word	0x200003dc
 80019e8:	40020c00 	.word	0x40020c00

080019ec <Stepper_SetDirection>:
void Stepper_SetDirection(uint8_t dir) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf14      	ite	ne
 80019fc:	2301      	movne	r3, #1
 80019fe:	2300      	moveq	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a08:	4803      	ldr	r0, [pc, #12]	@ (8001a18 <Stepper_SetDirection+0x2c>)
 8001a0a:	f001 f851 	bl	8002ab0 <HAL_GPIO_WritePin>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40020c00 	.word	0x40020c00

08001a1c <Stepper_Start>:



void Stepper_Start(uint32_t duration_ms)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 500);
 8001a24:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <Stepper_Start+0x34>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a2c:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4807      	ldr	r0, [pc, #28]	@ (8001a50 <Stepper_Start+0x34>)
 8001a32:	f004 fed9 	bl	80067e8 <HAL_TIM_PWM_Start>

    stepper_start_time = HAL_GetTick();
 8001a36:	f000 fd5d 	bl	80024f4 <HAL_GetTick>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <Stepper_Start+0x38>)
 8001a3e:	6013      	str	r3, [r2, #0]
    stepper_running = 1;
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <Stepper_Start+0x3c>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200003dc 	.word	0x200003dc
 8001a54:	200004b8 	.word	0x200004b8
 8001a58:	200004bc 	.word	0x200004bc

08001a5c <Stepper_Update>:

void Stepper_Update()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
    if (stepper_running)
 8001a60:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <Stepper_Update+0x30>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00f      	beq.n	8001a88 <Stepper_Update+0x2c>
    {
        if (HAL_GetTick() - stepper_start_time >= 2000)
 8001a68:	f000 fd44 	bl	80024f4 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <Stepper_Update+0x34>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001a78:	d306      	bcc.n	8001a88 <Stepper_Update+0x2c>
        {
            HAL_TIM_PWM_Stop(&htim10, TIM_CHANNEL_1);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <Stepper_Update+0x38>)
 8001a7e:	f004 ff7b 	bl	8006978 <HAL_TIM_PWM_Stop>
            stepper_running = 0;
 8001a82:	4b02      	ldr	r3, [pc, #8]	@ (8001a8c <Stepper_Update+0x30>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200004bc 	.word	0x200004bc
 8001a90:	200004b8 	.word	0x200004b8
 8001a94:	200003dc 	.word	0x200003dc

08001a98 <Encoder_GetPosition>:
//    uint32_t steps = (uint32_t)(mm * STEPS_PER_MM);
//    Stepper_MoveSteps(steps);
//}

int32_t Encoder_GetPosition(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim1);
 8001a9c:	4b03      	ldr	r3, [pc, #12]	@ (8001aac <Encoder_GetPosition+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	20000304 	.word	0x20000304

08001ab0 <CalculateTravelDistance>:
void Encoder_ResetPosition(void)
{

}
float CalculateTravelDistance(int32_t encoderCounts)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
    // Calculate the wheel circumference
    float wheelCircumference = 2 * M_PI * WHEEL_RADIUS_CM;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <CalculateTravelDistance+0x78>)
 8001aba:	617b      	str	r3, [r7, #20]

    // Calculate the number of wheel revolutions
    float wheelRevolutions = (float)encoderCounts / ENCODER_PULSES_PER_REVOLUTION / GEAR_RATIO;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac6:	ee17 0a90 	vmov	r0, s15
 8001aca:	f7fe fd3d 	bl	8000548 <__aeabi_f2d>
 8001ace:	a314      	add	r3, pc, #80	@ (adr r3, 8001b20 <CalculateTravelDistance+0x70>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f7fe feba 	bl	800084c <__aeabi_ddiv>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <CalculateTravelDistance+0x7c>)
 8001ae6:	f7fe feb1 	bl	800084c <__aeabi_ddiv>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7ff f859 	bl	8000ba8 <__aeabi_d2f>
 8001af6:	4603      	mov	r3, r0
 8001af8:	613b      	str	r3, [r7, #16]

    // Calculate the travel distance
    float travelDistance = wheelRevolutions * wheelCircumference;
 8001afa:	ed97 7a04 	vldr	s14, [r7, #16]
 8001afe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b06:	edc7 7a03 	vstr	s15, [r7, #12]

    return travelDistance; // Distance in cm
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	ee07 3a90 	vmov	s15, r3
}
 8001b10:	eeb0 0a67 	vmov.f32	s0, s15
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	f3af 8000 	nop.w
 8001b20:	00000000 	.word	0x00000000
 8001b24:	4074a000 	.word	0x4074a000
 8001b28:	433c7edd 	.word	0x433c7edd
 8001b2c:	403e0000 	.word	0x403e0000

08001b30 <_write>:
int _write(int file, char *ptr, int len)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e009      	b.n	8001b56 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	60ba      	str	r2, [r7, #8]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fa12 	bl	8000f74 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	dbf1      	blt.n	8001b42 <_write+0x12>
  }
  return len;
 8001b5e:	687b      	ldr	r3, [r7, #4]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <Error_Handler+0x8>

08001b74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b82:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bb2:	2007      	movs	r0, #7
 8001bb4:	f000 fd9e 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	@ 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a19      	ldr	r2, [pc, #100]	@ (8001c48 <HAL_I2C_MspInit+0x84>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d12c      	bne.n	8001c40 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <HAL_I2C_MspInit+0x88>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <HAL_I2C_MspInit+0x88>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <HAL_I2C_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c02:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c08:	2312      	movs	r3, #18
 8001c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c14:	2304      	movs	r3, #4
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480c      	ldr	r0, [pc, #48]	@ (8001c50 <HAL_I2C_MspInit+0x8c>)
 8001c20:	f000 fdaa 	bl	8002778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <HAL_I2C_MspInit+0x88>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	4a07      	ldr	r2, [pc, #28]	@ (8001c4c <HAL_I2C_MspInit+0x88>)
 8001c2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c34:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_I2C_MspInit+0x88>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	@ 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40005400 	.word	0x40005400
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020400 	.word	0x40020400

08001c54 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08e      	sub	sp, #56	@ 0x38
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a31      	ldr	r2, [pc, #196]	@ (8001d44 <HAL_I2S_MspInit+0xf0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d15a      	bne.n	8001d3a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c84:	2301      	movs	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001c88:	23c0      	movs	r3, #192	@ 0xc0
 8001c8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	4618      	mov	r0, r3
 8001c96:	f004 fad5 	bl	8006244 <HAL_RCCEx_PeriphCLKConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001ca0:	f7ff ff62 	bl	8001b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	4b27      	ldr	r3, [pc, #156]	@ (8001d48 <HAL_I2S_MspInit+0xf4>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	4a26      	ldr	r2, [pc, #152]	@ (8001d48 <HAL_I2S_MspInit+0xf4>)
 8001cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb4:	4b24      	ldr	r3, [pc, #144]	@ (8001d48 <HAL_I2S_MspInit+0xf4>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	4b20      	ldr	r3, [pc, #128]	@ (8001d48 <HAL_I2S_MspInit+0xf4>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d48 <HAL_I2S_MspInit+0xf4>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <HAL_I2S_MspInit+0xf4>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <HAL_I2S_MspInit+0xf4>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce4:	4a18      	ldr	r2, [pc, #96]	@ (8001d48 <HAL_I2S_MspInit+0xf4>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cec:	4b16      	ldr	r3, [pc, #88]	@ (8001d48 <HAL_I2S_MspInit+0xf4>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001cf8:	2310      	movs	r3, #16
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d08:	2306      	movs	r3, #6
 8001d0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d10:	4619      	mov	r1, r3
 8001d12:	480e      	ldr	r0, [pc, #56]	@ (8001d4c <HAL_I2S_MspInit+0xf8>)
 8001d14:	f000 fd30 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d18:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d2a:	2306      	movs	r3, #6
 8001d2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d32:	4619      	mov	r1, r3
 8001d34:	4806      	ldr	r0, [pc, #24]	@ (8001d50 <HAL_I2S_MspInit+0xfc>)
 8001d36:	f000 fd1f 	bl	8002778 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3738      	adds	r7, #56	@ 0x38
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40003c00 	.word	0x40003c00
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020800 	.word	0x40020800

08001d54 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <HAL_SPI_MspInit+0x84>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d12b      	bne.n	8001dce <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	4a17      	ldr	r2, [pc, #92]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a10      	ldr	r2, [pc, #64]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001dae:	23e0      	movs	r3, #224	@ 0xe0
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <HAL_SPI_MspInit+0x8c>)
 8001dca:	f000 fcd5 	bl	8002778 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	@ 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40013000 	.word	0x40013000
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020000 	.word	0x40020000

08001de4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	@ 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	@ (8001e68 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d12c      	bne.n	8001e60 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0x88>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	4a17      	ldr	r2, [pc, #92]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0x88>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0x88>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0x88>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a10      	ldr	r2, [pc, #64]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0x88>)
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0x88>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001e3e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e50:	2301      	movs	r3, #1
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e5c:	f000 fc8c 	bl	8002778 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	@ 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a15      	ldr	r2, [pc, #84]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x64>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d10e      	bne.n	8001ea4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <HAL_TIM_Base_MspInit+0x68>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a13      	ldr	r2, [pc, #76]	@ (8001edc <HAL_TIM_Base_MspInit+0x68>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <HAL_TIM_Base_MspInit+0x68>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM10_MspInit 1 */

    /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001ea2:	e012      	b.n	8001eca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x6c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d10d      	bne.n	8001eca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <HAL_TIM_Base_MspInit+0x68>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	4a09      	ldr	r2, [pc, #36]	@ (8001edc <HAL_TIM_Base_MspInit+0x68>)
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ebe:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <HAL_TIM_Base_MspInit+0x68>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40014400 	.word	0x40014400

08001ee4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8001f20 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d10d      	bne.n	8001f12 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM9_MspInit 0 */

    /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x40>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	4a09      	ldr	r2, [pc, #36]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x40>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f06:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <HAL_TIM_PWM_MspInit+0x40>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM9_MspInit 1 */

  }

}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40014000 	.word	0x40014000
 8001f24:	40023800 	.word	0x40023800

08001f28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	@ 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a24      	ldr	r2, [pc, #144]	@ (8001fd8 <HAL_TIM_MspPostInit+0xb0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d11e      	bne.n	8001f88 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM9_MspPostInit 0 */

    /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	4b23      	ldr	r3, [pc, #140]	@ (8001fdc <HAL_TIM_MspPostInit+0xb4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a22      	ldr	r2, [pc, #136]	@ (8001fdc <HAL_TIM_MspPostInit+0xb4>)
 8001f54:	f043 0310 	orr.w	r3, r3, #16
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b20      	ldr	r3, [pc, #128]	@ (8001fdc <HAL_TIM_MspPostInit+0xb4>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001f66:	2360      	movs	r3, #96	@ 0x60
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001f76:	2303      	movs	r3, #3
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4817      	ldr	r0, [pc, #92]	@ (8001fe0 <HAL_TIM_MspPostInit+0xb8>)
 8001f82:	f000 fbf9 	bl	8002778 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM10_MspPostInit 1 */

    /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001f86:	e023      	b.n	8001fd0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a15      	ldr	r2, [pc, #84]	@ (8001fe4 <HAL_TIM_MspPostInit+0xbc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d11e      	bne.n	8001fd0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_TIM_MspPostInit+0xb4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a10      	ldr	r2, [pc, #64]	@ (8001fdc <HAL_TIM_MspPostInit+0xb4>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <HAL_TIM_MspPostInit+0xb4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4807      	ldr	r0, [pc, #28]	@ (8001fe8 <HAL_TIM_MspPostInit+0xc0>)
 8001fcc:	f000 fbd4 	bl	8002778 <HAL_GPIO_Init>
}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	@ 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40014000 	.word	0x40014000
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40014400 	.word	0x40014400
 8001fe8:	40020400 	.word	0x40020400

08001fec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08c      	sub	sp, #48	@ 0x30
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a32      	ldr	r2, [pc, #200]	@ (80020d4 <HAL_UART_MspInit+0xe8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12c      	bne.n	8002068 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <HAL_UART_MspInit+0xec>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	4a30      	ldr	r2, [pc, #192]	@ (80020d8 <HAL_UART_MspInit+0xec>)
 8002018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800201c:	6413      	str	r3, [r2, #64]	@ 0x40
 800201e:	4b2e      	ldr	r3, [pc, #184]	@ (80020d8 <HAL_UART_MspInit+0xec>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	4b2a      	ldr	r3, [pc, #168]	@ (80020d8 <HAL_UART_MspInit+0xec>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	4a29      	ldr	r2, [pc, #164]	@ (80020d8 <HAL_UART_MspInit+0xec>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	@ 0x30
 800203a:	4b27      	ldr	r3, [pc, #156]	@ (80020d8 <HAL_UART_MspInit+0xec>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002046:	230c      	movs	r3, #12
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002056:	2307      	movs	r3, #7
 8002058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	481e      	ldr	r0, [pc, #120]	@ (80020dc <HAL_UART_MspInit+0xf0>)
 8002062:	f000 fb89 	bl	8002778 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002066:	e031      	b.n	80020cc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1c      	ldr	r2, [pc, #112]	@ (80020e0 <HAL_UART_MspInit+0xf4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d12c      	bne.n	80020cc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <HAL_UART_MspInit+0xec>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	4a17      	ldr	r2, [pc, #92]	@ (80020d8 <HAL_UART_MspInit+0xec>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002080:	6413      	str	r3, [r2, #64]	@ 0x40
 8002082:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <HAL_UART_MspInit+0xec>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <HAL_UART_MspInit+0xec>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4a10      	ldr	r2, [pc, #64]	@ (80020d8 <HAL_UART_MspInit+0xec>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	6313      	str	r3, [r2, #48]	@ 0x30
 800209e:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <HAL_UART_MspInit+0xec>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b0:	2312      	movs	r3, #18
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020bc:	2307      	movs	r3, #7
 80020be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4807      	ldr	r0, [pc, #28]	@ (80020e4 <HAL_UART_MspInit+0xf8>)
 80020c8:	f000 fb56 	bl	8002778 <HAL_GPIO_Init>
}
 80020cc:	bf00      	nop
 80020ce:	3730      	adds	r7, #48	@ 0x30
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40004400 	.word	0x40004400
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40004800 	.word	0x40004800
 80020e4:	40020c00 	.word	0x40020c00

080020e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <NMI_Handler+0x4>

080020f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <HardFault_Handler+0x4>

080020f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <MemManage_Handler+0x4>

08002100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <UsageFault_Handler+0x4>

08002110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800213e:	f000 f9c5 	bl	80024cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800214c:	4802      	ldr	r0, [pc, #8]	@ (8002158 <OTG_FS_IRQHandler+0x10>)
 800214e:	f000 ffa9 	bl	80030a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200008a4 	.word	0x200008a4

0800215c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return 1;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_kill>:

int _kill(int pid, int sig)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002176:	f00a faa5 	bl	800c6c4 <__errno>
 800217a:	4603      	mov	r3, r0
 800217c:	2216      	movs	r2, #22
 800217e:	601a      	str	r2, [r3, #0]
  return -1;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_exit>:

void _exit (int status)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002194:	f04f 31ff 	mov.w	r1, #4294967295
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ffe7 	bl	800216c <_kill>
  while (1) {}    /* Make sure we hang here */
 800219e:	bf00      	nop
 80021a0:	e7fd      	b.n	800219e <_exit+0x12>

080021a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e00a      	b.n	80021ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021b4:	f3af 8000 	nop.w
 80021b8:	4601      	mov	r1, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	60ba      	str	r2, [r7, #8]
 80021c0:	b2ca      	uxtb	r2, r1
 80021c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	dbf0      	blt.n	80021b4 <_read+0x12>
  }

  return len;
 80021d2:	687b      	ldr	r3, [r7, #4]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <_close>:
  }
  return len;
}

int _close(int file)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002204:	605a      	str	r2, [r3, #4]
  return 0;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <_isatty>:

int _isatty(int file)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800221c:	2301      	movs	r3, #1
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800224c:	4a14      	ldr	r2, [pc, #80]	@ (80022a0 <_sbrk+0x5c>)
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <_sbrk+0x60>)
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002258:	4b13      	ldr	r3, [pc, #76]	@ (80022a8 <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002260:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <_sbrk+0x64>)
 8002262:	4a12      	ldr	r2, [pc, #72]	@ (80022ac <_sbrk+0x68>)
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	429a      	cmp	r2, r3
 8002272:	d207      	bcs.n	8002284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002274:	f00a fa26 	bl	800c6c4 <__errno>
 8002278:	4603      	mov	r3, r0
 800227a:	220c      	movs	r2, #12
 800227c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	e009      	b.n	8002298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002284:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <_sbrk+0x64>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228a:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	4a05      	ldr	r2, [pc, #20]	@ (80022a8 <_sbrk+0x64>)
 8002294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20020000 	.word	0x20020000
 80022a4:	00000400 	.word	0x00000400
 80022a8:	200004c0 	.word	0x200004c0
 80022ac:	20000dd0 	.word	0x20000dd0

080022b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b4:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <SystemInit+0x20>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ba:	4a05      	ldr	r2, [pc, #20]	@ (80022d0 <SystemInit+0x20>)
 80022bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <tmc_crc>:
#include "stm32f4xx_hal.h"

// Link to CubeMX-generated UART handle
extern UART_HandleTypeDef huart3;

static uint8_t tmc_crc(uint8_t *data, uint8_t len) {
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 80022e4:	2300      	movs	r3, #0
 80022e6:	73bb      	strb	r3, [r7, #14]
 80022e8:	e022      	b.n	8002330 <tmc_crc+0x5c>
        crc ^= data[i];
 80022ea:	7bbb      	ldrb	r3, [r7, #14]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	4053      	eors	r3, r2
 80022f6:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 80022f8:	2300      	movs	r3, #0
 80022fa:	737b      	strb	r3, [r7, #13]
 80022fc:	e012      	b.n	8002324 <tmc_crc+0x50>
            if (crc & 0x80)
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	2b00      	cmp	r3, #0
 8002304:	da08      	bge.n	8002318 <tmc_crc+0x44>
                crc = (crc << 1) ^ 0x07;
 8002306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	b25b      	sxtb	r3, r3
 800230e:	f083 0307 	eor.w	r3, r3, #7
 8002312:	b25b      	sxtb	r3, r3
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	e002      	b.n	800231e <tmc_crc+0x4a>
            else
                crc <<= 1;
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 800231e:	7b7b      	ldrb	r3, [r7, #13]
 8002320:	3301      	adds	r3, #1
 8002322:	737b      	strb	r3, [r7, #13]
 8002324:	7b7b      	ldrb	r3, [r7, #13]
 8002326:	2b07      	cmp	r3, #7
 8002328:	d9e9      	bls.n	80022fe <tmc_crc+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 800232a:	7bbb      	ldrb	r3, [r7, #14]
 800232c:	3301      	adds	r3, #1
 800232e:	73bb      	strb	r3, [r7, #14]
 8002330:	7bba      	ldrb	r2, [r7, #14]
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	429a      	cmp	r2, r3
 8002336:	d3d8      	bcc.n	80022ea <tmc_crc+0x16>
        }
    }
    return crc;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <TMC2209_WriteRegister>:

void TMC2209_WriteRegister(uint8_t reg, uint32_t data) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
    uint8_t tx[8];

    tx[0] = TMC2209_SLAVE_ADDR;
 8002354:	2305      	movs	r3, #5
 8002356:	723b      	strb	r3, [r7, #8]
    tx[1] = 0x80 | reg;
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800235e:	b2db      	uxtb	r3, r3
 8002360:	727b      	strb	r3, [r7, #9]
    tx[2] = (data >>  0) & 0xFF;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	72bb      	strb	r3, [r7, #10]
    tx[3] = (data >>  8) & 0xFF;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	b2db      	uxtb	r3, r3
 800236e:	72fb      	strb	r3, [r7, #11]
    tx[4] = (data >> 16) & 0xFF;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	0c1b      	lsrs	r3, r3, #16
 8002374:	b2db      	uxtb	r3, r3
 8002376:	733b      	strb	r3, [r7, #12]
    tx[5] = (data >> 24) & 0xFF;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	0e1b      	lsrs	r3, r3, #24
 800237c:	b2db      	uxtb	r3, r3
 800237e:	737b      	strb	r3, [r7, #13]
    tx[6] = tmc_crc(tx, 6);
 8002380:	f107 0308 	add.w	r3, r7, #8
 8002384:	2106      	movs	r1, #6
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ffa4 	bl	80022d4 <tmc_crc>
 800238c:	4603      	mov	r3, r0
 800238e:	73bb      	strb	r3, [r7, #14]

    HAL_UART_Transmit(&huart3, tx, 7, HAL_MAX_DELAY);
 8002390:	f107 0108 	add.w	r1, r7, #8
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
 8002398:	2207      	movs	r2, #7
 800239a:	4803      	ldr	r0, [pc, #12]	@ (80023a8 <TMC2209_WriteRegister+0x60>)
 800239c:	f005 fa44 	bl	8007828 <HAL_UART_Transmit>
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	2000046c 	.word	0x2000046c

080023ac <TMC2209_Init>:

void TMC2209_Init() {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
    // Set motor current: IHOLD=8, IRUN=16, delay=4
    TMC2209_WriteRegister(TMC2209_REG_IHOLD_IRUN, (8 << 0) | (16 << 8) | (4 << 16));
 80023b0:	4906      	ldr	r1, [pc, #24]	@ (80023cc <TMC2209_Init+0x20>)
 80023b2:	2010      	movs	r0, #16
 80023b4:	f7ff ffc8 	bl	8002348 <TMC2209_WriteRegister>

    // Enable stealthChop, interpolation, 16 microsteps
    TMC2209_WriteRegister(TMC2209_REG_CHOPCONF, 0x000100C3);
 80023b8:	4905      	ldr	r1, [pc, #20]	@ (80023d0 <TMC2209_Init+0x24>)
 80023ba:	206c      	movs	r0, #108	@ 0x6c
 80023bc:	f7ff ffc4 	bl	8002348 <TMC2209_WriteRegister>

    // Enable global config with stealthChop
    TMC2209_WriteRegister(TMC2209_REG_GCONF, 0x00000004);
 80023c0:	2104      	movs	r1, #4
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7ff ffc0 	bl	8002348 <TMC2209_WriteRegister>
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	00041008 	.word	0x00041008
 80023d0:	000100c3 	.word	0x000100c3

080023d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800240c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023d8:	f7ff ff6a 	bl	80022b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023dc:	480c      	ldr	r0, [pc, #48]	@ (8002410 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023de:	490d      	ldr	r1, [pc, #52]	@ (8002414 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e4:	e002      	b.n	80023ec <LoopCopyDataInit>

080023e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ea:	3304      	adds	r3, #4

080023ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f0:	d3f9      	bcc.n	80023e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002420 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f8:	e001      	b.n	80023fe <LoopFillZerobss>

080023fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023fc:	3204      	adds	r2, #4

080023fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002400:	d3fb      	bcc.n	80023fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002402:	f00a f965 	bl	800c6d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002406:	f7fe fddd 	bl	8000fc4 <main>
  bx  lr    
 800240a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800240c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002418:	0800e6d4 	.word	0x0800e6d4
  ldr r2, =_sbss
 800241c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002420:	20000dd0 	.word	0x20000dd0

08002424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC_IRQHandler>
	...

08002428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800242c:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0d      	ldr	r2, [pc, #52]	@ (8002468 <HAL_Init+0x40>)
 8002432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <HAL_Init+0x40>)
 800243e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002444:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a07      	ldr	r2, [pc, #28]	@ (8002468 <HAL_Init+0x40>)
 800244a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800244e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002450:	2003      	movs	r0, #3
 8002452:	f000 f94f 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002456:	2000      	movs	r0, #0
 8002458:	f000 f808 	bl	800246c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800245c:	f7ff fb8a 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00

0800246c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002474:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <HAL_InitTick+0x54>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_InitTick+0x58>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002482:	fbb3 f3f1 	udiv	r3, r3, r1
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f967 	bl	800275e <HAL_SYSTICK_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00e      	b.n	80024b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d80a      	bhi.n	80024b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f000 f92f 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ac:	4a06      	ldr	r2, [pc, #24]	@ (80024c8 <HAL_InitTick+0x5c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000008 	.word	0x20000008
 80024c8:	20000004 	.word	0x20000004

080024cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d0:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_IncTick+0x20>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_IncTick+0x24>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a04      	ldr	r2, [pc, #16]	@ (80024f0 <HAL_IncTick+0x24>)
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000008 	.word	0x20000008
 80024f0:	200004c4 	.word	0x200004c4

080024f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b03      	ldr	r3, [pc, #12]	@ (8002508 <HAL_GetTick+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	200004c4 	.word	0x200004c4

0800250c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff ffee 	bl	80024f4 <HAL_GetTick>
 8002518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d005      	beq.n	8002532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002526:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_Delay+0x44>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002532:	bf00      	nop
 8002534:	f7ff ffde 	bl	80024f4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d8f7      	bhi.n	8002534 <HAL_Delay+0x28>
  {
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000008 	.word	0x20000008

08002554 <__NVIC_SetPriorityGrouping>:
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800257c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_GetPriorityGrouping>:
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	@ (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	@ (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	@ (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	@ 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	@ 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <SysTick_Config>:
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff8e 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff29 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271c:	f7ff ff3e 	bl	800259c <__NVIC_GetPriorityGrouping>
 8002720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f7ff ff8e 	bl	8002648 <NVIC_EncodePriority>
 800272c:	4602      	mov	r2, r0
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff5d 	bl	80025f4 <__NVIC_SetPriority>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff31 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffa2 	bl	80026b0 <SysTick_Config>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	@ 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	e16b      	b.n	8002a6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002794:	2201      	movs	r2, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	f040 815a 	bne.w	8002a66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d005      	beq.n	80027ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d130      	bne.n	800282c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002800:	2201      	movs	r2, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 0201 	and.w	r2, r3, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b03      	cmp	r3, #3
 8002836:	d017      	beq.n	8002868 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d123      	bne.n	80028bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	220f      	movs	r2, #15
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	08da      	lsrs	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3208      	adds	r2, #8
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0203 	and.w	r2, r3, #3
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80b4 	beq.w	8002a66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b60      	ldr	r3, [pc, #384]	@ (8002a84 <HAL_GPIO_Init+0x30c>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	4a5f      	ldr	r2, [pc, #380]	@ (8002a84 <HAL_GPIO_Init+0x30c>)
 8002908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800290c:	6453      	str	r3, [r2, #68]	@ 0x44
 800290e:	4b5d      	ldr	r3, [pc, #372]	@ (8002a84 <HAL_GPIO_Init+0x30c>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291a:	4a5b      	ldr	r2, [pc, #364]	@ (8002a88 <HAL_GPIO_Init+0x310>)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a52      	ldr	r2, [pc, #328]	@ (8002a8c <HAL_GPIO_Init+0x314>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d02b      	beq.n	800299e <HAL_GPIO_Init+0x226>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a51      	ldr	r2, [pc, #324]	@ (8002a90 <HAL_GPIO_Init+0x318>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d025      	beq.n	800299a <HAL_GPIO_Init+0x222>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a50      	ldr	r2, [pc, #320]	@ (8002a94 <HAL_GPIO_Init+0x31c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d01f      	beq.n	8002996 <HAL_GPIO_Init+0x21e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4f      	ldr	r2, [pc, #316]	@ (8002a98 <HAL_GPIO_Init+0x320>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d019      	beq.n	8002992 <HAL_GPIO_Init+0x21a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4e      	ldr	r2, [pc, #312]	@ (8002a9c <HAL_GPIO_Init+0x324>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_GPIO_Init+0x216>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4d      	ldr	r2, [pc, #308]	@ (8002aa0 <HAL_GPIO_Init+0x328>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00d      	beq.n	800298a <HAL_GPIO_Init+0x212>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4c      	ldr	r2, [pc, #304]	@ (8002aa4 <HAL_GPIO_Init+0x32c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d007      	beq.n	8002986 <HAL_GPIO_Init+0x20e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4b      	ldr	r2, [pc, #300]	@ (8002aa8 <HAL_GPIO_Init+0x330>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_GPIO_Init+0x20a>
 800297e:	2307      	movs	r3, #7
 8002980:	e00e      	b.n	80029a0 <HAL_GPIO_Init+0x228>
 8002982:	2308      	movs	r3, #8
 8002984:	e00c      	b.n	80029a0 <HAL_GPIO_Init+0x228>
 8002986:	2306      	movs	r3, #6
 8002988:	e00a      	b.n	80029a0 <HAL_GPIO_Init+0x228>
 800298a:	2305      	movs	r3, #5
 800298c:	e008      	b.n	80029a0 <HAL_GPIO_Init+0x228>
 800298e:	2304      	movs	r3, #4
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x228>
 8002992:	2303      	movs	r3, #3
 8002994:	e004      	b.n	80029a0 <HAL_GPIO_Init+0x228>
 8002996:	2302      	movs	r3, #2
 8002998:	e002      	b.n	80029a0 <HAL_GPIO_Init+0x228>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_GPIO_Init+0x228>
 800299e:	2300      	movs	r3, #0
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	f002 0203 	and.w	r2, r2, #3
 80029a6:	0092      	lsls	r2, r2, #2
 80029a8:	4093      	lsls	r3, r2
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b0:	4935      	ldr	r1, [pc, #212]	@ (8002a88 <HAL_GPIO_Init+0x310>)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	3302      	adds	r3, #2
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029be:	4b3b      	ldr	r3, [pc, #236]	@ (8002aac <HAL_GPIO_Init+0x334>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e2:	4a32      	ldr	r2, [pc, #200]	@ (8002aac <HAL_GPIO_Init+0x334>)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e8:	4b30      	ldr	r3, [pc, #192]	@ (8002aac <HAL_GPIO_Init+0x334>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a0c:	4a27      	ldr	r2, [pc, #156]	@ (8002aac <HAL_GPIO_Init+0x334>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a12:	4b26      	ldr	r3, [pc, #152]	@ (8002aac <HAL_GPIO_Init+0x334>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a36:	4a1d      	ldr	r2, [pc, #116]	@ (8002aac <HAL_GPIO_Init+0x334>)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002aac <HAL_GPIO_Init+0x334>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a60:	4a12      	ldr	r2, [pc, #72]	@ (8002aac <HAL_GPIO_Init+0x334>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2b0f      	cmp	r3, #15
 8002a70:	f67f ae90 	bls.w	8002794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3724      	adds	r7, #36	@ 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40013800 	.word	0x40013800
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	40020400 	.word	0x40020400
 8002a94:	40020800 	.word	0x40020800
 8002a98:	40020c00 	.word	0x40020c00
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40021400 	.word	0x40021400
 8002aa4:	40021800 	.word	0x40021800
 8002aa8:	40021c00 	.word	0x40021c00
 8002aac:	40013c00 	.word	0x40013c00

08002ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
 8002abc:	4613      	mov	r3, r2
 8002abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac0:	787b      	ldrb	r3, [r7, #1]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002acc:	e003      	b.n	8002ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	041a      	lsls	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	619a      	str	r2, [r3, #24]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af02      	add	r7, sp, #8
 8002ae8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e059      	b.n	8002ba8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f008 fc9e 	bl	800b450 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2203      	movs	r2, #3
 8002b18:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b22:	d102      	bne.n	8002b2a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f005 faab 	bl	800808a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7c1a      	ldrb	r2, [r3, #16]
 8002b3c:	f88d 2000 	strb.w	r2, [sp]
 8002b40:	3304      	adds	r3, #4
 8002b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b44:	f005 fa2c 	bl	8007fa0 <USB_CoreInit>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e026      	b.n	8002ba8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f005 faa3 	bl	80080ac <USB_SetCurrentMode>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e017      	b.n	8002ba8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7c1a      	ldrb	r2, [r3, #16]
 8002b80:	f88d 2000 	strb.w	r2, [sp]
 8002b84:	3304      	adds	r3, #4
 8002b86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b88:	f005 fc4c 	bl	8008424 <USB_HostInit>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e004      	b.n	8002ba8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b08b      	sub	sp, #44	@ 0x2c
 8002bb4:	af04      	add	r7, sp, #16
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	70fb      	strb	r3, [r7, #3]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	70bb      	strb	r3, [r7, #2]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002bca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002bcc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_HCD_HC_Init+0x2c>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e09d      	b.n	8002d18 <HAL_HCD_HC_Init+0x168>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3319      	adds	r3, #25
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	3314      	adds	r3, #20
 8002c08:	787a      	ldrb	r2, [r7, #1]
 8002c0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	3315      	adds	r3, #21
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3326      	adds	r3, #38	@ 0x26
 8002c30:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002c34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	78bb      	ldrb	r3, [r7, #2]
 8002c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c3e:	b2d8      	uxtb	r0, r3
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3316      	adds	r3, #22
 8002c4e:	4602      	mov	r2, r0
 8002c50:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	4619      	mov	r1, r3
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fbc8 	bl	80033ec <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002c5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	da0a      	bge.n	8002c7a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	3317      	adds	r3, #23
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	e009      	b.n	8002c8e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3317      	adds	r3, #23
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f005 fd2a 	bl	80086ec <USB_GetHostSpeed>
 8002c98:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002c9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d10b      	bne.n	8002cba <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002ca2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_HCD_HC_Init+0x10a>
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d104      	bne.n	8002cba <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2bbc      	cmp	r3, #188	@ 0xbc
 8002cb4:	d901      	bls.n	8002cba <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002cb6:	23bc      	movs	r3, #188	@ 0xbc
 8002cb8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3318      	adds	r3, #24
 8002cca:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002cce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	b298      	uxth	r0, r3
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3328      	adds	r3, #40	@ 0x28
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	787c      	ldrb	r4, [r7, #1]
 8002cf2:	78ba      	ldrb	r2, [r7, #2]
 8002cf4:	78f9      	ldrb	r1, [r7, #3]
 8002cf6:	9302      	str	r3, [sp, #8]
 8002cf8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	4623      	mov	r3, r4
 8002d06:	f005 fd19 	bl	800873c <USB_HC_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd90      	pop	{r4, r7, pc}

08002d20 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_HCD_HC_Halt+0x1e>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e00f      	b.n	8002d5e <HAL_HCD_HC_Halt+0x3e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f006 f8ab 	bl	8008eaa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	4608      	mov	r0, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	461a      	mov	r2, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	70fb      	strb	r3, [r7, #3]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	70bb      	strb	r3, [r7, #2]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3317      	adds	r3, #23
 8002d92:	78ba      	ldrb	r2, [r7, #2]
 8002d94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3326      	adds	r3, #38	@ 0x26
 8002da6:	787a      	ldrb	r2, [r7, #1]
 8002da8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002daa:	7c3b      	ldrb	r3, [r7, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d114      	bne.n	8002dda <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	332a      	adds	r3, #42	@ 0x2a
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3319      	adds	r3, #25
 8002dd4:	7f3a      	ldrb	r2, [r7, #28]
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e009      	b.n	8002dee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	332a      	adds	r3, #42	@ 0x2a
 8002dea:	2202      	movs	r2, #2
 8002dec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002dee:	787b      	ldrb	r3, [r7, #1]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	f200 8102 	bhi.w	8002ffa <HAL_HCD_HC_SubmitRequest+0x292>
 8002df6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dfc <HAL_HCD_HC_SubmitRequest+0x94>)
 8002df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002fe5 	.word	0x08002fe5
 8002e04:	08002ed1 	.word	0x08002ed1
 8002e08:	08002f5b 	.word	0x08002f5b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002e0c:	7c3b      	ldrb	r3, [r7, #16]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	f040 80f5 	bne.w	8002ffe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002e14:	78bb      	ldrb	r3, [r7, #2]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d12d      	bne.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002e1a:	8b3b      	ldrh	r3, [r7, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	333d      	adds	r3, #61	@ 0x3d
 8002e30:	2201      	movs	r2, #1
 8002e32:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	333d      	adds	r3, #61	@ 0x3d
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10a      	bne.n	8002e60 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	332a      	adds	r3, #42	@ 0x2a
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002e5e:	e0ce      	b.n	8002ffe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	332a      	adds	r3, #42	@ 0x2a
 8002e70:	2202      	movs	r2, #2
 8002e72:	701a      	strb	r2, [r3, #0]
      break;
 8002e74:	e0c3      	b.n	8002ffe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	331a      	adds	r3, #26
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	f040 80b8 	bne.w	8002ffe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	333c      	adds	r3, #60	@ 0x3c
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	332a      	adds	r3, #42	@ 0x2a
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
      break;
 8002eb8:	e0a1      	b.n	8002ffe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	332a      	adds	r3, #42	@ 0x2a
 8002eca:	2202      	movs	r2, #2
 8002ecc:	701a      	strb	r2, [r3, #0]
      break;
 8002ece:	e096      	b.n	8002ffe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ed0:	78bb      	ldrb	r3, [r7, #2]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d120      	bne.n	8002f18 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	333d      	adds	r3, #61	@ 0x3d
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10a      	bne.n	8002f02 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	332a      	adds	r3, #42	@ 0x2a
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002f00:	e07e      	b.n	8003000 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	332a      	adds	r3, #42	@ 0x2a
 8002f12:	2202      	movs	r2, #2
 8002f14:	701a      	strb	r2, [r3, #0]
      break;
 8002f16:	e073      	b.n	8003000 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	333c      	adds	r3, #60	@ 0x3c
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	332a      	adds	r3, #42	@ 0x2a
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
      break;
 8002f42:	e05d      	b.n	8003000 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	332a      	adds	r3, #42	@ 0x2a
 8002f54:	2202      	movs	r2, #2
 8002f56:	701a      	strb	r2, [r3, #0]
      break;
 8002f58:	e052      	b.n	8003000 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002f5a:	78bb      	ldrb	r3, [r7, #2]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d120      	bne.n	8002fa2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	333d      	adds	r3, #61	@ 0x3d
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	332a      	adds	r3, #42	@ 0x2a
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002f8a:	e039      	b.n	8003000 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	332a      	adds	r3, #42	@ 0x2a
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	701a      	strb	r2, [r3, #0]
      break;
 8002fa0:	e02e      	b.n	8003000 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	333c      	adds	r3, #60	@ 0x3c
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	332a      	adds	r3, #42	@ 0x2a
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
      break;
 8002fcc:	e018      	b.n	8003000 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	332a      	adds	r3, #42	@ 0x2a
 8002fde:	2202      	movs	r2, #2
 8002fe0:	701a      	strb	r2, [r3, #0]
      break;
 8002fe2:	e00d      	b.n	8003000 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	332a      	adds	r3, #42	@ 0x2a
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
      break;
 8002ff8:	e002      	b.n	8003000 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e000      	b.n	8003000 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002ffe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	332c      	adds	r3, #44	@ 0x2c
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	8b39      	ldrh	r1, [r7, #24]
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4403      	add	r3, r0
 8003024:	3334      	adds	r3, #52	@ 0x34
 8003026:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	334c      	adds	r3, #76	@ 0x4c
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	3338      	adds	r3, #56	@ 0x38
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	3315      	adds	r3, #21
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	334d      	adds	r3, #77	@ 0x4d
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	3310      	adds	r3, #16
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	1d19      	adds	r1, r3, #4
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	799b      	ldrb	r3, [r3, #6]
 8003092:	461a      	mov	r2, r3
 8003094:	f005 fc7e 	bl	8008994 <USB_HC_StartXfer>
 8003098:	4603      	mov	r3, r0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop

080030a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f005 f96c 	bl	8008398 <USB_GetMode>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	f040 80fb 	bne.w	80032be <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f005 f92f 	bl	8008330 <USB_ReadInterrupts>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80f1 	beq.w	80032bc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f005 f926 	bl	8008330 <USB_ReadInterrupts>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030ee:	d104      	bne.n	80030fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80030f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f005 f916 	bl	8008330 <USB_ReadInterrupts>
 8003104:	4603      	mov	r3, r0
 8003106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800310a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800310e:	d104      	bne.n	800311a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003118:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f005 f906 	bl	8008330 <USB_ReadInterrupts>
 8003124:	4603      	mov	r3, r0
 8003126:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800312a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800312e:	d104      	bne.n	800313a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003138:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f005 f8f6 	bl	8008330 <USB_ReadInterrupts>
 8003144:	4603      	mov	r3, r0
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b02      	cmp	r3, #2
 800314c:	d103      	bne.n	8003156 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2202      	movs	r2, #2
 8003154:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f005 f8e8 	bl	8008330 <USB_ReadInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800316a:	d120      	bne.n	80031ae <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003174:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d113      	bne.n	80031ae <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003186:	2110      	movs	r1, #16
 8003188:	6938      	ldr	r0, [r7, #16]
 800318a:	f004 ffdb 	bl	8008144 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800318e:	6938      	ldr	r0, [r7, #16]
 8003190:	f005 f80a 	bl	80081a8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	7a5b      	ldrb	r3, [r3, #9]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d105      	bne.n	80031a8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2101      	movs	r1, #1
 80031a2:	4618      	mov	r0, r3
 80031a4:	f005 fa02 	bl	80085ac <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f008 f9cf 	bl	800b54c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f005 f8bc 	bl	8008330 <USB_ReadInterrupts>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031c2:	d102      	bne.n	80031ca <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f001 fd4d 	bl	8004c64 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f005 f8ae 	bl	8008330 <USB_ReadInterrupts>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d106      	bne.n	80031ec <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f008 f998 	bl	800b514 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2208      	movs	r2, #8
 80031ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f005 f89d 	bl	8008330 <USB_ReadInterrupts>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003200:	d139      	bne.n	8003276 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f005 fe3e 	bl	8008e88 <USB_HC_ReadInterrupt>
 800320c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e025      	b.n	8003260 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d018      	beq.n	800325a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800323a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800323e:	d106      	bne.n	800324e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f905 	bl	8003456 <HCD_HC_IN_IRQHandler>
 800324c:	e005      	b.n	800325a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 ff67 	bl	8004128 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	3301      	adds	r3, #1
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	795b      	ldrb	r3, [r3, #5]
 8003264:	461a      	mov	r2, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	4293      	cmp	r3, r2
 800326a:	d3d3      	bcc.n	8003214 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003274:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f005 f858 	bl	8008330 <USB_ReadInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b10      	cmp	r3, #16
 8003288:	d101      	bne.n	800328e <HAL_HCD_IRQHandler+0x1ea>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <HAL_HCD_IRQHandler+0x1ec>
 800328e:	2300      	movs	r3, #0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d014      	beq.n	80032be <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0210 	bic.w	r2, r2, #16
 80032a2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f001 fbfe 	bl	8004aa6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0210 	orr.w	r2, r2, #16
 80032b8:	619a      	str	r2, [r3, #24]
 80032ba:	e000      	b.n	80032be <HAL_HCD_IRQHandler+0x21a>
      return;
 80032bc:	bf00      	nop
    }
  }
}
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_HCD_Start+0x16>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e013      	b.n	8003302 <HAL_HCD_Start+0x3e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2101      	movs	r1, #1
 80032e8:	4618      	mov	r0, r3
 80032ea:	f005 f9c6 	bl	800867a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f004 feb8 	bl	8008068 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_HCD_Stop+0x16>
 800331c:	2302      	movs	r3, #2
 800331e:	e00d      	b.n	800333c <HAL_HCD_Stop+0x32>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f005 ff19 	bl	8009164 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f005 f968 	bl	8008626 <USB_ResetPort>
 8003356:	4603      	mov	r3, r0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	334c      	adds	r3, #76	@ 0x4c
 800337c:	781b      	ldrb	r3, [r3, #0]
}
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	3338      	adds	r3, #56	@ 0x38
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f005 f9aa 	bl	800871a <USB_GetCurrentFrame>
 80033c6:	4603      	mov	r3, r0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f005 f985 	bl	80086ec <USB_GetHostSpeed>
 80033e2:	4603      	mov	r3, r0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	331a      	adds	r3, #26
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	331b      	adds	r3, #27
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	3325      	adds	r3, #37	@ 0x25
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	3324      	adds	r3, #36	@ 0x24
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f004 ff6e 	bl	8008356 <USB_ReadChInterrupts>
 800347a:	4603      	mov	r3, r0
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d11a      	bne.n	80034ba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003490:	461a      	mov	r2, r3
 8003492:	2304      	movs	r3, #4
 8003494:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	334d      	adds	r3, #77	@ 0x4d
 80034a6:	2207      	movs	r2, #7
 80034a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f005 fcf9 	bl	8008eaa <USB_HC_Halt>
 80034b8:	e09e      	b.n	80035f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	4611      	mov	r1, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f004 ff47 	bl	8008356 <USB_ReadChInterrupts>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d2:	d11b      	bne.n	800350c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e0:	461a      	mov	r2, r3
 80034e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	334d      	adds	r3, #77	@ 0x4d
 80034f8:	2208      	movs	r2, #8
 80034fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f005 fcd0 	bl	8008eaa <USB_HC_Halt>
 800350a:	e075      	b.n	80035f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f004 ff1e 	bl	8008356 <USB_ReadChInterrupts>
 800351a:	4603      	mov	r3, r0
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b08      	cmp	r3, #8
 8003522:	d11a      	bne.n	800355a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4413      	add	r3, r2
 800352c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003530:	461a      	mov	r2, r3
 8003532:	2308      	movs	r3, #8
 8003534:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	334d      	adds	r3, #77	@ 0x4d
 8003546:	2206      	movs	r2, #6
 8003548:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	4611      	mov	r1, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f005 fca9 	bl	8008eaa <USB_HC_Halt>
 8003558:	e04e      	b.n	80035f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f004 fef7 	bl	8008356 <USB_ReadChInterrupts>
 8003568:	4603      	mov	r3, r0
 800356a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003572:	d11b      	bne.n	80035ac <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003580:	461a      	mov	r2, r3
 8003582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003586:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	334d      	adds	r3, #77	@ 0x4d
 8003598:	2209      	movs	r2, #9
 800359a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f005 fc80 	bl	8008eaa <USB_HC_Halt>
 80035aa:	e025      	b.n	80035f8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f004 fece 	bl	8008356 <USB_ReadChInterrupts>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c0:	2b80      	cmp	r3, #128	@ 0x80
 80035c2:	d119      	bne.n	80035f8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d0:	461a      	mov	r2, r3
 80035d2:	2380      	movs	r3, #128	@ 0x80
 80035d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	334d      	adds	r3, #77	@ 0x4d
 80035e6:	2207      	movs	r2, #7
 80035e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f005 fc59 	bl	8008eaa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f004 fea8 	bl	8008356 <USB_ReadChInterrupts>
 8003606:	4603      	mov	r3, r0
 8003608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800360c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003610:	d112      	bne.n	8003638 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f005 fc45 	bl	8008eaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4413      	add	r3, r2
 8003628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362c:	461a      	mov	r2, r3
 800362e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003632:	6093      	str	r3, [r2, #8]
 8003634:	f000 bd75 	b.w	8004122 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f004 fe88 	bl	8008356 <USB_ReadChInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	f040 8128 	bne.w	80038a2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800365e:	461a      	mov	r2, r3
 8003660:	2320      	movs	r3, #32
 8003662:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	331b      	adds	r3, #27
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d119      	bne.n	80036ae <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	331b      	adds	r3, #27
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	0151      	lsls	r1, r2, #5
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	440a      	add	r2, r1
 80036a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ac:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	799b      	ldrb	r3, [r3, #6]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01b      	beq.n	80036ee <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	3330      	adds	r3, #48	@ 0x30
 80036c6:	6819      	ldr	r1, [r3, #0]
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	1ac9      	subs	r1, r1, r3
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4403      	add	r3, r0
 80036ea:	3338      	adds	r3, #56	@ 0x38
 80036ec:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	334d      	adds	r3, #77	@ 0x4d
 80036fe:	2201      	movs	r2, #1
 8003700:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003702:	78fa      	ldrb	r2, [r7, #3]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	3344      	adds	r3, #68	@ 0x44
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4413      	add	r3, r2
 800371e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003722:	461a      	mov	r2, r3
 8003724:	2301      	movs	r3, #1
 8003726:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3326      	adds	r3, #38	@ 0x26
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	3326      	adds	r3, #38	@ 0x26
 800374e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003750:	2b02      	cmp	r3, #2
 8003752:	d110      	bne.n	8003776 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	78fa      	ldrb	r2, [r7, #3]
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f005 fba4 	bl	8008eaa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4413      	add	r3, r2
 800376a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800376e:	461a      	mov	r2, r3
 8003770:	2310      	movs	r3, #16
 8003772:	6093      	str	r3, [r2, #8]
 8003774:	e03d      	b.n	80037f2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	3326      	adds	r3, #38	@ 0x26
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d00a      	beq.n	80037a2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	3326      	adds	r3, #38	@ 0x26
 800379c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d127      	bne.n	80037f2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	0151      	lsls	r1, r2, #5
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	440a      	add	r2, r1
 80037b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037c0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	334c      	adds	r3, #76	@ 0x4c
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	334c      	adds	r3, #76	@ 0x4c
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	4619      	mov	r1, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f007 febb 	bl	800b568 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	799b      	ldrb	r3, [r3, #6]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d13b      	bne.n	8003872 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	3338      	adds	r3, #56	@ 0x38
 800380a:	6819      	ldr	r1, [r3, #0]
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4403      	add	r3, r0
 800381a:	3328      	adds	r3, #40	@ 0x28
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	440b      	add	r3, r1
 8003820:	1e59      	subs	r1, r3, #1
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4403      	add	r3, r0
 8003830:	3328      	adds	r3, #40	@ 0x28
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	fbb1 f3f3 	udiv	r3, r1, r3
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 8470 	beq.w	8004122 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	333c      	adds	r3, #60	@ 0x3c
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	f083 0301 	eor.w	r3, r3, #1
 800385a:	b2d8      	uxtb	r0, r3
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	333c      	adds	r3, #60	@ 0x3c
 800386a:	4602      	mov	r2, r0
 800386c:	701a      	strb	r2, [r3, #0]
 800386e:	f000 bc58 	b.w	8004122 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	333c      	adds	r3, #60	@ 0x3c
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	f083 0301 	eor.w	r3, r3, #1
 800388a:	b2d8      	uxtb	r0, r3
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	333c      	adds	r3, #60	@ 0x3c
 800389a:	4602      	mov	r2, r0
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	f000 bc40 	b.w	8004122 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f004 fd53 	bl	8008356 <USB_ReadChInterrupts>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d131      	bne.n	800391e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c6:	461a      	mov	r2, r3
 80038c8:	2320      	movs	r3, #32
 80038ca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	331a      	adds	r3, #26
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	f040 841f 	bne.w	8004122 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	331b      	adds	r3, #27
 80038f4:	2201      	movs	r2, #1
 80038f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	334d      	adds	r3, #77	@ 0x4d
 8003908:	2203      	movs	r2, #3
 800390a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f005 fac8 	bl	8008eaa <USB_HC_Halt>
 800391a:	f000 bc02 	b.w	8004122 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f004 fd15 	bl	8008356 <USB_ReadChInterrupts>
 800392c:	4603      	mov	r3, r0
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b02      	cmp	r3, #2
 8003934:	f040 8305 	bne.w	8003f42 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003944:	461a      	mov	r2, r3
 8003946:	2302      	movs	r3, #2
 8003948:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	334d      	adds	r3, #77	@ 0x4d
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d114      	bne.n	800398a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	334d      	adds	r3, #77	@ 0x4d
 8003970:	2202      	movs	r2, #2
 8003972:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	334c      	adds	r3, #76	@ 0x4c
 8003984:	2201      	movs	r2, #1
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	e2cc      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	334d      	adds	r3, #77	@ 0x4d
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b06      	cmp	r3, #6
 800399e:	d114      	bne.n	80039ca <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	334d      	adds	r3, #77	@ 0x4d
 80039b0:	2202      	movs	r2, #2
 80039b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	334c      	adds	r3, #76	@ 0x4c
 80039c4:	2205      	movs	r2, #5
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	e2ac      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	334d      	adds	r3, #77	@ 0x4d
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b07      	cmp	r3, #7
 80039de:	d00b      	beq.n	80039f8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	334d      	adds	r3, #77	@ 0x4d
 80039f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80039f2:	2b09      	cmp	r3, #9
 80039f4:	f040 80a6 	bne.w	8003b44 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	334d      	adds	r3, #77	@ 0x4d
 8003a08:	2202      	movs	r2, #2
 8003a0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3344      	adds	r3, #68	@ 0x44
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	1c59      	adds	r1, r3, #1
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4403      	add	r3, r0
 8003a2c:	3344      	adds	r3, #68	@ 0x44
 8003a2e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	3344      	adds	r3, #68	@ 0x44
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d943      	bls.n	8003ace <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3344      	adds	r3, #68	@ 0x44
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	331a      	adds	r3, #26
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d123      	bne.n	8003ab8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	331b      	adds	r3, #27
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	331c      	adds	r3, #28
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	0151      	lsls	r1, r2, #5
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	440a      	add	r2, r1
 8003aae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	334c      	adds	r3, #76	@ 0x4c
 8003ac8:	2204      	movs	r2, #4
 8003aca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003acc:	e229      	b.n	8003f22 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	1a9b      	subs	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	334c      	adds	r3, #76	@ 0x4c
 8003ade:	2202      	movs	r2, #2
 8003ae0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	3326      	adds	r3, #38	@ 0x26
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3326      	adds	r3, #38	@ 0x26
 8003b08:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	f040 8209 	bne.w	8003f22 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b26:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b2e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b42:	e1ee      	b.n	8003f22 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	1a9b      	subs	r3, r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	334d      	adds	r3, #77	@ 0x4d
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	f040 80c8 	bne.w	8003cec <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b5c:	78fa      	ldrb	r2, [r7, #3]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	334d      	adds	r3, #77	@ 0x4d
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	331b      	adds	r3, #27
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	f040 81ce 	bne.w	8003f24 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	3326      	adds	r3, #38	@ 0x26
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d16b      	bne.n	8003c76 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	3348      	adds	r3, #72	@ 0x48
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	1c59      	adds	r1, r3, #1
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4403      	add	r3, r0
 8003bbe:	3348      	adds	r3, #72	@ 0x48
 8003bc0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	3348      	adds	r3, #72	@ 0x48
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d943      	bls.n	8003c60 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	3348      	adds	r3, #72	@ 0x48
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	331b      	adds	r3, #27
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	3344      	adds	r3, #68	@ 0x44
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d809      	bhi.n	8003c2a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	331c      	adds	r3, #28
 8003c26:	2201      	movs	r2, #1
 8003c28:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c2a:	78fb      	ldrb	r3, [r7, #3]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	0151      	lsls	r1, r2, #5
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	440a      	add	r2, r1
 8003c40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c48:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	334c      	adds	r3, #76	@ 0x4c
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e014      	b.n	8003c8a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	334c      	adds	r3, #76	@ 0x4c
 8003c70:	2202      	movs	r2, #2
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	e009      	b.n	8003c8a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	334c      	adds	r3, #76	@ 0x4c
 8003c86:	2202      	movs	r2, #2
 8003c88:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	3326      	adds	r3, #38	@ 0x26
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00b      	beq.n	8003cb8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	3326      	adds	r3, #38	@ 0x26
 8003cb0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	f040 8136 	bne.w	8003f24 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cd6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e11b      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	334d      	adds	r3, #77	@ 0x4d
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	f040 8081 	bne.w	8003e06 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	334d      	adds	r3, #77	@ 0x4d
 8003d14:	2202      	movs	r2, #2
 8003d16:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	331b      	adds	r3, #27
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	f040 80fa 	bne.w	8003f24 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	334c      	adds	r3, #76	@ 0x4c
 8003d40:	2202      	movs	r2, #2
 8003d42:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d62:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	0151      	lsls	r1, r2, #5
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	440a      	add	r2, r1
 8003d7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d82:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	0151      	lsls	r1, r2, #5
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	440a      	add	r2, r1
 8003d9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d9e:	f023 0320 	bic.w	r3, r3, #32
 8003da2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3326      	adds	r3, #38	@ 0x26
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00b      	beq.n	8003dd2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	3326      	adds	r3, #38	@ 0x26
 8003dca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	f040 80a9 	bne.w	8003f24 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003de8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003df0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	e08e      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	334d      	adds	r3, #77	@ 0x4d
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d143      	bne.n	8003ea4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	334d      	adds	r3, #77	@ 0x4d
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	334c      	adds	r3, #76	@ 0x4c
 8003e40:	2202      	movs	r2, #2
 8003e42:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	3326      	adds	r3, #38	@ 0x26
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	3326      	adds	r3, #38	@ 0x26
 8003e6a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d159      	bne.n	8003f24 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e86:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e8e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e03f      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	334d      	adds	r3, #77	@ 0x4d
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d126      	bne.n	8003f08 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	334d      	adds	r3, #77	@ 0x4d
 8003eca:	2202      	movs	r2, #2
 8003ecc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	3344      	adds	r3, #68	@ 0x44
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	1c59      	adds	r1, r3, #1
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4403      	add	r3, r0
 8003eee:	3344      	adds	r3, #68	@ 0x44
 8003ef0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	334c      	adds	r3, #76	@ 0x4c
 8003f02:	2204      	movs	r2, #4
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	e00d      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003f08:	78fa      	ldrb	r2, [r7, #3]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	334d      	adds	r3, #77	@ 0x4d
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	f000 8100 	beq.w	8004120 <HCD_HC_IN_IRQHandler+0xcca>
 8003f20:	e000      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f22:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	334c      	adds	r3, #76	@ 0x4c
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f007 fb14 	bl	800b568 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f40:	e0ef      	b.n	8004122 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	4611      	mov	r1, r2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f004 fa03 	bl	8008356 <USB_ReadChInterrupts>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f56:	2b40      	cmp	r3, #64	@ 0x40
 8003f58:	d12f      	bne.n	8003fba <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f66:	461a      	mov	r2, r3
 8003f68:	2340      	movs	r3, #64	@ 0x40
 8003f6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	334d      	adds	r3, #77	@ 0x4d
 8003f7c:	2205      	movs	r2, #5
 8003f7e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003f80:	78fa      	ldrb	r2, [r7, #3]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	331a      	adds	r3, #26
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d109      	bne.n	8003faa <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3344      	adds	r3, #68	@ 0x44
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f004 ff79 	bl	8008eaa <USB_HC_Halt>
 8003fb8:	e0b3      	b.n	8004122 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f004 f9c7 	bl	8008356 <USB_ReadChInterrupts>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b10      	cmp	r3, #16
 8003fd0:	f040 80a7 	bne.w	8004122 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3326      	adds	r3, #38	@ 0x26
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d11b      	bne.n	8004022 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	3344      	adds	r3, #68	@ 0x44
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	334d      	adds	r3, #77	@ 0x4d
 800400e:	2204      	movs	r2, #4
 8004010:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f004 ff45 	bl	8008eaa <USB_HC_Halt>
 8004020:	e03f      	b.n	80040a2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	3326      	adds	r3, #38	@ 0x26
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	3326      	adds	r3, #38	@ 0x26
 8004048:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800404a:	2b02      	cmp	r3, #2
 800404c:	d129      	bne.n	80040a2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	3344      	adds	r3, #68	@ 0x44
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	799b      	ldrb	r3, [r3, #6]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HCD_HC_IN_IRQHandler+0xc2a>
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	331b      	adds	r3, #27
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d110      	bne.n	80040a2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	334d      	adds	r3, #77	@ 0x4d
 8004090:	2204      	movs	r2, #4
 8004092:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f004 ff04 	bl	8008eaa <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	331b      	adds	r3, #27
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d129      	bne.n	800410c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80040b8:	78fa      	ldrb	r2, [r7, #3]
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	331b      	adds	r3, #27
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	0151      	lsls	r1, r2, #5
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	440a      	add	r2, r1
 80040e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ea:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	78fa      	ldrb	r2, [r7, #3]
 80040fc:	0151      	lsls	r1, r2, #5
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	440a      	add	r2, r1
 8004102:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004106:	f043 0320 	orr.w	r3, r3, #32
 800410a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004118:	461a      	mov	r2, r3
 800411a:	2310      	movs	r3, #16
 800411c:	6093      	str	r3, [r2, #8]
 800411e:	e000      	b.n	8004122 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004120:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	4611      	mov	r1, r2
 8004146:	4618      	mov	r0, r3
 8004148:	f004 f905 	bl	8008356 <USB_ReadChInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b04      	cmp	r3, #4
 8004154:	d11b      	bne.n	800418e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004162:	461a      	mov	r2, r3
 8004164:	2304      	movs	r3, #4
 8004166:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	334d      	adds	r3, #77	@ 0x4d
 8004178:	2207      	movs	r2, #7
 800417a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f004 fe90 	bl	8008eaa <USB_HC_Halt>
 800418a:	f000 bc89 	b.w	8004aa0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	4611      	mov	r1, r2
 8004196:	4618      	mov	r0, r3
 8004198:	f004 f8dd 	bl	8008356 <USB_ReadChInterrupts>
 800419c:	4603      	mov	r3, r0
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	f040 8082 	bne.w	80042ac <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041b4:	461a      	mov	r2, r3
 80041b6:	2320      	movs	r3, #32
 80041b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	3319      	adds	r3, #25
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d124      	bne.n	800421a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80041d0:	78fa      	ldrb	r2, [r7, #3]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	3319      	adds	r3, #25
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	334c      	adds	r3, #76	@ 0x4c
 80041f4:	2202      	movs	r2, #2
 80041f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	334d      	adds	r3, #77	@ 0x4d
 8004208:	2203      	movs	r2, #3
 800420a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	4611      	mov	r1, r2
 8004214:	4618      	mov	r0, r3
 8004216:	f004 fe48 	bl	8008eaa <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	331a      	adds	r3, #26
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	f040 8437 	bne.w	8004aa0 <HCD_HC_OUT_IRQHandler+0x978>
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	331b      	adds	r3, #27
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	f040 842b 	bne.w	8004aa0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	3326      	adds	r3, #38	@ 0x26
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d009      	beq.n	8004274 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	331b      	adds	r3, #27
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	334d      	adds	r3, #77	@ 0x4d
 8004284:	2203      	movs	r2, #3
 8004286:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f004 fe0a 	bl	8008eaa <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	3344      	adds	r3, #68	@ 0x44
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e3f9      	b.n	8004aa0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	78fa      	ldrb	r2, [r7, #3]
 80042b2:	4611      	mov	r1, r2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f004 f84e 	bl	8008356 <USB_ReadChInterrupts>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c4:	d111      	bne.n	80042ea <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d2:	461a      	mov	r2, r3
 80042d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	4611      	mov	r1, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f004 fde1 	bl	8008eaa <USB_HC_Halt>
 80042e8:	e3da      	b.n	8004aa0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f004 f82f 	bl	8008356 <USB_ReadChInterrupts>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d168      	bne.n	80043d4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	3344      	adds	r3, #68	@ 0x44
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	4611      	mov	r1, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f004 f819 	bl	8008356 <USB_ReadChInterrupts>
 8004324:	4603      	mov	r3, r0
 8004326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432a:	2b40      	cmp	r3, #64	@ 0x40
 800432c:	d112      	bne.n	8004354 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800432e:	78fa      	ldrb	r2, [r7, #3]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	3319      	adds	r3, #25
 800433e:	2201      	movs	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4413      	add	r3, r2
 800434a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800434e:	461a      	mov	r2, r3
 8004350:	2340      	movs	r3, #64	@ 0x40
 8004352:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	331b      	adds	r3, #27
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d019      	beq.n	800439e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	331b      	adds	r3, #27
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4413      	add	r3, r2
 8004386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	440a      	add	r2, r1
 8004394:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800439c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043aa:	461a      	mov	r2, r3
 80043ac:	2301      	movs	r3, #1
 80043ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	334d      	adds	r3, #77	@ 0x4d
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	4611      	mov	r1, r2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f004 fd6c 	bl	8008eaa <USB_HC_Halt>
 80043d2:	e365      	b.n	8004aa0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	78fa      	ldrb	r2, [r7, #3]
 80043da:	4611      	mov	r1, r2
 80043dc:	4618      	mov	r0, r3
 80043de:	f003 ffba 	bl	8008356 <USB_ReadChInterrupts>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e8:	2b40      	cmp	r3, #64	@ 0x40
 80043ea:	d139      	bne.n	8004460 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	334d      	adds	r3, #77	@ 0x4d
 80043fc:	2205      	movs	r2, #5
 80043fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004400:	78fa      	ldrb	r2, [r7, #3]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	331a      	adds	r3, #26
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004416:	78fa      	ldrb	r2, [r7, #3]
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	3319      	adds	r3, #25
 8004426:	2201      	movs	r2, #1
 8004428:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	3344      	adds	r3, #68	@ 0x44
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f004 fd2f 	bl	8008eaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4413      	add	r3, r2
 8004454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004458:	461a      	mov	r2, r3
 800445a:	2340      	movs	r3, #64	@ 0x40
 800445c:	6093      	str	r3, [r2, #8]
 800445e:	e31f      	b.n	8004aa0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	4611      	mov	r1, r2
 8004468:	4618      	mov	r0, r3
 800446a:	f003 ff74 	bl	8008356 <USB_ReadChInterrupts>
 800446e:	4603      	mov	r3, r0
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b08      	cmp	r3, #8
 8004476:	d11a      	bne.n	80044ae <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4413      	add	r3, r2
 8004480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004484:	461a      	mov	r2, r3
 8004486:	2308      	movs	r3, #8
 8004488:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	334d      	adds	r3, #77	@ 0x4d
 800449a:	2206      	movs	r2, #6
 800449c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	4611      	mov	r1, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f004 fcff 	bl	8008eaa <USB_HC_Halt>
 80044ac:	e2f8      	b.n	8004aa0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	4611      	mov	r1, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f003 ff4d 	bl	8008356 <USB_ReadChInterrupts>
 80044bc:	4603      	mov	r3, r0
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d144      	bne.n	8004550 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	3344      	adds	r3, #68	@ 0x44
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80044da:	78fa      	ldrb	r2, [r7, #3]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	334d      	adds	r3, #77	@ 0x4d
 80044ea:	2204      	movs	r2, #4
 80044ec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	3319      	adds	r3, #25
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d114      	bne.n	800452e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	3318      	adds	r3, #24
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	3319      	adds	r3, #25
 800452a:	2201      	movs	r2, #1
 800452c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	4611      	mov	r1, r2
 8004536:	4618      	mov	r0, r3
 8004538:	f004 fcb7 	bl	8008eaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4413      	add	r3, r2
 8004544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004548:	461a      	mov	r2, r3
 800454a:	2310      	movs	r3, #16
 800454c:	6093      	str	r3, [r2, #8]
 800454e:	e2a7      	b.n	8004aa0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	4611      	mov	r1, r2
 8004558:	4618      	mov	r0, r3
 800455a:	f003 fefc 	bl	8008356 <USB_ReadChInterrupts>
 800455e:	4603      	mov	r3, r0
 8004560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004564:	2b80      	cmp	r3, #128	@ 0x80
 8004566:	f040 8083 	bne.w	8004670 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	799b      	ldrb	r3, [r3, #6]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d111      	bne.n	8004596 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	334d      	adds	r3, #77	@ 0x4d
 8004582:	2207      	movs	r2, #7
 8004584:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	4611      	mov	r1, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f004 fc8b 	bl	8008eaa <USB_HC_Halt>
 8004594:	e062      	b.n	800465c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3344      	adds	r3, #68	@ 0x44
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	1c59      	adds	r1, r3, #1
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4403      	add	r3, r0
 80045b6:	3344      	adds	r3, #68	@ 0x44
 80045b8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	3344      	adds	r3, #68	@ 0x44
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d922      	bls.n	8004616 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	3344      	adds	r3, #68	@ 0x44
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80045e4:	78fa      	ldrb	r2, [r7, #3]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	334c      	adds	r3, #76	@ 0x4c
 80045f4:	2204      	movs	r2, #4
 80045f6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	334c      	adds	r3, #76	@ 0x4c
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	78fb      	ldrb	r3, [r7, #3]
 800460c:	4619      	mov	r1, r3
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f006 ffaa 	bl	800b568 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004614:	e022      	b.n	800465c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004616:	78fa      	ldrb	r2, [r7, #3]
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	334c      	adds	r3, #76	@ 0x4c
 8004626:	2202      	movs	r2, #2
 8004628:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4413      	add	r3, r2
 8004632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004640:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004648:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4413      	add	r3, r2
 8004652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004656:	461a      	mov	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004668:	461a      	mov	r2, r3
 800466a:	2380      	movs	r3, #128	@ 0x80
 800466c:	6093      	str	r3, [r2, #8]
 800466e:	e217      	b.n	8004aa0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f003 fe6c 	bl	8008356 <USB_ReadChInterrupts>
 800467e:	4603      	mov	r3, r0
 8004680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004684:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004688:	d11b      	bne.n	80046c2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	334d      	adds	r3, #77	@ 0x4d
 800469a:	2209      	movs	r2, #9
 800469c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	78fa      	ldrb	r2, [r7, #3]
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f004 fbff 	bl	8008eaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b8:	461a      	mov	r2, r3
 80046ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046be:	6093      	str	r3, [r2, #8]
 80046c0:	e1ee      	b.n	8004aa0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f003 fe43 	bl	8008356 <USB_ReadChInterrupts>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	f040 81df 	bne.w	8004a9a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046e8:	461a      	mov	r2, r3
 80046ea:	2302      	movs	r3, #2
 80046ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80046ee:	78fa      	ldrb	r2, [r7, #3]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	1a9b      	subs	r3, r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	334d      	adds	r3, #77	@ 0x4d
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	f040 8093 	bne.w	800482c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004706:	78fa      	ldrb	r2, [r7, #3]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	334d      	adds	r3, #77	@ 0x4d
 8004716:	2202      	movs	r2, #2
 8004718:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800471a:	78fa      	ldrb	r2, [r7, #3]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	334c      	adds	r3, #76	@ 0x4c
 800472a:	2201      	movs	r2, #1
 800472c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800472e:	78fa      	ldrb	r2, [r7, #3]
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	3326      	adds	r3, #38	@ 0x26
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d00b      	beq.n	800475c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004744:	78fa      	ldrb	r2, [r7, #3]
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	3326      	adds	r3, #38	@ 0x26
 8004754:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004756:	2b03      	cmp	r3, #3
 8004758:	f040 8190 	bne.w	8004a7c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	799b      	ldrb	r3, [r3, #6]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d115      	bne.n	8004790 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	333d      	adds	r3, #61	@ 0x3d
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	f083 0301 	eor.w	r3, r3, #1
 800477c:	b2d8      	uxtb	r0, r3
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	333d      	adds	r3, #61	@ 0x3d
 800478c:	4602      	mov	r2, r0
 800478e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	799b      	ldrb	r3, [r3, #6]
 8004794:	2b01      	cmp	r3, #1
 8004796:	f040 8171 	bne.w	8004a7c <HCD_HC_OUT_IRQHandler+0x954>
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	3334      	adds	r3, #52	@ 0x34
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8165 	beq.w	8004a7c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	3334      	adds	r3, #52	@ 0x34
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4403      	add	r3, r0
 80047d2:	3328      	adds	r3, #40	@ 0x28
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	440b      	add	r3, r1
 80047d8:	1e59      	subs	r1, r3, #1
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4403      	add	r3, r0
 80047e8:	3328      	adds	r3, #40	@ 0x28
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 813f 	beq.w	8004a7c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80047fe:	78fa      	ldrb	r2, [r7, #3]
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	333d      	adds	r3, #61	@ 0x3d
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	f083 0301 	eor.w	r3, r3, #1
 8004816:	b2d8      	uxtb	r0, r3
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	333d      	adds	r3, #61	@ 0x3d
 8004826:	4602      	mov	r2, r0
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e127      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	334d      	adds	r3, #77	@ 0x4d
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d120      	bne.n	8004884 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004842:	78fa      	ldrb	r2, [r7, #3]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	334d      	adds	r3, #77	@ 0x4d
 8004852:	2202      	movs	r2, #2
 8004854:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004856:	78fa      	ldrb	r2, [r7, #3]
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	331b      	adds	r3, #27
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b01      	cmp	r3, #1
 800486a:	f040 8107 	bne.w	8004a7c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	334c      	adds	r3, #76	@ 0x4c
 800487e:	2202      	movs	r2, #2
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	e0fb      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004884:	78fa      	ldrb	r2, [r7, #3]
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	334d      	adds	r3, #77	@ 0x4d
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b04      	cmp	r3, #4
 8004898:	d13a      	bne.n	8004910 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800489a:	78fa      	ldrb	r2, [r7, #3]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	334d      	adds	r3, #77	@ 0x4d
 80048aa:	2202      	movs	r2, #2
 80048ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048ae:	78fa      	ldrb	r2, [r7, #3]
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	334c      	adds	r3, #76	@ 0x4c
 80048be:	2202      	movs	r2, #2
 80048c0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80048c2:	78fa      	ldrb	r2, [r7, #3]
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	331b      	adds	r3, #27
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	f040 80d1 	bne.w	8004a7c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	331b      	adds	r3, #27
 80048ea:	2200      	movs	r2, #0
 80048ec:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	78fa      	ldrb	r2, [r7, #3]
 80048fe:	0151      	lsls	r1, r2, #5
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	440a      	add	r2, r1
 8004904:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800490c:	6053      	str	r3, [r2, #4]
 800490e:	e0b5      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004910:	78fa      	ldrb	r2, [r7, #3]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	334d      	adds	r3, #77	@ 0x4d
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b05      	cmp	r3, #5
 8004924:	d114      	bne.n	8004950 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	334d      	adds	r3, #77	@ 0x4d
 8004936:	2202      	movs	r2, #2
 8004938:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	334c      	adds	r3, #76	@ 0x4c
 800494a:	2202      	movs	r2, #2
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	e095      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	334d      	adds	r3, #77	@ 0x4d
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b06      	cmp	r3, #6
 8004964:	d114      	bne.n	8004990 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	334d      	adds	r3, #77	@ 0x4d
 8004976:	2202      	movs	r2, #2
 8004978:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	334c      	adds	r3, #76	@ 0x4c
 800498a:	2205      	movs	r2, #5
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	e075      	b.n	8004a7c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	334d      	adds	r3, #77	@ 0x4d
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b07      	cmp	r3, #7
 80049a4:	d00a      	beq.n	80049bc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	334d      	adds	r3, #77	@ 0x4d
 80049b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80049b8:	2b09      	cmp	r3, #9
 80049ba:	d170      	bne.n	8004a9e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049bc:	78fa      	ldrb	r2, [r7, #3]
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	4613      	mov	r3, r2
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	334d      	adds	r3, #77	@ 0x4d
 80049cc:	2202      	movs	r2, #2
 80049ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80049d0:	78fa      	ldrb	r2, [r7, #3]
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	3344      	adds	r3, #68	@ 0x44
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	1c59      	adds	r1, r3, #1
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	1a9b      	subs	r3, r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4403      	add	r3, r0
 80049f0:	3344      	adds	r3, #68	@ 0x44
 80049f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80049f4:	78fa      	ldrb	r2, [r7, #3]
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	4613      	mov	r3, r2
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	1a9b      	subs	r3, r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	3344      	adds	r3, #68	@ 0x44
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d914      	bls.n	8004a34 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	3344      	adds	r3, #68	@ 0x44
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	334c      	adds	r3, #76	@ 0x4c
 8004a2e:	2204      	movs	r2, #4
 8004a30:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a32:	e022      	b.n	8004a7a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a34:	78fa      	ldrb	r2, [r7, #3]
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	334c      	adds	r3, #76	@ 0x4c
 8004a44:	2202      	movs	r2, #2
 8004a46:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a5e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a66:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a74:	461a      	mov	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a7a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004a7c:	78fa      	ldrb	r2, [r7, #3]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	334c      	adds	r3, #76	@ 0x4c
 8004a8c:	781a      	ldrb	r2, [r3, #0]
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f006 fd68 	bl	800b568 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a98:	e002      	b.n	8004aa0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004a9e:	bf00      	nop
  }
}
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b08a      	sub	sp, #40	@ 0x28
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	0c5b      	lsrs	r3, r3, #17
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	091b      	lsrs	r3, r3, #4
 8004ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ada:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d004      	beq.n	8004aec <HCD_RXQLVL_IRQHandler+0x46>
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b05      	cmp	r3, #5
 8004ae6:	f000 80b6 	beq.w	8004c56 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004aea:	e0b7      	b.n	8004c5c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 80b3 	beq.w	8004c5a <HCD_RXQLVL_IRQHandler+0x1b4>
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4613      	mov	r3, r2
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	332c      	adds	r3, #44	@ 0x2c
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80a7 	beq.w	8004c5a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	3338      	adds	r3, #56	@ 0x38
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	18d1      	adds	r1, r2, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4613      	mov	r3, r2
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4403      	add	r3, r0
 8004b30:	3334      	adds	r3, #52	@ 0x34
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4299      	cmp	r1, r3
 8004b36:	f200 8083 	bhi.w	8004c40 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	332c      	adds	r3, #44	@ 0x2c
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	b292      	uxth	r2, r2
 8004b54:	4619      	mov	r1, r3
 8004b56:	f003 fb93 	bl	8008280 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	332c      	adds	r3, #44	@ 0x2c
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	18d1      	adds	r1, r2, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4613      	mov	r3, r2
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4403      	add	r3, r0
 8004b7e:	332c      	adds	r3, #44	@ 0x2c
 8004b80:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	4613      	mov	r3, r2
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	3338      	adds	r3, #56	@ 0x38
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	18d1      	adds	r1, r2, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4403      	add	r3, r0
 8004ba6:	3338      	adds	r3, #56	@ 0x38
 8004ba8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	0cdb      	lsrs	r3, r3, #19
 8004bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bbe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	3328      	adds	r3, #40	@ 0x28
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d13f      	bne.n	8004c5a <HCD_RXQLVL_IRQHandler+0x1b4>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d03c      	beq.n	8004c5a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bf6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bfe:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4613      	mov	r3, r2
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	333c      	adds	r3, #60	@ 0x3c
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	f083 0301 	eor.w	r3, r3, #1
 8004c28:	b2d8      	uxtb	r0, r3
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	333c      	adds	r3, #60	@ 0x3c
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	701a      	strb	r2, [r3, #0]
      break;
 8004c3e:	e00c      	b.n	8004c5a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4613      	mov	r3, r2
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	334c      	adds	r3, #76	@ 0x4c
 8004c50:	2204      	movs	r2, #4
 8004c52:	701a      	strb	r2, [r3, #0]
      break;
 8004c54:	e001      	b.n	8004c5a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004c5a:	bf00      	nop
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	3728      	adds	r7, #40	@ 0x28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004c90:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d10b      	bne.n	8004cb4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d102      	bne.n	8004cac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f006 fc42 	bl	800b530 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f043 0302 	orr.w	r3, r3, #2
 8004cb2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d132      	bne.n	8004d24 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f043 0308 	orr.w	r3, r3, #8
 8004cc4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d126      	bne.n	8004d1e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	7a5b      	ldrb	r3, [r3, #9]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d113      	bne.n	8004d00 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004cde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ce2:	d106      	bne.n	8004cf2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2102      	movs	r1, #2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f003 fc5e 	bl	80085ac <USB_InitFSLSPClkSel>
 8004cf0:	e011      	b.n	8004d16 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f003 fc57 	bl	80085ac <USB_InitFSLSPClkSel>
 8004cfe:	e00a      	b.n	8004d16 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	79db      	ldrb	r3, [r3, #7]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d106      	bne.n	8004d16 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004d14:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f006 fc34 	bl	800b584 <HAL_HCD_PortEnabled_Callback>
 8004d1c:	e002      	b.n	8004d24 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f006 fc3e 	bl	800b5a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d103      	bne.n	8004d36 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f043 0320 	orr.w	r3, r3, #32
 8004d34:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6013      	str	r3, [r2, #0]
}
 8004d42:	bf00      	nop
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e12b      	b.n	8004fb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fc ff26 	bl	8001bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2224      	movs	r2, #36	@ 0x24
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0201 	bic.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004db0:	f001 fa20 	bl	80061f4 <HAL_RCC_GetPCLK1Freq>
 8004db4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4a81      	ldr	r2, [pc, #516]	@ (8004fc0 <HAL_I2C_Init+0x274>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d807      	bhi.n	8004dd0 <HAL_I2C_Init+0x84>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a80      	ldr	r2, [pc, #512]	@ (8004fc4 <HAL_I2C_Init+0x278>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	bf94      	ite	ls
 8004dc8:	2301      	movls	r3, #1
 8004dca:	2300      	movhi	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e006      	b.n	8004dde <HAL_I2C_Init+0x92>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a7d      	ldr	r2, [pc, #500]	@ (8004fc8 <HAL_I2C_Init+0x27c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	bf94      	ite	ls
 8004dd8:	2301      	movls	r3, #1
 8004dda:	2300      	movhi	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e0e7      	b.n	8004fb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4a78      	ldr	r2, [pc, #480]	@ (8004fcc <HAL_I2C_Init+0x280>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	0c9b      	lsrs	r3, r3, #18
 8004df0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4a6a      	ldr	r2, [pc, #424]	@ (8004fc0 <HAL_I2C_Init+0x274>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d802      	bhi.n	8004e20 <HAL_I2C_Init+0xd4>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	e009      	b.n	8004e34 <HAL_I2C_Init+0xe8>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	4a69      	ldr	r2, [pc, #420]	@ (8004fd0 <HAL_I2C_Init+0x284>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	099b      	lsrs	r3, r3, #6
 8004e32:	3301      	adds	r3, #1
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	495c      	ldr	r1, [pc, #368]	@ (8004fc0 <HAL_I2C_Init+0x274>)
 8004e50:	428b      	cmp	r3, r1
 8004e52:	d819      	bhi.n	8004e88 <HAL_I2C_Init+0x13c>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	1e59      	subs	r1, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e62:	1c59      	adds	r1, r3, #1
 8004e64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e68:	400b      	ands	r3, r1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_I2C_Init+0x138>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1e59      	subs	r1, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e82:	e051      	b.n	8004f28 <HAL_I2C_Init+0x1dc>
 8004e84:	2304      	movs	r3, #4
 8004e86:	e04f      	b.n	8004f28 <HAL_I2C_Init+0x1dc>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d111      	bne.n	8004eb4 <HAL_I2C_Init+0x168>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1e58      	subs	r0, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6859      	ldr	r1, [r3, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	440b      	add	r3, r1
 8004e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	e012      	b.n	8004eda <HAL_I2C_Init+0x18e>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	1e58      	subs	r0, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6859      	ldr	r1, [r3, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	0099      	lsls	r1, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eca:	3301      	adds	r3, #1
 8004ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf0c      	ite	eq
 8004ed4:	2301      	moveq	r3, #1
 8004ed6:	2300      	movne	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_I2C_Init+0x196>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e022      	b.n	8004f28 <HAL_I2C_Init+0x1dc>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10e      	bne.n	8004f08 <HAL_I2C_Init+0x1bc>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1e58      	subs	r0, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6859      	ldr	r1, [r3, #4]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	440b      	add	r3, r1
 8004ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004efc:	3301      	adds	r3, #1
 8004efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f06:	e00f      	b.n	8004f28 <HAL_I2C_Init+0x1dc>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	1e58      	subs	r0, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6859      	ldr	r1, [r3, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	0099      	lsls	r1, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f1e:	3301      	adds	r3, #1
 8004f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	6809      	ldr	r1, [r1, #0]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69da      	ldr	r2, [r3, #28]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6911      	ldr	r1, [r2, #16]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	68d2      	ldr	r2, [r2, #12]
 8004f62:	4311      	orrs	r1, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	000186a0 	.word	0x000186a0
 8004fc4:	001e847f 	.word	0x001e847f
 8004fc8:	003d08ff 	.word	0x003d08ff
 8004fcc:	431bde83 	.word	0x431bde83
 8004fd0:	10624dd3 	.word	0x10624dd3

08004fd4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e128      	b.n	8005238 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a90      	ldr	r2, [pc, #576]	@ (8005240 <HAL_I2S_Init+0x26c>)
 8004ffe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7fc fe27 	bl	8001c54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2202      	movs	r2, #2
 800500a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800501c:	f023 030f 	bic.w	r3, r3, #15
 8005020:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2202      	movs	r2, #2
 8005028:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d060      	beq.n	80050f4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d102      	bne.n	8005040 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800503a:	2310      	movs	r3, #16
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	e001      	b.n	8005044 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005040:	2320      	movs	r3, #32
 8005042:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2b20      	cmp	r3, #32
 800504a:	d802      	bhi.n	8005052 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005052:	2001      	movs	r0, #1
 8005054:	f001 f9d8 	bl	8006408 <HAL_RCCEx_GetPeriphCLKFreq>
 8005058:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005062:	d125      	bne.n	80050b0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d010      	beq.n	800508e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	fbb2 f2f3 	udiv	r2, r2, r3
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	461a      	mov	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	3305      	adds	r3, #5
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	e01f      	b.n	80050ce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	fbb2 f2f3 	udiv	r2, r2, r3
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	461a      	mov	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050aa:	3305      	adds	r3, #5
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e00e      	b.n	80050ce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	461a      	mov	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	3305      	adds	r3, #5
 80050cc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	4a5c      	ldr	r2, [pc, #368]	@ (8005244 <HAL_I2S_Init+0x270>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	08db      	lsrs	r3, r3, #3
 80050d8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	e003      	b.n	80050fc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80050f4:	2302      	movs	r3, #2
 80050f6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d902      	bls.n	8005108 <HAL_I2S_Init+0x134>
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	2bff      	cmp	r3, #255	@ 0xff
 8005106:	d907      	bls.n	8005118 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510c:	f043 0210 	orr.w	r2, r3, #16
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e08f      	b.n	8005238 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	ea42 0103 	orr.w	r1, r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	430a      	orrs	r2, r1
 800512a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005136:	f023 030f 	bic.w	r3, r3, #15
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6851      	ldr	r1, [r2, #4]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6892      	ldr	r2, [r2, #8]
 8005142:	4311      	orrs	r1, r2
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	68d2      	ldr	r2, [r2, #12]
 8005148:	4311      	orrs	r1, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6992      	ldr	r2, [r2, #24]
 800514e:	430a      	orrs	r2, r1
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800515a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d161      	bne.n	8005228 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a38      	ldr	r2, [pc, #224]	@ (8005248 <HAL_I2S_Init+0x274>)
 8005168:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a37      	ldr	r2, [pc, #220]	@ (800524c <HAL_I2S_Init+0x278>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d101      	bne.n	8005178 <HAL_I2S_Init+0x1a4>
 8005174:	4b36      	ldr	r3, [pc, #216]	@ (8005250 <HAL_I2S_Init+0x27c>)
 8005176:	e001      	b.n	800517c <HAL_I2S_Init+0x1a8>
 8005178:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	4932      	ldr	r1, [pc, #200]	@ (800524c <HAL_I2S_Init+0x278>)
 8005184:	428a      	cmp	r2, r1
 8005186:	d101      	bne.n	800518c <HAL_I2S_Init+0x1b8>
 8005188:	4a31      	ldr	r2, [pc, #196]	@ (8005250 <HAL_I2S_Init+0x27c>)
 800518a:	e001      	b.n	8005190 <HAL_I2S_Init+0x1bc>
 800518c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005190:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005194:	f023 030f 	bic.w	r3, r3, #15
 8005198:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2b      	ldr	r2, [pc, #172]	@ (800524c <HAL_I2S_Init+0x278>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d101      	bne.n	80051a8 <HAL_I2S_Init+0x1d4>
 80051a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005250 <HAL_I2S_Init+0x27c>)
 80051a6:	e001      	b.n	80051ac <HAL_I2S_Init+0x1d8>
 80051a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051ac:	2202      	movs	r2, #2
 80051ae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a25      	ldr	r2, [pc, #148]	@ (800524c <HAL_I2S_Init+0x278>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d101      	bne.n	80051be <HAL_I2S_Init+0x1ea>
 80051ba:	4b25      	ldr	r3, [pc, #148]	@ (8005250 <HAL_I2S_Init+0x27c>)
 80051bc:	e001      	b.n	80051c2 <HAL_I2S_Init+0x1ee>
 80051be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ce:	d003      	beq.n	80051d8 <HAL_I2S_Init+0x204>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d103      	bne.n	80051e0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80051d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	e001      	b.n	80051e4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80051ee:	4313      	orrs	r3, r2
 80051f0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80051f8:	4313      	orrs	r3, r2
 80051fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005202:	4313      	orrs	r3, r2
 8005204:	b29a      	uxth	r2, r3
 8005206:	897b      	ldrh	r3, [r7, #10]
 8005208:	4313      	orrs	r3, r2
 800520a:	b29b      	uxth	r3, r3
 800520c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005210:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a0d      	ldr	r2, [pc, #52]	@ (800524c <HAL_I2S_Init+0x278>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d101      	bne.n	8005220 <HAL_I2S_Init+0x24c>
 800521c:	4b0c      	ldr	r3, [pc, #48]	@ (8005250 <HAL_I2S_Init+0x27c>)
 800521e:	e001      	b.n	8005224 <HAL_I2S_Init+0x250>
 8005220:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005224:	897a      	ldrh	r2, [r7, #10]
 8005226:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	0800534b 	.word	0x0800534b
 8005244:	cccccccd 	.word	0xcccccccd
 8005248:	08005461 	.word	0x08005461
 800524c:	40003800 	.word	0x40003800
 8005250:	40003400 	.word	0x40003400

08005254 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529c:	881a      	ldrh	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	1c9a      	adds	r2, r3, #2
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10e      	bne.n	80052e4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052d4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff ffb8 	bl	8005254 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fe:	b292      	uxth	r2, r2
 8005300:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	1c9a      	adds	r2, r3, #2
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10e      	bne.n	8005342 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005332:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff ff93 	bl	8005268 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b086      	sub	sp, #24
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b04      	cmp	r3, #4
 8005364:	d13a      	bne.n	80053dc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b01      	cmp	r3, #1
 800536e:	d109      	bne.n	8005384 <I2S_IRQHandler+0x3a>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537a:	2b40      	cmp	r3, #64	@ 0x40
 800537c:	d102      	bne.n	8005384 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff ffb4 	bl	80052ec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538a:	2b40      	cmp	r3, #64	@ 0x40
 800538c:	d126      	bne.n	80053dc <I2S_IRQHandler+0x92>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b20      	cmp	r3, #32
 800539a:	d11f      	bne.n	80053dc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80053ac:	2300      	movs	r3, #0
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ce:	f043 0202 	orr.w	r2, r3, #2
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff ff50 	bl	800527c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d136      	bne.n	8005456 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d109      	bne.n	8005406 <I2S_IRQHandler+0xbc>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fc:	2b80      	cmp	r3, #128	@ 0x80
 80053fe:	d102      	bne.n	8005406 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff ff45 	bl	8005290 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b08      	cmp	r3, #8
 800540e:	d122      	bne.n	8005456 <I2S_IRQHandler+0x10c>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b20      	cmp	r3, #32
 800541c:	d11b      	bne.n	8005456 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800542c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005448:	f043 0204 	orr.w	r2, r3, #4
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff ff13 	bl	800527c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005456:	bf00      	nop
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a92      	ldr	r2, [pc, #584]	@ (80056c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d101      	bne.n	800547e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800547a:	4b92      	ldr	r3, [pc, #584]	@ (80056c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800547c:	e001      	b.n	8005482 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800547e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a8b      	ldr	r2, [pc, #556]	@ (80056c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d101      	bne.n	800549c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005498:	4b8a      	ldr	r3, [pc, #552]	@ (80056c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800549a:	e001      	b.n	80054a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800549c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ac:	d004      	beq.n	80054b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f040 8099 	bne.w	80055ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d107      	bne.n	80054d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f925 	bl	800571c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d107      	bne.n	80054ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f9c8 	bl	800587c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f2:	2b40      	cmp	r3, #64	@ 0x40
 80054f4:	d13a      	bne.n	800556c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d035      	beq.n	800556c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a6e      	ldr	r2, [pc, #440]	@ (80056c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d101      	bne.n	800550e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800550a:	4b6e      	ldr	r3, [pc, #440]	@ (80056c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800550c:	e001      	b.n	8005512 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800550e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4969      	ldr	r1, [pc, #420]	@ (80056c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800551a:	428b      	cmp	r3, r1
 800551c:	d101      	bne.n	8005522 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800551e:	4b69      	ldr	r3, [pc, #420]	@ (80056c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005520:	e001      	b.n	8005526 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005522:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005526:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800552a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800553a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800555e:	f043 0202 	orr.w	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff fe88 	bl	800527c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b08      	cmp	r3, #8
 8005574:	f040 80c3 	bne.w	80056fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 80bd 	beq.w	80056fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005592:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a49      	ldr	r2, [pc, #292]	@ (80056c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d101      	bne.n	80055a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800559e:	4b49      	ldr	r3, [pc, #292]	@ (80056c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055a0:	e001      	b.n	80055a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80055a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4944      	ldr	r1, [pc, #272]	@ (80056c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055ae:	428b      	cmp	r3, r1
 80055b0:	d101      	bne.n	80055b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80055b2:	4b44      	ldr	r3, [pc, #272]	@ (80056c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055b4:	e001      	b.n	80055ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80055b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80055be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80055c0:	2300      	movs	r3, #0
 80055c2:	60bb      	str	r3, [r7, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	60bb      	str	r3, [r7, #8]
 80055cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055da:	f043 0204 	orr.w	r2, r3, #4
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff fe4a 	bl	800527c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80055e8:	e089      	b.n	80056fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d107      	bne.n	8005604 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8be 	bl	8005780 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b01      	cmp	r3, #1
 800560c:	d107      	bne.n	800561e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8fd 	bl	8005818 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005624:	2b40      	cmp	r3, #64	@ 0x40
 8005626:	d12f      	bne.n	8005688 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d02a      	beq.n	8005688 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005640:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1e      	ldr	r2, [pc, #120]	@ (80056c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d101      	bne.n	8005650 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800564c:	4b1d      	ldr	r3, [pc, #116]	@ (80056c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800564e:	e001      	b.n	8005654 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005650:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4919      	ldr	r1, [pc, #100]	@ (80056c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800565c:	428b      	cmp	r3, r1
 800565e:	d101      	bne.n	8005664 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005660:	4b18      	ldr	r3, [pc, #96]	@ (80056c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005662:	e001      	b.n	8005668 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005664:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005668:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800566c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	f043 0202 	orr.w	r2, r3, #2
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff fdfa 	bl	800527c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b08      	cmp	r3, #8
 8005690:	d136      	bne.n	8005700 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d031      	beq.n	8005700 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a07      	ldr	r2, [pc, #28]	@ (80056c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d101      	bne.n	80056aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80056a6:	4b07      	ldr	r3, [pc, #28]	@ (80056c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056a8:	e001      	b.n	80056ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80056aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4902      	ldr	r1, [pc, #8]	@ (80056c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056b6:	428b      	cmp	r3, r1
 80056b8:	d106      	bne.n	80056c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80056ba:	4b02      	ldr	r3, [pc, #8]	@ (80056c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056bc:	e006      	b.n	80056cc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80056be:	bf00      	nop
 80056c0:	40003800 	.word	0x40003800
 80056c4:	40003400 	.word	0x40003400
 80056c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80056d0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ee:	f043 0204 	orr.w	r2, r3, #4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff fdc0 	bl	800527c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056fc:	e000      	b.n	8005700 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80056fe:	bf00      	nop
}
 8005700:	bf00      	nop
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	1c99      	adds	r1, r3, #2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6251      	str	r1, [r2, #36]	@ 0x24
 800572e:	881a      	ldrh	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d113      	bne.n	8005776 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800575c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d106      	bne.n	8005776 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff ffc9 	bl	8005708 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578c:	1c99      	adds	r1, r3, #2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6251      	str	r1, [r2, #36]	@ 0x24
 8005792:	8819      	ldrh	r1, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1d      	ldr	r2, [pc, #116]	@ (8005810 <I2SEx_TxISR_I2SExt+0x90>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d101      	bne.n	80057a2 <I2SEx_TxISR_I2SExt+0x22>
 800579e:	4b1d      	ldr	r3, [pc, #116]	@ (8005814 <I2SEx_TxISR_I2SExt+0x94>)
 80057a0:	e001      	b.n	80057a6 <I2SEx_TxISR_I2SExt+0x26>
 80057a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057a6:	460a      	mov	r2, r1
 80057a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d121      	bne.n	8005806 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a12      	ldr	r2, [pc, #72]	@ (8005810 <I2SEx_TxISR_I2SExt+0x90>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d101      	bne.n	80057d0 <I2SEx_TxISR_I2SExt+0x50>
 80057cc:	4b11      	ldr	r3, [pc, #68]	@ (8005814 <I2SEx_TxISR_I2SExt+0x94>)
 80057ce:	e001      	b.n	80057d4 <I2SEx_TxISR_I2SExt+0x54>
 80057d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	490d      	ldr	r1, [pc, #52]	@ (8005810 <I2SEx_TxISR_I2SExt+0x90>)
 80057dc:	428b      	cmp	r3, r1
 80057de:	d101      	bne.n	80057e4 <I2SEx_TxISR_I2SExt+0x64>
 80057e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005814 <I2SEx_TxISR_I2SExt+0x94>)
 80057e2:	e001      	b.n	80057e8 <I2SEx_TxISR_I2SExt+0x68>
 80057e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d106      	bne.n	8005806 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff ff81 	bl	8005708 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005806:	bf00      	nop
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40003800 	.word	0x40003800
 8005814:	40003400 	.word	0x40003400

08005818 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68d8      	ldr	r0, [r3, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582a:	1c99      	adds	r1, r3, #2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005830:	b282      	uxth	r2, r0
 8005832:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d113      	bne.n	8005874 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800585a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff ff4a 	bl	8005708 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005874:	bf00      	nop
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a20      	ldr	r2, [pc, #128]	@ (800590c <I2SEx_RxISR_I2SExt+0x90>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d101      	bne.n	8005892 <I2SEx_RxISR_I2SExt+0x16>
 800588e:	4b20      	ldr	r3, [pc, #128]	@ (8005910 <I2SEx_RxISR_I2SExt+0x94>)
 8005890:	e001      	b.n	8005896 <I2SEx_RxISR_I2SExt+0x1a>
 8005892:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005896:	68d8      	ldr	r0, [r3, #12]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589c:	1c99      	adds	r1, r3, #2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80058a2:	b282      	uxth	r2, r0
 80058a4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d121      	bne.n	8005902 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a12      	ldr	r2, [pc, #72]	@ (800590c <I2SEx_RxISR_I2SExt+0x90>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d101      	bne.n	80058cc <I2SEx_RxISR_I2SExt+0x50>
 80058c8:	4b11      	ldr	r3, [pc, #68]	@ (8005910 <I2SEx_RxISR_I2SExt+0x94>)
 80058ca:	e001      	b.n	80058d0 <I2SEx_RxISR_I2SExt+0x54>
 80058cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	490d      	ldr	r1, [pc, #52]	@ (800590c <I2SEx_RxISR_I2SExt+0x90>)
 80058d8:	428b      	cmp	r3, r1
 80058da:	d101      	bne.n	80058e0 <I2SEx_RxISR_I2SExt+0x64>
 80058dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005910 <I2SEx_RxISR_I2SExt+0x94>)
 80058de:	e001      	b.n	80058e4 <I2SEx_RxISR_I2SExt+0x68>
 80058e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058e8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff ff03 	bl	8005708 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40003800 	.word	0x40003800
 8005910:	40003400 	.word	0x40003400

08005914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e267      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d075      	beq.n	8005a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005932:	4b88      	ldr	r3, [pc, #544]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	2b04      	cmp	r3, #4
 800593c:	d00c      	beq.n	8005958 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800593e:	4b85      	ldr	r3, [pc, #532]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005946:	2b08      	cmp	r3, #8
 8005948:	d112      	bne.n	8005970 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800594a:	4b82      	ldr	r3, [pc, #520]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005952:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005956:	d10b      	bne.n	8005970 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005958:	4b7e      	ldr	r3, [pc, #504]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d05b      	beq.n	8005a1c <HAL_RCC_OscConfig+0x108>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d157      	bne.n	8005a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e242      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005978:	d106      	bne.n	8005988 <HAL_RCC_OscConfig+0x74>
 800597a:	4b76      	ldr	r3, [pc, #472]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a75      	ldr	r2, [pc, #468]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	e01d      	b.n	80059c4 <HAL_RCC_OscConfig+0xb0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005990:	d10c      	bne.n	80059ac <HAL_RCC_OscConfig+0x98>
 8005992:	4b70      	ldr	r3, [pc, #448]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a6f      	ldr	r2, [pc, #444]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	4b6d      	ldr	r3, [pc, #436]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a6c      	ldr	r2, [pc, #432]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	e00b      	b.n	80059c4 <HAL_RCC_OscConfig+0xb0>
 80059ac:	4b69      	ldr	r3, [pc, #420]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a68      	ldr	r2, [pc, #416]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	4b66      	ldr	r3, [pc, #408]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a65      	ldr	r2, [pc, #404]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d013      	beq.n	80059f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059cc:	f7fc fd92 	bl	80024f4 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d4:	f7fc fd8e 	bl	80024f4 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b64      	cmp	r3, #100	@ 0x64
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e207      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0xc0>
 80059f2:	e014      	b.n	8005a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f4:	f7fc fd7e 	bl	80024f4 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059fc:	f7fc fd7a 	bl	80024f4 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b64      	cmp	r3, #100	@ 0x64
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e1f3      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a0e:	4b51      	ldr	r3, [pc, #324]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0xe8>
 8005a1a:	e000      	b.n	8005a1e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d063      	beq.n	8005af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a36:	4b47      	ldr	r3, [pc, #284]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d11c      	bne.n	8005a7c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a42:	4b44      	ldr	r3, [pc, #272]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d116      	bne.n	8005a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a4e:	4b41      	ldr	r3, [pc, #260]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_RCC_OscConfig+0x152>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d001      	beq.n	8005a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e1c7      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a66:	4b3b      	ldr	r3, [pc, #236]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4937      	ldr	r1, [pc, #220]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7a:	e03a      	b.n	8005af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d020      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a84:	4b34      	ldr	r3, [pc, #208]	@ (8005b58 <HAL_RCC_OscConfig+0x244>)
 8005a86:	2201      	movs	r2, #1
 8005a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8a:	f7fc fd33 	bl	80024f4 <HAL_GetTick>
 8005a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a90:	e008      	b.n	8005aa4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a92:	f7fc fd2f 	bl	80024f4 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e1a8      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0f0      	beq.n	8005a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab0:	4b28      	ldr	r3, [pc, #160]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	4925      	ldr	r1, [pc, #148]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	600b      	str	r3, [r1, #0]
 8005ac4:	e015      	b.n	8005af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ac6:	4b24      	ldr	r3, [pc, #144]	@ (8005b58 <HAL_RCC_OscConfig+0x244>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fc fd12 	bl	80024f4 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ad4:	f7fc fd0e 	bl	80024f4 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e187      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d036      	beq.n	8005b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b06:	4b15      	ldr	r3, [pc, #84]	@ (8005b5c <HAL_RCC_OscConfig+0x248>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0c:	f7fc fcf2 	bl	80024f4 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b14:	f7fc fcee 	bl	80024f4 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e167      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b26:	4b0b      	ldr	r3, [pc, #44]	@ (8005b54 <HAL_RCC_OscConfig+0x240>)
 8005b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0x200>
 8005b32:	e01b      	b.n	8005b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b34:	4b09      	ldr	r3, [pc, #36]	@ (8005b5c <HAL_RCC_OscConfig+0x248>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b3a:	f7fc fcdb 	bl	80024f4 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b40:	e00e      	b.n	8005b60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b42:	f7fc fcd7 	bl	80024f4 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d907      	bls.n	8005b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e150      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
 8005b54:	40023800 	.word	0x40023800
 8005b58:	42470000 	.word	0x42470000
 8005b5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b60:	4b88      	ldr	r3, [pc, #544]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ea      	bne.n	8005b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8097 	beq.w	8005ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b7e:	4b81      	ldr	r3, [pc, #516]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10f      	bne.n	8005baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	4b7d      	ldr	r3, [pc, #500]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	4a7c      	ldr	r2, [pc, #496]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b9a:	4b7a      	ldr	r3, [pc, #488]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005baa:	4b77      	ldr	r3, [pc, #476]	@ (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d118      	bne.n	8005be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bb6:	4b74      	ldr	r3, [pc, #464]	@ (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a73      	ldr	r2, [pc, #460]	@ (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bc2:	f7fc fc97 	bl	80024f4 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bca:	f7fc fc93 	bl	80024f4 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e10c      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8005d88 <HAL_RCC_OscConfig+0x474>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f0      	beq.n	8005bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d106      	bne.n	8005bfe <HAL_RCC_OscConfig+0x2ea>
 8005bf0:	4b64      	ldr	r3, [pc, #400]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf4:	4a63      	ldr	r2, [pc, #396]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bfc:	e01c      	b.n	8005c38 <HAL_RCC_OscConfig+0x324>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d10c      	bne.n	8005c20 <HAL_RCC_OscConfig+0x30c>
 8005c06:	4b5f      	ldr	r3, [pc, #380]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	f043 0304 	orr.w	r3, r3, #4
 8005c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c12:	4b5c      	ldr	r3, [pc, #368]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c16:	4a5b      	ldr	r2, [pc, #364]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c1e:	e00b      	b.n	8005c38 <HAL_RCC_OscConfig+0x324>
 8005c20:	4b58      	ldr	r3, [pc, #352]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c24:	4a57      	ldr	r2, [pc, #348]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c26:	f023 0301 	bic.w	r3, r3, #1
 8005c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c2c:	4b55      	ldr	r3, [pc, #340]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c30:	4a54      	ldr	r2, [pc, #336]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c32:	f023 0304 	bic.w	r3, r3, #4
 8005c36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d015      	beq.n	8005c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c40:	f7fc fc58 	bl	80024f4 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c46:	e00a      	b.n	8005c5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c48:	f7fc fc54 	bl	80024f4 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e0cb      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5e:	4b49      	ldr	r3, [pc, #292]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0ee      	beq.n	8005c48 <HAL_RCC_OscConfig+0x334>
 8005c6a:	e014      	b.n	8005c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6c:	f7fc fc42 	bl	80024f4 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c72:	e00a      	b.n	8005c8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c74:	f7fc fc3e 	bl	80024f4 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e0b5      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1ee      	bne.n	8005c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d105      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c9c:	4b39      	ldr	r3, [pc, #228]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca0:	4a38      	ldr	r2, [pc, #224]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ca6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80a1 	beq.w	8005df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cb2:	4b34      	ldr	r3, [pc, #208]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d05c      	beq.n	8005d78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d141      	bne.n	8005d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc6:	4b31      	ldr	r3, [pc, #196]	@ (8005d8c <HAL_RCC_OscConfig+0x478>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ccc:	f7fc fc12 	bl	80024f4 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd4:	f7fc fc0e 	bl	80024f4 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e087      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce6:	4b27      	ldr	r3, [pc, #156]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69da      	ldr	r2, [r3, #28]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	019b      	lsls	r3, r3, #6
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d14:	061b      	lsls	r3, r3, #24
 8005d16:	491b      	ldr	r1, [pc, #108]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d8c <HAL_RCC_OscConfig+0x478>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d22:	f7fc fbe7 	bl	80024f4 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d2a:	f7fc fbe3 	bl	80024f4 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e05c      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d3c:	4b11      	ldr	r3, [pc, #68]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCC_OscConfig+0x416>
 8005d48:	e054      	b.n	8005df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4a:	4b10      	ldr	r3, [pc, #64]	@ (8005d8c <HAL_RCC_OscConfig+0x478>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d50:	f7fc fbd0 	bl	80024f4 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d58:	f7fc fbcc 	bl	80024f4 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e045      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6a:	4b06      	ldr	r3, [pc, #24]	@ (8005d84 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x444>
 8005d76:	e03d      	b.n	8005df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d107      	bne.n	8005d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e038      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
 8005d84:	40023800 	.word	0x40023800
 8005d88:	40007000 	.word	0x40007000
 8005d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d90:	4b1b      	ldr	r3, [pc, #108]	@ (8005e00 <HAL_RCC_OscConfig+0x4ec>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d028      	beq.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d121      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d11a      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d111      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d107      	bne.n	8005df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d001      	beq.n	8005df4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40023800 	.word	0x40023800

08005e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0cc      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e18:	4b68      	ldr	r3, [pc, #416]	@ (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d90c      	bls.n	8005e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e26:	4b65      	ldr	r3, [pc, #404]	@ (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2e:	4b63      	ldr	r3, [pc, #396]	@ (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e0b8      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d020      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e58:	4b59      	ldr	r3, [pc, #356]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4a58      	ldr	r2, [pc, #352]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e70:	4b53      	ldr	r3, [pc, #332]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	4a52      	ldr	r2, [pc, #328]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e7c:	4b50      	ldr	r3, [pc, #320]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	494d      	ldr	r1, [pc, #308]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d044      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea2:	4b47      	ldr	r3, [pc, #284]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d119      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e07f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d107      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e06f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e067      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ee2:	4b37      	ldr	r3, [pc, #220]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f023 0203 	bic.w	r2, r3, #3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	4934      	ldr	r1, [pc, #208]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef4:	f7fc fafe 	bl	80024f4 <HAL_GetTick>
 8005ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efa:	e00a      	b.n	8005f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005efc:	f7fc fafa 	bl	80024f4 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e04f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f12:	4b2b      	ldr	r3, [pc, #172]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 020c 	and.w	r2, r3, #12
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d1eb      	bne.n	8005efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f24:	4b25      	ldr	r3, [pc, #148]	@ (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d20c      	bcs.n	8005f4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f32:	4b22      	ldr	r3, [pc, #136]	@ (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	4b20      	ldr	r3, [pc, #128]	@ (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e032      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d008      	beq.n	8005f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f58:	4b19      	ldr	r3, [pc, #100]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4916      	ldr	r1, [pc, #88]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f76:	4b12      	ldr	r3, [pc, #72]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	490e      	ldr	r1, [pc, #56]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f8a:	f000 f821 	bl	8005fd0 <HAL_RCC_GetSysClockFreq>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	490a      	ldr	r1, [pc, #40]	@ (8005fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f9c:	5ccb      	ldrb	r3, [r1, r3]
 8005f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa2:	4a09      	ldr	r2, [pc, #36]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005fa6:	4b09      	ldr	r3, [pc, #36]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fc fa5e 	bl	800246c <HAL_InitTick>

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	40023c00 	.word	0x40023c00
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	0800e334 	.word	0x0800e334
 8005fc8:	20000000 	.word	0x20000000
 8005fcc:	20000004 	.word	0x20000004

08005fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd4:	b094      	sub	sp, #80	@ 0x50
 8005fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fe8:	4b79      	ldr	r3, [pc, #484]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 030c 	and.w	r3, r3, #12
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d00d      	beq.n	8006010 <HAL_RCC_GetSysClockFreq+0x40>
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	f200 80e1 	bhi.w	80061bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_RCC_GetSysClockFreq+0x34>
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d003      	beq.n	800600a <HAL_RCC_GetSysClockFreq+0x3a>
 8006002:	e0db      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006004:	4b73      	ldr	r3, [pc, #460]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006006:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006008:	e0db      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800600a:	4b73      	ldr	r3, [pc, #460]	@ (80061d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800600c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800600e:	e0d8      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006010:	4b6f      	ldr	r3, [pc, #444]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006018:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800601a:	4b6d      	ldr	r3, [pc, #436]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d063      	beq.n	80060ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006026:	4b6a      	ldr	r3, [pc, #424]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	099b      	lsrs	r3, r3, #6
 800602c:	2200      	movs	r2, #0
 800602e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006030:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006038:	633b      	str	r3, [r7, #48]	@ 0x30
 800603a:	2300      	movs	r3, #0
 800603c:	637b      	str	r3, [r7, #52]	@ 0x34
 800603e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006042:	4622      	mov	r2, r4
 8006044:	462b      	mov	r3, r5
 8006046:	f04f 0000 	mov.w	r0, #0
 800604a:	f04f 0100 	mov.w	r1, #0
 800604e:	0159      	lsls	r1, r3, #5
 8006050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006054:	0150      	lsls	r0, r2, #5
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4621      	mov	r1, r4
 800605c:	1a51      	subs	r1, r2, r1
 800605e:	6139      	str	r1, [r7, #16]
 8006060:	4629      	mov	r1, r5
 8006062:	eb63 0301 	sbc.w	r3, r3, r1
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006074:	4659      	mov	r1, fp
 8006076:	018b      	lsls	r3, r1, #6
 8006078:	4651      	mov	r1, sl
 800607a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800607e:	4651      	mov	r1, sl
 8006080:	018a      	lsls	r2, r1, #6
 8006082:	4651      	mov	r1, sl
 8006084:	ebb2 0801 	subs.w	r8, r2, r1
 8006088:	4659      	mov	r1, fp
 800608a:	eb63 0901 	sbc.w	r9, r3, r1
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800609a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800609e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060a2:	4690      	mov	r8, r2
 80060a4:	4699      	mov	r9, r3
 80060a6:	4623      	mov	r3, r4
 80060a8:	eb18 0303 	adds.w	r3, r8, r3
 80060ac:	60bb      	str	r3, [r7, #8]
 80060ae:	462b      	mov	r3, r5
 80060b0:	eb49 0303 	adc.w	r3, r9, r3
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060c2:	4629      	mov	r1, r5
 80060c4:	024b      	lsls	r3, r1, #9
 80060c6:	4621      	mov	r1, r4
 80060c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060cc:	4621      	mov	r1, r4
 80060ce:	024a      	lsls	r2, r1, #9
 80060d0:	4610      	mov	r0, r2
 80060d2:	4619      	mov	r1, r3
 80060d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060d6:	2200      	movs	r2, #0
 80060d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060e0:	f7fa fdb2 	bl	8000c48 <__aeabi_uldivmod>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4613      	mov	r3, r2
 80060ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060ec:	e058      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ee:	4b38      	ldr	r3, [pc, #224]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	099b      	lsrs	r3, r3, #6
 80060f4:	2200      	movs	r2, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	4611      	mov	r1, r2
 80060fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060fe:	623b      	str	r3, [r7, #32]
 8006100:	2300      	movs	r3, #0
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
 8006104:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006108:	4642      	mov	r2, r8
 800610a:	464b      	mov	r3, r9
 800610c:	f04f 0000 	mov.w	r0, #0
 8006110:	f04f 0100 	mov.w	r1, #0
 8006114:	0159      	lsls	r1, r3, #5
 8006116:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800611a:	0150      	lsls	r0, r2, #5
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4641      	mov	r1, r8
 8006122:	ebb2 0a01 	subs.w	sl, r2, r1
 8006126:	4649      	mov	r1, r9
 8006128:	eb63 0b01 	sbc.w	fp, r3, r1
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006138:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800613c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006140:	ebb2 040a 	subs.w	r4, r2, sl
 8006144:	eb63 050b 	sbc.w	r5, r3, fp
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	00eb      	lsls	r3, r5, #3
 8006152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006156:	00e2      	lsls	r2, r4, #3
 8006158:	4614      	mov	r4, r2
 800615a:	461d      	mov	r5, r3
 800615c:	4643      	mov	r3, r8
 800615e:	18e3      	adds	r3, r4, r3
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	464b      	mov	r3, r9
 8006164:	eb45 0303 	adc.w	r3, r5, r3
 8006168:	607b      	str	r3, [r7, #4]
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006176:	4629      	mov	r1, r5
 8006178:	028b      	lsls	r3, r1, #10
 800617a:	4621      	mov	r1, r4
 800617c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006180:	4621      	mov	r1, r4
 8006182:	028a      	lsls	r2, r1, #10
 8006184:	4610      	mov	r0, r2
 8006186:	4619      	mov	r1, r3
 8006188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800618a:	2200      	movs	r2, #0
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	61fa      	str	r2, [r7, #28]
 8006190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006194:	f7fa fd58 	bl	8000c48 <__aeabi_uldivmod>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4613      	mov	r3, r2
 800619e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80061a0:	4b0b      	ldr	r3, [pc, #44]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	0c1b      	lsrs	r3, r3, #16
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	3301      	adds	r3, #1
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80061b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061ba:	e002      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061bc:	4b05      	ldr	r3, [pc, #20]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80061be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3750      	adds	r7, #80	@ 0x50
 80061c8:	46bd      	mov	sp, r7
 80061ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ce:	bf00      	nop
 80061d0:	40023800 	.word	0x40023800
 80061d4:	00f42400 	.word	0x00f42400
 80061d8:	007a1200 	.word	0x007a1200

080061dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061e0:	4b03      	ldr	r3, [pc, #12]	@ (80061f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80061e2:	681b      	ldr	r3, [r3, #0]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20000000 	.word	0x20000000

080061f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061f8:	f7ff fff0 	bl	80061dc <HAL_RCC_GetHCLKFreq>
 80061fc:	4602      	mov	r2, r0
 80061fe:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	0a9b      	lsrs	r3, r3, #10
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	4903      	ldr	r1, [pc, #12]	@ (8006218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800620a:	5ccb      	ldrb	r3, [r1, r3]
 800620c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006210:	4618      	mov	r0, r3
 8006212:	bd80      	pop	{r7, pc}
 8006214:	40023800 	.word	0x40023800
 8006218:	0800e344 	.word	0x0800e344

0800621c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006220:	f7ff ffdc 	bl	80061dc <HAL_RCC_GetHCLKFreq>
 8006224:	4602      	mov	r2, r0
 8006226:	4b05      	ldr	r3, [pc, #20]	@ (800623c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	0b5b      	lsrs	r3, r3, #13
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	4903      	ldr	r1, [pc, #12]	@ (8006240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006232:	5ccb      	ldrb	r3, [r1, r3]
 8006234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006238:	4618      	mov	r0, r3
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40023800 	.word	0x40023800
 8006240:	0800e344 	.word	0x0800e344

08006244 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d105      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006268:	2b00      	cmp	r3, #0
 800626a:	d035      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800626c:	4b62      	ldr	r3, [pc, #392]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006272:	f7fc f93f 	bl	80024f4 <HAL_GetTick>
 8006276:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006278:	e008      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800627a:	f7fc f93b 	bl	80024f4 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e0b0      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800628c:	4b5b      	ldr	r3, [pc, #364]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f0      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	019a      	lsls	r2, r3, #6
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	071b      	lsls	r3, r3, #28
 80062a4:	4955      	ldr	r1, [pc, #340]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062ac:	4b52      	ldr	r3, [pc, #328]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062b2:	f7fc f91f 	bl	80024f4 <HAL_GetTick>
 80062b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062b8:	e008      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062ba:	f7fc f91b 	bl	80024f4 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d901      	bls.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e090      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062cc:	4b4b      	ldr	r3, [pc, #300]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0f0      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8083 	beq.w	80063ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	4b44      	ldr	r3, [pc, #272]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ee:	4a43      	ldr	r2, [pc, #268]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80062f6:	4b41      	ldr	r3, [pc, #260]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006302:	4b3f      	ldr	r3, [pc, #252]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a3e      	ldr	r2, [pc, #248]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800630c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800630e:	f7fc f8f1 	bl	80024f4 <HAL_GetTick>
 8006312:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006314:	e008      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006316:	f7fc f8ed 	bl	80024f4 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e062      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006328:	4b35      	ldr	r3, [pc, #212]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0f0      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006334:	4b31      	ldr	r3, [pc, #196]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006338:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800633c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d02f      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	429a      	cmp	r2, r3
 8006350:	d028      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006352:	4b2a      	ldr	r3, [pc, #168]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800635a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800635c:	4b29      	ldr	r3, [pc, #164]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800635e:	2201      	movs	r2, #1
 8006360:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006362:	4b28      	ldr	r3, [pc, #160]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006364:	2200      	movs	r2, #0
 8006366:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006368:	4a24      	ldr	r2, [pc, #144]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800636e:	4b23      	ldr	r3, [pc, #140]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b01      	cmp	r3, #1
 8006378:	d114      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800637a:	f7fc f8bb 	bl	80024f4 <HAL_GetTick>
 800637e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006380:	e00a      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006382:	f7fc f8b7 	bl	80024f4 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006390:	4293      	cmp	r3, r2
 8006392:	d901      	bls.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e02a      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006398:	4b18      	ldr	r3, [pc, #96]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800639a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0ee      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063b0:	d10d      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80063b2:	4b12      	ldr	r3, [pc, #72]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80063c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063c6:	490d      	ldr	r1, [pc, #52]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	608b      	str	r3, [r1, #8]
 80063cc:	e005      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80063ce:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	4a0a      	ldr	r2, [pc, #40]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063d4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80063d8:	6093      	str	r3, [r2, #8]
 80063da:	4b08      	ldr	r3, [pc, #32]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e6:	4905      	ldr	r1, [pc, #20]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	42470068 	.word	0x42470068
 80063fc:	40023800 	.word	0x40023800
 8006400:	40007000 	.word	0x40007000
 8006404:	42470e40 	.word	0x42470e40

08006408 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d13f      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006426:	4b24      	ldr	r3, [pc, #144]	@ (80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800642e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d006      	beq.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800643c:	d12f      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800643e:	4b1f      	ldr	r3, [pc, #124]	@ (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006440:	617b      	str	r3, [r7, #20]
          break;
 8006442:	e02f      	b.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006444:	4b1c      	ldr	r3, [pc, #112]	@ (80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800644c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006450:	d108      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006452:	4b19      	ldr	r3, [pc, #100]	@ (80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800645a:	4a19      	ldr	r2, [pc, #100]	@ (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800645c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	e007      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006464:	4b14      	ldr	r3, [pc, #80]	@ (80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800646c:	4a15      	ldr	r2, [pc, #84]	@ (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800646e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006472:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006474:	4b10      	ldr	r3, [pc, #64]	@ (80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800647a:	099b      	lsrs	r3, r3, #6
 800647c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	fb02 f303 	mul.w	r3, r2, r3
 8006486:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006488:	4b0b      	ldr	r3, [pc, #44]	@ (80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800648a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800648e:	0f1b      	lsrs	r3, r3, #28
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	fbb2 f3f3 	udiv	r3, r2, r3
 800649a:	617b      	str	r3, [r7, #20]
          break;
 800649c:	e002      	b.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]
          break;
 80064a2:	bf00      	nop
        }
      }
      break;
 80064a4:	e000      	b.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80064a6:	bf00      	nop
    }
  }
  return frequency;
 80064a8:	697b      	ldr	r3, [r7, #20]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40023800 	.word	0x40023800
 80064bc:	00bb8000 	.word	0x00bb8000
 80064c0:	007a1200 	.word	0x007a1200
 80064c4:	00f42400 	.word	0x00f42400

080064c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e07b      	b.n	80065d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d108      	bne.n	80064f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064ea:	d009      	beq.n	8006500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	61da      	str	r2, [r3, #28]
 80064f2:	e005      	b.n	8006500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d106      	bne.n	8006520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fb fc1a 	bl	8001d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	431a      	orrs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800657a:	431a      	orrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006584:	ea42 0103 	orr.w	r1, r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	0c1b      	lsrs	r3, r3, #16
 800659e:	f003 0104 	and.w	r1, r3, #4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a6:	f003 0210 	and.w	r2, r3, #16
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69da      	ldr	r2, [r3, #28]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e041      	b.n	8006670 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d106      	bne.n	8006606 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7fb fc37 	bl	8001e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2202      	movs	r2, #2
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3304      	adds	r3, #4
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f000 fc55 	bl	8006ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b01      	cmp	r3, #1
 800668a:	d001      	beq.n	8006690 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e046      	b.n	800671e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a23      	ldr	r2, [pc, #140]	@ (800672c <HAL_TIM_Base_Start+0xb4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d022      	beq.n	80066e8 <HAL_TIM_Base_Start+0x70>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066aa:	d01d      	beq.n	80066e8 <HAL_TIM_Base_Start+0x70>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006730 <HAL_TIM_Base_Start+0xb8>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d018      	beq.n	80066e8 <HAL_TIM_Base_Start+0x70>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006734 <HAL_TIM_Base_Start+0xbc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d013      	beq.n	80066e8 <HAL_TIM_Base_Start+0x70>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006738 <HAL_TIM_Base_Start+0xc0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00e      	beq.n	80066e8 <HAL_TIM_Base_Start+0x70>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1b      	ldr	r2, [pc, #108]	@ (800673c <HAL_TIM_Base_Start+0xc4>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d009      	beq.n	80066e8 <HAL_TIM_Base_Start+0x70>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a19      	ldr	r2, [pc, #100]	@ (8006740 <HAL_TIM_Base_Start+0xc8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d004      	beq.n	80066e8 <HAL_TIM_Base_Start+0x70>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a18      	ldr	r2, [pc, #96]	@ (8006744 <HAL_TIM_Base_Start+0xcc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d111      	bne.n	800670c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b06      	cmp	r3, #6
 80066f8:	d010      	beq.n	800671c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f042 0201 	orr.w	r2, r2, #1
 8006708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800670a:	e007      	b.n	800671c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40010000 	.word	0x40010000
 8006730:	40000400 	.word	0x40000400
 8006734:	40000800 	.word	0x40000800
 8006738:	40000c00 	.word	0x40000c00
 800673c:	40010400 	.word	0x40010400
 8006740:	40014000 	.word	0x40014000
 8006744:	40001800 	.word	0x40001800

08006748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e041      	b.n	80067de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fb fbb8 	bl	8001ee4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f000 fb9e 	bl	8006ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <HAL_TIM_PWM_Start+0x24>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	bf14      	ite	ne
 8006804:	2301      	movne	r3, #1
 8006806:	2300      	moveq	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	e022      	b.n	8006852 <HAL_TIM_PWM_Start+0x6a>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b04      	cmp	r3, #4
 8006810:	d109      	bne.n	8006826 <HAL_TIM_PWM_Start+0x3e>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b01      	cmp	r3, #1
 800681c:	bf14      	ite	ne
 800681e:	2301      	movne	r3, #1
 8006820:	2300      	moveq	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	e015      	b.n	8006852 <HAL_TIM_PWM_Start+0x6a>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b08      	cmp	r3, #8
 800682a:	d109      	bne.n	8006840 <HAL_TIM_PWM_Start+0x58>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b01      	cmp	r3, #1
 8006836:	bf14      	ite	ne
 8006838:	2301      	movne	r3, #1
 800683a:	2300      	moveq	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	e008      	b.n	8006852 <HAL_TIM_PWM_Start+0x6a>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	bf14      	ite	ne
 800684c:	2301      	movne	r3, #1
 800684e:	2300      	moveq	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e07c      	b.n	8006954 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d104      	bne.n	800686a <HAL_TIM_PWM_Start+0x82>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006868:	e013      	b.n	8006892 <HAL_TIM_PWM_Start+0xaa>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b04      	cmp	r3, #4
 800686e:	d104      	bne.n	800687a <HAL_TIM_PWM_Start+0x92>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006878:	e00b      	b.n	8006892 <HAL_TIM_PWM_Start+0xaa>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b08      	cmp	r3, #8
 800687e:	d104      	bne.n	800688a <HAL_TIM_PWM_Start+0xa2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006888:	e003      	b.n	8006892 <HAL_TIM_PWM_Start+0xaa>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2201      	movs	r2, #1
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fe7a 	bl	8007594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a2d      	ldr	r2, [pc, #180]	@ (800695c <HAL_TIM_PWM_Start+0x174>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d004      	beq.n	80068b4 <HAL_TIM_PWM_Start+0xcc>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a2c      	ldr	r2, [pc, #176]	@ (8006960 <HAL_TIM_PWM_Start+0x178>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d101      	bne.n	80068b8 <HAL_TIM_PWM_Start+0xd0>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e000      	b.n	80068ba <HAL_TIM_PWM_Start+0xd2>
 80068b8:	2300      	movs	r3, #0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a22      	ldr	r2, [pc, #136]	@ (800695c <HAL_TIM_PWM_Start+0x174>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d022      	beq.n	800691e <HAL_TIM_PWM_Start+0x136>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e0:	d01d      	beq.n	800691e <HAL_TIM_PWM_Start+0x136>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006964 <HAL_TIM_PWM_Start+0x17c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d018      	beq.n	800691e <HAL_TIM_PWM_Start+0x136>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006968 <HAL_TIM_PWM_Start+0x180>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d013      	beq.n	800691e <HAL_TIM_PWM_Start+0x136>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a1c      	ldr	r2, [pc, #112]	@ (800696c <HAL_TIM_PWM_Start+0x184>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00e      	beq.n	800691e <HAL_TIM_PWM_Start+0x136>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a16      	ldr	r2, [pc, #88]	@ (8006960 <HAL_TIM_PWM_Start+0x178>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d009      	beq.n	800691e <HAL_TIM_PWM_Start+0x136>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a18      	ldr	r2, [pc, #96]	@ (8006970 <HAL_TIM_PWM_Start+0x188>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d004      	beq.n	800691e <HAL_TIM_PWM_Start+0x136>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a16      	ldr	r2, [pc, #88]	@ (8006974 <HAL_TIM_PWM_Start+0x18c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d111      	bne.n	8006942 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b06      	cmp	r3, #6
 800692e:	d010      	beq.n	8006952 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0201 	orr.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006940:	e007      	b.n	8006952 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f042 0201 	orr.w	r2, r2, #1
 8006950:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40010000 	.word	0x40010000
 8006960:	40010400 	.word	0x40010400
 8006964:	40000400 	.word	0x40000400
 8006968:	40000800 	.word	0x40000800
 800696c:	40000c00 	.word	0x40000c00
 8006970:	40014000 	.word	0x40014000
 8006974:	40001800 	.word	0x40001800

08006978 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2200      	movs	r2, #0
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fe02 	bl	8007594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a2e      	ldr	r2, [pc, #184]	@ (8006a50 <HAL_TIM_PWM_Stop+0xd8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <HAL_TIM_PWM_Stop+0x2c>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a2d      	ldr	r2, [pc, #180]	@ (8006a54 <HAL_TIM_PWM_Stop+0xdc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d101      	bne.n	80069a8 <HAL_TIM_PWM_Stop+0x30>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <HAL_TIM_PWM_Stop+0x32>
 80069a8:	2300      	movs	r3, #0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d017      	beq.n	80069de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6a1a      	ldr	r2, [r3, #32]
 80069b4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80069b8:	4013      	ands	r3, r2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10f      	bne.n	80069de <HAL_TIM_PWM_Stop+0x66>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6a1a      	ldr	r2, [r3, #32]
 80069c4:	f240 4344 	movw	r3, #1092	@ 0x444
 80069c8:	4013      	ands	r3, r2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d107      	bne.n	80069de <HAL_TIM_PWM_Stop+0x66>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6a1a      	ldr	r2, [r3, #32]
 80069e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10f      	bne.n	8006a0e <HAL_TIM_PWM_Stop+0x96>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6a1a      	ldr	r2, [r3, #32]
 80069f4:	f240 4344 	movw	r3, #1092	@ 0x444
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d107      	bne.n	8006a0e <HAL_TIM_PWM_Stop+0x96>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0201 	bic.w	r2, r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d104      	bne.n	8006a1e <HAL_TIM_PWM_Stop+0xa6>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a1c:	e013      	b.n	8006a46 <HAL_TIM_PWM_Stop+0xce>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d104      	bne.n	8006a2e <HAL_TIM_PWM_Stop+0xb6>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a2c:	e00b      	b.n	8006a46 <HAL_TIM_PWM_Stop+0xce>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d104      	bne.n	8006a3e <HAL_TIM_PWM_Stop+0xc6>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a3c:	e003      	b.n	8006a46 <HAL_TIM_PWM_Stop+0xce>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40010400 	.word	0x40010400

08006a58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e097      	b.n	8006b9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d106      	bne.n	8006a86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7fb f9af 	bl	8001de4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a9c:	f023 0307 	bic.w	r3, r3, #7
 8006aa0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4610      	mov	r0, r2
 8006aae:	f000 fa0b 	bl	8006ec8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ada:	f023 0303 	bic.w	r3, r3, #3
 8006ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	4313      	orrs	r3, r2
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006af8:	f023 030c 	bic.w	r3, r3, #12
 8006afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	4313      	orrs	r3, r2
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	011a      	lsls	r2, r3, #4
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	031b      	lsls	r3, r3, #12
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006b36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006b3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bbc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bc4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006bcc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d110      	bne.n	8006bf6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d102      	bne.n	8006be0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bda:	7b7b      	ldrb	r3, [r7, #13]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d001      	beq.n	8006be4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e069      	b.n	8006cb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bf4:	e031      	b.n	8006c5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d110      	bne.n	8006c1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d102      	bne.n	8006c08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c02:	7b3b      	ldrb	r3, [r7, #12]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d001      	beq.n	8006c0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e055      	b.n	8006cb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c1c:	e01d      	b.n	8006c5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d108      	bne.n	8006c36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d105      	bne.n	8006c36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c2a:	7b7b      	ldrb	r3, [r7, #13]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d102      	bne.n	8006c36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c30:	7b3b      	ldrb	r3, [r7, #12]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d001      	beq.n	8006c3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e03e      	b.n	8006cb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2202      	movs	r2, #2
 8006c46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2202      	movs	r2, #2
 8006c56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <HAL_TIM_Encoder_Start+0xc4>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d008      	beq.n	8006c78 <HAL_TIM_Encoder_Start+0xd4>
 8006c66:	e00f      	b.n	8006c88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	2100      	movs	r1, #0
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 fc8f 	bl	8007594 <TIM_CCxChannelCmd>
      break;
 8006c76:	e016      	b.n	8006ca6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	2104      	movs	r1, #4
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fc87 	bl	8007594 <TIM_CCxChannelCmd>
      break;
 8006c86:	e00e      	b.n	8006ca6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	2100      	movs	r1, #0
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fc7f 	bl	8007594 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	2104      	movs	r1, #4
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fc78 	bl	8007594 <TIM_CCxChannelCmd>
      break;
 8006ca4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0201 	orr.w	r2, r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d101      	bne.n	8006cde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	e0ae      	b.n	8006e3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b0c      	cmp	r3, #12
 8006cea:	f200 809f 	bhi.w	8006e2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006cee:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf4:	08006d29 	.word	0x08006d29
 8006cf8:	08006e2d 	.word	0x08006e2d
 8006cfc:	08006e2d 	.word	0x08006e2d
 8006d00:	08006e2d 	.word	0x08006e2d
 8006d04:	08006d69 	.word	0x08006d69
 8006d08:	08006e2d 	.word	0x08006e2d
 8006d0c:	08006e2d 	.word	0x08006e2d
 8006d10:	08006e2d 	.word	0x08006e2d
 8006d14:	08006dab 	.word	0x08006dab
 8006d18:	08006e2d 	.word	0x08006e2d
 8006d1c:	08006e2d 	.word	0x08006e2d
 8006d20:	08006e2d 	.word	0x08006e2d
 8006d24:	08006deb 	.word	0x08006deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 f970 	bl	8007014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699a      	ldr	r2, [r3, #24]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0208 	orr.w	r2, r2, #8
 8006d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699a      	ldr	r2, [r3, #24]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0204 	bic.w	r2, r2, #4
 8006d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6999      	ldr	r1, [r3, #24]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	691a      	ldr	r2, [r3, #16]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	619a      	str	r2, [r3, #24]
      break;
 8006d66:	e064      	b.n	8006e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68b9      	ldr	r1, [r7, #8]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 f9c0 	bl	80070f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699a      	ldr	r2, [r3, #24]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6999      	ldr	r1, [r3, #24]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	021a      	lsls	r2, r3, #8
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	619a      	str	r2, [r3, #24]
      break;
 8006da8:	e043      	b.n	8006e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fa15 	bl	80071e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69da      	ldr	r2, [r3, #28]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0208 	orr.w	r2, r2, #8
 8006dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69da      	ldr	r2, [r3, #28]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0204 	bic.w	r2, r2, #4
 8006dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69d9      	ldr	r1, [r3, #28]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	61da      	str	r2, [r3, #28]
      break;
 8006de8:	e023      	b.n	8006e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68b9      	ldr	r1, [r7, #8]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fa69 	bl	80072c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69da      	ldr	r2, [r3, #28]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	69da      	ldr	r2, [r3, #28]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69d9      	ldr	r1, [r3, #28]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	021a      	lsls	r2, r3, #8
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	61da      	str	r2, [r3, #28]
      break;
 8006e2a:	e002      	b.n	8006e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e031      	b.n	8006ec0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fa80 	bl	8007374 <TIM_SlaveTimer_SetConfig>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d009      	beq.n	8006e8e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e018      	b.n	8006ec0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e9c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006eac:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a43      	ldr	r2, [pc, #268]	@ (8006fe8 <TIM_Base_SetConfig+0x120>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d013      	beq.n	8006f08 <TIM_Base_SetConfig+0x40>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ee6:	d00f      	beq.n	8006f08 <TIM_Base_SetConfig+0x40>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a40      	ldr	r2, [pc, #256]	@ (8006fec <TIM_Base_SetConfig+0x124>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d00b      	beq.n	8006f08 <TIM_Base_SetConfig+0x40>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8006ff0 <TIM_Base_SetConfig+0x128>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d007      	beq.n	8006f08 <TIM_Base_SetConfig+0x40>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a3e      	ldr	r2, [pc, #248]	@ (8006ff4 <TIM_Base_SetConfig+0x12c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d003      	beq.n	8006f08 <TIM_Base_SetConfig+0x40>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a3d      	ldr	r2, [pc, #244]	@ (8006ff8 <TIM_Base_SetConfig+0x130>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d108      	bne.n	8006f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a32      	ldr	r2, [pc, #200]	@ (8006fe8 <TIM_Base_SetConfig+0x120>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d02b      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f28:	d027      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a2f      	ldr	r2, [pc, #188]	@ (8006fec <TIM_Base_SetConfig+0x124>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d023      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a2e      	ldr	r2, [pc, #184]	@ (8006ff0 <TIM_Base_SetConfig+0x128>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d01f      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ff4 <TIM_Base_SetConfig+0x12c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d01b      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a2c      	ldr	r2, [pc, #176]	@ (8006ff8 <TIM_Base_SetConfig+0x130>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d017      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8006ffc <TIM_Base_SetConfig+0x134>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d013      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a2a      	ldr	r2, [pc, #168]	@ (8007000 <TIM_Base_SetConfig+0x138>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00f      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a29      	ldr	r2, [pc, #164]	@ (8007004 <TIM_Base_SetConfig+0x13c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00b      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a28      	ldr	r2, [pc, #160]	@ (8007008 <TIM_Base_SetConfig+0x140>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d007      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a27      	ldr	r2, [pc, #156]	@ (800700c <TIM_Base_SetConfig+0x144>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d003      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a26      	ldr	r2, [pc, #152]	@ (8007010 <TIM_Base_SetConfig+0x148>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d108      	bne.n	8006f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a0e      	ldr	r2, [pc, #56]	@ (8006fe8 <TIM_Base_SetConfig+0x120>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d003      	beq.n	8006fba <TIM_Base_SetConfig+0xf2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a10      	ldr	r2, [pc, #64]	@ (8006ff8 <TIM_Base_SetConfig+0x130>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d103      	bne.n	8006fc2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	691a      	ldr	r2, [r3, #16]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f043 0204 	orr.w	r2, r3, #4
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	601a      	str	r2, [r3, #0]
}
 8006fda:	bf00      	nop
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40010000 	.word	0x40010000
 8006fec:	40000400 	.word	0x40000400
 8006ff0:	40000800 	.word	0x40000800
 8006ff4:	40000c00 	.word	0x40000c00
 8006ff8:	40010400 	.word	0x40010400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800
 8007008:	40001800 	.word	0x40001800
 800700c:	40001c00 	.word	0x40001c00
 8007010:	40002000 	.word	0x40002000

08007014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	f023 0201 	bic.w	r2, r3, #1
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0303 	bic.w	r3, r3, #3
 800704a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f023 0302 	bic.w	r3, r3, #2
 800705c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a20      	ldr	r2, [pc, #128]	@ (80070ec <TIM_OC1_SetConfig+0xd8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_OC1_SetConfig+0x64>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a1f      	ldr	r2, [pc, #124]	@ (80070f0 <TIM_OC1_SetConfig+0xdc>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d10c      	bne.n	8007092 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f023 0308 	bic.w	r3, r3, #8
 800707e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f023 0304 	bic.w	r3, r3, #4
 8007090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a15      	ldr	r2, [pc, #84]	@ (80070ec <TIM_OC1_SetConfig+0xd8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d003      	beq.n	80070a2 <TIM_OC1_SetConfig+0x8e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a14      	ldr	r2, [pc, #80]	@ (80070f0 <TIM_OC1_SetConfig+0xdc>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d111      	bne.n	80070c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	621a      	str	r2, [r3, #32]
}
 80070e0:	bf00      	nop
 80070e2:	371c      	adds	r7, #28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	40010000 	.word	0x40010000
 80070f0:	40010400 	.word	0x40010400

080070f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	f023 0210 	bic.w	r2, r3, #16
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800712a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f023 0320 	bic.w	r3, r3, #32
 800713e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4313      	orrs	r3, r2
 800714a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a22      	ldr	r2, [pc, #136]	@ (80071d8 <TIM_OC2_SetConfig+0xe4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_OC2_SetConfig+0x68>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a21      	ldr	r2, [pc, #132]	@ (80071dc <TIM_OC2_SetConfig+0xe8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d10d      	bne.n	8007178 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007176:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a17      	ldr	r2, [pc, #92]	@ (80071d8 <TIM_OC2_SetConfig+0xe4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_OC2_SetConfig+0x94>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a16      	ldr	r2, [pc, #88]	@ (80071dc <TIM_OC2_SetConfig+0xe8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d113      	bne.n	80071b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800718e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	621a      	str	r2, [r3, #32]
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	40010000 	.word	0x40010000
 80071dc:	40010400 	.word	0x40010400

080071e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800720e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0303 	bic.w	r3, r3, #3
 8007216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	4313      	orrs	r3, r2
 8007234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a21      	ldr	r2, [pc, #132]	@ (80072c0 <TIM_OC3_SetConfig+0xe0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d003      	beq.n	8007246 <TIM_OC3_SetConfig+0x66>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a20      	ldr	r2, [pc, #128]	@ (80072c4 <TIM_OC3_SetConfig+0xe4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d10d      	bne.n	8007262 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800724c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a16      	ldr	r2, [pc, #88]	@ (80072c0 <TIM_OC3_SetConfig+0xe0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d003      	beq.n	8007272 <TIM_OC3_SetConfig+0x92>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a15      	ldr	r2, [pc, #84]	@ (80072c4 <TIM_OC3_SetConfig+0xe4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d113      	bne.n	800729a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	621a      	str	r2, [r3, #32]
}
 80072b4:	bf00      	nop
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	40010000 	.word	0x40010000
 80072c4:	40010400 	.word	0x40010400

080072c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4313      	orrs	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	031b      	lsls	r3, r3, #12
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a12      	ldr	r2, [pc, #72]	@ (800736c <TIM_OC4_SetConfig+0xa4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <TIM_OC4_SetConfig+0x68>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a11      	ldr	r2, [pc, #68]	@ (8007370 <TIM_OC4_SetConfig+0xa8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d109      	bne.n	8007344 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007336:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	019b      	lsls	r3, r3, #6
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	40010000 	.word	0x40010000
 8007370:	40010400 	.word	0x40010400

08007374 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007390:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f023 0307 	bic.w	r3, r3, #7
 80073a2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	2b70      	cmp	r3, #112	@ 0x70
 80073bc:	d01a      	beq.n	80073f4 <TIM_SlaveTimer_SetConfig+0x80>
 80073be:	2b70      	cmp	r3, #112	@ 0x70
 80073c0:	d860      	bhi.n	8007484 <TIM_SlaveTimer_SetConfig+0x110>
 80073c2:	2b60      	cmp	r3, #96	@ 0x60
 80073c4:	d054      	beq.n	8007470 <TIM_SlaveTimer_SetConfig+0xfc>
 80073c6:	2b60      	cmp	r3, #96	@ 0x60
 80073c8:	d85c      	bhi.n	8007484 <TIM_SlaveTimer_SetConfig+0x110>
 80073ca:	2b50      	cmp	r3, #80	@ 0x50
 80073cc:	d046      	beq.n	800745c <TIM_SlaveTimer_SetConfig+0xe8>
 80073ce:	2b50      	cmp	r3, #80	@ 0x50
 80073d0:	d858      	bhi.n	8007484 <TIM_SlaveTimer_SetConfig+0x110>
 80073d2:	2b40      	cmp	r3, #64	@ 0x40
 80073d4:	d019      	beq.n	800740a <TIM_SlaveTimer_SetConfig+0x96>
 80073d6:	2b40      	cmp	r3, #64	@ 0x40
 80073d8:	d854      	bhi.n	8007484 <TIM_SlaveTimer_SetConfig+0x110>
 80073da:	2b30      	cmp	r3, #48	@ 0x30
 80073dc:	d055      	beq.n	800748a <TIM_SlaveTimer_SetConfig+0x116>
 80073de:	2b30      	cmp	r3, #48	@ 0x30
 80073e0:	d850      	bhi.n	8007484 <TIM_SlaveTimer_SetConfig+0x110>
 80073e2:	2b20      	cmp	r3, #32
 80073e4:	d051      	beq.n	800748a <TIM_SlaveTimer_SetConfig+0x116>
 80073e6:	2b20      	cmp	r3, #32
 80073e8:	d84c      	bhi.n	8007484 <TIM_SlaveTimer_SetConfig+0x110>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d04d      	beq.n	800748a <TIM_SlaveTimer_SetConfig+0x116>
 80073ee:	2b10      	cmp	r3, #16
 80073f0:	d04b      	beq.n	800748a <TIM_SlaveTimer_SetConfig+0x116>
 80073f2:	e047      	b.n	8007484 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007404:	f000 f8a6 	bl	8007554 <TIM_ETR_SetConfig>
      break;
 8007408:	e040      	b.n	800748c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b05      	cmp	r3, #5
 8007410:	d101      	bne.n	8007416 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e03b      	b.n	800748e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6a1a      	ldr	r2, [r3, #32]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 0201 	bic.w	r2, r2, #1
 800742c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800743c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	4313      	orrs	r3, r2
 8007448:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	621a      	str	r2, [r3, #32]
      break;
 800745a:	e017      	b.n	800748c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007468:	461a      	mov	r2, r3
 800746a:	f000 f814 	bl	8007496 <TIM_TI1_ConfigInputStage>
      break;
 800746e:	e00d      	b.n	800748c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800747c:	461a      	mov	r2, r3
 800747e:	f000 f839 	bl	80074f4 <TIM_TI2_ConfigInputStage>
      break;
 8007482:	e003      	b.n	800748c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	75fb      	strb	r3, [r7, #23]
      break;
 8007488:	e000      	b.n	800748c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800748a:	bf00      	nop
  }

  return status;
 800748c:	7dfb      	ldrb	r3, [r7, #23]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007496:	b480      	push	{r7}
 8007498:	b087      	sub	sp, #28
 800749a:	af00      	add	r7, sp, #0
 800749c:	60f8      	str	r0, [r7, #12]
 800749e:	60b9      	str	r1, [r7, #8]
 80074a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	f023 0201 	bic.w	r2, r3, #1
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f023 030a 	bic.w	r3, r3, #10
 80074d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	621a      	str	r2, [r3, #32]
}
 80074e8:	bf00      	nop
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f023 0210 	bic.w	r2, r3, #16
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800751e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	031b      	lsls	r3, r3, #12
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007530:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	011b      	lsls	r3, r3, #4
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4313      	orrs	r3, r2
 800753a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	621a      	str	r2, [r3, #32]
}
 8007548:	bf00      	nop
 800754a:	371c      	adds	r7, #28
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800756e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	021a      	lsls	r2, r3, #8
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	431a      	orrs	r2, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	4313      	orrs	r3, r2
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	4313      	orrs	r3, r2
 8007580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	609a      	str	r2, [r3, #8]
}
 8007588:	bf00      	nop
 800758a:	371c      	adds	r7, #28
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f003 031f 	and.w	r3, r3, #31
 80075a6:	2201      	movs	r2, #1
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a1a      	ldr	r2, [r3, #32]
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	43db      	mvns	r3, r3
 80075b6:	401a      	ands	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a1a      	ldr	r2, [r3, #32]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f003 031f 	and.w	r3, r3, #31
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	fa01 f303 	lsl.w	r3, r1, r3
 80075cc:	431a      	orrs	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	621a      	str	r2, [r3, #32]
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
	...

080075e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075f4:	2302      	movs	r3, #2
 80075f6:	e05a      	b.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800761e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a21      	ldr	r2, [pc, #132]	@ (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d022      	beq.n	8007682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007644:	d01d      	beq.n	8007682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1d      	ldr	r2, [pc, #116]	@ (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d018      	beq.n	8007682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a1b      	ldr	r2, [pc, #108]	@ (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d013      	beq.n	8007682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a1a      	ldr	r2, [pc, #104]	@ (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d00e      	beq.n	8007682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a18      	ldr	r2, [pc, #96]	@ (80076cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d009      	beq.n	8007682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a17      	ldr	r2, [pc, #92]	@ (80076d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d004      	beq.n	8007682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a15      	ldr	r2, [pc, #84]	@ (80076d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d10c      	bne.n	800769c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	4313      	orrs	r3, r2
 8007692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	40010000 	.word	0x40010000
 80076c0:	40000400 	.word	0x40000400
 80076c4:	40000800 	.word	0x40000800
 80076c8:	40000c00 	.word	0x40000c00
 80076cc:	40010400 	.word	0x40010400
 80076d0:	40014000 	.word	0x40014000
 80076d4:	40001800 	.word	0x40001800

080076d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e042      	b.n	8007770 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7fa fc74 	bl	8001fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2224      	movs	r2, #36	@ 0x24
 8007708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68da      	ldr	r2, [r3, #12]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800771a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f9cb 	bl	8007ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	691a      	ldr	r2, [r3, #16]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695a      	ldr	r2, [r3, #20]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007740:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007750:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2220      	movs	r2, #32
 800775c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2220      	movs	r2, #32
 8007764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e04a      	b.n	8007820 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d106      	bne.n	80077a4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7fa fc24 	bl	8001fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2224      	movs	r2, #36	@ 0x24
 80077a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f97b 	bl	8007ab8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	691a      	ldr	r2, [r3, #16]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	695a      	ldr	r2, [r3, #20]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80077e0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	695a      	ldr	r2, [r3, #20]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f042 0208 	orr.w	r2, r2, #8
 80077f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2220      	movs	r2, #32
 800780c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b08a      	sub	sp, #40	@ 0x28
 800782c:	af02      	add	r7, sp, #8
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	4613      	mov	r3, r2
 8007836:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b20      	cmp	r3, #32
 8007846:	d175      	bne.n	8007934 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_UART_Transmit+0x2c>
 800784e:	88fb      	ldrh	r3, [r7, #6]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e06e      	b.n	8007936 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2221      	movs	r2, #33	@ 0x21
 8007862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007866:	f7fa fe45 	bl	80024f4 <HAL_GetTick>
 800786a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	88fa      	ldrh	r2, [r7, #6]
 8007870:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	88fa      	ldrh	r2, [r7, #6]
 8007876:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007880:	d108      	bne.n	8007894 <HAL_UART_Transmit+0x6c>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d104      	bne.n	8007894 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800788a:	2300      	movs	r3, #0
 800788c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	61bb      	str	r3, [r7, #24]
 8007892:	e003      	b.n	800789c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007898:	2300      	movs	r3, #0
 800789a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800789c:	e02e      	b.n	80078fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2200      	movs	r2, #0
 80078a6:	2180      	movs	r1, #128	@ 0x80
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f848 	bl	800793e <UART_WaitOnFlagUntilTimeout>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e03a      	b.n	8007936 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10b      	bne.n	80078de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	3302      	adds	r3, #2
 80078da:	61bb      	str	r3, [r7, #24]
 80078dc:	e007      	b.n	80078ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	781a      	ldrb	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	3301      	adds	r3, #1
 80078ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1cb      	bne.n	800789e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2200      	movs	r2, #0
 800790e:	2140      	movs	r1, #64	@ 0x40
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f814 	bl	800793e <UART_WaitOnFlagUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2220      	movs	r2, #32
 8007920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e006      	b.n	8007936 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2220      	movs	r2, #32
 800792c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	e000      	b.n	8007936 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007934:	2302      	movs	r3, #2
  }
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b086      	sub	sp, #24
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	4613      	mov	r3, r2
 800794c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800794e:	e03b      	b.n	80079c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007956:	d037      	beq.n	80079c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007958:	f7fa fdcc 	bl	80024f4 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	6a3a      	ldr	r2, [r7, #32]
 8007964:	429a      	cmp	r2, r3
 8007966:	d302      	bcc.n	800796e <UART_WaitOnFlagUntilTimeout+0x30>
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e03a      	b.n	80079e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 0304 	and.w	r3, r3, #4
 800797c:	2b00      	cmp	r3, #0
 800797e:	d023      	beq.n	80079c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b80      	cmp	r3, #128	@ 0x80
 8007984:	d020      	beq.n	80079c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b40      	cmp	r3, #64	@ 0x40
 800798a:	d01d      	beq.n	80079c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0308 	and.w	r3, r3, #8
 8007996:	2b08      	cmp	r3, #8
 8007998:	d116      	bne.n	80079c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800799a:	2300      	movs	r3, #0
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	617b      	str	r3, [r7, #20]
 80079ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 f81d 	bl	80079f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2208      	movs	r2, #8
 80079ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e00f      	b.n	80079e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	4013      	ands	r3, r2
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	bf0c      	ite	eq
 80079d8:	2301      	moveq	r3, #1
 80079da:	2300      	movne	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	461a      	mov	r2, r3
 80079e0:	79fb      	ldrb	r3, [r7, #7]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d0b4      	beq.n	8007950 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b095      	sub	sp, #84	@ 0x54
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	330c      	adds	r3, #12
 80079fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	330c      	adds	r3, #12
 8007a16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a18:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a20:	e841 2300 	strex	r3, r2, [r1]
 8007a24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1e5      	bne.n	80079f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3314      	adds	r3, #20
 8007a32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f023 0301 	bic.w	r3, r3, #1
 8007a42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3314      	adds	r3, #20
 8007a4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e5      	bne.n	8007a2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d119      	bne.n	8007a9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	330c      	adds	r3, #12
 8007a6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	e853 3f00 	ldrex	r3, [r3]
 8007a76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f023 0310 	bic.w	r3, r3, #16
 8007a7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	330c      	adds	r3, #12
 8007a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a88:	61ba      	str	r2, [r7, #24]
 8007a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	6979      	ldr	r1, [r7, #20]
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	613b      	str	r3, [r7, #16]
   return(result);
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e5      	bne.n	8007a68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007aaa:	bf00      	nop
 8007aac:	3754      	adds	r7, #84	@ 0x54
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
	...

08007ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007abc:	b0c0      	sub	sp, #256	@ 0x100
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ad4:	68d9      	ldr	r1, [r3, #12]
 8007ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	ea40 0301 	orr.w	r3, r0, r1
 8007ae0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	431a      	orrs	r2, r3
 8007af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	431a      	orrs	r2, r3
 8007af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007b10:	f021 010c 	bic.w	r1, r1, #12
 8007b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b1e:	430b      	orrs	r3, r1
 8007b20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b32:	6999      	ldr	r1, [r3, #24]
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	ea40 0301 	orr.w	r3, r0, r1
 8007b3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	4b8f      	ldr	r3, [pc, #572]	@ (8007d84 <UART_SetConfig+0x2cc>)
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d005      	beq.n	8007b58 <UART_SetConfig+0xa0>
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	4b8d      	ldr	r3, [pc, #564]	@ (8007d88 <UART_SetConfig+0x2d0>)
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d104      	bne.n	8007b62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b58:	f7fe fb60 	bl	800621c <HAL_RCC_GetPCLK2Freq>
 8007b5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007b60:	e003      	b.n	8007b6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b62:	f7fe fb47 	bl	80061f4 <HAL_RCC_GetPCLK1Freq>
 8007b66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b74:	f040 810c 	bne.w	8007d90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007b86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007b8a:	4622      	mov	r2, r4
 8007b8c:	462b      	mov	r3, r5
 8007b8e:	1891      	adds	r1, r2, r2
 8007b90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007b92:	415b      	adcs	r3, r3
 8007b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	eb12 0801 	adds.w	r8, r2, r1
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	eb43 0901 	adc.w	r9, r3, r1
 8007ba6:	f04f 0200 	mov.w	r2, #0
 8007baa:	f04f 0300 	mov.w	r3, #0
 8007bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bba:	4690      	mov	r8, r2
 8007bbc:	4699      	mov	r9, r3
 8007bbe:	4623      	mov	r3, r4
 8007bc0:	eb18 0303 	adds.w	r3, r8, r3
 8007bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007bc8:	462b      	mov	r3, r5
 8007bca:	eb49 0303 	adc.w	r3, r9, r3
 8007bce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007be6:	460b      	mov	r3, r1
 8007be8:	18db      	adds	r3, r3, r3
 8007bea:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bec:	4613      	mov	r3, r2
 8007bee:	eb42 0303 	adc.w	r3, r2, r3
 8007bf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007bf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007bfc:	f7f9 f824 	bl	8000c48 <__aeabi_uldivmod>
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	4b61      	ldr	r3, [pc, #388]	@ (8007d8c <UART_SetConfig+0x2d4>)
 8007c06:	fba3 2302 	umull	r2, r3, r3, r2
 8007c0a:	095b      	lsrs	r3, r3, #5
 8007c0c:	011c      	lsls	r4, r3, #4
 8007c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007c1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007c20:	4642      	mov	r2, r8
 8007c22:	464b      	mov	r3, r9
 8007c24:	1891      	adds	r1, r2, r2
 8007c26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007c28:	415b      	adcs	r3, r3
 8007c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007c30:	4641      	mov	r1, r8
 8007c32:	eb12 0a01 	adds.w	sl, r2, r1
 8007c36:	4649      	mov	r1, r9
 8007c38:	eb43 0b01 	adc.w	fp, r3, r1
 8007c3c:	f04f 0200 	mov.w	r2, #0
 8007c40:	f04f 0300 	mov.w	r3, #0
 8007c44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c50:	4692      	mov	sl, r2
 8007c52:	469b      	mov	fp, r3
 8007c54:	4643      	mov	r3, r8
 8007c56:	eb1a 0303 	adds.w	r3, sl, r3
 8007c5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c5e:	464b      	mov	r3, r9
 8007c60:	eb4b 0303 	adc.w	r3, fp, r3
 8007c64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007c78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	18db      	adds	r3, r3, r3
 8007c80:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c82:	4613      	mov	r3, r2
 8007c84:	eb42 0303 	adc.w	r3, r2, r3
 8007c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007c92:	f7f8 ffd9 	bl	8000c48 <__aeabi_uldivmod>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8007d8c <UART_SetConfig+0x2d4>)
 8007c9e:	fba3 2301 	umull	r2, r3, r3, r1
 8007ca2:	095b      	lsrs	r3, r3, #5
 8007ca4:	2264      	movs	r2, #100	@ 0x64
 8007ca6:	fb02 f303 	mul.w	r3, r2, r3
 8007caa:	1acb      	subs	r3, r1, r3
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007cb2:	4b36      	ldr	r3, [pc, #216]	@ (8007d8c <UART_SetConfig+0x2d4>)
 8007cb4:	fba3 2302 	umull	r2, r3, r3, r2
 8007cb8:	095b      	lsrs	r3, r3, #5
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007cc0:	441c      	add	r4, r3
 8007cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ccc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007cd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	1891      	adds	r1, r2, r2
 8007cda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007cdc:	415b      	adcs	r3, r3
 8007cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ce4:	4641      	mov	r1, r8
 8007ce6:	1851      	adds	r1, r2, r1
 8007ce8:	6339      	str	r1, [r7, #48]	@ 0x30
 8007cea:	4649      	mov	r1, r9
 8007cec:	414b      	adcs	r3, r1
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	f04f 0300 	mov.w	r3, #0
 8007cf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007cfc:	4659      	mov	r1, fp
 8007cfe:	00cb      	lsls	r3, r1, #3
 8007d00:	4651      	mov	r1, sl
 8007d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d06:	4651      	mov	r1, sl
 8007d08:	00ca      	lsls	r2, r1, #3
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4603      	mov	r3, r0
 8007d10:	4642      	mov	r2, r8
 8007d12:	189b      	adds	r3, r3, r2
 8007d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d18:	464b      	mov	r3, r9
 8007d1a:	460a      	mov	r2, r1
 8007d1c:	eb42 0303 	adc.w	r3, r2, r3
 8007d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007d34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d38:	460b      	mov	r3, r1
 8007d3a:	18db      	adds	r3, r3, r3
 8007d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d3e:	4613      	mov	r3, r2
 8007d40:	eb42 0303 	adc.w	r3, r2, r3
 8007d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007d4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007d4e:	f7f8 ff7b 	bl	8000c48 <__aeabi_uldivmod>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	4b0d      	ldr	r3, [pc, #52]	@ (8007d8c <UART_SetConfig+0x2d4>)
 8007d58:	fba3 1302 	umull	r1, r3, r3, r2
 8007d5c:	095b      	lsrs	r3, r3, #5
 8007d5e:	2164      	movs	r1, #100	@ 0x64
 8007d60:	fb01 f303 	mul.w	r3, r1, r3
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	3332      	adds	r3, #50	@ 0x32
 8007d6a:	4a08      	ldr	r2, [pc, #32]	@ (8007d8c <UART_SetConfig+0x2d4>)
 8007d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d70:	095b      	lsrs	r3, r3, #5
 8007d72:	f003 0207 	and.w	r2, r3, #7
 8007d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4422      	add	r2, r4
 8007d7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d80:	e106      	b.n	8007f90 <UART_SetConfig+0x4d8>
 8007d82:	bf00      	nop
 8007d84:	40011000 	.word	0x40011000
 8007d88:	40011400 	.word	0x40011400
 8007d8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007d9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007da2:	4642      	mov	r2, r8
 8007da4:	464b      	mov	r3, r9
 8007da6:	1891      	adds	r1, r2, r2
 8007da8:	6239      	str	r1, [r7, #32]
 8007daa:	415b      	adcs	r3, r3
 8007dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007db2:	4641      	mov	r1, r8
 8007db4:	1854      	adds	r4, r2, r1
 8007db6:	4649      	mov	r1, r9
 8007db8:	eb43 0501 	adc.w	r5, r3, r1
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	f04f 0300 	mov.w	r3, #0
 8007dc4:	00eb      	lsls	r3, r5, #3
 8007dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dca:	00e2      	lsls	r2, r4, #3
 8007dcc:	4614      	mov	r4, r2
 8007dce:	461d      	mov	r5, r3
 8007dd0:	4643      	mov	r3, r8
 8007dd2:	18e3      	adds	r3, r4, r3
 8007dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007dd8:	464b      	mov	r3, r9
 8007dda:	eb45 0303 	adc.w	r3, r5, r3
 8007dde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007dee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	f04f 0300 	mov.w	r3, #0
 8007dfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007dfe:	4629      	mov	r1, r5
 8007e00:	008b      	lsls	r3, r1, #2
 8007e02:	4621      	mov	r1, r4
 8007e04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e08:	4621      	mov	r1, r4
 8007e0a:	008a      	lsls	r2, r1, #2
 8007e0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007e10:	f7f8 ff1a 	bl	8000c48 <__aeabi_uldivmod>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4b60      	ldr	r3, [pc, #384]	@ (8007f9c <UART_SetConfig+0x4e4>)
 8007e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	011c      	lsls	r4, r3, #4
 8007e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007e30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007e34:	4642      	mov	r2, r8
 8007e36:	464b      	mov	r3, r9
 8007e38:	1891      	adds	r1, r2, r2
 8007e3a:	61b9      	str	r1, [r7, #24]
 8007e3c:	415b      	adcs	r3, r3
 8007e3e:	61fb      	str	r3, [r7, #28]
 8007e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e44:	4641      	mov	r1, r8
 8007e46:	1851      	adds	r1, r2, r1
 8007e48:	6139      	str	r1, [r7, #16]
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	414b      	adcs	r3, r1
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	f04f 0300 	mov.w	r3, #0
 8007e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e5c:	4659      	mov	r1, fp
 8007e5e:	00cb      	lsls	r3, r1, #3
 8007e60:	4651      	mov	r1, sl
 8007e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e66:	4651      	mov	r1, sl
 8007e68:	00ca      	lsls	r2, r1, #3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	4642      	mov	r2, r8
 8007e72:	189b      	adds	r3, r3, r2
 8007e74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e78:	464b      	mov	r3, r9
 8007e7a:	460a      	mov	r2, r1
 8007e7c:	eb42 0303 	adc.w	r3, r2, r3
 8007e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e90:	f04f 0200 	mov.w	r2, #0
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	008b      	lsls	r3, r1, #2
 8007ea0:	4641      	mov	r1, r8
 8007ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ea6:	4641      	mov	r1, r8
 8007ea8:	008a      	lsls	r2, r1, #2
 8007eaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007eae:	f7f8 fecb 	bl	8000c48 <__aeabi_uldivmod>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	4b38      	ldr	r3, [pc, #224]	@ (8007f9c <UART_SetConfig+0x4e4>)
 8007eba:	fba3 2301 	umull	r2, r3, r3, r1
 8007ebe:	095b      	lsrs	r3, r3, #5
 8007ec0:	2264      	movs	r2, #100	@ 0x64
 8007ec2:	fb02 f303 	mul.w	r3, r2, r3
 8007ec6:	1acb      	subs	r3, r1, r3
 8007ec8:	011b      	lsls	r3, r3, #4
 8007eca:	3332      	adds	r3, #50	@ 0x32
 8007ecc:	4a33      	ldr	r2, [pc, #204]	@ (8007f9c <UART_SetConfig+0x4e4>)
 8007ece:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed2:	095b      	lsrs	r3, r3, #5
 8007ed4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ed8:	441c      	add	r4, r3
 8007eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ede:	2200      	movs	r2, #0
 8007ee0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ee2:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ee4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007ee8:	4642      	mov	r2, r8
 8007eea:	464b      	mov	r3, r9
 8007eec:	1891      	adds	r1, r2, r2
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	415b      	adcs	r3, r3
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ef8:	4641      	mov	r1, r8
 8007efa:	1851      	adds	r1, r2, r1
 8007efc:	6039      	str	r1, [r7, #0]
 8007efe:	4649      	mov	r1, r9
 8007f00:	414b      	adcs	r3, r1
 8007f02:	607b      	str	r3, [r7, #4]
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f10:	4659      	mov	r1, fp
 8007f12:	00cb      	lsls	r3, r1, #3
 8007f14:	4651      	mov	r1, sl
 8007f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f1a:	4651      	mov	r1, sl
 8007f1c:	00ca      	lsls	r2, r1, #3
 8007f1e:	4610      	mov	r0, r2
 8007f20:	4619      	mov	r1, r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	4642      	mov	r2, r8
 8007f26:	189b      	adds	r3, r3, r2
 8007f28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f2a:	464b      	mov	r3, r9
 8007f2c:	460a      	mov	r2, r1
 8007f2e:	eb42 0303 	adc.w	r3, r2, r3
 8007f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007f40:	f04f 0200 	mov.w	r2, #0
 8007f44:	f04f 0300 	mov.w	r3, #0
 8007f48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	008b      	lsls	r3, r1, #2
 8007f50:	4641      	mov	r1, r8
 8007f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f56:	4641      	mov	r1, r8
 8007f58:	008a      	lsls	r2, r1, #2
 8007f5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007f5e:	f7f8 fe73 	bl	8000c48 <__aeabi_uldivmod>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4b0d      	ldr	r3, [pc, #52]	@ (8007f9c <UART_SetConfig+0x4e4>)
 8007f68:	fba3 1302 	umull	r1, r3, r3, r2
 8007f6c:	095b      	lsrs	r3, r3, #5
 8007f6e:	2164      	movs	r1, #100	@ 0x64
 8007f70:	fb01 f303 	mul.w	r3, r1, r3
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	3332      	adds	r3, #50	@ 0x32
 8007f7a:	4a08      	ldr	r2, [pc, #32]	@ (8007f9c <UART_SetConfig+0x4e4>)
 8007f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f80:	095b      	lsrs	r3, r3, #5
 8007f82:	f003 020f 	and.w	r2, r3, #15
 8007f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4422      	add	r2, r4
 8007f8e:	609a      	str	r2, [r3, #8]
}
 8007f90:	bf00      	nop
 8007f92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007f96:	46bd      	mov	sp, r7
 8007f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f9c:	51eb851f 	.word	0x51eb851f

08007fa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fa0:	b084      	sub	sp, #16
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	f107 001c 	add.w	r0, r7, #28
 8007fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fb2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d123      	bne.n	8008002 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007fe2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d105      	bne.n	8007ff6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f9dc 	bl	80083b4 <USB_CoreReset>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
 8008000:	e01b      	b.n	800803a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f9d0 	bl	80083b4 <USB_CoreReset>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008018:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800801c:	2b00      	cmp	r3, #0
 800801e:	d106      	bne.n	800802e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008024:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	639a      	str	r2, [r3, #56]	@ 0x38
 800802c:	e005      	b.n	800803a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008032:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800803a:	7fbb      	ldrb	r3, [r7, #30]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d10b      	bne.n	8008058 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f043 0206 	orr.w	r2, r3, #6
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f043 0220 	orr.w	r2, r3, #32
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008064:	b004      	add	sp, #16
 8008066:	4770      	bx	lr

08008068 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f043 0201 	orr.w	r2, r3, #1
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f023 0201 	bic.w	r2, r3, #1
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	460b      	mov	r3, r1
 80080b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80080c8:	78fb      	ldrb	r3, [r7, #3]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d115      	bne.n	80080fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80080da:	200a      	movs	r0, #10
 80080dc:	f7fa fa16 	bl	800250c <HAL_Delay>
      ms += 10U;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	330a      	adds	r3, #10
 80080e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f956 	bl	8008398 <USB_GetMode>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d01e      	beq.n	8008130 <USB_SetCurrentMode+0x84>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2bc7      	cmp	r3, #199	@ 0xc7
 80080f6:	d9f0      	bls.n	80080da <USB_SetCurrentMode+0x2e>
 80080f8:	e01a      	b.n	8008130 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80080fa:	78fb      	ldrb	r3, [r7, #3]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d115      	bne.n	800812c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800810c:	200a      	movs	r0, #10
 800810e:	f7fa f9fd 	bl	800250c <HAL_Delay>
      ms += 10U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	330a      	adds	r3, #10
 8008116:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f93d 	bl	8008398 <USB_GetMode>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d005      	beq.n	8008130 <USB_SetCurrentMode+0x84>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2bc7      	cmp	r3, #199	@ 0xc7
 8008128:	d9f0      	bls.n	800810c <USB_SetCurrentMode+0x60>
 800812a:	e001      	b.n	8008130 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e005      	b.n	800813c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2bc8      	cmp	r3, #200	@ 0xc8
 8008134:	d101      	bne.n	800813a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e000      	b.n	800813c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3301      	adds	r3, #1
 8008156:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800815e:	d901      	bls.n	8008164 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e01b      	b.n	800819c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	daf2      	bge.n	8008152 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	019b      	lsls	r3, r3, #6
 8008174:	f043 0220 	orr.w	r2, r3, #32
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3301      	adds	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008188:	d901      	bls.n	800818e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e006      	b.n	800819c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	f003 0320 	and.w	r3, r3, #32
 8008196:	2b20      	cmp	r3, #32
 8008198:	d0f0      	beq.n	800817c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3301      	adds	r3, #1
 80081b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081c0:	d901      	bls.n	80081c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e018      	b.n	80081f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	daf2      	bge.n	80081b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2210      	movs	r2, #16
 80081d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3301      	adds	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081e4:	d901      	bls.n	80081ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e006      	b.n	80081f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f003 0310 	and.w	r3, r3, #16
 80081f2:	2b10      	cmp	r3, #16
 80081f4:	d0f0      	beq.n	80081d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008204:	b480      	push	{r7}
 8008206:	b089      	sub	sp, #36	@ 0x24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4611      	mov	r1, r2
 8008210:	461a      	mov	r2, r3
 8008212:	460b      	mov	r3, r1
 8008214:	71fb      	strb	r3, [r7, #7]
 8008216:	4613      	mov	r3, r2
 8008218:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008222:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008226:	2b00      	cmp	r3, #0
 8008228:	d123      	bne.n	8008272 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800822a:	88bb      	ldrh	r3, [r7, #4]
 800822c:	3303      	adds	r3, #3
 800822e:	089b      	lsrs	r3, r3, #2
 8008230:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008232:	2300      	movs	r3, #0
 8008234:	61bb      	str	r3, [r7, #24]
 8008236:	e018      	b.n	800826a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008238:	79fb      	ldrb	r3, [r7, #7]
 800823a:	031a      	lsls	r2, r3, #12
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	4413      	add	r3, r2
 8008240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008244:	461a      	mov	r2, r3
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	3301      	adds	r3, #1
 8008250:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	3301      	adds	r3, #1
 8008256:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	3301      	adds	r3, #1
 800825c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	3301      	adds	r3, #1
 8008262:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	3301      	adds	r3, #1
 8008268:	61bb      	str	r3, [r7, #24]
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	429a      	cmp	r2, r3
 8008270:	d3e2      	bcc.n	8008238 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3724      	adds	r7, #36	@ 0x24
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008280:	b480      	push	{r7}
 8008282:	b08b      	sub	sp, #44	@ 0x2c
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	4613      	mov	r3, r2
 800828c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	089b      	lsrs	r3, r3, #2
 800829a:	b29b      	uxth	r3, r3
 800829c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800829e:	88fb      	ldrh	r3, [r7, #6]
 80082a0:	f003 0303 	and.w	r3, r3, #3
 80082a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80082a6:	2300      	movs	r3, #0
 80082a8:	623b      	str	r3, [r7, #32]
 80082aa:	e014      	b.n	80082d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	3301      	adds	r3, #1
 80082bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c0:	3301      	adds	r3, #1
 80082c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80082c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c6:	3301      	adds	r3, #1
 80082c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	3301      	adds	r3, #1
 80082ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	3301      	adds	r3, #1
 80082d4:	623b      	str	r3, [r7, #32]
 80082d6:	6a3a      	ldr	r2, [r7, #32]
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d3e6      	bcc.n	80082ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80082de:	8bfb      	ldrh	r3, [r7, #30]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01e      	beq.n	8008322 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082ee:	461a      	mov	r2, r3
 80082f0:	f107 0310 	add.w	r3, r7, #16
 80082f4:	6812      	ldr	r2, [r2, #0]
 80082f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	00db      	lsls	r3, r3, #3
 8008300:	fa22 f303 	lsr.w	r3, r2, r3
 8008304:	b2da      	uxtb	r2, r3
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	701a      	strb	r2, [r3, #0]
      i++;
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	3301      	adds	r3, #1
 800830e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008312:	3301      	adds	r3, #1
 8008314:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008316:	8bfb      	ldrh	r3, [r7, #30]
 8008318:	3b01      	subs	r3, #1
 800831a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800831c:	8bfb      	ldrh	r3, [r7, #30]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1ea      	bne.n	80082f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008324:	4618      	mov	r0, r3
 8008326:	372c      	adds	r7, #44	@ 0x2c
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	4013      	ands	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008348:	68fb      	ldr	r3, [r7, #12]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	460b      	mov	r3, r1
 8008360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008366:	78fb      	ldrb	r3, [r7, #3]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4413      	add	r3, r2
 800836e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008376:	78fb      	ldrb	r3, [r7, #3]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4413      	add	r3, r2
 800837e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	4013      	ands	r3, r2
 8008388:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800838a:	68bb      	ldr	r3, [r7, #8]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	f003 0301 	and.w	r3, r3, #1
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3301      	adds	r3, #1
 80083c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083cc:	d901      	bls.n	80083d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e022      	b.n	8008418 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	daf2      	bge.n	80083c0 <USB_CoreReset+0xc>

  count = 10U;
 80083da:	230a      	movs	r3, #10
 80083dc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80083de:	e002      	b.n	80083e6 <USB_CoreReset+0x32>
  {
    count--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1f9      	bne.n	80083e0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	f043 0201 	orr.w	r2, r3, #1
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3301      	adds	r3, #1
 80083fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008404:	d901      	bls.n	800840a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e006      	b.n	8008418 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b01      	cmp	r3, #1
 8008414:	d0f0      	beq.n	80083f8 <USB_CoreReset+0x44>

  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008424:	b084      	sub	sp, #16
 8008426:	b580      	push	{r7, lr}
 8008428:	b086      	sub	sp, #24
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008444:	461a      	mov	r2, r3
 8008446:	2300      	movs	r3, #0
 8008448:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800844e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800845a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008466:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d119      	bne.n	80084ae <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800847a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800847e:	2b01      	cmp	r3, #1
 8008480:	d10a      	bne.n	8008498 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008490:	f043 0304 	orr.w	r3, r3, #4
 8008494:	6013      	str	r3, [r2, #0]
 8008496:	e014      	b.n	80084c2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80084a6:	f023 0304 	bic.w	r3, r3, #4
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	e009      	b.n	80084c2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80084bc:	f023 0304 	bic.w	r3, r3, #4
 80084c0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084c2:	2110      	movs	r1, #16
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7ff fe3d 	bl	8008144 <USB_FlushTxFifo>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff fe67 	bl	80081a8 <USB_FlushRxFifo>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80084e4:	2300      	movs	r3, #0
 80084e6:	613b      	str	r3, [r7, #16]
 80084e8:	e015      	b.n	8008516 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084f6:	461a      	mov	r2, r3
 80084f8:	f04f 33ff 	mov.w	r3, #4294967295
 80084fc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	4413      	add	r3, r2
 8008506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800850a:	461a      	mov	r2, r3
 800850c:	2300      	movs	r3, #0
 800850e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	3301      	adds	r3, #1
 8008514:	613b      	str	r3, [r7, #16]
 8008516:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800851a:	461a      	mov	r2, r3
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	4293      	cmp	r3, r2
 8008520:	d3e3      	bcc.n	80084ea <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f04f 32ff 	mov.w	r2, #4294967295
 800852e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a18      	ldr	r2, [pc, #96]	@ (8008594 <USB_HostInit+0x170>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d10b      	bne.n	8008550 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800853e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a15      	ldr	r2, [pc, #84]	@ (8008598 <USB_HostInit+0x174>)
 8008544:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a14      	ldr	r2, [pc, #80]	@ (800859c <USB_HostInit+0x178>)
 800854a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800854e:	e009      	b.n	8008564 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2280      	movs	r2, #128	@ 0x80
 8008554:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a11      	ldr	r2, [pc, #68]	@ (80085a0 <USB_HostInit+0x17c>)
 800855a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a11      	ldr	r2, [pc, #68]	@ (80085a4 <USB_HostInit+0x180>)
 8008560:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008564:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008568:	2b00      	cmp	r3, #0
 800856a:	d105      	bne.n	8008578 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	f043 0210 	orr.w	r2, r3, #16
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	699a      	ldr	r2, [r3, #24]
 800857c:	4b0a      	ldr	r3, [pc, #40]	@ (80085a8 <USB_HostInit+0x184>)
 800857e:	4313      	orrs	r3, r2
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008584:	7dfb      	ldrb	r3, [r7, #23]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008590:	b004      	add	sp, #16
 8008592:	4770      	bx	lr
 8008594:	40040000 	.word	0x40040000
 8008598:	01000200 	.word	0x01000200
 800859c:	00e00300 	.word	0x00e00300
 80085a0:	00600080 	.word	0x00600080
 80085a4:	004000e0 	.word	0x004000e0
 80085a8:	a3200008 	.word	0xa3200008

080085ac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80085ca:	f023 0303 	bic.w	r3, r3, #3
 80085ce:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	68f9      	ldr	r1, [r7, #12]
 80085e0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80085e4:	4313      	orrs	r3, r2
 80085e6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d107      	bne.n	80085fe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085f4:	461a      	mov	r2, r3
 80085f6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80085fa:	6053      	str	r3, [r2, #4]
 80085fc:	e00c      	b.n	8008618 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	2b02      	cmp	r3, #2
 8008602:	d107      	bne.n	8008614 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800860a:	461a      	mov	r2, r3
 800860c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008610:	6053      	str	r3, [r2, #4]
 8008612:	e001      	b.n	8008618 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008646:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008654:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008656:	2064      	movs	r0, #100	@ 0x64
 8008658:	f7f9 ff58 	bl	800250c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008668:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800866a:	200a      	movs	r0, #10
 800866c:	f7f9 ff4e 	bl	800250c <HAL_Delay>

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800868a:	2300      	movs	r3, #0
 800868c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800869e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d109      	bne.n	80086be <USB_DriveVbus+0x44>
 80086aa:	78fb      	ldrb	r3, [r7, #3]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d106      	bne.n	80086be <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80086b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80086bc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086c8:	d109      	bne.n	80086de <USB_DriveVbus+0x64>
 80086ca:	78fb      	ldrb	r3, [r7, #3]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d106      	bne.n	80086de <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80086d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086dc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	0c5b      	lsrs	r3, r3, #17
 800870a:	f003 0303 	and.w	r3, r3, #3
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800871a:	b480      	push	{r7}
 800871c:	b085      	sub	sp, #20
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	b29b      	uxth	r3, r3
}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	4608      	mov	r0, r1
 8008746:	4611      	mov	r1, r2
 8008748:	461a      	mov	r2, r3
 800874a:	4603      	mov	r3, r0
 800874c:	70fb      	strb	r3, [r7, #3]
 800874e:	460b      	mov	r3, r1
 8008750:	70bb      	strb	r3, [r7, #2]
 8008752:	4613      	mov	r3, r2
 8008754:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	4413      	add	r3, r2
 8008766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800876a:	461a      	mov	r2, r3
 800876c:	f04f 33ff 	mov.w	r3, #4294967295
 8008770:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008772:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008776:	2b03      	cmp	r3, #3
 8008778:	d87c      	bhi.n	8008874 <USB_HC_Init+0x138>
 800877a:	a201      	add	r2, pc, #4	@ (adr r2, 8008780 <USB_HC_Init+0x44>)
 800877c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008780:	08008791 	.word	0x08008791
 8008784:	08008837 	.word	0x08008837
 8008788:	08008791 	.word	0x08008791
 800878c:	080087f9 	.word	0x080087f9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	4413      	add	r3, r2
 8008798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800879c:	461a      	mov	r2, r3
 800879e:	f240 439d 	movw	r3, #1181	@ 0x49d
 80087a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80087a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	da10      	bge.n	80087ce <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	78fa      	ldrb	r2, [r7, #3]
 80087bc:	0151      	lsls	r1, r2, #5
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	440a      	add	r2, r1
 80087c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087ca:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80087cc:	e055      	b.n	800887a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a6f      	ldr	r2, [pc, #444]	@ (8008990 <USB_HC_Init+0x254>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d151      	bne.n	800887a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80087d6:	78fb      	ldrb	r3, [r7, #3]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	78fa      	ldrb	r2, [r7, #3]
 80087e6:	0151      	lsls	r1, r2, #5
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	440a      	add	r2, r1
 80087ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087f0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80087f4:	60d3      	str	r3, [r2, #12]
      break;
 80087f6:	e040      	b.n	800887a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008804:	461a      	mov	r2, r3
 8008806:	f240 639d 	movw	r3, #1693	@ 0x69d
 800880a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800880c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008810:	2b00      	cmp	r3, #0
 8008812:	da34      	bge.n	800887e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4413      	add	r3, r2
 800881c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	78fa      	ldrb	r2, [r7, #3]
 8008824:	0151      	lsls	r1, r2, #5
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	440a      	add	r2, r1
 800882a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800882e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008832:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008834:	e023      	b.n	800887e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	4413      	add	r3, r2
 800883e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008842:	461a      	mov	r2, r3
 8008844:	f240 2325 	movw	r3, #549	@ 0x225
 8008848:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800884a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800884e:	2b00      	cmp	r3, #0
 8008850:	da17      	bge.n	8008882 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	4413      	add	r3, r2
 800885a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	78fa      	ldrb	r2, [r7, #3]
 8008862:	0151      	lsls	r1, r2, #5
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	440a      	add	r2, r1
 8008868:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800886c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008870:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008872:	e006      	b.n	8008882 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	77fb      	strb	r3, [r7, #31]
      break;
 8008878:	e004      	b.n	8008884 <USB_HC_Init+0x148>
      break;
 800887a:	bf00      	nop
 800887c:	e002      	b.n	8008884 <USB_HC_Init+0x148>
      break;
 800887e:	bf00      	nop
 8008880:	e000      	b.n	8008884 <USB_HC_Init+0x148>
      break;
 8008882:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008884:	78fb      	ldrb	r3, [r7, #3]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	4413      	add	r3, r2
 800888c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008890:	461a      	mov	r2, r3
 8008892:	2300      	movs	r3, #0
 8008894:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008896:	78fb      	ldrb	r3, [r7, #3]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	4413      	add	r3, r2
 800889e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	78fa      	ldrb	r2, [r7, #3]
 80088a6:	0151      	lsls	r1, r2, #5
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	440a      	add	r2, r1
 80088ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088b0:	f043 0302 	orr.w	r3, r3, #2
 80088b4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088bc:	699a      	ldr	r2, [r3, #24]
 80088be:	78fb      	ldrb	r3, [r7, #3]
 80088c0:	f003 030f 	and.w	r3, r3, #15
 80088c4:	2101      	movs	r1, #1
 80088c6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ca:	6939      	ldr	r1, [r7, #16]
 80088cc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80088d0:	4313      	orrs	r3, r2
 80088d2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80088e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	da03      	bge.n	80088f0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80088e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088ec:	61bb      	str	r3, [r7, #24]
 80088ee:	e001      	b.n	80088f4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff fef9 	bl	80086ec <USB_GetHostSpeed>
 80088fa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80088fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008900:	2b02      	cmp	r3, #2
 8008902:	d106      	bne.n	8008912 <USB_HC_Init+0x1d6>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b02      	cmp	r3, #2
 8008908:	d003      	beq.n	8008912 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800890a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	e001      	b.n	8008916 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008916:	787b      	ldrb	r3, [r7, #1]
 8008918:	059b      	lsls	r3, r3, #22
 800891a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800891e:	78bb      	ldrb	r3, [r7, #2]
 8008920:	02db      	lsls	r3, r3, #11
 8008922:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008926:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008928:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800892c:	049b      	lsls	r3, r3, #18
 800892e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008932:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008934:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008936:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800893a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	431a      	orrs	r2, r3
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008944:	78fa      	ldrb	r2, [r7, #3]
 8008946:	0151      	lsls	r1, r2, #5
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	440a      	add	r2, r1
 800894c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008950:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008954:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008956:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800895a:	2b03      	cmp	r3, #3
 800895c:	d003      	beq.n	8008966 <USB_HC_Init+0x22a>
 800895e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008962:	2b01      	cmp	r3, #1
 8008964:	d10f      	bne.n	8008986 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008966:	78fb      	ldrb	r3, [r7, #3]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	4413      	add	r3, r2
 800896e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	78fa      	ldrb	r2, [r7, #3]
 8008976:	0151      	lsls	r1, r2, #5
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	440a      	add	r2, r1
 800897c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008980:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008984:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008986:	7ffb      	ldrb	r3, [r7, #31]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3720      	adds	r7, #32
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	40040000 	.word	0x40040000

08008994 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08c      	sub	sp, #48	@ 0x30
 8008998:	af02      	add	r7, sp, #8
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	4613      	mov	r3, r2
 80089a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	785b      	ldrb	r3, [r3, #1]
 80089aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80089ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80089b0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	4a5d      	ldr	r2, [pc, #372]	@ (8008b2c <USB_HC_StartXfer+0x198>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d12f      	bne.n	8008a1a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d11c      	bne.n	80089fa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	7c9b      	ldrb	r3, [r3, #18]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <USB_HC_StartXfer+0x3c>
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	7c9b      	ldrb	r3, [r3, #18]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d124      	bne.n	8008a1a <USB_HC_StartXfer+0x86>
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	799b      	ldrb	r3, [r3, #6]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d120      	bne.n	8008a1a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	0151      	lsls	r1, r2, #5
 80089ea:	6a3a      	ldr	r2, [r7, #32]
 80089ec:	440a      	add	r2, r1
 80089ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089f6:	60d3      	str	r3, [r2, #12]
 80089f8:	e00f      	b.n	8008a1a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	791b      	ldrb	r3, [r3, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10b      	bne.n	8008a1a <USB_HC_StartXfer+0x86>
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	795b      	ldrb	r3, [r3, #5]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d107      	bne.n	8008a1a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	785b      	ldrb	r3, [r3, #1]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 fb6b 	bl	80090ec <USB_DoPing>
        return HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	e232      	b.n	8008e80 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	799b      	ldrb	r3, [r3, #6]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d158      	bne.n	8008ad4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008a22:	2301      	movs	r3, #1
 8008a24:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	78db      	ldrb	r3, [r3, #3]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d007      	beq.n	8008a3e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	8a92      	ldrh	r2, [r2, #20]
 8008a34:	fb03 f202 	mul.w	r2, r3, r2
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	61da      	str	r2, [r3, #28]
 8008a3c:	e07c      	b.n	8008b38 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	7c9b      	ldrb	r3, [r3, #18]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d130      	bne.n	8008aa8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	2bbc      	cmp	r3, #188	@ 0xbc
 8008a4c:	d918      	bls.n	8008a80 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	8a9b      	ldrh	r3, [r3, #20]
 8008a52:	461a      	mov	r2, r3
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	69da      	ldr	r2, [r3, #28]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d003      	beq.n	8008a70 <USB_HC_StartXfer+0xdc>
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d103      	bne.n	8008a78 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2202      	movs	r2, #2
 8008a74:	60da      	str	r2, [r3, #12]
 8008a76:	e05f      	b.n	8008b38 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	60da      	str	r2, [r3, #12]
 8008a7e:	e05b      	b.n	8008b38 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	6a1a      	ldr	r2, [r3, #32]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d007      	beq.n	8008aa0 <USB_HC_StartXfer+0x10c>
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d003      	beq.n	8008aa0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2204      	movs	r2, #4
 8008a9c:	60da      	str	r2, [r3, #12]
 8008a9e:	e04b      	b.n	8008b38 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2203      	movs	r2, #3
 8008aa4:	60da      	str	r2, [r3, #12]
 8008aa6:	e047      	b.n	8008b38 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d10d      	bne.n	8008aca <USB_HC_StartXfer+0x136>
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	8a92      	ldrh	r2, [r2, #20]
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d907      	bls.n	8008aca <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008aba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	8a92      	ldrh	r2, [r2, #20]
 8008ac0:	fb03 f202 	mul.w	r2, r3, r2
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	61da      	str	r2, [r3, #28]
 8008ac8:	e036      	b.n	8008b38 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	6a1a      	ldr	r2, [r3, #32]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	61da      	str	r2, [r3, #28]
 8008ad2:	e031      	b.n	8008b38 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	6a1b      	ldr	r3, [r3, #32]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d018      	beq.n	8008b0e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	8a92      	ldrh	r2, [r2, #20]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	8a92      	ldrh	r2, [r2, #20]
 8008aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8008af0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008af2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008af4:	8b7b      	ldrh	r3, [r7, #26]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d90b      	bls.n	8008b12 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008afa:	8b7b      	ldrh	r3, [r7, #26]
 8008afc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008afe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	8a92      	ldrh	r2, [r2, #20]
 8008b04:	fb03 f202 	mul.w	r2, r3, r2
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	61da      	str	r2, [r3, #28]
 8008b0c:	e001      	b.n	8008b12 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	78db      	ldrb	r3, [r3, #3]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008b1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	8a92      	ldrh	r2, [r2, #20]
 8008b20:	fb03 f202 	mul.w	r2, r3, r2
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	61da      	str	r2, [r3, #28]
 8008b28:	e006      	b.n	8008b38 <USB_HC_StartXfer+0x1a4>
 8008b2a:	bf00      	nop
 8008b2c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	6a1a      	ldr	r2, [r3, #32]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008b42:	04d9      	lsls	r1, r3, #19
 8008b44:	4ba3      	ldr	r3, [pc, #652]	@ (8008dd4 <USB_HC_StartXfer+0x440>)
 8008b46:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b48:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	7d9b      	ldrb	r3, [r3, #22]
 8008b4e:	075b      	lsls	r3, r3, #29
 8008b50:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b54:	69f9      	ldr	r1, [r7, #28]
 8008b56:	0148      	lsls	r0, r1, #5
 8008b58:	6a39      	ldr	r1, [r7, #32]
 8008b5a:	4401      	add	r1, r0
 8008b5c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b60:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b62:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d009      	beq.n	8008b7e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	6999      	ldr	r1, [r3, #24]
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b7a:	460a      	mov	r2, r1
 8008b7c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	bf0c      	ite	eq
 8008b8e:	2301      	moveq	r3, #1
 8008b90:	2300      	movne	r3, #0
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	69fa      	ldr	r2, [r7, #28]
 8008ba6:	0151      	lsls	r1, r2, #5
 8008ba8:	6a3a      	ldr	r2, [r7, #32]
 8008baa:	440a      	add	r2, r1
 8008bac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008bb4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	7e7b      	ldrb	r3, [r7, #25]
 8008bc6:	075b      	lsls	r3, r3, #29
 8008bc8:	69f9      	ldr	r1, [r7, #28]
 8008bca:	0148      	lsls	r0, r1, #5
 8008bcc:	6a39      	ldr	r1, [r7, #32]
 8008bce:	4401      	add	r1, r0
 8008bd0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	799b      	ldrb	r3, [r3, #6]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	f040 80c3 	bne.w	8008d68 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	7c5b      	ldrb	r3, [r3, #17]
 8008be6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008bec:	4313      	orrs	r3, r2
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	0151      	lsls	r1, r2, #5
 8008bf2:	6a3a      	ldr	r2, [r7, #32]
 8008bf4:	440a      	add	r2, r1
 8008bf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008bfa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008bfe:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	69fa      	ldr	r2, [r7, #28]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	6a3a      	ldr	r2, [r7, #32]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c1a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008c1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	79db      	ldrb	r3, [r3, #7]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d123      	bne.n	8008c70 <USB_HC_StartXfer+0x2dc>
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	78db      	ldrb	r3, [r3, #3]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d11f      	bne.n	8008c70 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	69fa      	ldr	r2, [r7, #28]
 8008c40:	0151      	lsls	r1, r2, #5
 8008c42:	6a3a      	ldr	r2, [r7, #32]
 8008c44:	440a      	add	r2, r1
 8008c46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c4e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	69fa      	ldr	r2, [r7, #28]
 8008c60:	0151      	lsls	r1, r2, #5
 8008c62:	6a3a      	ldr	r2, [r7, #32]
 8008c64:	440a      	add	r2, r1
 8008c66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c6e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	7c9b      	ldrb	r3, [r3, #18]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d003      	beq.n	8008c80 <USB_HC_StartXfer+0x2ec>
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	7c9b      	ldrb	r3, [r3, #18]
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d117      	bne.n	8008cb0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d113      	bne.n	8008cb0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	78db      	ldrb	r3, [r3, #3]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d10f      	bne.n	8008cb0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	69fa      	ldr	r2, [r7, #28]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	6a3a      	ldr	r2, [r7, #32]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008cae:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	7c9b      	ldrb	r3, [r3, #18]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d162      	bne.n	8008d7e <USB_HC_StartXfer+0x3ea>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	78db      	ldrb	r3, [r3, #3]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d15e      	bne.n	8008d7e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d858      	bhi.n	8008d7c <USB_HC_StartXfer+0x3e8>
 8008cca:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd0 <USB_HC_StartXfer+0x33c>)
 8008ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd0:	08008ce1 	.word	0x08008ce1
 8008cd4:	08008d03 	.word	0x08008d03
 8008cd8:	08008d25 	.word	0x08008d25
 8008cdc:	08008d47 	.word	0x08008d47
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	0151      	lsls	r1, r2, #5
 8008cf2:	6a3a      	ldr	r2, [r7, #32]
 8008cf4:	440a      	add	r2, r1
 8008cf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cfe:	6053      	str	r3, [r2, #4]
          break;
 8008d00:	e03d      	b.n	8008d7e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	015a      	lsls	r2, r3, #5
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	4413      	add	r3, r2
 8008d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	0151      	lsls	r1, r2, #5
 8008d14:	6a3a      	ldr	r2, [r7, #32]
 8008d16:	440a      	add	r2, r1
 8008d18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d1c:	f043 030e 	orr.w	r3, r3, #14
 8008d20:	6053      	str	r3, [r2, #4]
          break;
 8008d22:	e02c      	b.n	8008d7e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	0151      	lsls	r1, r2, #5
 8008d36:	6a3a      	ldr	r2, [r7, #32]
 8008d38:	440a      	add	r2, r1
 8008d3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d42:	6053      	str	r3, [r2, #4]
          break;
 8008d44:	e01b      	b.n	8008d7e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	69fa      	ldr	r2, [r7, #28]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	6a3a      	ldr	r2, [r7, #32]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d64:	6053      	str	r3, [r2, #4]
          break;
 8008d66:	e00a      	b.n	8008d7e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d74:	461a      	mov	r2, r3
 8008d76:	2300      	movs	r3, #0
 8008d78:	6053      	str	r3, [r2, #4]
 8008d7a:	e000      	b.n	8008d7e <USB_HC_StartXfer+0x3ea>
          break;
 8008d7c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	6a3b      	ldr	r3, [r7, #32]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d94:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	78db      	ldrb	r3, [r3, #3]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d004      	beq.n	8008da8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008da4:	613b      	str	r3, [r7, #16]
 8008da6:	e003      	b.n	8008db0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008dae:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008db6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d003      	beq.n	8008dd8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	e055      	b.n	8008e80 <USB_HC_StartXfer+0x4ec>
 8008dd4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	78db      	ldrb	r3, [r3, #3]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d14e      	bne.n	8008e7e <USB_HC_StartXfer+0x4ea>
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d04a      	beq.n	8008e7e <USB_HC_StartXfer+0x4ea>
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	79db      	ldrb	r3, [r3, #7]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d146      	bne.n	8008e7e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	7c9b      	ldrb	r3, [r3, #18]
 8008df4:	2b03      	cmp	r3, #3
 8008df6:	d831      	bhi.n	8008e5c <USB_HC_StartXfer+0x4c8>
 8008df8:	a201      	add	r2, pc, #4	@ (adr r2, 8008e00 <USB_HC_StartXfer+0x46c>)
 8008dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfe:	bf00      	nop
 8008e00:	08008e11 	.word	0x08008e11
 8008e04:	08008e35 	.word	0x08008e35
 8008e08:	08008e11 	.word	0x08008e11
 8008e0c:	08008e35 	.word	0x08008e35
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	6a1b      	ldr	r3, [r3, #32]
 8008e14:	3303      	adds	r3, #3
 8008e16:	089b      	lsrs	r3, r3, #2
 8008e18:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008e1a:	8afa      	ldrh	r2, [r7, #22]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d91c      	bls.n	8008e60 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	f043 0220 	orr.w	r2, r3, #32
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	619a      	str	r2, [r3, #24]
        }
        break;
 8008e32:	e015      	b.n	8008e60 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	3303      	adds	r3, #3
 8008e3a:	089b      	lsrs	r3, r3, #2
 8008e3c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008e3e:	8afa      	ldrh	r2, [r7, #22]
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d90a      	bls.n	8008e64 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	619a      	str	r2, [r3, #24]
        }
        break;
 8008e5a:	e003      	b.n	8008e64 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008e5c:	bf00      	nop
 8008e5e:	e002      	b.n	8008e66 <USB_HC_StartXfer+0x4d2>
        break;
 8008e60:	bf00      	nop
 8008e62:	e000      	b.n	8008e66 <USB_HC_StartXfer+0x4d2>
        break;
 8008e64:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	6999      	ldr	r1, [r3, #24]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	785a      	ldrb	r2, [r3, #1]
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	6a1b      	ldr	r3, [r3, #32]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	2000      	movs	r0, #0
 8008e76:	9000      	str	r0, [sp, #0]
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f7ff f9c3 	bl	8008204 <USB_WritePacket>
  }

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3728      	adds	r7, #40	@ 0x28
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	b29b      	uxth	r3, r3
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b089      	sub	sp, #36	@ 0x24
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	0c9b      	lsrs	r3, r3, #18
 8008ed2:	f003 0303 	and.w	r3, r3, #3
 8008ed6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	0fdb      	lsrs	r3, r3, #31
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	0fdb      	lsrs	r3, r3, #31
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f003 0320 	and.w	r3, r3, #32
 8008f0c:	2b20      	cmp	r3, #32
 8008f0e:	d10d      	bne.n	8008f2c <USB_HC_Halt+0x82>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10a      	bne.n	8008f2c <USB_HC_Halt+0x82>
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d005      	beq.n	8008f28 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d002      	beq.n	8008f28 <USB_HC_Halt+0x7e>
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d101      	bne.n	8008f2c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e0d8      	b.n	80090de <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <USB_HC_Halt+0x8e>
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d173      	bne.n	8009020 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	0151      	lsls	r1, r2, #5
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	440a      	add	r2, r1
 8008f4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f56:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	f003 0320 	and.w	r3, r3, #32
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d14a      	bne.n	8008ffa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d133      	bne.n	8008fd8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	69ba      	ldr	r2, [r7, #24]
 8008f80:	0151      	lsls	r1, r2, #5
 8008f82:	69fa      	ldr	r2, [r7, #28]
 8008f84:	440a      	add	r2, r1
 8008f86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f8e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	0151      	lsls	r1, r2, #5
 8008fa2:	69fa      	ldr	r2, [r7, #28]
 8008fa4:	440a      	add	r2, r1
 8008fa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008faa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008fae:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008fbc:	d82e      	bhi.n	800901c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fd4:	d0ec      	beq.n	8008fb0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fd6:	e081      	b.n	80090dc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	0151      	lsls	r1, r2, #5
 8008fea:	69fa      	ldr	r2, [r7, #28]
 8008fec:	440a      	add	r2, r1
 8008fee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ff2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ff6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ff8:	e070      	b.n	80090dc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	015a      	lsls	r2, r3, #5
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	4413      	add	r3, r2
 8009002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	0151      	lsls	r1, r2, #5
 800900c:	69fa      	ldr	r2, [r7, #28]
 800900e:	440a      	add	r2, r1
 8009010:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009014:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009018:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800901a:	e05f      	b.n	80090dc <USB_HC_Halt+0x232>
            break;
 800901c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800901e:	e05d      	b.n	80090dc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	015a      	lsls	r2, r3, #5
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	4413      	add	r3, r2
 8009028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	0151      	lsls	r1, r2, #5
 8009032:	69fa      	ldr	r2, [r7, #28]
 8009034:	440a      	add	r2, r1
 8009036:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800903a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800903e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d133      	bne.n	80090b8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	4413      	add	r3, r2
 8009058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	0151      	lsls	r1, r2, #5
 8009062:	69fa      	ldr	r2, [r7, #28]
 8009064:	440a      	add	r2, r1
 8009066:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800906a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800906e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	4413      	add	r3, r2
 8009078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	0151      	lsls	r1, r2, #5
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	440a      	add	r2, r1
 8009086:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800908a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800908e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	3301      	adds	r3, #1
 8009094:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800909c:	d81d      	bhi.n	80090da <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	015a      	lsls	r2, r3, #5
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090b4:	d0ec      	beq.n	8009090 <USB_HC_Halt+0x1e6>
 80090b6:	e011      	b.n	80090dc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	0151      	lsls	r1, r2, #5
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	440a      	add	r2, r1
 80090ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	e000      	b.n	80090dc <USB_HC_Halt+0x232>
          break;
 80090da:	bf00      	nop
    }
  }

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3724      	adds	r7, #36	@ 0x24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
	...

080090ec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80090fc:	78fb      	ldrb	r3, [r7, #3]
 80090fe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009100:	2301      	movs	r3, #1
 8009102:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	04da      	lsls	r2, r3, #19
 8009108:	4b15      	ldr	r3, [pc, #84]	@ (8009160 <USB_DoPing+0x74>)
 800910a:	4013      	ands	r3, r2
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	0151      	lsls	r1, r2, #5
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	440a      	add	r2, r1
 8009114:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800911c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	4413      	add	r3, r2
 8009126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009134:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800913c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	4413      	add	r3, r2
 8009146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800914a:	461a      	mov	r2, r3
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	1ff80000 	.word	0x1ff80000

08009164 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7fe ff86 	bl	800808a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800917e:	2110      	movs	r1, #16
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7fe ffdf 	bl	8008144 <USB_FlushTxFifo>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7ff f809 	bl	80081a8 <USB_FlushRxFifo>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80091a0:	2300      	movs	r3, #0
 80091a2:	61bb      	str	r3, [r7, #24]
 80091a4:	e01f      	b.n	80091e6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80091cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	015a      	lsls	r2, r3, #5
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	4413      	add	r3, r2
 80091d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091da:	461a      	mov	r2, r3
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	3301      	adds	r3, #1
 80091e4:	61bb      	str	r3, [r7, #24]
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	2b0f      	cmp	r3, #15
 80091ea:	d9dc      	bls.n	80091a6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80091ec:	2300      	movs	r3, #0
 80091ee:	61bb      	str	r3, [r7, #24]
 80091f0:	e034      	b.n	800925c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009208:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009210:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009218:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	4413      	add	r3, r2
 8009222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009226:	461a      	mov	r2, r3
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3301      	adds	r3, #1
 8009230:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009238:	d80c      	bhi.n	8009254 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	4413      	add	r3, r2
 8009242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800924c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009250:	d0ec      	beq.n	800922c <USB_StopHost+0xc8>
 8009252:	e000      	b.n	8009256 <USB_StopHost+0xf2>
        break;
 8009254:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	3301      	adds	r3, #1
 800925a:	61bb      	str	r3, [r7, #24]
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	2b0f      	cmp	r3, #15
 8009260:	d9c7      	bls.n	80091f2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009268:	461a      	mov	r2, r3
 800926a:	f04f 33ff 	mov.w	r3, #4294967295
 800926e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f04f 32ff 	mov.w	r2, #4294967295
 8009276:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7fe fef5 	bl	8008068 <USB_EnableGlobalInt>

  return ret;
 800927e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3720      	adds	r7, #32
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009288:	b590      	push	{r4, r7, lr}
 800928a:	b089      	sub	sp, #36	@ 0x24
 800928c:	af04      	add	r7, sp, #16
 800928e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009290:	2301      	movs	r3, #1
 8009292:	2202      	movs	r2, #2
 8009294:	2102      	movs	r1, #2
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fc83 	bl	8009ba2 <USBH_FindInterface>
 800929c:	4603      	mov	r3, r0
 800929e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	2bff      	cmp	r3, #255	@ 0xff
 80092a4:	d002      	beq.n	80092ac <USBH_CDC_InterfaceInit+0x24>
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d901      	bls.n	80092b0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80092ac:	2302      	movs	r3, #2
 80092ae:	e13d      	b.n	800952c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fc58 	bl	8009b6a <USBH_SelectInterface>
 80092ba:	4603      	mov	r3, r0
 80092bc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80092be:	7bbb      	ldrb	r3, [r7, #14]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80092c4:	2302      	movs	r3, #2
 80092c6:	e131      	b.n	800952c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80092ce:	2050      	movs	r0, #80	@ 0x50
 80092d0:	f002 fb6a 	bl	800b9a8 <malloc>
 80092d4:	4603      	mov	r3, r0
 80092d6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d101      	bne.n	80092ec <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80092e8:	2302      	movs	r3, #2
 80092ea:	e11f      	b.n	800952c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80092ec:	2250      	movs	r2, #80	@ 0x50
 80092ee:	2100      	movs	r1, #0
 80092f0:	68b8      	ldr	r0, [r7, #8]
 80092f2:	f003 f984 	bl	800c5fe <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	211a      	movs	r1, #26
 80092fc:	fb01 f303 	mul.w	r3, r1, r3
 8009300:	4413      	add	r3, r2
 8009302:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	b25b      	sxtb	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	da15      	bge.n	800933a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	211a      	movs	r1, #26
 8009314:	fb01 f303 	mul.w	r3, r1, r3
 8009318:	4413      	add	r3, r2
 800931a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800931e:	781a      	ldrb	r2, [r3, #0]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	211a      	movs	r1, #26
 800932a:	fb01 f303 	mul.w	r3, r1, r3
 800932e:	4413      	add	r3, r2
 8009330:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009334:	881a      	ldrh	r2, [r3, #0]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	785b      	ldrb	r3, [r3, #1]
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f001 ffc4 	bl	800b2ce <USBH_AllocPipe>
 8009346:	4603      	mov	r3, r0
 8009348:	461a      	mov	r2, r3
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	7819      	ldrb	r1, [r3, #0]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	7858      	ldrb	r0, [r3, #1]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	8952      	ldrh	r2, [r2, #10]
 8009366:	9202      	str	r2, [sp, #8]
 8009368:	2203      	movs	r2, #3
 800936a:	9201      	str	r2, [sp, #4]
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	4623      	mov	r3, r4
 8009370:	4602      	mov	r2, r0
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f001 ff7c 	bl	800b270 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	2200      	movs	r2, #0
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f002 fa8b 	bl	800b89c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009386:	2300      	movs	r3, #0
 8009388:	2200      	movs	r2, #0
 800938a:	210a      	movs	r1, #10
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fc08 	bl	8009ba2 <USBH_FindInterface>
 8009392:	4603      	mov	r3, r0
 8009394:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009396:	7bfb      	ldrb	r3, [r7, #15]
 8009398:	2bff      	cmp	r3, #255	@ 0xff
 800939a:	d002      	beq.n	80093a2 <USBH_CDC_InterfaceInit+0x11a>
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d901      	bls.n	80093a6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80093a2:	2302      	movs	r3, #2
 80093a4:	e0c2      	b.n	800952c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	211a      	movs	r1, #26
 80093ac:	fb01 f303 	mul.w	r3, r1, r3
 80093b0:	4413      	add	r3, r2
 80093b2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	b25b      	sxtb	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	da16      	bge.n	80093ec <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80093be:	7bfb      	ldrb	r3, [r7, #15]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	211a      	movs	r1, #26
 80093c4:	fb01 f303 	mul.w	r3, r1, r3
 80093c8:	4413      	add	r3, r2
 80093ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80093ce:	781a      	ldrb	r2, [r3, #0]
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	211a      	movs	r1, #26
 80093da:	fb01 f303 	mul.w	r3, r1, r3
 80093de:	4413      	add	r3, r2
 80093e0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80093e4:	881a      	ldrh	r2, [r3, #0]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	835a      	strh	r2, [r3, #26]
 80093ea:	e015      	b.n	8009418 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	211a      	movs	r1, #26
 80093f2:	fb01 f303 	mul.w	r3, r1, r3
 80093f6:	4413      	add	r3, r2
 80093f8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80093fc:	781a      	ldrb	r2, [r3, #0]
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	211a      	movs	r1, #26
 8009408:	fb01 f303 	mul.w	r3, r1, r3
 800940c:	4413      	add	r3, r2
 800940e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009412:	881a      	ldrh	r2, [r3, #0]
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	211a      	movs	r1, #26
 800941e:	fb01 f303 	mul.w	r3, r1, r3
 8009422:	4413      	add	r3, r2
 8009424:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	b25b      	sxtb	r3, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	da16      	bge.n	800945e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009430:	7bfb      	ldrb	r3, [r7, #15]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	211a      	movs	r1, #26
 8009436:	fb01 f303 	mul.w	r3, r1, r3
 800943a:	4413      	add	r3, r2
 800943c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009440:	781a      	ldrb	r2, [r3, #0]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009446:	7bfb      	ldrb	r3, [r7, #15]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	211a      	movs	r1, #26
 800944c:	fb01 f303 	mul.w	r3, r1, r3
 8009450:	4413      	add	r3, r2
 8009452:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009456:	881a      	ldrh	r2, [r3, #0]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	835a      	strh	r2, [r3, #26]
 800945c:	e015      	b.n	800948a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800945e:	7bfb      	ldrb	r3, [r7, #15]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	211a      	movs	r1, #26
 8009464:	fb01 f303 	mul.w	r3, r1, r3
 8009468:	4413      	add	r3, r2
 800946a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800946e:	781a      	ldrb	r2, [r3, #0]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	211a      	movs	r1, #26
 800947a:	fb01 f303 	mul.w	r3, r1, r3
 800947e:	4413      	add	r3, r2
 8009480:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009484:	881a      	ldrh	r2, [r3, #0]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	7b9b      	ldrb	r3, [r3, #14]
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f001 ff1c 	bl	800b2ce <USBH_AllocPipe>
 8009496:	4603      	mov	r3, r0
 8009498:	461a      	mov	r2, r3
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	7bdb      	ldrb	r3, [r3, #15]
 80094a2:	4619      	mov	r1, r3
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f001 ff12 	bl	800b2ce <USBH_AllocPipe>
 80094aa:	4603      	mov	r3, r0
 80094ac:	461a      	mov	r2, r3
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	7b59      	ldrb	r1, [r3, #13]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	7b98      	ldrb	r0, [r3, #14]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	8b12      	ldrh	r2, [r2, #24]
 80094ca:	9202      	str	r2, [sp, #8]
 80094cc:	2202      	movs	r2, #2
 80094ce:	9201      	str	r2, [sp, #4]
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	4623      	mov	r3, r4
 80094d4:	4602      	mov	r2, r0
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f001 feca 	bl	800b270 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	7b19      	ldrb	r1, [r3, #12]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	7bd8      	ldrb	r0, [r3, #15]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	8b52      	ldrh	r2, [r2, #26]
 80094f4:	9202      	str	r2, [sp, #8]
 80094f6:	2202      	movs	r2, #2
 80094f8:	9201      	str	r2, [sp, #4]
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	4623      	mov	r3, r4
 80094fe:	4602      	mov	r2, r0
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 feb5 	bl	800b270 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	7b5b      	ldrb	r3, [r3, #13]
 8009512:	2200      	movs	r2, #0
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f002 f9c0 	bl	800b89c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	7b1b      	ldrb	r3, [r3, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f002 f9b9 	bl	800b89c <USBH_LL_SetToggle>

  return USBH_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	bd90      	pop	{r4, r7, pc}

08009534 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009542:	69db      	ldr	r3, [r3, #28]
 8009544:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00e      	beq.n	800956c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f001 feaa 	bl	800b2ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 fed5 	bl	800b310 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	7b1b      	ldrb	r3, [r3, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00e      	beq.n	8009592 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	7b1b      	ldrb	r3, [r3, #12]
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 fe97 	bl	800b2ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	7b1b      	ldrb	r3, [r3, #12]
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 fec2 	bl	800b310 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	7b5b      	ldrb	r3, [r3, #13]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00e      	beq.n	80095b8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	7b5b      	ldrb	r3, [r3, #13]
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f001 fe84 	bl	800b2ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	7b5b      	ldrb	r3, [r3, #13]
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f001 feaf 	bl	800b310 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00b      	beq.n	80095dc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f002 f9f3 	bl	800b9b8 <free>
    phost->pActiveClass->pData = 0U;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095d8:	2200      	movs	r2, #0
 80095da:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b084      	sub	sp, #16
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	3340      	adds	r3, #64	@ 0x40
 80095fc:	4619      	mov	r1, r3
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f8b1 	bl	8009766 <GetLineCoding>
 8009604:	4603      	mov	r3, r0
 8009606:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009608:	7afb      	ldrb	r3, [r7, #11]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d105      	bne.n	800961a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009614:	2102      	movs	r1, #2
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800961a:	7afb      	ldrb	r3, [r7, #11]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800962c:	2301      	movs	r3, #1
 800962e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800963a:	69db      	ldr	r3, [r3, #28]
 800963c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009644:	2b04      	cmp	r3, #4
 8009646:	d877      	bhi.n	8009738 <USBH_CDC_Process+0x114>
 8009648:	a201      	add	r2, pc, #4	@ (adr r2, 8009650 <USBH_CDC_Process+0x2c>)
 800964a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964e:	bf00      	nop
 8009650:	08009665 	.word	0x08009665
 8009654:	0800966b 	.word	0x0800966b
 8009658:	0800969b 	.word	0x0800969b
 800965c:	0800970f 	.word	0x0800970f
 8009660:	0800971d 	.word	0x0800971d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73fb      	strb	r3, [r7, #15]
      break;
 8009668:	e06d      	b.n	8009746 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f897 	bl	80097a4 <SetLineCoding>
 8009676:	4603      	mov	r3, r0
 8009678:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800967a:	7bbb      	ldrb	r3, [r7, #14]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d104      	bne.n	800968a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	2202      	movs	r2, #2
 8009684:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009688:	e058      	b.n	800973c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800968a:	7bbb      	ldrb	r3, [r7, #14]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d055      	beq.n	800973c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2204      	movs	r2, #4
 8009694:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009698:	e050      	b.n	800973c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	3340      	adds	r3, #64	@ 0x40
 800969e:	4619      	mov	r1, r3
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f860 	bl	8009766 <GetLineCoding>
 80096a6:	4603      	mov	r3, r0
 80096a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80096aa:	7bbb      	ldrb	r3, [r7, #14]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d126      	bne.n	80096fe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096c2:	791b      	ldrb	r3, [r3, #4]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d13b      	bne.n	8009740 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096d2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d133      	bne.n	8009740 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096e2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d12b      	bne.n	8009740 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096f0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d124      	bne.n	8009740 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f958 	bl	80099ac <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80096fc:	e020      	b.n	8009740 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d01d      	beq.n	8009740 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	2204      	movs	r2, #4
 8009708:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800970c:	e018      	b.n	8009740 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f867 	bl	80097e2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f8da 	bl	80098ce <CDC_ProcessReception>
      break;
 800971a:	e014      	b.n	8009746 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800971c:	2100      	movs	r1, #0
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f001 f81e 	bl	800a760 <USBH_ClrFeature>
 8009724:	4603      	mov	r3, r0
 8009726:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009736:	e005      	b.n	8009744 <USBH_CDC_Process+0x120>

    default:
      break;
 8009738:	bf00      	nop
 800973a:	e004      	b.n	8009746 <USBH_CDC_Process+0x122>
      break;
 800973c:	bf00      	nop
 800973e:	e002      	b.n	8009746 <USBH_CDC_Process+0x122>
      break;
 8009740:	bf00      	nop
 8009742:	e000      	b.n	8009746 <USBH_CDC_Process+0x122>
      break;
 8009744:	bf00      	nop

  }

  return status;
 8009746:	7bfb      	ldrb	r3, [r7, #15]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	22a1      	movs	r2, #161	@ 0xa1
 8009774:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2221      	movs	r2, #33	@ 0x21
 800977a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2207      	movs	r2, #7
 800978c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2207      	movs	r2, #7
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 fb17 	bl	800adc8 <USBH_CtlReq>
 800979a:	4603      	mov	r3, r0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2221      	movs	r2, #33	@ 0x21
 80097b2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2220      	movs	r2, #32
 80097b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2207      	movs	r2, #7
 80097ca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2207      	movs	r2, #7
 80097d0:	4619      	mov	r1, r3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f001 faf8 	bl	800adc8 <USBH_CtlReq>
 80097d8:	4603      	mov	r3, r0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b086      	sub	sp, #24
 80097e6:	af02      	add	r7, sp, #8
 80097e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097f0:	69db      	ldr	r3, [r3, #28]
 80097f2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80097f4:	2300      	movs	r3, #0
 80097f6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d002      	beq.n	8009808 <CDC_ProcessTransmission+0x26>
 8009802:	2b02      	cmp	r3, #2
 8009804:	d023      	beq.n	800984e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009806:	e05e      	b.n	80098c6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	8b12      	ldrh	r2, [r2, #24]
 8009810:	4293      	cmp	r3, r2
 8009812:	d90b      	bls.n	800982c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	69d9      	ldr	r1, [r3, #28]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	8b1a      	ldrh	r2, [r3, #24]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	7b5b      	ldrb	r3, [r3, #13]
 8009820:	2001      	movs	r0, #1
 8009822:	9000      	str	r0, [sp, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 fce0 	bl	800b1ea <USBH_BulkSendData>
 800982a:	e00b      	b.n	8009844 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009834:	b29a      	uxth	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	7b5b      	ldrb	r3, [r3, #13]
 800983a:	2001      	movs	r0, #1
 800983c:	9000      	str	r0, [sp, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f001 fcd3 	bl	800b1ea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2202      	movs	r2, #2
 8009848:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800984c:	e03b      	b.n	80098c6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	7b5b      	ldrb	r3, [r3, #13]
 8009852:	4619      	mov	r1, r3
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f001 fff7 	bl	800b848 <USBH_LL_GetURBState>
 800985a:	4603      	mov	r3, r0
 800985c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800985e:	7afb      	ldrb	r3, [r7, #11]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d128      	bne.n	80098b6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	8b12      	ldrh	r2, [r2, #24]
 800986c:	4293      	cmp	r3, r2
 800986e:	d90e      	bls.n	800988e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	8b12      	ldrh	r2, [r2, #24]
 8009878:	1a9a      	subs	r2, r3, r2
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	8b12      	ldrh	r2, [r2, #24]
 8009886:	441a      	add	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	61da      	str	r2, [r3, #28]
 800988c:	e002      	b.n	8009894 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009898:	2b00      	cmp	r3, #0
 800989a:	d004      	beq.n	80098a6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80098a4:	e00e      	b.n	80098c4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f868 	bl	8009984 <USBH_CDC_TransmitCallback>
      break;
 80098b4:	e006      	b.n	80098c4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80098b6:	7afb      	ldrb	r3, [r7, #11]
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d103      	bne.n	80098c4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80098c4:	bf00      	nop
  }
}
 80098c6:	bf00      	nop
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b086      	sub	sp, #24
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098dc:	69db      	ldr	r3, [r3, #28]
 80098de:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80098e0:	2300      	movs	r3, #0
 80098e2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d002      	beq.n	80098f4 <CDC_ProcessReception+0x26>
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	d00e      	beq.n	8009910 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80098f2:	e043      	b.n	800997c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	6a19      	ldr	r1, [r3, #32]
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	8b5a      	ldrh	r2, [r3, #26]
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	7b1b      	ldrb	r3, [r3, #12]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f001 fc97 	bl	800b234 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2204      	movs	r2, #4
 800990a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800990e:	e035      	b.n	800997c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	7b1b      	ldrb	r3, [r3, #12]
 8009914:	4619      	mov	r1, r3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f001 ff96 	bl	800b848 <USBH_LL_GetURBState>
 800991c:	4603      	mov	r3, r0
 800991e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009920:	7cfb      	ldrb	r3, [r7, #19]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d129      	bne.n	800997a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	7b1b      	ldrb	r3, [r3, #12]
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f001 fef9 	bl	800b724 <USBH_LL_GetLastXferSize>
 8009932:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	429a      	cmp	r2, r3
 800993c:	d016      	beq.n	800996c <CDC_ProcessReception+0x9e>
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	8b5b      	ldrh	r3, [r3, #26]
 8009942:	461a      	mov	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	4293      	cmp	r3, r2
 8009948:	d110      	bne.n	800996c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	1ad2      	subs	r2, r2, r3
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	6a1a      	ldr	r2, [r3, #32]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	441a      	add	r2, r3
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	2203      	movs	r2, #3
 8009966:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800996a:	e006      	b.n	800997a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f80f 	bl	8009998 <USBH_CDC_ReceiveCallback>
      break;
 800997a:	bf00      	nop
  }
}
 800997c:	bf00      	nop
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	4613      	mov	r3, r2
 80099cc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d101      	bne.n	80099d8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80099d4:	2302      	movs	r3, #2
 80099d6:	e029      	b.n	8009a2c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	79fa      	ldrb	r2, [r7, #7]
 80099dc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 f81f 	bl	8009a34 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d003      	beq.n	8009a24 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f001 fdc9 	bl	800b5bc <USBH_LL_Init>

  return USBH_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	e009      	b.n	8009a56 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	33e0      	adds	r3, #224	@ 0xe0
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3301      	adds	r3, #1
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b0f      	cmp	r3, #15
 8009a5a:	d9f2      	bls.n	8009a42 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	60fb      	str	r3, [r7, #12]
 8009a60:	e009      	b.n	8009a76 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3301      	adds	r3, #1
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a7c:	d3f1      	bcc.n	8009a62 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2240      	movs	r2, #64	@ 0x40
 8009aa2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	331c      	adds	r3, #28
 8009ace:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f002 fd92 	bl	800c5fe <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009ae0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f002 fd89 	bl	800c5fe <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009af2:	2212      	movs	r2, #18
 8009af4:	2100      	movs	r1, #0
 8009af6:	4618      	mov	r0, r3
 8009af8:	f002 fd81 	bl	800c5fe <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009b02:	223e      	movs	r2, #62	@ 0x3e
 8009b04:	2100      	movs	r1, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f002 fd79 	bl	800c5fe <memset>

  return USBH_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b085      	sub	sp, #20
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d016      	beq.n	8009b58 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10e      	bne.n	8009b52 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009b3a:	1c59      	adds	r1, r3, #1
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	33de      	adds	r3, #222	@ 0xde
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	73fb      	strb	r3, [r7, #15]
 8009b50:	e004      	b.n	8009b5c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009b52:	2302      	movs	r3, #2
 8009b54:	73fb      	strb	r3, [r7, #15]
 8009b56:	e001      	b.n	8009b5c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009b58:	2302      	movs	r3, #2
 8009b5a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b085      	sub	sp, #20
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	460b      	mov	r3, r1
 8009b74:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009b80:	78fa      	ldrb	r2, [r7, #3]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d204      	bcs.n	8009b90 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	78fa      	ldrb	r2, [r7, #3]
 8009b8a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009b8e:	e001      	b.n	8009b94 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009b90:	2302      	movs	r3, #2
 8009b92:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b087      	sub	sp, #28
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	4608      	mov	r0, r1
 8009bac:	4611      	mov	r1, r2
 8009bae:	461a      	mov	r2, r3
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	70fb      	strb	r3, [r7, #3]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70bb      	strb	r3, [r7, #2]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009bca:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009bcc:	e025      	b.n	8009c1a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
 8009bd0:	221a      	movs	r2, #26
 8009bd2:	fb02 f303 	mul.w	r3, r2, r3
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	4413      	add	r3, r2
 8009bdc:	3302      	adds	r3, #2
 8009bde:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	795b      	ldrb	r3, [r3, #5]
 8009be4:	78fa      	ldrb	r2, [r7, #3]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d002      	beq.n	8009bf0 <USBH_FindInterface+0x4e>
 8009bea:	78fb      	ldrb	r3, [r7, #3]
 8009bec:	2bff      	cmp	r3, #255	@ 0xff
 8009bee:	d111      	bne.n	8009c14 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009bf4:	78ba      	ldrb	r2, [r7, #2]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d002      	beq.n	8009c00 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009bfa:	78bb      	ldrb	r3, [r7, #2]
 8009bfc:	2bff      	cmp	r3, #255	@ 0xff
 8009bfe:	d109      	bne.n	8009c14 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009c04:	787a      	ldrb	r2, [r7, #1]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d002      	beq.n	8009c10 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009c0a:	787b      	ldrb	r3, [r7, #1]
 8009c0c:	2bff      	cmp	r3, #255	@ 0xff
 8009c0e:	d101      	bne.n	8009c14 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	e006      	b.n	8009c22 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009c14:	7dfb      	ldrb	r3, [r7, #23]
 8009c16:	3301      	adds	r3, #1
 8009c18:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d9d6      	bls.n	8009bce <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009c20:	23ff      	movs	r3, #255	@ 0xff
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	371c      	adds	r7, #28
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b082      	sub	sp, #8
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f001 fcfc 	bl	800b634 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f001 fe15 	bl	800b86e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
	...

08009c50 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af04      	add	r7, sp, #16
 8009c56:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009c58:	2302      	movs	r3, #2
 8009c5a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d102      	bne.n	8009c72 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2203      	movs	r2, #3
 8009c70:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b0b      	cmp	r3, #11
 8009c7a:	f200 81bc 	bhi.w	8009ff6 <USBH_Process+0x3a6>
 8009c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c84 <USBH_Process+0x34>)
 8009c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c84:	08009cb5 	.word	0x08009cb5
 8009c88:	08009ce7 	.word	0x08009ce7
 8009c8c:	08009d51 	.word	0x08009d51
 8009c90:	08009f91 	.word	0x08009f91
 8009c94:	08009ff7 	.word	0x08009ff7
 8009c98:	08009df1 	.word	0x08009df1
 8009c9c:	08009f37 	.word	0x08009f37
 8009ca0:	08009e27 	.word	0x08009e27
 8009ca4:	08009e47 	.word	0x08009e47
 8009ca8:	08009e65 	.word	0x08009e65
 8009cac:	08009ea9 	.word	0x08009ea9
 8009cb0:	08009f79 	.word	0x08009f79
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 819c 	beq.w	8009ffa <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009cc8:	20c8      	movs	r0, #200	@ 0xc8
 8009cca:	f001 fe1a 	bl	800b902 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 fd0d 	bl	800b6ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009ce4:	e189      	b.n	8009ffa <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d107      	bne.n	8009d02 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009d00:	e18a      	b.n	800a018 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009d08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d0c:	d914      	bls.n	8009d38 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009d14:	3301      	adds	r3, #1
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009d24:	2b03      	cmp	r3, #3
 8009d26:	d903      	bls.n	8009d30 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	220d      	movs	r2, #13
 8009d2c:	701a      	strb	r2, [r3, #0]
      break;
 8009d2e:	e173      	b.n	800a018 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	701a      	strb	r2, [r3, #0]
      break;
 8009d36:	e16f      	b.n	800a018 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009d3e:	f103 020a 	add.w	r2, r3, #10
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009d48:	200a      	movs	r0, #10
 8009d4a:	f001 fdda 	bl	800b902 <USBH_Delay>
      break;
 8009d4e:	e163      	b.n	800a018 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d005      	beq.n	8009d66 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d60:	2104      	movs	r1, #4
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009d66:	2064      	movs	r0, #100	@ 0x64
 8009d68:	f001 fdcb 	bl	800b902 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 fc97 	bl	800b6a0 <USBH_LL_GetSpeed>
 8009d72:	4603      	mov	r3, r0
 8009d74:	461a      	mov	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2205      	movs	r2, #5
 8009d80:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009d82:	2100      	movs	r1, #0
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f001 faa2 	bl	800b2ce <USBH_AllocPipe>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009d92:	2180      	movs	r1, #128	@ 0x80
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f001 fa9a 	bl	800b2ce <USBH_AllocPipe>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	7919      	ldrb	r1, [r3, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009db6:	9202      	str	r2, [sp, #8]
 8009db8:	2200      	movs	r2, #0
 8009dba:	9201      	str	r2, [sp, #4]
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2280      	movs	r2, #128	@ 0x80
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f001 fa54 	bl	800b270 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	7959      	ldrb	r1, [r3, #5]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009ddc:	9202      	str	r2, [sp, #8]
 8009dde:	2200      	movs	r2, #0
 8009de0:	9201      	str	r2, [sp, #4]
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	4603      	mov	r3, r0
 8009de6:	2200      	movs	r2, #0
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 fa41 	bl	800b270 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009dee:	e113      	b.n	800a018 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f917 	bl	800a024 <USBH_HandleEnum>
 8009df6:	4603      	mov	r3, r0
 8009df8:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009dfa:	7bbb      	ldrb	r3, [r7, #14]
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f040 80fd 	bne.w	8009ffe <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d103      	bne.n	8009e1e <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2208      	movs	r2, #8
 8009e1a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009e1c:	e0ef      	b.n	8009ffe <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2207      	movs	r2, #7
 8009e22:	701a      	strb	r2, [r3, #0]
      break;
 8009e24:	e0eb      	b.n	8009ffe <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f000 80e8 	beq.w	800a002 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e38:	2101      	movs	r1, #1
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2208      	movs	r2, #8
 8009e42:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8009e44:	e0dd      	b.n	800a002 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fc3f 	bl	800a6d2 <USBH_SetCfg>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f040 80d5 	bne.w	800a006 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2209      	movs	r2, #9
 8009e60:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009e62:	e0d0      	b.n	800a006 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009e6a:	f003 0320 	and.w	r3, r3, #32
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d016      	beq.n	8009ea0 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009e72:	2101      	movs	r1, #1
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fc4f 	bl	800a718 <USBH_SetFeature>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009e7e:	7bbb      	ldrb	r3, [r7, #14]
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d103      	bne.n	8009e8e <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	220a      	movs	r2, #10
 8009e8a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009e8c:	e0bd      	b.n	800a00a <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	f040 80b9 	bne.w	800a00a <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	220a      	movs	r2, #10
 8009e9c:	701a      	strb	r2, [r3, #0]
      break;
 8009e9e:	e0b4      	b.n	800a00a <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	220a      	movs	r2, #10
 8009ea4:	701a      	strb	r2, [r3, #0]
      break;
 8009ea6:	e0b0      	b.n	800a00a <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 80ad 	beq.w	800a00e <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73fb      	strb	r3, [r7, #15]
 8009ec0:	e016      	b.n	8009ef0 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009ec2:	7bfa      	ldrb	r2, [r7, #15]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	32de      	adds	r2, #222	@ 0xde
 8009ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ecc:	791a      	ldrb	r2, [r3, #4]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d108      	bne.n	8009eea <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009ed8:	7bfa      	ldrb	r2, [r7, #15]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	32de      	adds	r2, #222	@ 0xde
 8009ede:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009ee8:	e005      	b.n	8009ef6 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
 8009eec:	3301      	adds	r3, #1
 8009eee:	73fb      	strb	r3, [r7, #15]
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0e5      	beq.n	8009ec2 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d016      	beq.n	8009f2e <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	4798      	blx	r3
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d109      	bne.n	8009f26 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2206      	movs	r2, #6
 8009f16:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f1e:	2103      	movs	r1, #3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009f24:	e073      	b.n	800a00e <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	220d      	movs	r2, #13
 8009f2a:	701a      	strb	r2, [r3, #0]
      break;
 8009f2c:	e06f      	b.n	800a00e <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	220d      	movs	r2, #13
 8009f32:	701a      	strb	r2, [r3, #0]
      break;
 8009f34:	e06b      	b.n	800a00e <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d017      	beq.n	8009f70 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	4798      	blx	r3
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009f50:	7bbb      	ldrb	r3, [r7, #14]
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d103      	bne.n	8009f60 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	220b      	movs	r2, #11
 8009f5c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009f5e:	e058      	b.n	800a012 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8009f60:	7bbb      	ldrb	r3, [r7, #14]
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d154      	bne.n	800a012 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	220d      	movs	r2, #13
 8009f6c:	701a      	strb	r2, [r3, #0]
      break;
 8009f6e:	e050      	b.n	800a012 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	220d      	movs	r2, #13
 8009f74:	701a      	strb	r2, [r3, #0]
      break;
 8009f76:	e04c      	b.n	800a012 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d049      	beq.n	800a016 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f88:	695b      	ldr	r3, [r3, #20]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	4798      	blx	r3
      }
      break;
 8009f8e:	e042      	b.n	800a016 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7ff fd4b 	bl	8009a34 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d009      	beq.n	8009fbc <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d005      	beq.n	8009fd2 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009fcc:	2105      	movs	r1, #5
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d107      	bne.n	8009fee <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7ff fe21 	bl	8009c2e <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009fec:	e014      	b.n	800a018 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f001 fb20 	bl	800b634 <USBH_LL_Start>
      break;
 8009ff4:	e010      	b.n	800a018 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009ff6:	bf00      	nop
 8009ff8:	e00e      	b.n	800a018 <USBH_Process+0x3c8>
      break;
 8009ffa:	bf00      	nop
 8009ffc:	e00c      	b.n	800a018 <USBH_Process+0x3c8>
      break;
 8009ffe:	bf00      	nop
 800a000:	e00a      	b.n	800a018 <USBH_Process+0x3c8>
    break;
 800a002:	bf00      	nop
 800a004:	e008      	b.n	800a018 <USBH_Process+0x3c8>
      break;
 800a006:	bf00      	nop
 800a008:	e006      	b.n	800a018 <USBH_Process+0x3c8>
      break;
 800a00a:	bf00      	nop
 800a00c:	e004      	b.n	800a018 <USBH_Process+0x3c8>
      break;
 800a00e:	bf00      	nop
 800a010:	e002      	b.n	800a018 <USBH_Process+0x3c8>
      break;
 800a012:	bf00      	nop
 800a014:	e000      	b.n	800a018 <USBH_Process+0x3c8>
      break;
 800a016:	bf00      	nop
  }
  return USBH_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop

0800a024 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b088      	sub	sp, #32
 800a028:	af04      	add	r7, sp, #16
 800a02a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a02c:	2301      	movs	r3, #1
 800a02e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a030:	2301      	movs	r3, #1
 800a032:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	785b      	ldrb	r3, [r3, #1]
 800a038:	2b07      	cmp	r3, #7
 800a03a:	f200 81bd 	bhi.w	800a3b8 <USBH_HandleEnum+0x394>
 800a03e:	a201      	add	r2, pc, #4	@ (adr r2, 800a044 <USBH_HandleEnum+0x20>)
 800a040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a044:	0800a065 	.word	0x0800a065
 800a048:	0800a11f 	.word	0x0800a11f
 800a04c:	0800a189 	.word	0x0800a189
 800a050:	0800a213 	.word	0x0800a213
 800a054:	0800a27d 	.word	0x0800a27d
 800a058:	0800a2ed 	.word	0x0800a2ed
 800a05c:	0800a333 	.word	0x0800a333
 800a060:	0800a379 	.word	0x0800a379
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a064:	2108      	movs	r1, #8
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fa50 	bl	800a50c <USBH_Get_DevDesc>
 800a06c:	4603      	mov	r3, r0
 800a06e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a070:	7bbb      	ldrb	r3, [r7, #14]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d12e      	bne.n	800a0d4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	7919      	ldrb	r1, [r3, #4]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a09a:	9202      	str	r2, [sp, #8]
 800a09c:	2200      	movs	r2, #0
 800a09e:	9201      	str	r2, [sp, #4]
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2280      	movs	r2, #128	@ 0x80
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f001 f8e2 	bl	800b270 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	7959      	ldrb	r1, [r3, #5]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a0c0:	9202      	str	r2, [sp, #8]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	9201      	str	r2, [sp, #4]
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f001 f8cf 	bl	800b270 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a0d2:	e173      	b.n	800a3bc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0d4:	7bbb      	ldrb	r3, [r7, #14]
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	f040 8170 	bne.w	800a3bc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0f2:	2b03      	cmp	r3, #3
 800a0f4:	d903      	bls.n	800a0fe <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	220d      	movs	r2, #13
 800a0fa:	701a      	strb	r2, [r3, #0]
      break;
 800a0fc:	e15e      	b.n	800a3bc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	795b      	ldrb	r3, [r3, #5]
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f001 f903 	bl	800b310 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	791b      	ldrb	r3, [r3, #4]
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f001 f8fd 	bl	800b310 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	701a      	strb	r2, [r3, #0]
      break;
 800a11c:	e14e      	b.n	800a3bc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a11e:	2112      	movs	r1, #18
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f9f3 	bl	800a50c <USBH_Get_DevDesc>
 800a126:	4603      	mov	r3, r0
 800a128:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a12a:	7bbb      	ldrb	r3, [r7, #14]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d103      	bne.n	800a138 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2202      	movs	r2, #2
 800a134:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a136:	e143      	b.n	800a3c0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a138:	7bbb      	ldrb	r3, [r7, #14]
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	f040 8140 	bne.w	800a3c0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a146:	3301      	adds	r3, #1
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a156:	2b03      	cmp	r3, #3
 800a158:	d903      	bls.n	800a162 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	220d      	movs	r2, #13
 800a15e:	701a      	strb	r2, [r3, #0]
      break;
 800a160:	e12e      	b.n	800a3c0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	795b      	ldrb	r3, [r3, #5]
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f001 f8d1 	bl	800b310 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	791b      	ldrb	r3, [r3, #4]
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 f8cb 	bl	800b310 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	701a      	strb	r2, [r3, #0]
      break;
 800a186:	e11b      	b.n	800a3c0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a188:	2101      	movs	r1, #1
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fa7d 	bl	800a68a <USBH_SetAddress>
 800a190:	4603      	mov	r3, r0
 800a192:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a194:	7bbb      	ldrb	r3, [r7, #14]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d130      	bne.n	800a1fc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a19a:	2002      	movs	r0, #2
 800a19c:	f001 fbb1 	bl	800b902 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2203      	movs	r2, #3
 800a1ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	7919      	ldrb	r1, [r3, #4]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a1c2:	9202      	str	r2, [sp, #8]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	9201      	str	r2, [sp, #4]
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2280      	movs	r2, #128	@ 0x80
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f001 f84e 	bl	800b270 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	7959      	ldrb	r1, [r3, #5]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1e8:	9202      	str	r2, [sp, #8]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	9201      	str	r2, [sp, #4]
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f001 f83b 	bl	800b270 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a1fa:	e0e3      	b.n	800a3c4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1fc:	7bbb      	ldrb	r3, [r7, #14]
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	f040 80e0 	bne.w	800a3c4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	220d      	movs	r2, #13
 800a208:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	705a      	strb	r2, [r3, #1]
      break;
 800a210:	e0d8      	b.n	800a3c4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a212:	2109      	movs	r1, #9
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f9a5 	bl	800a564 <USBH_Get_CfgDesc>
 800a21a:	4603      	mov	r3, r0
 800a21c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a21e:	7bbb      	ldrb	r3, [r7, #14]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d103      	bne.n	800a22c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2204      	movs	r2, #4
 800a228:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a22a:	e0cd      	b.n	800a3c8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
 800a22e:	2b03      	cmp	r3, #3
 800a230:	f040 80ca 	bne.w	800a3c8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a23a:	3301      	adds	r3, #1
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a24a:	2b03      	cmp	r3, #3
 800a24c:	d903      	bls.n	800a256 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	220d      	movs	r2, #13
 800a252:	701a      	strb	r2, [r3, #0]
      break;
 800a254:	e0b8      	b.n	800a3c8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	795b      	ldrb	r3, [r3, #5]
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f001 f857 	bl	800b310 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	791b      	ldrb	r3, [r3, #4]
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f001 f851 	bl	800b310 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	701a      	strb	r2, [r3, #0]
      break;
 800a27a:	e0a5      	b.n	800a3c8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a282:	4619      	mov	r1, r3
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f96d 	bl	800a564 <USBH_Get_CfgDesc>
 800a28a:	4603      	mov	r3, r0
 800a28c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a28e:	7bbb      	ldrb	r3, [r7, #14]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d103      	bne.n	800a29c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2205      	movs	r2, #5
 800a298:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a29a:	e097      	b.n	800a3cc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a29c:	7bbb      	ldrb	r3, [r7, #14]
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	f040 8094 	bne.w	800a3cc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d903      	bls.n	800a2c6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	220d      	movs	r2, #13
 800a2c2:	701a      	strb	r2, [r3, #0]
      break;
 800a2c4:	e082      	b.n	800a3cc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	795b      	ldrb	r3, [r3, #5]
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f001 f81f 	bl	800b310 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	791b      	ldrb	r3, [r3, #4]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f001 f819 	bl	800b310 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	701a      	strb	r2, [r3, #0]
      break;
 800a2ea:	e06f      	b.n	800a3cc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d019      	beq.n	800a32a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a302:	23ff      	movs	r3, #255	@ 0xff
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f957 	bl	800a5b8 <USBH_Get_StringDesc>
 800a30a:	4603      	mov	r3, r0
 800a30c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a30e:	7bbb      	ldrb	r3, [r7, #14]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d103      	bne.n	800a31c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2206      	movs	r2, #6
 800a318:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a31a:	e059      	b.n	800a3d0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
 800a31e:	2b03      	cmp	r3, #3
 800a320:	d156      	bne.n	800a3d0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2206      	movs	r2, #6
 800a326:	705a      	strb	r2, [r3, #1]
      break;
 800a328:	e052      	b.n	800a3d0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2206      	movs	r2, #6
 800a32e:	705a      	strb	r2, [r3, #1]
      break;
 800a330:	e04e      	b.n	800a3d0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d019      	beq.n	800a370 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a348:	23ff      	movs	r3, #255	@ 0xff
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f934 	bl	800a5b8 <USBH_Get_StringDesc>
 800a350:	4603      	mov	r3, r0
 800a352:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a354:	7bbb      	ldrb	r3, [r7, #14]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d103      	bne.n	800a362 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2207      	movs	r2, #7
 800a35e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a360:	e038      	b.n	800a3d4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a362:	7bbb      	ldrb	r3, [r7, #14]
 800a364:	2b03      	cmp	r3, #3
 800a366:	d135      	bne.n	800a3d4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2207      	movs	r2, #7
 800a36c:	705a      	strb	r2, [r3, #1]
      break;
 800a36e:	e031      	b.n	800a3d4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2207      	movs	r2, #7
 800a374:	705a      	strb	r2, [r3, #1]
      break;
 800a376:	e02d      	b.n	800a3d4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d017      	beq.n	800a3b2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a38e:	23ff      	movs	r3, #255	@ 0xff
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f911 	bl	800a5b8 <USBH_Get_StringDesc>
 800a396:	4603      	mov	r3, r0
 800a398:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a39a:	7bbb      	ldrb	r3, [r7, #14]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d102      	bne.n	800a3a6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a3a4:	e018      	b.n	800a3d8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3a6:	7bbb      	ldrb	r3, [r7, #14]
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d115      	bne.n	800a3d8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b0:	e012      	b.n	800a3d8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b6:	e00f      	b.n	800a3d8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a3b8:	bf00      	nop
 800a3ba:	e00e      	b.n	800a3da <USBH_HandleEnum+0x3b6>
      break;
 800a3bc:	bf00      	nop
 800a3be:	e00c      	b.n	800a3da <USBH_HandleEnum+0x3b6>
      break;
 800a3c0:	bf00      	nop
 800a3c2:	e00a      	b.n	800a3da <USBH_HandleEnum+0x3b6>
      break;
 800a3c4:	bf00      	nop
 800a3c6:	e008      	b.n	800a3da <USBH_HandleEnum+0x3b6>
      break;
 800a3c8:	bf00      	nop
 800a3ca:	e006      	b.n	800a3da <USBH_HandleEnum+0x3b6>
      break;
 800a3cc:	bf00      	nop
 800a3ce:	e004      	b.n	800a3da <USBH_HandleEnum+0x3b6>
      break;
 800a3d0:	bf00      	nop
 800a3d2:	e002      	b.n	800a3da <USBH_HandleEnum+0x3b6>
      break;
 800a3d4:	bf00      	nop
 800a3d6:	e000      	b.n	800a3da <USBH_HandleEnum+0x3b6>
      break;
 800a3d8:	bf00      	nop
  }
  return Status;
 800a3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a3f6:	bf00      	nop
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b082      	sub	sp, #8
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 f804 	bl	800a426 <USBH_HandleSof>
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b082      	sub	sp, #8
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b0b      	cmp	r3, #11
 800a436:	d10a      	bne.n	800a44e <USBH_HandleSof+0x28>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d005      	beq.n	800a44e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	4798      	blx	r3
  }
}
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a456:	b480      	push	{r7}
 800a458:	b083      	sub	sp, #12
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800a466:	bf00      	nop
}
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a472:	b480      	push	{r7}
 800a474:	b083      	sub	sp, #12
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2201      	movs	r2, #1
 800a486:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800a48a:	bf00      	nop
}
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f001 f8c0 	bl	800b66a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	791b      	ldrb	r3, [r3, #4]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 ff0d 	bl	800b310 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	795b      	ldrb	r3, [r3, #5]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 ff07 	bl	800b310 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af02      	add	r7, sp, #8
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a518:	887b      	ldrh	r3, [r7, #2]
 800a51a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a51e:	d901      	bls.n	800a524 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a520:	2303      	movs	r3, #3
 800a522:	e01b      	b.n	800a55c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a52a:	887b      	ldrh	r3, [r7, #2]
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	4613      	mov	r3, r2
 800a530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a534:	2100      	movs	r1, #0
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f872 	bl	800a620 <USBH_GetDescriptor>
 800a53c:	4603      	mov	r3, r0
 800a53e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d109      	bne.n	800a55a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a54c:	887a      	ldrh	r2, [r7, #2]
 800a54e:	4619      	mov	r1, r3
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f929 	bl	800a7a8 <USBH_ParseDevDesc>
 800a556:	4603      	mov	r3, r0
 800a558:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af02      	add	r7, sp, #8
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	460b      	mov	r3, r1
 800a56e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	331c      	adds	r3, #28
 800a574:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a576:	887b      	ldrh	r3, [r7, #2]
 800a578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a57c:	d901      	bls.n	800a582 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a57e:	2303      	movs	r3, #3
 800a580:	e016      	b.n	800a5b0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a582:	887b      	ldrh	r3, [r7, #2]
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a58c:	2100      	movs	r1, #0
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f846 	bl	800a620 <USBH_GetDescriptor>
 800a594:	4603      	mov	r3, r0
 800a596:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a598:	7bfb      	ldrb	r3, [r7, #15]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d107      	bne.n	800a5ae <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a59e:	887b      	ldrh	r3, [r7, #2]
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	68b9      	ldr	r1, [r7, #8]
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f9af 	bl	800a908 <USBH_ParseCfgDesc>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b088      	sub	sp, #32
 800a5bc:	af02      	add	r7, sp, #8
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	607a      	str	r2, [r7, #4]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	72fb      	strb	r3, [r7, #11]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a5cc:	893b      	ldrh	r3, [r7, #8]
 800a5ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5d2:	d802      	bhi.n	800a5da <USBH_Get_StringDesc+0x22>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e01c      	b.n	800a618 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a5de:	7afb      	ldrb	r3, [r7, #11]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a5e6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a5ee:	893b      	ldrh	r3, [r7, #8]
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f000 f812 	bl	800a620 <USBH_GetDescriptor>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a600:	7dfb      	ldrb	r3, [r7, #23]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d107      	bne.n	800a616 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a60c:	893a      	ldrh	r2, [r7, #8]
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	4618      	mov	r0, r3
 800a612:	f000 fb8c 	bl	800ad2e <USBH_ParseStringDesc>
  }

  return status;
 800a616:	7dfb      	ldrb	r3, [r7, #23]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	607b      	str	r3, [r7, #4]
 800a62a:	460b      	mov	r3, r1
 800a62c:	72fb      	strb	r3, [r7, #11]
 800a62e:	4613      	mov	r3, r2
 800a630:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	789b      	ldrb	r3, [r3, #2]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d11c      	bne.n	800a674 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a63a:	7afb      	ldrb	r3, [r7, #11]
 800a63c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a640:	b2da      	uxtb	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2206      	movs	r2, #6
 800a64a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	893a      	ldrh	r2, [r7, #8]
 800a650:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a652:	893b      	ldrh	r3, [r7, #8]
 800a654:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a65c:	d104      	bne.n	800a668 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f240 4209 	movw	r2, #1033	@ 0x409
 800a664:	829a      	strh	r2, [r3, #20]
 800a666:	e002      	b.n	800a66e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	8b3a      	ldrh	r2, [r7, #24]
 800a672:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a674:	8b3b      	ldrh	r3, [r7, #24]
 800a676:	461a      	mov	r2, r3
 800a678:	6879      	ldr	r1, [r7, #4]
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f000 fba4 	bl	800adc8 <USBH_CtlReq>
 800a680:	4603      	mov	r3, r0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b082      	sub	sp, #8
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	460b      	mov	r3, r1
 800a694:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	789b      	ldrb	r3, [r3, #2]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d10f      	bne.n	800a6be <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2205      	movs	r2, #5
 800a6a8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a6aa:	78fb      	ldrb	r3, [r7, #3]
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a6be:	2200      	movs	r2, #0
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fb80 	bl	800adc8 <USBH_CtlReq>
 800a6c8:	4603      	mov	r3, r0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	460b      	mov	r3, r1
 800a6dc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	789b      	ldrb	r3, [r3, #2]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d10e      	bne.n	800a704 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2209      	movs	r2, #9
 800a6f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	887a      	ldrh	r2, [r7, #2]
 800a6f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a704:	2200      	movs	r2, #0
 800a706:	2100      	movs	r1, #0
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fb5d 	bl	800adc8 <USBH_CtlReq>
 800a70e:	4603      	mov	r3, r0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	789b      	ldrb	r3, [r3, #2]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d10f      	bne.n	800a74c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2203      	movs	r2, #3
 800a736:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a738:	78fb      	ldrb	r3, [r7, #3]
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a74c:	2200      	movs	r2, #0
 800a74e:	2100      	movs	r1, #0
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fb39 	bl	800adc8 <USBH_CtlReq>
 800a756:	4603      	mov	r3, r0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	460b      	mov	r3, r1
 800a76a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	789b      	ldrb	r3, [r3, #2]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d10f      	bne.n	800a794 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2202      	movs	r2, #2
 800a778:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a786:	78fb      	ldrb	r3, [r7, #3]
 800a788:	b29a      	uxth	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a794:	2200      	movs	r2, #0
 800a796:	2100      	movs	r1, #0
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fb15 	bl	800adc8 <USBH_CtlReq>
 800a79e:	4603      	mov	r3, r0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a7bc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	e094      	b.n	800a8f6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	781a      	ldrb	r2, [r3, #0]
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	785a      	ldrb	r2, [r3, #1]
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	3302      	adds	r3, #2
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	3303      	adds	r3, #3
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	021b      	lsls	r3, r3, #8
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	791a      	ldrb	r2, [r3, #4]
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	795a      	ldrb	r2, [r3, #5]
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	799a      	ldrb	r2, [r3, #6]
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	79da      	ldrb	r2, [r3, #7]
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a826:	2b01      	cmp	r3, #1
 800a828:	d11b      	bne.n	800a862 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	79db      	ldrb	r3, [r3, #7]
 800a82e:	2b20      	cmp	r3, #32
 800a830:	dc0f      	bgt.n	800a852 <USBH_ParseDevDesc+0xaa>
 800a832:	2b08      	cmp	r3, #8
 800a834:	db0f      	blt.n	800a856 <USBH_ParseDevDesc+0xae>
 800a836:	3b08      	subs	r3, #8
 800a838:	4a32      	ldr	r2, [pc, #200]	@ (800a904 <USBH_ParseDevDesc+0x15c>)
 800a83a:	fa22 f303 	lsr.w	r3, r2, r3
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	2b00      	cmp	r3, #0
 800a844:	bf14      	ite	ne
 800a846:	2301      	movne	r3, #1
 800a848:	2300      	moveq	r3, #0
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d106      	bne.n	800a85e <USBH_ParseDevDesc+0xb6>
 800a850:	e001      	b.n	800a856 <USBH_ParseDevDesc+0xae>
 800a852:	2b40      	cmp	r3, #64	@ 0x40
 800a854:	d003      	beq.n	800a85e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	2208      	movs	r2, #8
 800a85a:	71da      	strb	r2, [r3, #7]
        break;
 800a85c:	e000      	b.n	800a860 <USBH_ParseDevDesc+0xb8>
        break;
 800a85e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a860:	e00e      	b.n	800a880 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d107      	bne.n	800a87c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	79db      	ldrb	r3, [r3, #7]
 800a870:	2b08      	cmp	r3, #8
 800a872:	d005      	beq.n	800a880 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	2208      	movs	r2, #8
 800a878:	71da      	strb	r2, [r3, #7]
 800a87a:	e001      	b.n	800a880 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a87c:	2303      	movs	r3, #3
 800a87e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a880:	88fb      	ldrh	r3, [r7, #6]
 800a882:	2b08      	cmp	r3, #8
 800a884:	d936      	bls.n	800a8f4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	3308      	adds	r3, #8
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	461a      	mov	r2, r3
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	3309      	adds	r3, #9
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	021b      	lsls	r3, r3, #8
 800a896:	b29b      	uxth	r3, r3
 800a898:	4313      	orrs	r3, r2
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	330a      	adds	r3, #10
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	330b      	adds	r3, #11
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	021b      	lsls	r3, r3, #8
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	330c      	adds	r3, #12
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	330d      	adds	r3, #13
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	021b      	lsls	r3, r3, #8
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	7b9a      	ldrb	r2, [r3, #14]
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	7bda      	ldrb	r2, [r3, #15]
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	7c1a      	ldrb	r2, [r3, #16]
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	7c5a      	ldrb	r2, [r3, #17]
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a8f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	371c      	adds	r7, #28
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	01000101 	.word	0x01000101

0800a908 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08c      	sub	sp, #48	@ 0x30
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	4613      	mov	r3, r2
 800a914:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a91c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a91e:	2300      	movs	r3, #0
 800a920:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a92a:	2300      	movs	r3, #0
 800a92c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a936:	2302      	movs	r3, #2
 800a938:	e0de      	b.n	800aaf8 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	2b09      	cmp	r3, #9
 800a944:	d002      	beq.n	800a94c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a948:	2209      	movs	r2, #9
 800a94a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	781a      	ldrb	r2, [r3, #0]
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	785a      	ldrb	r2, [r3, #1]
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	3302      	adds	r3, #2
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	3303      	adds	r3, #3
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	021b      	lsls	r3, r3, #8
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	4313      	orrs	r3, r2
 800a970:	b29b      	uxth	r3, r3
 800a972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a976:	bf28      	it	cs
 800a978:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	6a3b      	ldr	r3, [r7, #32]
 800a980:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	791a      	ldrb	r2, [r3, #4]
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	795a      	ldrb	r2, [r3, #5]
 800a98e:	6a3b      	ldr	r3, [r7, #32]
 800a990:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	799a      	ldrb	r2, [r3, #6]
 800a996:	6a3b      	ldr	r3, [r7, #32]
 800a998:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	79da      	ldrb	r2, [r3, #7]
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	7a1a      	ldrb	r2, [r3, #8]
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a9aa:	88fb      	ldrh	r3, [r7, #6]
 800a9ac:	2b09      	cmp	r3, #9
 800a9ae:	f240 80a1 	bls.w	800aaf4 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800a9b2:	2309      	movs	r3, #9
 800a9b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a9ba:	e085      	b.n	800aac8 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a9bc:	f107 0316 	add.w	r3, r7, #22
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9c4:	f000 f9e6 	bl	800ad94 <USBH_GetNextDesc>
 800a9c8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9cc:	785b      	ldrb	r3, [r3, #1]
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	d17a      	bne.n	800aac8 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	2b09      	cmp	r3, #9
 800a9d8:	d002      	beq.n	800a9e0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9dc:	2209      	movs	r2, #9
 800a9de:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9e4:	221a      	movs	r2, #26
 800a9e6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ea:	3308      	adds	r3, #8
 800a9ec:	6a3a      	ldr	r2, [r7, #32]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	3302      	adds	r3, #2
 800a9f2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a9f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9f6:	69f8      	ldr	r0, [r7, #28]
 800a9f8:	f000 f882 	bl	800ab00 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800aa02:	2300      	movs	r3, #0
 800aa04:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aa06:	e043      	b.n	800aa90 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aa08:	f107 0316 	add.w	r3, r7, #22
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa10:	f000 f9c0 	bl	800ad94 <USBH_GetNextDesc>
 800aa14:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aa16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa18:	785b      	ldrb	r3, [r3, #1]
 800aa1a:	2b05      	cmp	r3, #5
 800aa1c:	d138      	bne.n	800aa90 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	795b      	ldrb	r3, [r3, #5]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d113      	bne.n	800aa4e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d003      	beq.n	800aa36 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	799b      	ldrb	r3, [r3, #6]
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d10b      	bne.n	800aa4e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	79db      	ldrb	r3, [r3, #7]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10b      	bne.n	800aa56 <USBH_ParseCfgDesc+0x14e>
 800aa3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	2b09      	cmp	r3, #9
 800aa44:	d007      	beq.n	800aa56 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800aa46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa48:	2209      	movs	r2, #9
 800aa4a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aa4c:	e003      	b.n	800aa56 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800aa4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa50:	2207      	movs	r2, #7
 800aa52:	701a      	strb	r2, [r3, #0]
 800aa54:	e000      	b.n	800aa58 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aa56:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800aa58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa5c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aa60:	3201      	adds	r2, #1
 800aa62:	00d2      	lsls	r2, r2, #3
 800aa64:	211a      	movs	r1, #26
 800aa66:	fb01 f303 	mul.w	r3, r1, r3
 800aa6a:	4413      	add	r3, r2
 800aa6c:	3308      	adds	r3, #8
 800aa6e:	6a3a      	ldr	r2, [r7, #32]
 800aa70:	4413      	add	r3, r2
 800aa72:	3304      	adds	r3, #4
 800aa74:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800aa76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa78:	69b9      	ldr	r1, [r7, #24]
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f000 f86f 	bl	800ab5e <USBH_ParseEPDesc>
 800aa80:	4603      	mov	r3, r0
 800aa82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800aa86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aa90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d80a      	bhi.n	800aaae <USBH_ParseCfgDesc+0x1a6>
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	791b      	ldrb	r3, [r3, #4]
 800aa9c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d204      	bcs.n	800aaae <USBH_ParseCfgDesc+0x1a6>
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	885a      	ldrh	r2, [r3, #2]
 800aaa8:	8afb      	ldrh	r3, [r7, #22]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d8ac      	bhi.n	800aa08 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	791b      	ldrb	r3, [r3, #4]
 800aab2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d201      	bcs.n	800aabe <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e01c      	b.n	800aaf8 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800aabe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aac2:	3301      	adds	r3, #1
 800aac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d805      	bhi.n	800aadc <USBH_ParseCfgDesc+0x1d4>
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	885a      	ldrh	r2, [r3, #2]
 800aad4:	8afb      	ldrh	r3, [r7, #22]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	f63f af70 	bhi.w	800a9bc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800aadc:	6a3b      	ldr	r3, [r7, #32]
 800aade:	791b      	ldrb	r3, [r3, #4]
 800aae0:	2b02      	cmp	r3, #2
 800aae2:	bf28      	it	cs
 800aae4:	2302      	movcs	r3, #2
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d201      	bcs.n	800aaf4 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e001      	b.n	800aaf8 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800aaf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3730      	adds	r7, #48	@ 0x30
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	781a      	ldrb	r2, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	785a      	ldrb	r2, [r3, #1]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	789a      	ldrb	r2, [r3, #2]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	78da      	ldrb	r2, [r3, #3]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	791a      	ldrb	r2, [r3, #4]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	795a      	ldrb	r2, [r3, #5]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	799a      	ldrb	r2, [r3, #6]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	79da      	ldrb	r2, [r3, #7]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	7a1a      	ldrb	r2, [r3, #8]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	721a      	strb	r2, [r3, #8]
}
 800ab52:	bf00      	nop
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b087      	sub	sp, #28
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	60f8      	str	r0, [r7, #12]
 800ab66:	60b9      	str	r1, [r7, #8]
 800ab68:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	781a      	ldrb	r2, [r3, #0]
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	785a      	ldrb	r2, [r3, #1]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	789a      	ldrb	r2, [r3, #2]
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	78da      	ldrb	r2, [r3, #3]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	3304      	adds	r3, #4
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	461a      	mov	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	3305      	adds	r3, #5
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	021b      	lsls	r3, r3, #8
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	4313      	orrs	r3, r2
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	799a      	ldrb	r2, [r3, #6]
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	889b      	ldrh	r3, [r3, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d009      	beq.n	800abcc <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800abbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abc0:	d804      	bhi.n	800abcc <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800abc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abca:	d901      	bls.n	800abd0 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800abcc:	2303      	movs	r3, #3
 800abce:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d136      	bne.n	800ac48 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	78db      	ldrb	r3, [r3, #3]
 800abde:	f003 0303 	and.w	r3, r3, #3
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	d108      	bne.n	800abf8 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	889b      	ldrh	r3, [r3, #4]
 800abea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abee:	f240 8097 	bls.w	800ad20 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800abf2:	2303      	movs	r3, #3
 800abf4:	75fb      	strb	r3, [r7, #23]
 800abf6:	e093      	b.n	800ad20 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	78db      	ldrb	r3, [r3, #3]
 800abfc:	f003 0303 	and.w	r3, r3, #3
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d107      	bne.n	800ac14 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	889b      	ldrh	r3, [r3, #4]
 800ac08:	2b40      	cmp	r3, #64	@ 0x40
 800ac0a:	f240 8089 	bls.w	800ad20 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac0e:	2303      	movs	r3, #3
 800ac10:	75fb      	strb	r3, [r7, #23]
 800ac12:	e085      	b.n	800ad20 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	78db      	ldrb	r3, [r3, #3]
 800ac18:	f003 0303 	and.w	r3, r3, #3
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d005      	beq.n	800ac2c <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	78db      	ldrb	r3, [r3, #3]
 800ac24:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ac28:	2b03      	cmp	r3, #3
 800ac2a:	d10a      	bne.n	800ac42 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	799b      	ldrb	r3, [r3, #6]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d003      	beq.n	800ac3c <USBH_ParseEPDesc+0xde>
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	799b      	ldrb	r3, [r3, #6]
 800ac38:	2b10      	cmp	r3, #16
 800ac3a:	d970      	bls.n	800ad1e <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ac40:	e06d      	b.n	800ad1e <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ac42:	2303      	movs	r3, #3
 800ac44:	75fb      	strb	r3, [r7, #23]
 800ac46:	e06b      	b.n	800ad20 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d13c      	bne.n	800accc <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	78db      	ldrb	r3, [r3, #3]
 800ac56:	f003 0303 	and.w	r3, r3, #3
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d005      	beq.n	800ac6a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	78db      	ldrb	r3, [r3, #3]
 800ac62:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d106      	bne.n	800ac78 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	889b      	ldrh	r3, [r3, #4]
 800ac6e:	2b40      	cmp	r3, #64	@ 0x40
 800ac70:	d956      	bls.n	800ad20 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac72:	2303      	movs	r3, #3
 800ac74:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ac76:	e053      	b.n	800ad20 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	78db      	ldrb	r3, [r3, #3]
 800ac7c:	f003 0303 	and.w	r3, r3, #3
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d10e      	bne.n	800aca2 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	799b      	ldrb	r3, [r3, #6]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d007      	beq.n	800ac9c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ac90:	2b10      	cmp	r3, #16
 800ac92:	d803      	bhi.n	800ac9c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ac98:	2b40      	cmp	r3, #64	@ 0x40
 800ac9a:	d941      	bls.n	800ad20 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	75fb      	strb	r3, [r7, #23]
 800aca0:	e03e      	b.n	800ad20 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	78db      	ldrb	r3, [r3, #3]
 800aca6:	f003 0303 	and.w	r3, r3, #3
 800acaa:	2b03      	cmp	r3, #3
 800acac:	d10b      	bne.n	800acc6 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	799b      	ldrb	r3, [r3, #6]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d004      	beq.n	800acc0 <USBH_ParseEPDesc+0x162>
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	889b      	ldrh	r3, [r3, #4]
 800acba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acbe:	d32f      	bcc.n	800ad20 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800acc0:	2303      	movs	r3, #3
 800acc2:	75fb      	strb	r3, [r7, #23]
 800acc4:	e02c      	b.n	800ad20 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800acc6:	2303      	movs	r3, #3
 800acc8:	75fb      	strb	r3, [r7, #23]
 800acca:	e029      	b.n	800ad20 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d120      	bne.n	800ad18 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	78db      	ldrb	r3, [r3, #3]
 800acda:	f003 0303 	and.w	r3, r3, #3
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d106      	bne.n	800acf0 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	889b      	ldrh	r3, [r3, #4]
 800ace6:	2b08      	cmp	r3, #8
 800ace8:	d01a      	beq.n	800ad20 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800acea:	2303      	movs	r3, #3
 800acec:	75fb      	strb	r3, [r7, #23]
 800acee:	e017      	b.n	800ad20 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	78db      	ldrb	r3, [r3, #3]
 800acf4:	f003 0303 	and.w	r3, r3, #3
 800acf8:	2b03      	cmp	r3, #3
 800acfa:	d10a      	bne.n	800ad12 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	799b      	ldrb	r3, [r3, #6]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d003      	beq.n	800ad0c <USBH_ParseEPDesc+0x1ae>
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	889b      	ldrh	r3, [r3, #4]
 800ad08:	2b08      	cmp	r3, #8
 800ad0a:	d909      	bls.n	800ad20 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	75fb      	strb	r3, [r7, #23]
 800ad10:	e006      	b.n	800ad20 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ad12:	2303      	movs	r3, #3
 800ad14:	75fb      	strb	r3, [r7, #23]
 800ad16:	e003      	b.n	800ad20 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ad18:	2303      	movs	r3, #3
 800ad1a:	75fb      	strb	r3, [r7, #23]
 800ad1c:	e000      	b.n	800ad20 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ad1e:	bf00      	nop
  }

  return status;
 800ad20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	371c      	adds	r7, #28
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b087      	sub	sp, #28
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	60f8      	str	r0, [r7, #12]
 800ad36:	60b9      	str	r1, [r7, #8]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	2b03      	cmp	r3, #3
 800ad44:	d120      	bne.n	800ad88 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	1e9a      	subs	r2, r3, #2
 800ad4c:	88fb      	ldrh	r3, [r7, #6]
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	bf28      	it	cs
 800ad52:	4613      	movcs	r3, r2
 800ad54:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	3302      	adds	r3, #2
 800ad5a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	82fb      	strh	r3, [r7, #22]
 800ad60:	e00b      	b.n	800ad7a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ad62:	8afb      	ldrh	r3, [r7, #22]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4413      	add	r3, r2
 800ad68:	781a      	ldrb	r2, [r3, #0]
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	3301      	adds	r3, #1
 800ad72:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ad74:	8afb      	ldrh	r3, [r7, #22]
 800ad76:	3302      	adds	r3, #2
 800ad78:	82fb      	strh	r3, [r7, #22]
 800ad7a:	8afa      	ldrh	r2, [r7, #22]
 800ad7c:	8abb      	ldrh	r3, [r7, #20]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d3ef      	bcc.n	800ad62 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	2200      	movs	r2, #0
 800ad86:	701a      	strb	r2, [r3, #0]
  }
}
 800ad88:	bf00      	nop
 800ad8a:	371c      	adds	r7, #28
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	881b      	ldrh	r3, [r3, #0]
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	7812      	ldrb	r2, [r2, #0]
 800ada6:	4413      	add	r3, r2
 800ada8:	b29a      	uxth	r2, r3
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4413      	add	r3, r2
 800adb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800adba:	68fb      	ldr	r3, [r7, #12]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800add6:	2301      	movs	r3, #1
 800add8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	789b      	ldrb	r3, [r3, #2]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d002      	beq.n	800ade8 <USBH_CtlReq+0x20>
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d00f      	beq.n	800ae06 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800ade6:	e027      	b.n	800ae38 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	88fa      	ldrh	r2, [r7, #6]
 800adf2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2201      	movs	r2, #1
 800adf8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2202      	movs	r2, #2
 800adfe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ae00:	2301      	movs	r3, #1
 800ae02:	75fb      	strb	r3, [r7, #23]
      break;
 800ae04:	e018      	b.n	800ae38 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f000 f81c 	bl	800ae44 <USBH_HandleControl>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ae10:	7dfb      	ldrb	r3, [r7, #23]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d002      	beq.n	800ae1c <USBH_CtlReq+0x54>
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
 800ae18:	2b03      	cmp	r3, #3
 800ae1a:	d106      	bne.n	800ae2a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	761a      	strb	r2, [r3, #24]
      break;
 800ae28:	e005      	b.n	800ae36 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d102      	bne.n	800ae36 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2201      	movs	r2, #1
 800ae34:	709a      	strb	r2, [r3, #2]
      break;
 800ae36:	bf00      	nop
  }
  return status;
 800ae38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3718      	adds	r7, #24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
	...

0800ae44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af02      	add	r7, sp, #8
 800ae4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ae50:	2300      	movs	r3, #0
 800ae52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	7e1b      	ldrb	r3, [r3, #24]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	2b0a      	cmp	r3, #10
 800ae5c:	f200 8157 	bhi.w	800b10e <USBH_HandleControl+0x2ca>
 800ae60:	a201      	add	r2, pc, #4	@ (adr r2, 800ae68 <USBH_HandleControl+0x24>)
 800ae62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae66:	bf00      	nop
 800ae68:	0800ae95 	.word	0x0800ae95
 800ae6c:	0800aeaf 	.word	0x0800aeaf
 800ae70:	0800af19 	.word	0x0800af19
 800ae74:	0800af3f 	.word	0x0800af3f
 800ae78:	0800af79 	.word	0x0800af79
 800ae7c:	0800afa3 	.word	0x0800afa3
 800ae80:	0800aff5 	.word	0x0800aff5
 800ae84:	0800b017 	.word	0x0800b017
 800ae88:	0800b053 	.word	0x0800b053
 800ae8c:	0800b079 	.word	0x0800b079
 800ae90:	0800b0b7 	.word	0x0800b0b7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f103 0110 	add.w	r1, r3, #16
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	795b      	ldrb	r3, [r3, #5]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f945 	bl	800b130 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2202      	movs	r2, #2
 800aeaa:	761a      	strb	r2, [r3, #24]
      break;
 800aeac:	e13a      	b.n	800b124 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	795b      	ldrb	r3, [r3, #5]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fcc7 	bl	800b848 <USBH_LL_GetURBState>
 800aeba:	4603      	mov	r3, r0
 800aebc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800aebe:	7bbb      	ldrb	r3, [r7, #14]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d11e      	bne.n	800af02 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	7c1b      	ldrb	r3, [r3, #16]
 800aec8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aecc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	8adb      	ldrh	r3, [r3, #22]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00a      	beq.n	800aeec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800aed6:	7b7b      	ldrb	r3, [r7, #13]
 800aed8:	2b80      	cmp	r3, #128	@ 0x80
 800aeda:	d103      	bne.n	800aee4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2203      	movs	r2, #3
 800aee0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800aee2:	e116      	b.n	800b112 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2205      	movs	r2, #5
 800aee8:	761a      	strb	r2, [r3, #24]
      break;
 800aeea:	e112      	b.n	800b112 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800aeec:	7b7b      	ldrb	r3, [r7, #13]
 800aeee:	2b80      	cmp	r3, #128	@ 0x80
 800aef0:	d103      	bne.n	800aefa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2209      	movs	r2, #9
 800aef6:	761a      	strb	r2, [r3, #24]
      break;
 800aef8:	e10b      	b.n	800b112 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2207      	movs	r2, #7
 800aefe:	761a      	strb	r2, [r3, #24]
      break;
 800af00:	e107      	b.n	800b112 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800af02:	7bbb      	ldrb	r3, [r7, #14]
 800af04:	2b04      	cmp	r3, #4
 800af06:	d003      	beq.n	800af10 <USBH_HandleControl+0xcc>
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	f040 8101 	bne.w	800b112 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	220b      	movs	r2, #11
 800af14:	761a      	strb	r2, [r3, #24]
      break;
 800af16:	e0fc      	b.n	800b112 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800af1e:	b29a      	uxth	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6899      	ldr	r1, [r3, #8]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	899a      	ldrh	r2, [r3, #12]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	791b      	ldrb	r3, [r3, #4]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f93c 	bl	800b1ae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2204      	movs	r2, #4
 800af3a:	761a      	strb	r2, [r3, #24]
      break;
 800af3c:	e0f2      	b.n	800b124 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	791b      	ldrb	r3, [r3, #4]
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fc7f 	bl	800b848 <USBH_LL_GetURBState>
 800af4a:	4603      	mov	r3, r0
 800af4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800af4e:	7bbb      	ldrb	r3, [r7, #14]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d103      	bne.n	800af5c <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2209      	movs	r2, #9
 800af58:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800af5a:	e0dc      	b.n	800b116 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800af5c:	7bbb      	ldrb	r3, [r7, #14]
 800af5e:	2b05      	cmp	r3, #5
 800af60:	d102      	bne.n	800af68 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800af62:	2303      	movs	r3, #3
 800af64:	73fb      	strb	r3, [r7, #15]
      break;
 800af66:	e0d6      	b.n	800b116 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	2b04      	cmp	r3, #4
 800af6c:	f040 80d3 	bne.w	800b116 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	220b      	movs	r2, #11
 800af74:	761a      	strb	r2, [r3, #24]
      break;
 800af76:	e0ce      	b.n	800b116 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6899      	ldr	r1, [r3, #8]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	899a      	ldrh	r2, [r3, #12]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	795b      	ldrb	r3, [r3, #5]
 800af84:	2001      	movs	r0, #1
 800af86:	9000      	str	r0, [sp, #0]
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 f8eb 	bl	800b164 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800af94:	b29a      	uxth	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2206      	movs	r2, #6
 800af9e:	761a      	strb	r2, [r3, #24]
      break;
 800afa0:	e0c0      	b.n	800b124 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	795b      	ldrb	r3, [r3, #5]
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fc4d 	bl	800b848 <USBH_LL_GetURBState>
 800afae:	4603      	mov	r3, r0
 800afb0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800afb2:	7bbb      	ldrb	r3, [r7, #14]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d103      	bne.n	800afc0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2207      	movs	r2, #7
 800afbc:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800afbe:	e0ac      	b.n	800b11a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	2b05      	cmp	r3, #5
 800afc4:	d105      	bne.n	800afd2 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	220c      	movs	r2, #12
 800afca:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800afcc:	2303      	movs	r3, #3
 800afce:	73fb      	strb	r3, [r7, #15]
      break;
 800afd0:	e0a3      	b.n	800b11a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d103      	bne.n	800afe0 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2205      	movs	r2, #5
 800afdc:	761a      	strb	r2, [r3, #24]
      break;
 800afde:	e09c      	b.n	800b11a <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	2b04      	cmp	r3, #4
 800afe4:	f040 8099 	bne.w	800b11a <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	220b      	movs	r2, #11
 800afec:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800afee:	2302      	movs	r3, #2
 800aff0:	73fb      	strb	r3, [r7, #15]
      break;
 800aff2:	e092      	b.n	800b11a <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	791b      	ldrb	r3, [r3, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	2100      	movs	r1, #0
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f8d6 	bl	800b1ae <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b008:	b29a      	uxth	r2, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2208      	movs	r2, #8
 800b012:	761a      	strb	r2, [r3, #24]

      break;
 800b014:	e086      	b.n	800b124 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	791b      	ldrb	r3, [r3, #4]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fc13 	bl	800b848 <USBH_LL_GetURBState>
 800b022:	4603      	mov	r3, r0
 800b024:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b026:	7bbb      	ldrb	r3, [r7, #14]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d105      	bne.n	800b038 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	220d      	movs	r2, #13
 800b030:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b036:	e072      	b.n	800b11e <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	2b04      	cmp	r3, #4
 800b03c:	d103      	bne.n	800b046 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	220b      	movs	r2, #11
 800b042:	761a      	strb	r2, [r3, #24]
      break;
 800b044:	e06b      	b.n	800b11e <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800b046:	7bbb      	ldrb	r3, [r7, #14]
 800b048:	2b05      	cmp	r3, #5
 800b04a:	d168      	bne.n	800b11e <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800b04c:	2303      	movs	r3, #3
 800b04e:	73fb      	strb	r3, [r7, #15]
      break;
 800b050:	e065      	b.n	800b11e <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	795b      	ldrb	r3, [r3, #5]
 800b056:	2201      	movs	r2, #1
 800b058:	9200      	str	r2, [sp, #0]
 800b05a:	2200      	movs	r2, #0
 800b05c:	2100      	movs	r1, #0
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f880 	bl	800b164 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	220a      	movs	r2, #10
 800b074:	761a      	strb	r2, [r3, #24]
      break;
 800b076:	e055      	b.n	800b124 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	795b      	ldrb	r3, [r3, #5]
 800b07c:	4619      	mov	r1, r3
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fbe2 	bl	800b848 <USBH_LL_GetURBState>
 800b084:	4603      	mov	r3, r0
 800b086:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b088:	7bbb      	ldrb	r3, [r7, #14]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d105      	bne.n	800b09a <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800b08e:	2300      	movs	r3, #0
 800b090:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	220d      	movs	r2, #13
 800b096:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b098:	e043      	b.n	800b122 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d103      	bne.n	800b0a8 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2209      	movs	r2, #9
 800b0a4:	761a      	strb	r2, [r3, #24]
      break;
 800b0a6:	e03c      	b.n	800b122 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
 800b0aa:	2b04      	cmp	r3, #4
 800b0ac:	d139      	bne.n	800b122 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	220b      	movs	r2, #11
 800b0b2:	761a      	strb	r2, [r3, #24]
      break;
 800b0b4:	e035      	b.n	800b122 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	7e5b      	ldrb	r3, [r3, #25]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	765a      	strb	r2, [r3, #25]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	7e5b      	ldrb	r3, [r3, #25]
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d806      	bhi.n	800b0d8 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b0d6:	e025      	b.n	800b124 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b0de:	2106      	movs	r1, #6
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	795b      	ldrb	r3, [r3, #5]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 f90d 	bl	800b310 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	791b      	ldrb	r3, [r3, #4]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 f907 	bl	800b310 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b108:	2302      	movs	r3, #2
 800b10a:	73fb      	strb	r3, [r7, #15]
      break;
 800b10c:	e00a      	b.n	800b124 <USBH_HandleControl+0x2e0>

    default:
      break;
 800b10e:	bf00      	nop
 800b110:	e008      	b.n	800b124 <USBH_HandleControl+0x2e0>
      break;
 800b112:	bf00      	nop
 800b114:	e006      	b.n	800b124 <USBH_HandleControl+0x2e0>
      break;
 800b116:	bf00      	nop
 800b118:	e004      	b.n	800b124 <USBH_HandleControl+0x2e0>
      break;
 800b11a:	bf00      	nop
 800b11c:	e002      	b.n	800b124 <USBH_HandleControl+0x2e0>
      break;
 800b11e:	bf00      	nop
 800b120:	e000      	b.n	800b124 <USBH_HandleControl+0x2e0>
      break;
 800b122:	bf00      	nop
  }

  return status;
 800b124:	7bfb      	ldrb	r3, [r7, #15]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop

0800b130 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b088      	sub	sp, #32
 800b134:	af04      	add	r7, sp, #16
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	4613      	mov	r3, r2
 800b13c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b13e:	79f9      	ldrb	r1, [r7, #7]
 800b140:	2300      	movs	r3, #0
 800b142:	9303      	str	r3, [sp, #12]
 800b144:	2308      	movs	r3, #8
 800b146:	9302      	str	r3, [sp, #8]
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	9301      	str	r3, [sp, #4]
 800b14c:	2300      	movs	r3, #0
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	2300      	movs	r3, #0
 800b152:	2200      	movs	r2, #0
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f000 fb46 	bl	800b7e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b088      	sub	sp, #32
 800b168:	af04      	add	r7, sp, #16
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	4611      	mov	r1, r2
 800b170:	461a      	mov	r2, r3
 800b172:	460b      	mov	r3, r1
 800b174:	80fb      	strh	r3, [r7, #6]
 800b176:	4613      	mov	r3, r2
 800b178:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b184:	2300      	movs	r3, #0
 800b186:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b188:	7979      	ldrb	r1, [r7, #5]
 800b18a:	7e3b      	ldrb	r3, [r7, #24]
 800b18c:	9303      	str	r3, [sp, #12]
 800b18e:	88fb      	ldrh	r3, [r7, #6]
 800b190:	9302      	str	r3, [sp, #8]
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	2301      	movs	r3, #1
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	2300      	movs	r3, #0
 800b19c:	2200      	movs	r2, #0
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f000 fb21 	bl	800b7e6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b088      	sub	sp, #32
 800b1b2:	af04      	add	r7, sp, #16
 800b1b4:	60f8      	str	r0, [r7, #12]
 800b1b6:	60b9      	str	r1, [r7, #8]
 800b1b8:	4611      	mov	r1, r2
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	460b      	mov	r3, r1
 800b1be:	80fb      	strh	r3, [r7, #6]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b1c4:	7979      	ldrb	r1, [r7, #5]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9303      	str	r3, [sp, #12]
 800b1ca:	88fb      	ldrh	r3, [r7, #6]
 800b1cc:	9302      	str	r3, [sp, #8]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	2201      	movs	r2, #1
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f000 fb03 	bl	800b7e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b1e0:	2300      	movs	r3, #0

}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b088      	sub	sp, #32
 800b1ee:	af04      	add	r7, sp, #16
 800b1f0:	60f8      	str	r0, [r7, #12]
 800b1f2:	60b9      	str	r1, [r7, #8]
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	80fb      	strh	r3, [r7, #6]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b20a:	2300      	movs	r3, #0
 800b20c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b20e:	7979      	ldrb	r1, [r7, #5]
 800b210:	7e3b      	ldrb	r3, [r7, #24]
 800b212:	9303      	str	r3, [sp, #12]
 800b214:	88fb      	ldrh	r3, [r7, #6]
 800b216:	9302      	str	r3, [sp, #8]
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	9301      	str	r3, [sp, #4]
 800b21c:	2301      	movs	r3, #1
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	2302      	movs	r3, #2
 800b222:	2200      	movs	r2, #0
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f000 fade 	bl	800b7e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b088      	sub	sp, #32
 800b238:	af04      	add	r7, sp, #16
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	4611      	mov	r1, r2
 800b240:	461a      	mov	r2, r3
 800b242:	460b      	mov	r3, r1
 800b244:	80fb      	strh	r3, [r7, #6]
 800b246:	4613      	mov	r3, r2
 800b248:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b24a:	7979      	ldrb	r1, [r7, #5]
 800b24c:	2300      	movs	r3, #0
 800b24e:	9303      	str	r3, [sp, #12]
 800b250:	88fb      	ldrh	r3, [r7, #6]
 800b252:	9302      	str	r3, [sp, #8]
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	9301      	str	r3, [sp, #4]
 800b258:	2301      	movs	r3, #1
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	2302      	movs	r3, #2
 800b25e:	2201      	movs	r2, #1
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f000 fac0 	bl	800b7e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af04      	add	r7, sp, #16
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	4608      	mov	r0, r1
 800b27a:	4611      	mov	r1, r2
 800b27c:	461a      	mov	r2, r3
 800b27e:	4603      	mov	r3, r0
 800b280:	70fb      	strb	r3, [r7, #3]
 800b282:	460b      	mov	r3, r1
 800b284:	70bb      	strb	r3, [r7, #2]
 800b286:	4613      	mov	r3, r2
 800b288:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b28a:	7878      	ldrb	r0, [r7, #1]
 800b28c:	78ba      	ldrb	r2, [r7, #2]
 800b28e:	78f9      	ldrb	r1, [r7, #3]
 800b290:	8b3b      	ldrh	r3, [r7, #24]
 800b292:	9302      	str	r3, [sp, #8]
 800b294:	7d3b      	ldrb	r3, [r7, #20]
 800b296:	9301      	str	r3, [sp, #4]
 800b298:	7c3b      	ldrb	r3, [r7, #16]
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	4603      	mov	r3, r0
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fa53 	bl	800b74a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b082      	sub	sp, #8
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b2ba:	78fb      	ldrb	r3, [r7, #3]
 800b2bc:	4619      	mov	r1, r3
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fa72 	bl	800b7a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f836 	bl	800b34c <USBH_GetFreePipe>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b2e4:	89fb      	ldrh	r3, [r7, #14]
 800b2e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d00a      	beq.n	800b304 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b2ee:	78fa      	ldrb	r2, [r7, #3]
 800b2f0:	89fb      	ldrh	r3, [r7, #14]
 800b2f2:	f003 030f 	and.w	r3, r3, #15
 800b2f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b2fa:	6879      	ldr	r1, [r7, #4]
 800b2fc:	33e0      	adds	r3, #224	@ 0xe0
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	440b      	add	r3, r1
 800b302:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b304:	89fb      	ldrh	r3, [r7, #14]
 800b306:	b2db      	uxtb	r3, r3
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	460b      	mov	r3, r1
 800b31a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b31c:	78fb      	ldrb	r3, [r7, #3]
 800b31e:	2b0f      	cmp	r3, #15
 800b320:	d80d      	bhi.n	800b33e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b322:	78fb      	ldrb	r3, [r7, #3]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	33e0      	adds	r3, #224	@ 0xe0
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	4413      	add	r3, r2
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	78fb      	ldrb	r3, [r7, #3]
 800b330:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b334:	6879      	ldr	r1, [r7, #4]
 800b336:	33e0      	adds	r3, #224	@ 0xe0
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	440b      	add	r3, r1
 800b33c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b354:	2300      	movs	r3, #0
 800b356:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b358:	2300      	movs	r3, #0
 800b35a:	73fb      	strb	r3, [r7, #15]
 800b35c:	e00f      	b.n	800b37e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	33e0      	adds	r3, #224	@ 0xe0
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d102      	bne.n	800b378 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b372:	7bfb      	ldrb	r3, [r7, #15]
 800b374:	b29b      	uxth	r3, r3
 800b376:	e007      	b.n	800b388 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b378:	7bfb      	ldrb	r3, [r7, #15]
 800b37a:	3301      	adds	r3, #1
 800b37c:	73fb      	strb	r3, [r7, #15]
 800b37e:	7bfb      	ldrb	r3, [r7, #15]
 800b380:	2b0f      	cmp	r3, #15
 800b382:	d9ec      	bls.n	800b35e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b384:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b398:	2201      	movs	r2, #1
 800b39a:	490e      	ldr	r1, [pc, #56]	@ (800b3d4 <MX_USB_HOST_Init+0x40>)
 800b39c:	480e      	ldr	r0, [pc, #56]	@ (800b3d8 <MX_USB_HOST_Init+0x44>)
 800b39e:	f7fe fb0f 	bl	80099c0 <USBH_Init>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d001      	beq.n	800b3ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b3a8:	f7f6 fbde 	bl	8001b68 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b3ac:	490b      	ldr	r1, [pc, #44]	@ (800b3dc <MX_USB_HOST_Init+0x48>)
 800b3ae:	480a      	ldr	r0, [pc, #40]	@ (800b3d8 <MX_USB_HOST_Init+0x44>)
 800b3b0:	f7fe fbb1 	bl	8009b16 <USBH_RegisterClass>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d001      	beq.n	800b3be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b3ba:	f7f6 fbd5 	bl	8001b68 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b3be:	4806      	ldr	r0, [pc, #24]	@ (800b3d8 <MX_USB_HOST_Init+0x44>)
 800b3c0:	f7fe fc35 	bl	8009c2e <USBH_Start>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d001      	beq.n	800b3ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b3ca:	f7f6 fbcd 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b3ce:	bf00      	nop
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	0800b3f5 	.word	0x0800b3f5
 800b3d8:	200004c8 	.word	0x200004c8
 800b3dc:	2000000c 	.word	0x2000000c

0800b3e0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b3e4:	4802      	ldr	r0, [pc, #8]	@ (800b3f0 <MX_USB_HOST_Process+0x10>)
 800b3e6:	f7fe fc33 	bl	8009c50 <USBH_Process>
}
 800b3ea:	bf00      	nop
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	200004c8 	.word	0x200004c8

0800b3f4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b400:	78fb      	ldrb	r3, [r7, #3]
 800b402:	3b01      	subs	r3, #1
 800b404:	2b04      	cmp	r3, #4
 800b406:	d819      	bhi.n	800b43c <USBH_UserProcess+0x48>
 800b408:	a201      	add	r2, pc, #4	@ (adr r2, 800b410 <USBH_UserProcess+0x1c>)
 800b40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b40e:	bf00      	nop
 800b410:	0800b43d 	.word	0x0800b43d
 800b414:	0800b42d 	.word	0x0800b42d
 800b418:	0800b43d 	.word	0x0800b43d
 800b41c:	0800b435 	.word	0x0800b435
 800b420:	0800b425 	.word	0x0800b425
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b424:	4b09      	ldr	r3, [pc, #36]	@ (800b44c <USBH_UserProcess+0x58>)
 800b426:	2203      	movs	r2, #3
 800b428:	701a      	strb	r2, [r3, #0]
  break;
 800b42a:	e008      	b.n	800b43e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b42c:	4b07      	ldr	r3, [pc, #28]	@ (800b44c <USBH_UserProcess+0x58>)
 800b42e:	2202      	movs	r2, #2
 800b430:	701a      	strb	r2, [r3, #0]
  break;
 800b432:	e004      	b.n	800b43e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b434:	4b05      	ldr	r3, [pc, #20]	@ (800b44c <USBH_UserProcess+0x58>)
 800b436:	2201      	movs	r2, #1
 800b438:	701a      	strb	r2, [r3, #0]
  break;
 800b43a:	e000      	b.n	800b43e <USBH_UserProcess+0x4a>

  default:
  break;
 800b43c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b43e:	bf00      	nop
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	200008a0 	.word	0x200008a0

0800b450 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b08a      	sub	sp, #40	@ 0x28
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b458:	f107 0314 	add.w	r3, r7, #20
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]
 800b460:	605a      	str	r2, [r3, #4]
 800b462:	609a      	str	r2, [r3, #8]
 800b464:	60da      	str	r2, [r3, #12]
 800b466:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b470:	d147      	bne.n	800b502 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b472:	2300      	movs	r3, #0
 800b474:	613b      	str	r3, [r7, #16]
 800b476:	4b25      	ldr	r3, [pc, #148]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b47a:	4a24      	ldr	r2, [pc, #144]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b47c:	f043 0301 	orr.w	r3, r3, #1
 800b480:	6313      	str	r3, [r2, #48]	@ 0x30
 800b482:	4b22      	ldr	r3, [pc, #136]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	613b      	str	r3, [r7, #16]
 800b48c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b48e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b494:	2300      	movs	r3, #0
 800b496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b498:	2300      	movs	r3, #0
 800b49a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b49c:	f107 0314 	add.w	r3, r7, #20
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	481b      	ldr	r0, [pc, #108]	@ (800b510 <HAL_HCD_MspInit+0xc0>)
 800b4a4:	f7f7 f968 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b4a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b4ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b4ba:	230a      	movs	r3, #10
 800b4bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4be:	f107 0314 	add.w	r3, r7, #20
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	4812      	ldr	r0, [pc, #72]	@ (800b510 <HAL_HCD_MspInit+0xc0>)
 800b4c6:	f7f7 f957 	bl	8002778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b4ca:	4b10      	ldr	r3, [pc, #64]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b4cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ce:	4a0f      	ldr	r2, [pc, #60]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b4d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4d4:	6353      	str	r3, [r2, #52]	@ 0x34
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	60fb      	str	r3, [r7, #12]
 800b4da:	4b0c      	ldr	r3, [pc, #48]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b4dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4de:	4a0b      	ldr	r2, [pc, #44]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b4e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b4e4:	6453      	str	r3, [r2, #68]	@ 0x44
 800b4e6:	4b09      	ldr	r3, [pc, #36]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b4e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4ee:	60fb      	str	r3, [r7, #12]
 800b4f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	2043      	movs	r0, #67	@ 0x43
 800b4f8:	f7f7 f907 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b4fc:	2043      	movs	r0, #67	@ 0x43
 800b4fe:	f7f7 f920 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b502:	bf00      	nop
 800b504:	3728      	adds	r7, #40	@ 0x28
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	40023800 	.word	0x40023800
 800b510:	40020000 	.word	0x40020000

0800b514 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b522:	4618      	mov	r0, r3
 800b524:	f7fe ff6d 	bl	800a402 <USBH_LL_IncTimer>
}
 800b528:	bf00      	nop
 800b52a:	3708      	adds	r7, #8
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fe ffa9 	bl	800a496 <USBH_LL_Connect>
}
 800b544:	bf00      	nop
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fe ffb2 	bl	800a4c4 <USBH_LL_Disconnect>
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	460b      	mov	r3, r1
 800b572:	70fb      	strb	r3, [r7, #3]
 800b574:	4613      	mov	r3, r2
 800b576:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b578:	bf00      	nop
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b592:	4618      	mov	r0, r3
 800b594:	f7fe ff5f 	bl	800a456 <USBH_LL_PortEnabled>
}
 800b598:	bf00      	nop
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fe ff5f 	bl	800a472 <USBH_LL_PortDisabled>
}
 800b5b4:	bf00      	nop
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d12a      	bne.n	800b624 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b5ce:	4a18      	ldr	r2, [pc, #96]	@ (800b630 <USBH_LL_Init+0x74>)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a15      	ldr	r2, [pc, #84]	@ (800b630 <USBH_LL_Init+0x74>)
 800b5da:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b5de:	4b14      	ldr	r3, [pc, #80]	@ (800b630 <USBH_LL_Init+0x74>)
 800b5e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b5e4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b5e6:	4b12      	ldr	r3, [pc, #72]	@ (800b630 <USBH_LL_Init+0x74>)
 800b5e8:	2208      	movs	r2, #8
 800b5ea:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b5ec:	4b10      	ldr	r3, [pc, #64]	@ (800b630 <USBH_LL_Init+0x74>)
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b5f2:	4b0f      	ldr	r3, [pc, #60]	@ (800b630 <USBH_LL_Init+0x74>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b5f8:	4b0d      	ldr	r3, [pc, #52]	@ (800b630 <USBH_LL_Init+0x74>)
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b5fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b630 <USBH_LL_Init+0x74>)
 800b600:	2200      	movs	r2, #0
 800b602:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b604:	480a      	ldr	r0, [pc, #40]	@ (800b630 <USBH_LL_Init+0x74>)
 800b606:	f7f7 fa6c 	bl	8002ae2 <HAL_HCD_Init>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b610:	f7f6 faaa 	bl	8001b68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b614:	4806      	ldr	r0, [pc, #24]	@ (800b630 <USBH_LL_Init+0x74>)
 800b616:	f7f7 fecd 	bl	80033b4 <HAL_HCD_GetCurrentFrame>
 800b61a:	4603      	mov	r3, r0
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7fe fee0 	bl	800a3e4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	200008a4 	.word	0x200008a4

0800b634 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7f7 fe3a 	bl	80032c4 <HAL_HCD_Start>
 800b650:	4603      	mov	r3, r0
 800b652:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b654:	7bfb      	ldrb	r3, [r7, #15]
 800b656:	4618      	mov	r0, r3
 800b658:	f000 f95e 	bl	800b918 <USBH_Get_USB_Status>
 800b65c:	4603      	mov	r3, r0
 800b65e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b660:	7bbb      	ldrb	r3, [r7, #14]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b084      	sub	sp, #16
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b672:	2300      	movs	r3, #0
 800b674:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b680:	4618      	mov	r0, r3
 800b682:	f7f7 fe42 	bl	800330a <HAL_HCD_Stop>
 800b686:	4603      	mov	r3, r0
 800b688:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f000 f943 	bl	800b918 <USBH_Get_USB_Status>
 800b692:	4603      	mov	r3, r0
 800b694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b696:	7bbb      	ldrb	r3, [r7, #14]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3710      	adds	r7, #16
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7f7 fe8c 	bl	80033d0 <HAL_HCD_GetCurrentSpeed>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b02      	cmp	r3, #2
 800b6bc:	d00c      	beq.n	800b6d8 <USBH_LL_GetSpeed+0x38>
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d80d      	bhi.n	800b6de <USBH_LL_GetSpeed+0x3e>
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d002      	beq.n	800b6cc <USBH_LL_GetSpeed+0x2c>
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d003      	beq.n	800b6d2 <USBH_LL_GetSpeed+0x32>
 800b6ca:	e008      	b.n	800b6de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b6d0:	e008      	b.n	800b6e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b6d6:	e005      	b.n	800b6e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b6d8:	2302      	movs	r3, #2
 800b6da:	73fb      	strb	r3, [r7, #15]
    break;
 800b6dc:	e002      	b.n	800b6e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b6e2:	bf00      	nop
  }
  return  speed;
 800b6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b084      	sub	sp, #16
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b704:	4618      	mov	r0, r3
 800b706:	f7f7 fe1d 	bl	8003344 <HAL_HCD_ResetPort>
 800b70a:	4603      	mov	r3, r0
 800b70c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
 800b710:	4618      	mov	r0, r3
 800b712:	f000 f901 	bl	800b918 <USBH_Get_USB_Status>
 800b716:	4603      	mov	r3, r0
 800b718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b71a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	460b      	mov	r3, r1
 800b72e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b736:	78fa      	ldrb	r2, [r7, #3]
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7f7 fe25 	bl	800338a <HAL_HCD_HC_GetXferCount>
 800b740:	4603      	mov	r3, r0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b74a:	b590      	push	{r4, r7, lr}
 800b74c:	b089      	sub	sp, #36	@ 0x24
 800b74e:	af04      	add	r7, sp, #16
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	4608      	mov	r0, r1
 800b754:	4611      	mov	r1, r2
 800b756:	461a      	mov	r2, r3
 800b758:	4603      	mov	r3, r0
 800b75a:	70fb      	strb	r3, [r7, #3]
 800b75c:	460b      	mov	r3, r1
 800b75e:	70bb      	strb	r3, [r7, #2]
 800b760:	4613      	mov	r3, r2
 800b762:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b764:	2300      	movs	r3, #0
 800b766:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b768:	2300      	movs	r3, #0
 800b76a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b772:	787c      	ldrb	r4, [r7, #1]
 800b774:	78ba      	ldrb	r2, [r7, #2]
 800b776:	78f9      	ldrb	r1, [r7, #3]
 800b778:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b77a:	9302      	str	r3, [sp, #8]
 800b77c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	4623      	mov	r3, r4
 800b78a:	f7f7 fa11 	bl	8002bb0 <HAL_HCD_HC_Init>
 800b78e:	4603      	mov	r3, r0
 800b790:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	4618      	mov	r0, r3
 800b796:	f000 f8bf 	bl	800b918 <USBH_Get_USB_Status>
 800b79a:	4603      	mov	r3, r0
 800b79c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b79e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3714      	adds	r7, #20
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd90      	pop	{r4, r7, pc}

0800b7a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b7c2:	78fa      	ldrb	r2, [r7, #3]
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7f7 faaa 	bl	8002d20 <HAL_HCD_HC_Halt>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b7d0:	7bfb      	ldrb	r3, [r7, #15]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f000 f8a0 	bl	800b918 <USBH_Get_USB_Status>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b7e6:	b590      	push	{r4, r7, lr}
 800b7e8:	b089      	sub	sp, #36	@ 0x24
 800b7ea:	af04      	add	r7, sp, #16
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	4608      	mov	r0, r1
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	70fb      	strb	r3, [r7, #3]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	70bb      	strb	r3, [r7, #2]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b804:	2300      	movs	r3, #0
 800b806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b80e:	787c      	ldrb	r4, [r7, #1]
 800b810:	78ba      	ldrb	r2, [r7, #2]
 800b812:	78f9      	ldrb	r1, [r7, #3]
 800b814:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b818:	9303      	str	r3, [sp, #12]
 800b81a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b81c:	9302      	str	r3, [sp, #8]
 800b81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	4623      	mov	r3, r4
 800b82a:	f7f7 fa9d 	bl	8002d68 <HAL_HCD_HC_SubmitRequest>
 800b82e:	4603      	mov	r3, r0
 800b830:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b832:	7bfb      	ldrb	r3, [r7, #15]
 800b834:	4618      	mov	r0, r3
 800b836:	f000 f86f 	bl	800b918 <USBH_Get_USB_Status>
 800b83a:	4603      	mov	r3, r0
 800b83c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b83e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3714      	adds	r7, #20
 800b844:	46bd      	mov	sp, r7
 800b846:	bd90      	pop	{r4, r7, pc}

0800b848 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	460b      	mov	r3, r1
 800b852:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b85a:	78fa      	ldrb	r2, [r7, #3]
 800b85c:	4611      	mov	r1, r2
 800b85e:	4618      	mov	r0, r3
 800b860:	f7f7 fd7e 	bl	8003360 <HAL_HCD_HC_GetURBState>
 800b864:	4603      	mov	r3, r0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b082      	sub	sp, #8
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	460b      	mov	r3, r1
 800b878:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b880:	2b01      	cmp	r3, #1
 800b882:	d103      	bne.n	800b88c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b884:	78fb      	ldrb	r3, [r7, #3]
 800b886:	4618      	mov	r0, r3
 800b888:	f000 f872 	bl	800b970 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b88c:	20c8      	movs	r0, #200	@ 0xc8
 800b88e:	f7f6 fe3d 	bl	800250c <HAL_Delay>
  return USBH_OK;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	70fb      	strb	r3, [r7, #3]
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b8b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b8b4:	78fa      	ldrb	r2, [r7, #3]
 800b8b6:	68f9      	ldr	r1, [r7, #12]
 800b8b8:	4613      	mov	r3, r2
 800b8ba:	011b      	lsls	r3, r3, #4
 800b8bc:	1a9b      	subs	r3, r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	440b      	add	r3, r1
 800b8c2:	3317      	adds	r3, #23
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00a      	beq.n	800b8e0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b8ca:	78fa      	ldrb	r2, [r7, #3]
 800b8cc:	68f9      	ldr	r1, [r7, #12]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	011b      	lsls	r3, r3, #4
 800b8d2:	1a9b      	subs	r3, r3, r2
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	440b      	add	r3, r1
 800b8d8:	333c      	adds	r3, #60	@ 0x3c
 800b8da:	78ba      	ldrb	r2, [r7, #2]
 800b8dc:	701a      	strb	r2, [r3, #0]
 800b8de:	e009      	b.n	800b8f4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b8e0:	78fa      	ldrb	r2, [r7, #3]
 800b8e2:	68f9      	ldr	r1, [r7, #12]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	011b      	lsls	r3, r3, #4
 800b8e8:	1a9b      	subs	r3, r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	440b      	add	r3, r1
 800b8ee:	333d      	adds	r3, #61	@ 0x3d
 800b8f0:	78ba      	ldrb	r2, [r7, #2]
 800b8f2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3714      	adds	r7, #20
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b082      	sub	sp, #8
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7f6 fdfe 	bl	800250c <HAL_Delay>
}
 800b910:	bf00      	nop
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b926:	79fb      	ldrb	r3, [r7, #7]
 800b928:	2b03      	cmp	r3, #3
 800b92a:	d817      	bhi.n	800b95c <USBH_Get_USB_Status+0x44>
 800b92c:	a201      	add	r2, pc, #4	@ (adr r2, 800b934 <USBH_Get_USB_Status+0x1c>)
 800b92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b932:	bf00      	nop
 800b934:	0800b945 	.word	0x0800b945
 800b938:	0800b94b 	.word	0x0800b94b
 800b93c:	0800b951 	.word	0x0800b951
 800b940:	0800b957 	.word	0x0800b957
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b944:	2300      	movs	r3, #0
 800b946:	73fb      	strb	r3, [r7, #15]
    break;
 800b948:	e00b      	b.n	800b962 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b94a:	2302      	movs	r3, #2
 800b94c:	73fb      	strb	r3, [r7, #15]
    break;
 800b94e:	e008      	b.n	800b962 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b950:	2301      	movs	r3, #1
 800b952:	73fb      	strb	r3, [r7, #15]
    break;
 800b954:	e005      	b.n	800b962 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b956:	2302      	movs	r3, #2
 800b958:	73fb      	strb	r3, [r7, #15]
    break;
 800b95a:	e002      	b.n	800b962 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b95c:	2302      	movs	r3, #2
 800b95e:	73fb      	strb	r3, [r7, #15]
    break;
 800b960:	bf00      	nop
  }
  return usb_status;
 800b962:	7bfb      	ldrb	r3, [r7, #15]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3714      	adds	r7, #20
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	4603      	mov	r3, r0
 800b978:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b97a:	79fb      	ldrb	r3, [r7, #7]
 800b97c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b97e:	79fb      	ldrb	r3, [r7, #7]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d102      	bne.n	800b98a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b984:	2300      	movs	r3, #0
 800b986:	73fb      	strb	r3, [r7, #15]
 800b988:	e001      	b.n	800b98e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b98a:	2301      	movs	r3, #1
 800b98c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b98e:	7bfb      	ldrb	r3, [r7, #15]
 800b990:	461a      	mov	r2, r3
 800b992:	2101      	movs	r1, #1
 800b994:	4803      	ldr	r0, [pc, #12]	@ (800b9a4 <MX_DriverVbusFS+0x34>)
 800b996:	f7f7 f88b 	bl	8002ab0 <HAL_GPIO_WritePin>
}
 800b99a:	bf00      	nop
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	40020800 	.word	0x40020800

0800b9a8 <malloc>:
 800b9a8:	4b02      	ldr	r3, [pc, #8]	@ (800b9b4 <malloc+0xc>)
 800b9aa:	4601      	mov	r1, r0
 800b9ac:	6818      	ldr	r0, [r3, #0]
 800b9ae:	f000 b82d 	b.w	800ba0c <_malloc_r>
 800b9b2:	bf00      	nop
 800b9b4:	20000038 	.word	0x20000038

0800b9b8 <free>:
 800b9b8:	4b02      	ldr	r3, [pc, #8]	@ (800b9c4 <free+0xc>)
 800b9ba:	4601      	mov	r1, r0
 800b9bc:	6818      	ldr	r0, [r3, #0]
 800b9be:	f001 bd07 	b.w	800d3d0 <_free_r>
 800b9c2:	bf00      	nop
 800b9c4:	20000038 	.word	0x20000038

0800b9c8 <sbrk_aligned>:
 800b9c8:	b570      	push	{r4, r5, r6, lr}
 800b9ca:	4e0f      	ldr	r6, [pc, #60]	@ (800ba08 <sbrk_aligned+0x40>)
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	6831      	ldr	r1, [r6, #0]
 800b9d0:	4605      	mov	r5, r0
 800b9d2:	b911      	cbnz	r1, 800b9da <sbrk_aligned+0x12>
 800b9d4:	f000 fe54 	bl	800c680 <_sbrk_r>
 800b9d8:	6030      	str	r0, [r6, #0]
 800b9da:	4621      	mov	r1, r4
 800b9dc:	4628      	mov	r0, r5
 800b9de:	f000 fe4f 	bl	800c680 <_sbrk_r>
 800b9e2:	1c43      	adds	r3, r0, #1
 800b9e4:	d103      	bne.n	800b9ee <sbrk_aligned+0x26>
 800b9e6:	f04f 34ff 	mov.w	r4, #4294967295
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	bd70      	pop	{r4, r5, r6, pc}
 800b9ee:	1cc4      	adds	r4, r0, #3
 800b9f0:	f024 0403 	bic.w	r4, r4, #3
 800b9f4:	42a0      	cmp	r0, r4
 800b9f6:	d0f8      	beq.n	800b9ea <sbrk_aligned+0x22>
 800b9f8:	1a21      	subs	r1, r4, r0
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f000 fe40 	bl	800c680 <_sbrk_r>
 800ba00:	3001      	adds	r0, #1
 800ba02:	d1f2      	bne.n	800b9ea <sbrk_aligned+0x22>
 800ba04:	e7ef      	b.n	800b9e6 <sbrk_aligned+0x1e>
 800ba06:	bf00      	nop
 800ba08:	20000c84 	.word	0x20000c84

0800ba0c <_malloc_r>:
 800ba0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba10:	1ccd      	adds	r5, r1, #3
 800ba12:	f025 0503 	bic.w	r5, r5, #3
 800ba16:	3508      	adds	r5, #8
 800ba18:	2d0c      	cmp	r5, #12
 800ba1a:	bf38      	it	cc
 800ba1c:	250c      	movcc	r5, #12
 800ba1e:	2d00      	cmp	r5, #0
 800ba20:	4606      	mov	r6, r0
 800ba22:	db01      	blt.n	800ba28 <_malloc_r+0x1c>
 800ba24:	42a9      	cmp	r1, r5
 800ba26:	d904      	bls.n	800ba32 <_malloc_r+0x26>
 800ba28:	230c      	movs	r3, #12
 800ba2a:	6033      	str	r3, [r6, #0]
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb08 <_malloc_r+0xfc>
 800ba36:	f000 f869 	bl	800bb0c <__malloc_lock>
 800ba3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba3e:	461c      	mov	r4, r3
 800ba40:	bb44      	cbnz	r4, 800ba94 <_malloc_r+0x88>
 800ba42:	4629      	mov	r1, r5
 800ba44:	4630      	mov	r0, r6
 800ba46:	f7ff ffbf 	bl	800b9c8 <sbrk_aligned>
 800ba4a:	1c43      	adds	r3, r0, #1
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	d158      	bne.n	800bb02 <_malloc_r+0xf6>
 800ba50:	f8d8 4000 	ldr.w	r4, [r8]
 800ba54:	4627      	mov	r7, r4
 800ba56:	2f00      	cmp	r7, #0
 800ba58:	d143      	bne.n	800bae2 <_malloc_r+0xd6>
 800ba5a:	2c00      	cmp	r4, #0
 800ba5c:	d04b      	beq.n	800baf6 <_malloc_r+0xea>
 800ba5e:	6823      	ldr	r3, [r4, #0]
 800ba60:	4639      	mov	r1, r7
 800ba62:	4630      	mov	r0, r6
 800ba64:	eb04 0903 	add.w	r9, r4, r3
 800ba68:	f000 fe0a 	bl	800c680 <_sbrk_r>
 800ba6c:	4581      	cmp	r9, r0
 800ba6e:	d142      	bne.n	800baf6 <_malloc_r+0xea>
 800ba70:	6821      	ldr	r1, [r4, #0]
 800ba72:	1a6d      	subs	r5, r5, r1
 800ba74:	4629      	mov	r1, r5
 800ba76:	4630      	mov	r0, r6
 800ba78:	f7ff ffa6 	bl	800b9c8 <sbrk_aligned>
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	d03a      	beq.n	800baf6 <_malloc_r+0xea>
 800ba80:	6823      	ldr	r3, [r4, #0]
 800ba82:	442b      	add	r3, r5
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	f8d8 3000 	ldr.w	r3, [r8]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	bb62      	cbnz	r2, 800bae8 <_malloc_r+0xdc>
 800ba8e:	f8c8 7000 	str.w	r7, [r8]
 800ba92:	e00f      	b.n	800bab4 <_malloc_r+0xa8>
 800ba94:	6822      	ldr	r2, [r4, #0]
 800ba96:	1b52      	subs	r2, r2, r5
 800ba98:	d420      	bmi.n	800badc <_malloc_r+0xd0>
 800ba9a:	2a0b      	cmp	r2, #11
 800ba9c:	d917      	bls.n	800bace <_malloc_r+0xc2>
 800ba9e:	1961      	adds	r1, r4, r5
 800baa0:	42a3      	cmp	r3, r4
 800baa2:	6025      	str	r5, [r4, #0]
 800baa4:	bf18      	it	ne
 800baa6:	6059      	strne	r1, [r3, #4]
 800baa8:	6863      	ldr	r3, [r4, #4]
 800baaa:	bf08      	it	eq
 800baac:	f8c8 1000 	streq.w	r1, [r8]
 800bab0:	5162      	str	r2, [r4, r5]
 800bab2:	604b      	str	r3, [r1, #4]
 800bab4:	4630      	mov	r0, r6
 800bab6:	f000 f82f 	bl	800bb18 <__malloc_unlock>
 800baba:	f104 000b 	add.w	r0, r4, #11
 800babe:	1d23      	adds	r3, r4, #4
 800bac0:	f020 0007 	bic.w	r0, r0, #7
 800bac4:	1ac2      	subs	r2, r0, r3
 800bac6:	bf1c      	itt	ne
 800bac8:	1a1b      	subne	r3, r3, r0
 800baca:	50a3      	strne	r3, [r4, r2]
 800bacc:	e7af      	b.n	800ba2e <_malloc_r+0x22>
 800bace:	6862      	ldr	r2, [r4, #4]
 800bad0:	42a3      	cmp	r3, r4
 800bad2:	bf0c      	ite	eq
 800bad4:	f8c8 2000 	streq.w	r2, [r8]
 800bad8:	605a      	strne	r2, [r3, #4]
 800bada:	e7eb      	b.n	800bab4 <_malloc_r+0xa8>
 800badc:	4623      	mov	r3, r4
 800bade:	6864      	ldr	r4, [r4, #4]
 800bae0:	e7ae      	b.n	800ba40 <_malloc_r+0x34>
 800bae2:	463c      	mov	r4, r7
 800bae4:	687f      	ldr	r7, [r7, #4]
 800bae6:	e7b6      	b.n	800ba56 <_malloc_r+0x4a>
 800bae8:	461a      	mov	r2, r3
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	42a3      	cmp	r3, r4
 800baee:	d1fb      	bne.n	800bae8 <_malloc_r+0xdc>
 800baf0:	2300      	movs	r3, #0
 800baf2:	6053      	str	r3, [r2, #4]
 800baf4:	e7de      	b.n	800bab4 <_malloc_r+0xa8>
 800baf6:	230c      	movs	r3, #12
 800baf8:	6033      	str	r3, [r6, #0]
 800bafa:	4630      	mov	r0, r6
 800bafc:	f000 f80c 	bl	800bb18 <__malloc_unlock>
 800bb00:	e794      	b.n	800ba2c <_malloc_r+0x20>
 800bb02:	6005      	str	r5, [r0, #0]
 800bb04:	e7d6      	b.n	800bab4 <_malloc_r+0xa8>
 800bb06:	bf00      	nop
 800bb08:	20000c88 	.word	0x20000c88

0800bb0c <__malloc_lock>:
 800bb0c:	4801      	ldr	r0, [pc, #4]	@ (800bb14 <__malloc_lock+0x8>)
 800bb0e:	f000 be04 	b.w	800c71a <__retarget_lock_acquire_recursive>
 800bb12:	bf00      	nop
 800bb14:	20000dcc 	.word	0x20000dcc

0800bb18 <__malloc_unlock>:
 800bb18:	4801      	ldr	r0, [pc, #4]	@ (800bb20 <__malloc_unlock+0x8>)
 800bb1a:	f000 bdff 	b.w	800c71c <__retarget_lock_release_recursive>
 800bb1e:	bf00      	nop
 800bb20:	20000dcc 	.word	0x20000dcc

0800bb24 <__cvt>:
 800bb24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb28:	ec57 6b10 	vmov	r6, r7, d0
 800bb2c:	2f00      	cmp	r7, #0
 800bb2e:	460c      	mov	r4, r1
 800bb30:	4619      	mov	r1, r3
 800bb32:	463b      	mov	r3, r7
 800bb34:	bfbb      	ittet	lt
 800bb36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bb3a:	461f      	movlt	r7, r3
 800bb3c:	2300      	movge	r3, #0
 800bb3e:	232d      	movlt	r3, #45	@ 0x2d
 800bb40:	700b      	strb	r3, [r1, #0]
 800bb42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bb48:	4691      	mov	r9, r2
 800bb4a:	f023 0820 	bic.w	r8, r3, #32
 800bb4e:	bfbc      	itt	lt
 800bb50:	4632      	movlt	r2, r6
 800bb52:	4616      	movlt	r6, r2
 800bb54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bb58:	d005      	beq.n	800bb66 <__cvt+0x42>
 800bb5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bb5e:	d100      	bne.n	800bb62 <__cvt+0x3e>
 800bb60:	3401      	adds	r4, #1
 800bb62:	2102      	movs	r1, #2
 800bb64:	e000      	b.n	800bb68 <__cvt+0x44>
 800bb66:	2103      	movs	r1, #3
 800bb68:	ab03      	add	r3, sp, #12
 800bb6a:	9301      	str	r3, [sp, #4]
 800bb6c:	ab02      	add	r3, sp, #8
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	ec47 6b10 	vmov	d0, r6, r7
 800bb74:	4653      	mov	r3, sl
 800bb76:	4622      	mov	r2, r4
 800bb78:	f000 fe5a 	bl	800c830 <_dtoa_r>
 800bb7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bb80:	4605      	mov	r5, r0
 800bb82:	d119      	bne.n	800bbb8 <__cvt+0x94>
 800bb84:	f019 0f01 	tst.w	r9, #1
 800bb88:	d00e      	beq.n	800bba8 <__cvt+0x84>
 800bb8a:	eb00 0904 	add.w	r9, r0, r4
 800bb8e:	2200      	movs	r2, #0
 800bb90:	2300      	movs	r3, #0
 800bb92:	4630      	mov	r0, r6
 800bb94:	4639      	mov	r1, r7
 800bb96:	f7f4 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb9a:	b108      	cbz	r0, 800bba0 <__cvt+0x7c>
 800bb9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bba0:	2230      	movs	r2, #48	@ 0x30
 800bba2:	9b03      	ldr	r3, [sp, #12]
 800bba4:	454b      	cmp	r3, r9
 800bba6:	d31e      	bcc.n	800bbe6 <__cvt+0xc2>
 800bba8:	9b03      	ldr	r3, [sp, #12]
 800bbaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbac:	1b5b      	subs	r3, r3, r5
 800bbae:	4628      	mov	r0, r5
 800bbb0:	6013      	str	r3, [r2, #0]
 800bbb2:	b004      	add	sp, #16
 800bbb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bbbc:	eb00 0904 	add.w	r9, r0, r4
 800bbc0:	d1e5      	bne.n	800bb8e <__cvt+0x6a>
 800bbc2:	7803      	ldrb	r3, [r0, #0]
 800bbc4:	2b30      	cmp	r3, #48	@ 0x30
 800bbc6:	d10a      	bne.n	800bbde <__cvt+0xba>
 800bbc8:	2200      	movs	r2, #0
 800bbca:	2300      	movs	r3, #0
 800bbcc:	4630      	mov	r0, r6
 800bbce:	4639      	mov	r1, r7
 800bbd0:	f7f4 ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbd4:	b918      	cbnz	r0, 800bbde <__cvt+0xba>
 800bbd6:	f1c4 0401 	rsb	r4, r4, #1
 800bbda:	f8ca 4000 	str.w	r4, [sl]
 800bbde:	f8da 3000 	ldr.w	r3, [sl]
 800bbe2:	4499      	add	r9, r3
 800bbe4:	e7d3      	b.n	800bb8e <__cvt+0x6a>
 800bbe6:	1c59      	adds	r1, r3, #1
 800bbe8:	9103      	str	r1, [sp, #12]
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	e7d9      	b.n	800bba2 <__cvt+0x7e>

0800bbee <__exponent>:
 800bbee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbf0:	2900      	cmp	r1, #0
 800bbf2:	bfba      	itte	lt
 800bbf4:	4249      	neglt	r1, r1
 800bbf6:	232d      	movlt	r3, #45	@ 0x2d
 800bbf8:	232b      	movge	r3, #43	@ 0x2b
 800bbfa:	2909      	cmp	r1, #9
 800bbfc:	7002      	strb	r2, [r0, #0]
 800bbfe:	7043      	strb	r3, [r0, #1]
 800bc00:	dd29      	ble.n	800bc56 <__exponent+0x68>
 800bc02:	f10d 0307 	add.w	r3, sp, #7
 800bc06:	461d      	mov	r5, r3
 800bc08:	270a      	movs	r7, #10
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	fbb1 f6f7 	udiv	r6, r1, r7
 800bc10:	fb07 1416 	mls	r4, r7, r6, r1
 800bc14:	3430      	adds	r4, #48	@ 0x30
 800bc16:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	2c63      	cmp	r4, #99	@ 0x63
 800bc1e:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc22:	4631      	mov	r1, r6
 800bc24:	dcf1      	bgt.n	800bc0a <__exponent+0x1c>
 800bc26:	3130      	adds	r1, #48	@ 0x30
 800bc28:	1e94      	subs	r4, r2, #2
 800bc2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bc2e:	1c41      	adds	r1, r0, #1
 800bc30:	4623      	mov	r3, r4
 800bc32:	42ab      	cmp	r3, r5
 800bc34:	d30a      	bcc.n	800bc4c <__exponent+0x5e>
 800bc36:	f10d 0309 	add.w	r3, sp, #9
 800bc3a:	1a9b      	subs	r3, r3, r2
 800bc3c:	42ac      	cmp	r4, r5
 800bc3e:	bf88      	it	hi
 800bc40:	2300      	movhi	r3, #0
 800bc42:	3302      	adds	r3, #2
 800bc44:	4403      	add	r3, r0
 800bc46:	1a18      	subs	r0, r3, r0
 800bc48:	b003      	add	sp, #12
 800bc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bc50:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bc54:	e7ed      	b.n	800bc32 <__exponent+0x44>
 800bc56:	2330      	movs	r3, #48	@ 0x30
 800bc58:	3130      	adds	r1, #48	@ 0x30
 800bc5a:	7083      	strb	r3, [r0, #2]
 800bc5c:	70c1      	strb	r1, [r0, #3]
 800bc5e:	1d03      	adds	r3, r0, #4
 800bc60:	e7f1      	b.n	800bc46 <__exponent+0x58>
	...

0800bc64 <_printf_float>:
 800bc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc68:	b08d      	sub	sp, #52	@ 0x34
 800bc6a:	460c      	mov	r4, r1
 800bc6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bc70:	4616      	mov	r6, r2
 800bc72:	461f      	mov	r7, r3
 800bc74:	4605      	mov	r5, r0
 800bc76:	f000 fccb 	bl	800c610 <_localeconv_r>
 800bc7a:	6803      	ldr	r3, [r0, #0]
 800bc7c:	9304      	str	r3, [sp, #16]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7f4 faf6 	bl	8000270 <strlen>
 800bc84:	2300      	movs	r3, #0
 800bc86:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc88:	f8d8 3000 	ldr.w	r3, [r8]
 800bc8c:	9005      	str	r0, [sp, #20]
 800bc8e:	3307      	adds	r3, #7
 800bc90:	f023 0307 	bic.w	r3, r3, #7
 800bc94:	f103 0208 	add.w	r2, r3, #8
 800bc98:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bc9c:	f8d4 b000 	ldr.w	fp, [r4]
 800bca0:	f8c8 2000 	str.w	r2, [r8]
 800bca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bca8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bcac:	9307      	str	r3, [sp, #28]
 800bcae:	f8cd 8018 	str.w	r8, [sp, #24]
 800bcb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bcb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcba:	4b9c      	ldr	r3, [pc, #624]	@ (800bf2c <_printf_float+0x2c8>)
 800bcbc:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc0:	f7f4 ff34 	bl	8000b2c <__aeabi_dcmpun>
 800bcc4:	bb70      	cbnz	r0, 800bd24 <_printf_float+0xc0>
 800bcc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcca:	4b98      	ldr	r3, [pc, #608]	@ (800bf2c <_printf_float+0x2c8>)
 800bccc:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd0:	f7f4 ff0e 	bl	8000af0 <__aeabi_dcmple>
 800bcd4:	bb30      	cbnz	r0, 800bd24 <_printf_float+0xc0>
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4649      	mov	r1, r9
 800bcde:	f7f4 fefd 	bl	8000adc <__aeabi_dcmplt>
 800bce2:	b110      	cbz	r0, 800bcea <_printf_float+0x86>
 800bce4:	232d      	movs	r3, #45	@ 0x2d
 800bce6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcea:	4a91      	ldr	r2, [pc, #580]	@ (800bf30 <_printf_float+0x2cc>)
 800bcec:	4b91      	ldr	r3, [pc, #580]	@ (800bf34 <_printf_float+0x2d0>)
 800bcee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bcf2:	bf8c      	ite	hi
 800bcf4:	4690      	movhi	r8, r2
 800bcf6:	4698      	movls	r8, r3
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	6123      	str	r3, [r4, #16]
 800bcfc:	f02b 0304 	bic.w	r3, fp, #4
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	f04f 0900 	mov.w	r9, #0
 800bd06:	9700      	str	r7, [sp, #0]
 800bd08:	4633      	mov	r3, r6
 800bd0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f000 f9d2 	bl	800c0b8 <_printf_common>
 800bd14:	3001      	adds	r0, #1
 800bd16:	f040 808d 	bne.w	800be34 <_printf_float+0x1d0>
 800bd1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1e:	b00d      	add	sp, #52	@ 0x34
 800bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd24:	4642      	mov	r2, r8
 800bd26:	464b      	mov	r3, r9
 800bd28:	4640      	mov	r0, r8
 800bd2a:	4649      	mov	r1, r9
 800bd2c:	f7f4 fefe 	bl	8000b2c <__aeabi_dcmpun>
 800bd30:	b140      	cbz	r0, 800bd44 <_printf_float+0xe0>
 800bd32:	464b      	mov	r3, r9
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	bfbc      	itt	lt
 800bd38:	232d      	movlt	r3, #45	@ 0x2d
 800bd3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bd3e:	4a7e      	ldr	r2, [pc, #504]	@ (800bf38 <_printf_float+0x2d4>)
 800bd40:	4b7e      	ldr	r3, [pc, #504]	@ (800bf3c <_printf_float+0x2d8>)
 800bd42:	e7d4      	b.n	800bcee <_printf_float+0x8a>
 800bd44:	6863      	ldr	r3, [r4, #4]
 800bd46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bd4a:	9206      	str	r2, [sp, #24]
 800bd4c:	1c5a      	adds	r2, r3, #1
 800bd4e:	d13b      	bne.n	800bdc8 <_printf_float+0x164>
 800bd50:	2306      	movs	r3, #6
 800bd52:	6063      	str	r3, [r4, #4]
 800bd54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bd58:	2300      	movs	r3, #0
 800bd5a:	6022      	str	r2, [r4, #0]
 800bd5c:	9303      	str	r3, [sp, #12]
 800bd5e:	ab0a      	add	r3, sp, #40	@ 0x28
 800bd60:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bd64:	ab09      	add	r3, sp, #36	@ 0x24
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	6861      	ldr	r1, [r4, #4]
 800bd6a:	ec49 8b10 	vmov	d0, r8, r9
 800bd6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bd72:	4628      	mov	r0, r5
 800bd74:	f7ff fed6 	bl	800bb24 <__cvt>
 800bd78:	9b06      	ldr	r3, [sp, #24]
 800bd7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd7c:	2b47      	cmp	r3, #71	@ 0x47
 800bd7e:	4680      	mov	r8, r0
 800bd80:	d129      	bne.n	800bdd6 <_printf_float+0x172>
 800bd82:	1cc8      	adds	r0, r1, #3
 800bd84:	db02      	blt.n	800bd8c <_printf_float+0x128>
 800bd86:	6863      	ldr	r3, [r4, #4]
 800bd88:	4299      	cmp	r1, r3
 800bd8a:	dd41      	ble.n	800be10 <_printf_float+0x1ac>
 800bd8c:	f1aa 0a02 	sub.w	sl, sl, #2
 800bd90:	fa5f fa8a 	uxtb.w	sl, sl
 800bd94:	3901      	subs	r1, #1
 800bd96:	4652      	mov	r2, sl
 800bd98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bd9c:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd9e:	f7ff ff26 	bl	800bbee <__exponent>
 800bda2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bda4:	1813      	adds	r3, r2, r0
 800bda6:	2a01      	cmp	r2, #1
 800bda8:	4681      	mov	r9, r0
 800bdaa:	6123      	str	r3, [r4, #16]
 800bdac:	dc02      	bgt.n	800bdb4 <_printf_float+0x150>
 800bdae:	6822      	ldr	r2, [r4, #0]
 800bdb0:	07d2      	lsls	r2, r2, #31
 800bdb2:	d501      	bpl.n	800bdb8 <_printf_float+0x154>
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	6123      	str	r3, [r4, #16]
 800bdb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d0a2      	beq.n	800bd06 <_printf_float+0xa2>
 800bdc0:	232d      	movs	r3, #45	@ 0x2d
 800bdc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdc6:	e79e      	b.n	800bd06 <_printf_float+0xa2>
 800bdc8:	9a06      	ldr	r2, [sp, #24]
 800bdca:	2a47      	cmp	r2, #71	@ 0x47
 800bdcc:	d1c2      	bne.n	800bd54 <_printf_float+0xf0>
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1c0      	bne.n	800bd54 <_printf_float+0xf0>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e7bd      	b.n	800bd52 <_printf_float+0xee>
 800bdd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bdda:	d9db      	bls.n	800bd94 <_printf_float+0x130>
 800bddc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bde0:	d118      	bne.n	800be14 <_printf_float+0x1b0>
 800bde2:	2900      	cmp	r1, #0
 800bde4:	6863      	ldr	r3, [r4, #4]
 800bde6:	dd0b      	ble.n	800be00 <_printf_float+0x19c>
 800bde8:	6121      	str	r1, [r4, #16]
 800bdea:	b913      	cbnz	r3, 800bdf2 <_printf_float+0x18e>
 800bdec:	6822      	ldr	r2, [r4, #0]
 800bdee:	07d0      	lsls	r0, r2, #31
 800bdf0:	d502      	bpl.n	800bdf8 <_printf_float+0x194>
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	440b      	add	r3, r1
 800bdf6:	6123      	str	r3, [r4, #16]
 800bdf8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bdfa:	f04f 0900 	mov.w	r9, #0
 800bdfe:	e7db      	b.n	800bdb8 <_printf_float+0x154>
 800be00:	b913      	cbnz	r3, 800be08 <_printf_float+0x1a4>
 800be02:	6822      	ldr	r2, [r4, #0]
 800be04:	07d2      	lsls	r2, r2, #31
 800be06:	d501      	bpl.n	800be0c <_printf_float+0x1a8>
 800be08:	3302      	adds	r3, #2
 800be0a:	e7f4      	b.n	800bdf6 <_printf_float+0x192>
 800be0c:	2301      	movs	r3, #1
 800be0e:	e7f2      	b.n	800bdf6 <_printf_float+0x192>
 800be10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800be14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be16:	4299      	cmp	r1, r3
 800be18:	db05      	blt.n	800be26 <_printf_float+0x1c2>
 800be1a:	6823      	ldr	r3, [r4, #0]
 800be1c:	6121      	str	r1, [r4, #16]
 800be1e:	07d8      	lsls	r0, r3, #31
 800be20:	d5ea      	bpl.n	800bdf8 <_printf_float+0x194>
 800be22:	1c4b      	adds	r3, r1, #1
 800be24:	e7e7      	b.n	800bdf6 <_printf_float+0x192>
 800be26:	2900      	cmp	r1, #0
 800be28:	bfd4      	ite	le
 800be2a:	f1c1 0202 	rsble	r2, r1, #2
 800be2e:	2201      	movgt	r2, #1
 800be30:	4413      	add	r3, r2
 800be32:	e7e0      	b.n	800bdf6 <_printf_float+0x192>
 800be34:	6823      	ldr	r3, [r4, #0]
 800be36:	055a      	lsls	r2, r3, #21
 800be38:	d407      	bmi.n	800be4a <_printf_float+0x1e6>
 800be3a:	6923      	ldr	r3, [r4, #16]
 800be3c:	4642      	mov	r2, r8
 800be3e:	4631      	mov	r1, r6
 800be40:	4628      	mov	r0, r5
 800be42:	47b8      	blx	r7
 800be44:	3001      	adds	r0, #1
 800be46:	d12b      	bne.n	800bea0 <_printf_float+0x23c>
 800be48:	e767      	b.n	800bd1a <_printf_float+0xb6>
 800be4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800be4e:	f240 80dd 	bls.w	800c00c <_printf_float+0x3a8>
 800be52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be56:	2200      	movs	r2, #0
 800be58:	2300      	movs	r3, #0
 800be5a:	f7f4 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 800be5e:	2800      	cmp	r0, #0
 800be60:	d033      	beq.n	800beca <_printf_float+0x266>
 800be62:	4a37      	ldr	r2, [pc, #220]	@ (800bf40 <_printf_float+0x2dc>)
 800be64:	2301      	movs	r3, #1
 800be66:	4631      	mov	r1, r6
 800be68:	4628      	mov	r0, r5
 800be6a:	47b8      	blx	r7
 800be6c:	3001      	adds	r0, #1
 800be6e:	f43f af54 	beq.w	800bd1a <_printf_float+0xb6>
 800be72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800be76:	4543      	cmp	r3, r8
 800be78:	db02      	blt.n	800be80 <_printf_float+0x21c>
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	07d8      	lsls	r0, r3, #31
 800be7e:	d50f      	bpl.n	800bea0 <_printf_float+0x23c>
 800be80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be84:	4631      	mov	r1, r6
 800be86:	4628      	mov	r0, r5
 800be88:	47b8      	blx	r7
 800be8a:	3001      	adds	r0, #1
 800be8c:	f43f af45 	beq.w	800bd1a <_printf_float+0xb6>
 800be90:	f04f 0900 	mov.w	r9, #0
 800be94:	f108 38ff 	add.w	r8, r8, #4294967295
 800be98:	f104 0a1a 	add.w	sl, r4, #26
 800be9c:	45c8      	cmp	r8, r9
 800be9e:	dc09      	bgt.n	800beb4 <_printf_float+0x250>
 800bea0:	6823      	ldr	r3, [r4, #0]
 800bea2:	079b      	lsls	r3, r3, #30
 800bea4:	f100 8103 	bmi.w	800c0ae <_printf_float+0x44a>
 800bea8:	68e0      	ldr	r0, [r4, #12]
 800beaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800beac:	4298      	cmp	r0, r3
 800beae:	bfb8      	it	lt
 800beb0:	4618      	movlt	r0, r3
 800beb2:	e734      	b.n	800bd1e <_printf_float+0xba>
 800beb4:	2301      	movs	r3, #1
 800beb6:	4652      	mov	r2, sl
 800beb8:	4631      	mov	r1, r6
 800beba:	4628      	mov	r0, r5
 800bebc:	47b8      	blx	r7
 800bebe:	3001      	adds	r0, #1
 800bec0:	f43f af2b 	beq.w	800bd1a <_printf_float+0xb6>
 800bec4:	f109 0901 	add.w	r9, r9, #1
 800bec8:	e7e8      	b.n	800be9c <_printf_float+0x238>
 800beca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800becc:	2b00      	cmp	r3, #0
 800bece:	dc39      	bgt.n	800bf44 <_printf_float+0x2e0>
 800bed0:	4a1b      	ldr	r2, [pc, #108]	@ (800bf40 <_printf_float+0x2dc>)
 800bed2:	2301      	movs	r3, #1
 800bed4:	4631      	mov	r1, r6
 800bed6:	4628      	mov	r0, r5
 800bed8:	47b8      	blx	r7
 800beda:	3001      	adds	r0, #1
 800bedc:	f43f af1d 	beq.w	800bd1a <_printf_float+0xb6>
 800bee0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bee4:	ea59 0303 	orrs.w	r3, r9, r3
 800bee8:	d102      	bne.n	800bef0 <_printf_float+0x28c>
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	07d9      	lsls	r1, r3, #31
 800beee:	d5d7      	bpl.n	800bea0 <_printf_float+0x23c>
 800bef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bef4:	4631      	mov	r1, r6
 800bef6:	4628      	mov	r0, r5
 800bef8:	47b8      	blx	r7
 800befa:	3001      	adds	r0, #1
 800befc:	f43f af0d 	beq.w	800bd1a <_printf_float+0xb6>
 800bf00:	f04f 0a00 	mov.w	sl, #0
 800bf04:	f104 0b1a 	add.w	fp, r4, #26
 800bf08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf0a:	425b      	negs	r3, r3
 800bf0c:	4553      	cmp	r3, sl
 800bf0e:	dc01      	bgt.n	800bf14 <_printf_float+0x2b0>
 800bf10:	464b      	mov	r3, r9
 800bf12:	e793      	b.n	800be3c <_printf_float+0x1d8>
 800bf14:	2301      	movs	r3, #1
 800bf16:	465a      	mov	r2, fp
 800bf18:	4631      	mov	r1, r6
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	47b8      	blx	r7
 800bf1e:	3001      	adds	r0, #1
 800bf20:	f43f aefb 	beq.w	800bd1a <_printf_float+0xb6>
 800bf24:	f10a 0a01 	add.w	sl, sl, #1
 800bf28:	e7ee      	b.n	800bf08 <_printf_float+0x2a4>
 800bf2a:	bf00      	nop
 800bf2c:	7fefffff 	.word	0x7fefffff
 800bf30:	0800e350 	.word	0x0800e350
 800bf34:	0800e34c 	.word	0x0800e34c
 800bf38:	0800e358 	.word	0x0800e358
 800bf3c:	0800e354 	.word	0x0800e354
 800bf40:	0800e35c 	.word	0x0800e35c
 800bf44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bf4a:	4553      	cmp	r3, sl
 800bf4c:	bfa8      	it	ge
 800bf4e:	4653      	movge	r3, sl
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	4699      	mov	r9, r3
 800bf54:	dc36      	bgt.n	800bfc4 <_printf_float+0x360>
 800bf56:	f04f 0b00 	mov.w	fp, #0
 800bf5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf5e:	f104 021a 	add.w	r2, r4, #26
 800bf62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf64:	9306      	str	r3, [sp, #24]
 800bf66:	eba3 0309 	sub.w	r3, r3, r9
 800bf6a:	455b      	cmp	r3, fp
 800bf6c:	dc31      	bgt.n	800bfd2 <_printf_float+0x36e>
 800bf6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf70:	459a      	cmp	sl, r3
 800bf72:	dc3a      	bgt.n	800bfea <_printf_float+0x386>
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	07da      	lsls	r2, r3, #31
 800bf78:	d437      	bmi.n	800bfea <_printf_float+0x386>
 800bf7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf7c:	ebaa 0903 	sub.w	r9, sl, r3
 800bf80:	9b06      	ldr	r3, [sp, #24]
 800bf82:	ebaa 0303 	sub.w	r3, sl, r3
 800bf86:	4599      	cmp	r9, r3
 800bf88:	bfa8      	it	ge
 800bf8a:	4699      	movge	r9, r3
 800bf8c:	f1b9 0f00 	cmp.w	r9, #0
 800bf90:	dc33      	bgt.n	800bffa <_printf_float+0x396>
 800bf92:	f04f 0800 	mov.w	r8, #0
 800bf96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf9a:	f104 0b1a 	add.w	fp, r4, #26
 800bf9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfa0:	ebaa 0303 	sub.w	r3, sl, r3
 800bfa4:	eba3 0309 	sub.w	r3, r3, r9
 800bfa8:	4543      	cmp	r3, r8
 800bfaa:	f77f af79 	ble.w	800bea0 <_printf_float+0x23c>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	465a      	mov	r2, fp
 800bfb2:	4631      	mov	r1, r6
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	47b8      	blx	r7
 800bfb8:	3001      	adds	r0, #1
 800bfba:	f43f aeae 	beq.w	800bd1a <_printf_float+0xb6>
 800bfbe:	f108 0801 	add.w	r8, r8, #1
 800bfc2:	e7ec      	b.n	800bf9e <_printf_float+0x33a>
 800bfc4:	4642      	mov	r2, r8
 800bfc6:	4631      	mov	r1, r6
 800bfc8:	4628      	mov	r0, r5
 800bfca:	47b8      	blx	r7
 800bfcc:	3001      	adds	r0, #1
 800bfce:	d1c2      	bne.n	800bf56 <_printf_float+0x2f2>
 800bfd0:	e6a3      	b.n	800bd1a <_printf_float+0xb6>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	4631      	mov	r1, r6
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	9206      	str	r2, [sp, #24]
 800bfda:	47b8      	blx	r7
 800bfdc:	3001      	adds	r0, #1
 800bfde:	f43f ae9c 	beq.w	800bd1a <_printf_float+0xb6>
 800bfe2:	9a06      	ldr	r2, [sp, #24]
 800bfe4:	f10b 0b01 	add.w	fp, fp, #1
 800bfe8:	e7bb      	b.n	800bf62 <_printf_float+0x2fe>
 800bfea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfee:	4631      	mov	r1, r6
 800bff0:	4628      	mov	r0, r5
 800bff2:	47b8      	blx	r7
 800bff4:	3001      	adds	r0, #1
 800bff6:	d1c0      	bne.n	800bf7a <_printf_float+0x316>
 800bff8:	e68f      	b.n	800bd1a <_printf_float+0xb6>
 800bffa:	9a06      	ldr	r2, [sp, #24]
 800bffc:	464b      	mov	r3, r9
 800bffe:	4442      	add	r2, r8
 800c000:	4631      	mov	r1, r6
 800c002:	4628      	mov	r0, r5
 800c004:	47b8      	blx	r7
 800c006:	3001      	adds	r0, #1
 800c008:	d1c3      	bne.n	800bf92 <_printf_float+0x32e>
 800c00a:	e686      	b.n	800bd1a <_printf_float+0xb6>
 800c00c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c010:	f1ba 0f01 	cmp.w	sl, #1
 800c014:	dc01      	bgt.n	800c01a <_printf_float+0x3b6>
 800c016:	07db      	lsls	r3, r3, #31
 800c018:	d536      	bpl.n	800c088 <_printf_float+0x424>
 800c01a:	2301      	movs	r3, #1
 800c01c:	4642      	mov	r2, r8
 800c01e:	4631      	mov	r1, r6
 800c020:	4628      	mov	r0, r5
 800c022:	47b8      	blx	r7
 800c024:	3001      	adds	r0, #1
 800c026:	f43f ae78 	beq.w	800bd1a <_printf_float+0xb6>
 800c02a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c02e:	4631      	mov	r1, r6
 800c030:	4628      	mov	r0, r5
 800c032:	47b8      	blx	r7
 800c034:	3001      	adds	r0, #1
 800c036:	f43f ae70 	beq.w	800bd1a <_printf_float+0xb6>
 800c03a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c03e:	2200      	movs	r2, #0
 800c040:	2300      	movs	r3, #0
 800c042:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c046:	f7f4 fd3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c04a:	b9c0      	cbnz	r0, 800c07e <_printf_float+0x41a>
 800c04c:	4653      	mov	r3, sl
 800c04e:	f108 0201 	add.w	r2, r8, #1
 800c052:	4631      	mov	r1, r6
 800c054:	4628      	mov	r0, r5
 800c056:	47b8      	blx	r7
 800c058:	3001      	adds	r0, #1
 800c05a:	d10c      	bne.n	800c076 <_printf_float+0x412>
 800c05c:	e65d      	b.n	800bd1a <_printf_float+0xb6>
 800c05e:	2301      	movs	r3, #1
 800c060:	465a      	mov	r2, fp
 800c062:	4631      	mov	r1, r6
 800c064:	4628      	mov	r0, r5
 800c066:	47b8      	blx	r7
 800c068:	3001      	adds	r0, #1
 800c06a:	f43f ae56 	beq.w	800bd1a <_printf_float+0xb6>
 800c06e:	f108 0801 	add.w	r8, r8, #1
 800c072:	45d0      	cmp	r8, sl
 800c074:	dbf3      	blt.n	800c05e <_printf_float+0x3fa>
 800c076:	464b      	mov	r3, r9
 800c078:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c07c:	e6df      	b.n	800be3e <_printf_float+0x1da>
 800c07e:	f04f 0800 	mov.w	r8, #0
 800c082:	f104 0b1a 	add.w	fp, r4, #26
 800c086:	e7f4      	b.n	800c072 <_printf_float+0x40e>
 800c088:	2301      	movs	r3, #1
 800c08a:	4642      	mov	r2, r8
 800c08c:	e7e1      	b.n	800c052 <_printf_float+0x3ee>
 800c08e:	2301      	movs	r3, #1
 800c090:	464a      	mov	r2, r9
 800c092:	4631      	mov	r1, r6
 800c094:	4628      	mov	r0, r5
 800c096:	47b8      	blx	r7
 800c098:	3001      	adds	r0, #1
 800c09a:	f43f ae3e 	beq.w	800bd1a <_printf_float+0xb6>
 800c09e:	f108 0801 	add.w	r8, r8, #1
 800c0a2:	68e3      	ldr	r3, [r4, #12]
 800c0a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c0a6:	1a5b      	subs	r3, r3, r1
 800c0a8:	4543      	cmp	r3, r8
 800c0aa:	dcf0      	bgt.n	800c08e <_printf_float+0x42a>
 800c0ac:	e6fc      	b.n	800bea8 <_printf_float+0x244>
 800c0ae:	f04f 0800 	mov.w	r8, #0
 800c0b2:	f104 0919 	add.w	r9, r4, #25
 800c0b6:	e7f4      	b.n	800c0a2 <_printf_float+0x43e>

0800c0b8 <_printf_common>:
 800c0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0bc:	4616      	mov	r6, r2
 800c0be:	4698      	mov	r8, r3
 800c0c0:	688a      	ldr	r2, [r1, #8]
 800c0c2:	690b      	ldr	r3, [r1, #16]
 800c0c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	bfb8      	it	lt
 800c0cc:	4613      	movlt	r3, r2
 800c0ce:	6033      	str	r3, [r6, #0]
 800c0d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c0d4:	4607      	mov	r7, r0
 800c0d6:	460c      	mov	r4, r1
 800c0d8:	b10a      	cbz	r2, 800c0de <_printf_common+0x26>
 800c0da:	3301      	adds	r3, #1
 800c0dc:	6033      	str	r3, [r6, #0]
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	0699      	lsls	r1, r3, #26
 800c0e2:	bf42      	ittt	mi
 800c0e4:	6833      	ldrmi	r3, [r6, #0]
 800c0e6:	3302      	addmi	r3, #2
 800c0e8:	6033      	strmi	r3, [r6, #0]
 800c0ea:	6825      	ldr	r5, [r4, #0]
 800c0ec:	f015 0506 	ands.w	r5, r5, #6
 800c0f0:	d106      	bne.n	800c100 <_printf_common+0x48>
 800c0f2:	f104 0a19 	add.w	sl, r4, #25
 800c0f6:	68e3      	ldr	r3, [r4, #12]
 800c0f8:	6832      	ldr	r2, [r6, #0]
 800c0fa:	1a9b      	subs	r3, r3, r2
 800c0fc:	42ab      	cmp	r3, r5
 800c0fe:	dc26      	bgt.n	800c14e <_printf_common+0x96>
 800c100:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c104:	6822      	ldr	r2, [r4, #0]
 800c106:	3b00      	subs	r3, #0
 800c108:	bf18      	it	ne
 800c10a:	2301      	movne	r3, #1
 800c10c:	0692      	lsls	r2, r2, #26
 800c10e:	d42b      	bmi.n	800c168 <_printf_common+0xb0>
 800c110:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c114:	4641      	mov	r1, r8
 800c116:	4638      	mov	r0, r7
 800c118:	47c8      	blx	r9
 800c11a:	3001      	adds	r0, #1
 800c11c:	d01e      	beq.n	800c15c <_printf_common+0xa4>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	6922      	ldr	r2, [r4, #16]
 800c122:	f003 0306 	and.w	r3, r3, #6
 800c126:	2b04      	cmp	r3, #4
 800c128:	bf02      	ittt	eq
 800c12a:	68e5      	ldreq	r5, [r4, #12]
 800c12c:	6833      	ldreq	r3, [r6, #0]
 800c12e:	1aed      	subeq	r5, r5, r3
 800c130:	68a3      	ldr	r3, [r4, #8]
 800c132:	bf0c      	ite	eq
 800c134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c138:	2500      	movne	r5, #0
 800c13a:	4293      	cmp	r3, r2
 800c13c:	bfc4      	itt	gt
 800c13e:	1a9b      	subgt	r3, r3, r2
 800c140:	18ed      	addgt	r5, r5, r3
 800c142:	2600      	movs	r6, #0
 800c144:	341a      	adds	r4, #26
 800c146:	42b5      	cmp	r5, r6
 800c148:	d11a      	bne.n	800c180 <_printf_common+0xc8>
 800c14a:	2000      	movs	r0, #0
 800c14c:	e008      	b.n	800c160 <_printf_common+0xa8>
 800c14e:	2301      	movs	r3, #1
 800c150:	4652      	mov	r2, sl
 800c152:	4641      	mov	r1, r8
 800c154:	4638      	mov	r0, r7
 800c156:	47c8      	blx	r9
 800c158:	3001      	adds	r0, #1
 800c15a:	d103      	bne.n	800c164 <_printf_common+0xac>
 800c15c:	f04f 30ff 	mov.w	r0, #4294967295
 800c160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c164:	3501      	adds	r5, #1
 800c166:	e7c6      	b.n	800c0f6 <_printf_common+0x3e>
 800c168:	18e1      	adds	r1, r4, r3
 800c16a:	1c5a      	adds	r2, r3, #1
 800c16c:	2030      	movs	r0, #48	@ 0x30
 800c16e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c172:	4422      	add	r2, r4
 800c174:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c178:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c17c:	3302      	adds	r3, #2
 800c17e:	e7c7      	b.n	800c110 <_printf_common+0x58>
 800c180:	2301      	movs	r3, #1
 800c182:	4622      	mov	r2, r4
 800c184:	4641      	mov	r1, r8
 800c186:	4638      	mov	r0, r7
 800c188:	47c8      	blx	r9
 800c18a:	3001      	adds	r0, #1
 800c18c:	d0e6      	beq.n	800c15c <_printf_common+0xa4>
 800c18e:	3601      	adds	r6, #1
 800c190:	e7d9      	b.n	800c146 <_printf_common+0x8e>
	...

0800c194 <_printf_i>:
 800c194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c198:	7e0f      	ldrb	r7, [r1, #24]
 800c19a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c19c:	2f78      	cmp	r7, #120	@ 0x78
 800c19e:	4691      	mov	r9, r2
 800c1a0:	4680      	mov	r8, r0
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	469a      	mov	sl, r3
 800c1a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c1aa:	d807      	bhi.n	800c1bc <_printf_i+0x28>
 800c1ac:	2f62      	cmp	r7, #98	@ 0x62
 800c1ae:	d80a      	bhi.n	800c1c6 <_printf_i+0x32>
 800c1b0:	2f00      	cmp	r7, #0
 800c1b2:	f000 80d1 	beq.w	800c358 <_printf_i+0x1c4>
 800c1b6:	2f58      	cmp	r7, #88	@ 0x58
 800c1b8:	f000 80b8 	beq.w	800c32c <_printf_i+0x198>
 800c1bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c1c4:	e03a      	b.n	800c23c <_printf_i+0xa8>
 800c1c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c1ca:	2b15      	cmp	r3, #21
 800c1cc:	d8f6      	bhi.n	800c1bc <_printf_i+0x28>
 800c1ce:	a101      	add	r1, pc, #4	@ (adr r1, 800c1d4 <_printf_i+0x40>)
 800c1d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1d4:	0800c22d 	.word	0x0800c22d
 800c1d8:	0800c241 	.word	0x0800c241
 800c1dc:	0800c1bd 	.word	0x0800c1bd
 800c1e0:	0800c1bd 	.word	0x0800c1bd
 800c1e4:	0800c1bd 	.word	0x0800c1bd
 800c1e8:	0800c1bd 	.word	0x0800c1bd
 800c1ec:	0800c241 	.word	0x0800c241
 800c1f0:	0800c1bd 	.word	0x0800c1bd
 800c1f4:	0800c1bd 	.word	0x0800c1bd
 800c1f8:	0800c1bd 	.word	0x0800c1bd
 800c1fc:	0800c1bd 	.word	0x0800c1bd
 800c200:	0800c33f 	.word	0x0800c33f
 800c204:	0800c26b 	.word	0x0800c26b
 800c208:	0800c2f9 	.word	0x0800c2f9
 800c20c:	0800c1bd 	.word	0x0800c1bd
 800c210:	0800c1bd 	.word	0x0800c1bd
 800c214:	0800c361 	.word	0x0800c361
 800c218:	0800c1bd 	.word	0x0800c1bd
 800c21c:	0800c26b 	.word	0x0800c26b
 800c220:	0800c1bd 	.word	0x0800c1bd
 800c224:	0800c1bd 	.word	0x0800c1bd
 800c228:	0800c301 	.word	0x0800c301
 800c22c:	6833      	ldr	r3, [r6, #0]
 800c22e:	1d1a      	adds	r2, r3, #4
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	6032      	str	r2, [r6, #0]
 800c234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c238:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c23c:	2301      	movs	r3, #1
 800c23e:	e09c      	b.n	800c37a <_printf_i+0x1e6>
 800c240:	6833      	ldr	r3, [r6, #0]
 800c242:	6820      	ldr	r0, [r4, #0]
 800c244:	1d19      	adds	r1, r3, #4
 800c246:	6031      	str	r1, [r6, #0]
 800c248:	0606      	lsls	r6, r0, #24
 800c24a:	d501      	bpl.n	800c250 <_printf_i+0xbc>
 800c24c:	681d      	ldr	r5, [r3, #0]
 800c24e:	e003      	b.n	800c258 <_printf_i+0xc4>
 800c250:	0645      	lsls	r5, r0, #25
 800c252:	d5fb      	bpl.n	800c24c <_printf_i+0xb8>
 800c254:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c258:	2d00      	cmp	r5, #0
 800c25a:	da03      	bge.n	800c264 <_printf_i+0xd0>
 800c25c:	232d      	movs	r3, #45	@ 0x2d
 800c25e:	426d      	negs	r5, r5
 800c260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c264:	4858      	ldr	r0, [pc, #352]	@ (800c3c8 <_printf_i+0x234>)
 800c266:	230a      	movs	r3, #10
 800c268:	e011      	b.n	800c28e <_printf_i+0xfa>
 800c26a:	6821      	ldr	r1, [r4, #0]
 800c26c:	6833      	ldr	r3, [r6, #0]
 800c26e:	0608      	lsls	r0, r1, #24
 800c270:	f853 5b04 	ldr.w	r5, [r3], #4
 800c274:	d402      	bmi.n	800c27c <_printf_i+0xe8>
 800c276:	0649      	lsls	r1, r1, #25
 800c278:	bf48      	it	mi
 800c27a:	b2ad      	uxthmi	r5, r5
 800c27c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c27e:	4852      	ldr	r0, [pc, #328]	@ (800c3c8 <_printf_i+0x234>)
 800c280:	6033      	str	r3, [r6, #0]
 800c282:	bf14      	ite	ne
 800c284:	230a      	movne	r3, #10
 800c286:	2308      	moveq	r3, #8
 800c288:	2100      	movs	r1, #0
 800c28a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c28e:	6866      	ldr	r6, [r4, #4]
 800c290:	60a6      	str	r6, [r4, #8]
 800c292:	2e00      	cmp	r6, #0
 800c294:	db05      	blt.n	800c2a2 <_printf_i+0x10e>
 800c296:	6821      	ldr	r1, [r4, #0]
 800c298:	432e      	orrs	r6, r5
 800c29a:	f021 0104 	bic.w	r1, r1, #4
 800c29e:	6021      	str	r1, [r4, #0]
 800c2a0:	d04b      	beq.n	800c33a <_printf_i+0x1a6>
 800c2a2:	4616      	mov	r6, r2
 800c2a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800c2a8:	fb03 5711 	mls	r7, r3, r1, r5
 800c2ac:	5dc7      	ldrb	r7, [r0, r7]
 800c2ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c2b2:	462f      	mov	r7, r5
 800c2b4:	42bb      	cmp	r3, r7
 800c2b6:	460d      	mov	r5, r1
 800c2b8:	d9f4      	bls.n	800c2a4 <_printf_i+0x110>
 800c2ba:	2b08      	cmp	r3, #8
 800c2bc:	d10b      	bne.n	800c2d6 <_printf_i+0x142>
 800c2be:	6823      	ldr	r3, [r4, #0]
 800c2c0:	07df      	lsls	r7, r3, #31
 800c2c2:	d508      	bpl.n	800c2d6 <_printf_i+0x142>
 800c2c4:	6923      	ldr	r3, [r4, #16]
 800c2c6:	6861      	ldr	r1, [r4, #4]
 800c2c8:	4299      	cmp	r1, r3
 800c2ca:	bfde      	ittt	le
 800c2cc:	2330      	movle	r3, #48	@ 0x30
 800c2ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2d6:	1b92      	subs	r2, r2, r6
 800c2d8:	6122      	str	r2, [r4, #16]
 800c2da:	f8cd a000 	str.w	sl, [sp]
 800c2de:	464b      	mov	r3, r9
 800c2e0:	aa03      	add	r2, sp, #12
 800c2e2:	4621      	mov	r1, r4
 800c2e4:	4640      	mov	r0, r8
 800c2e6:	f7ff fee7 	bl	800c0b8 <_printf_common>
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	d14a      	bne.n	800c384 <_printf_i+0x1f0>
 800c2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f2:	b004      	add	sp, #16
 800c2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2f8:	6823      	ldr	r3, [r4, #0]
 800c2fa:	f043 0320 	orr.w	r3, r3, #32
 800c2fe:	6023      	str	r3, [r4, #0]
 800c300:	4832      	ldr	r0, [pc, #200]	@ (800c3cc <_printf_i+0x238>)
 800c302:	2778      	movs	r7, #120	@ 0x78
 800c304:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c308:	6823      	ldr	r3, [r4, #0]
 800c30a:	6831      	ldr	r1, [r6, #0]
 800c30c:	061f      	lsls	r7, r3, #24
 800c30e:	f851 5b04 	ldr.w	r5, [r1], #4
 800c312:	d402      	bmi.n	800c31a <_printf_i+0x186>
 800c314:	065f      	lsls	r7, r3, #25
 800c316:	bf48      	it	mi
 800c318:	b2ad      	uxthmi	r5, r5
 800c31a:	6031      	str	r1, [r6, #0]
 800c31c:	07d9      	lsls	r1, r3, #31
 800c31e:	bf44      	itt	mi
 800c320:	f043 0320 	orrmi.w	r3, r3, #32
 800c324:	6023      	strmi	r3, [r4, #0]
 800c326:	b11d      	cbz	r5, 800c330 <_printf_i+0x19c>
 800c328:	2310      	movs	r3, #16
 800c32a:	e7ad      	b.n	800c288 <_printf_i+0xf4>
 800c32c:	4826      	ldr	r0, [pc, #152]	@ (800c3c8 <_printf_i+0x234>)
 800c32e:	e7e9      	b.n	800c304 <_printf_i+0x170>
 800c330:	6823      	ldr	r3, [r4, #0]
 800c332:	f023 0320 	bic.w	r3, r3, #32
 800c336:	6023      	str	r3, [r4, #0]
 800c338:	e7f6      	b.n	800c328 <_printf_i+0x194>
 800c33a:	4616      	mov	r6, r2
 800c33c:	e7bd      	b.n	800c2ba <_printf_i+0x126>
 800c33e:	6833      	ldr	r3, [r6, #0]
 800c340:	6825      	ldr	r5, [r4, #0]
 800c342:	6961      	ldr	r1, [r4, #20]
 800c344:	1d18      	adds	r0, r3, #4
 800c346:	6030      	str	r0, [r6, #0]
 800c348:	062e      	lsls	r6, r5, #24
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	d501      	bpl.n	800c352 <_printf_i+0x1be>
 800c34e:	6019      	str	r1, [r3, #0]
 800c350:	e002      	b.n	800c358 <_printf_i+0x1c4>
 800c352:	0668      	lsls	r0, r5, #25
 800c354:	d5fb      	bpl.n	800c34e <_printf_i+0x1ba>
 800c356:	8019      	strh	r1, [r3, #0]
 800c358:	2300      	movs	r3, #0
 800c35a:	6123      	str	r3, [r4, #16]
 800c35c:	4616      	mov	r6, r2
 800c35e:	e7bc      	b.n	800c2da <_printf_i+0x146>
 800c360:	6833      	ldr	r3, [r6, #0]
 800c362:	1d1a      	adds	r2, r3, #4
 800c364:	6032      	str	r2, [r6, #0]
 800c366:	681e      	ldr	r6, [r3, #0]
 800c368:	6862      	ldr	r2, [r4, #4]
 800c36a:	2100      	movs	r1, #0
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7f3 ff2f 	bl	80001d0 <memchr>
 800c372:	b108      	cbz	r0, 800c378 <_printf_i+0x1e4>
 800c374:	1b80      	subs	r0, r0, r6
 800c376:	6060      	str	r0, [r4, #4]
 800c378:	6863      	ldr	r3, [r4, #4]
 800c37a:	6123      	str	r3, [r4, #16]
 800c37c:	2300      	movs	r3, #0
 800c37e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c382:	e7aa      	b.n	800c2da <_printf_i+0x146>
 800c384:	6923      	ldr	r3, [r4, #16]
 800c386:	4632      	mov	r2, r6
 800c388:	4649      	mov	r1, r9
 800c38a:	4640      	mov	r0, r8
 800c38c:	47d0      	blx	sl
 800c38e:	3001      	adds	r0, #1
 800c390:	d0ad      	beq.n	800c2ee <_printf_i+0x15a>
 800c392:	6823      	ldr	r3, [r4, #0]
 800c394:	079b      	lsls	r3, r3, #30
 800c396:	d413      	bmi.n	800c3c0 <_printf_i+0x22c>
 800c398:	68e0      	ldr	r0, [r4, #12]
 800c39a:	9b03      	ldr	r3, [sp, #12]
 800c39c:	4298      	cmp	r0, r3
 800c39e:	bfb8      	it	lt
 800c3a0:	4618      	movlt	r0, r3
 800c3a2:	e7a6      	b.n	800c2f2 <_printf_i+0x15e>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	4632      	mov	r2, r6
 800c3a8:	4649      	mov	r1, r9
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	47d0      	blx	sl
 800c3ae:	3001      	adds	r0, #1
 800c3b0:	d09d      	beq.n	800c2ee <_printf_i+0x15a>
 800c3b2:	3501      	adds	r5, #1
 800c3b4:	68e3      	ldr	r3, [r4, #12]
 800c3b6:	9903      	ldr	r1, [sp, #12]
 800c3b8:	1a5b      	subs	r3, r3, r1
 800c3ba:	42ab      	cmp	r3, r5
 800c3bc:	dcf2      	bgt.n	800c3a4 <_printf_i+0x210>
 800c3be:	e7eb      	b.n	800c398 <_printf_i+0x204>
 800c3c0:	2500      	movs	r5, #0
 800c3c2:	f104 0619 	add.w	r6, r4, #25
 800c3c6:	e7f5      	b.n	800c3b4 <_printf_i+0x220>
 800c3c8:	0800e35e 	.word	0x0800e35e
 800c3cc:	0800e36f 	.word	0x0800e36f

0800c3d0 <std>:
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	b510      	push	{r4, lr}
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	e9c0 3300 	strd	r3, r3, [r0]
 800c3da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3de:	6083      	str	r3, [r0, #8]
 800c3e0:	8181      	strh	r1, [r0, #12]
 800c3e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c3e4:	81c2      	strh	r2, [r0, #14]
 800c3e6:	6183      	str	r3, [r0, #24]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	2208      	movs	r2, #8
 800c3ec:	305c      	adds	r0, #92	@ 0x5c
 800c3ee:	f000 f906 	bl	800c5fe <memset>
 800c3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c428 <std+0x58>)
 800c3f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800c3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c42c <std+0x5c>)
 800c3f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c430 <std+0x60>)
 800c3fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c3fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c434 <std+0x64>)
 800c400:	6323      	str	r3, [r4, #48]	@ 0x30
 800c402:	4b0d      	ldr	r3, [pc, #52]	@ (800c438 <std+0x68>)
 800c404:	6224      	str	r4, [r4, #32]
 800c406:	429c      	cmp	r4, r3
 800c408:	d006      	beq.n	800c418 <std+0x48>
 800c40a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c40e:	4294      	cmp	r4, r2
 800c410:	d002      	beq.n	800c418 <std+0x48>
 800c412:	33d0      	adds	r3, #208	@ 0xd0
 800c414:	429c      	cmp	r4, r3
 800c416:	d105      	bne.n	800c424 <std+0x54>
 800c418:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c420:	f000 b97a 	b.w	800c718 <__retarget_lock_init_recursive>
 800c424:	bd10      	pop	{r4, pc}
 800c426:	bf00      	nop
 800c428:	0800c579 	.word	0x0800c579
 800c42c:	0800c59b 	.word	0x0800c59b
 800c430:	0800c5d3 	.word	0x0800c5d3
 800c434:	0800c5f7 	.word	0x0800c5f7
 800c438:	20000c8c 	.word	0x20000c8c

0800c43c <stdio_exit_handler>:
 800c43c:	4a02      	ldr	r2, [pc, #8]	@ (800c448 <stdio_exit_handler+0xc>)
 800c43e:	4903      	ldr	r1, [pc, #12]	@ (800c44c <stdio_exit_handler+0x10>)
 800c440:	4803      	ldr	r0, [pc, #12]	@ (800c450 <stdio_exit_handler+0x14>)
 800c442:	f000 b869 	b.w	800c518 <_fwalk_sglue>
 800c446:	bf00      	nop
 800c448:	2000002c 	.word	0x2000002c
 800c44c:	0800dee5 	.word	0x0800dee5
 800c450:	2000003c 	.word	0x2000003c

0800c454 <cleanup_stdio>:
 800c454:	6841      	ldr	r1, [r0, #4]
 800c456:	4b0c      	ldr	r3, [pc, #48]	@ (800c488 <cleanup_stdio+0x34>)
 800c458:	4299      	cmp	r1, r3
 800c45a:	b510      	push	{r4, lr}
 800c45c:	4604      	mov	r4, r0
 800c45e:	d001      	beq.n	800c464 <cleanup_stdio+0x10>
 800c460:	f001 fd40 	bl	800dee4 <_fflush_r>
 800c464:	68a1      	ldr	r1, [r4, #8]
 800c466:	4b09      	ldr	r3, [pc, #36]	@ (800c48c <cleanup_stdio+0x38>)
 800c468:	4299      	cmp	r1, r3
 800c46a:	d002      	beq.n	800c472 <cleanup_stdio+0x1e>
 800c46c:	4620      	mov	r0, r4
 800c46e:	f001 fd39 	bl	800dee4 <_fflush_r>
 800c472:	68e1      	ldr	r1, [r4, #12]
 800c474:	4b06      	ldr	r3, [pc, #24]	@ (800c490 <cleanup_stdio+0x3c>)
 800c476:	4299      	cmp	r1, r3
 800c478:	d004      	beq.n	800c484 <cleanup_stdio+0x30>
 800c47a:	4620      	mov	r0, r4
 800c47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c480:	f001 bd30 	b.w	800dee4 <_fflush_r>
 800c484:	bd10      	pop	{r4, pc}
 800c486:	bf00      	nop
 800c488:	20000c8c 	.word	0x20000c8c
 800c48c:	20000cf4 	.word	0x20000cf4
 800c490:	20000d5c 	.word	0x20000d5c

0800c494 <global_stdio_init.part.0>:
 800c494:	b510      	push	{r4, lr}
 800c496:	4b0b      	ldr	r3, [pc, #44]	@ (800c4c4 <global_stdio_init.part.0+0x30>)
 800c498:	4c0b      	ldr	r4, [pc, #44]	@ (800c4c8 <global_stdio_init.part.0+0x34>)
 800c49a:	4a0c      	ldr	r2, [pc, #48]	@ (800c4cc <global_stdio_init.part.0+0x38>)
 800c49c:	601a      	str	r2, [r3, #0]
 800c49e:	4620      	mov	r0, r4
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	2104      	movs	r1, #4
 800c4a4:	f7ff ff94 	bl	800c3d0 <std>
 800c4a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	2109      	movs	r1, #9
 800c4b0:	f7ff ff8e 	bl	800c3d0 <std>
 800c4b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c4b8:	2202      	movs	r2, #2
 800c4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4be:	2112      	movs	r1, #18
 800c4c0:	f7ff bf86 	b.w	800c3d0 <std>
 800c4c4:	20000dc4 	.word	0x20000dc4
 800c4c8:	20000c8c 	.word	0x20000c8c
 800c4cc:	0800c43d 	.word	0x0800c43d

0800c4d0 <__sfp_lock_acquire>:
 800c4d0:	4801      	ldr	r0, [pc, #4]	@ (800c4d8 <__sfp_lock_acquire+0x8>)
 800c4d2:	f000 b922 	b.w	800c71a <__retarget_lock_acquire_recursive>
 800c4d6:	bf00      	nop
 800c4d8:	20000dcd 	.word	0x20000dcd

0800c4dc <__sfp_lock_release>:
 800c4dc:	4801      	ldr	r0, [pc, #4]	@ (800c4e4 <__sfp_lock_release+0x8>)
 800c4de:	f000 b91d 	b.w	800c71c <__retarget_lock_release_recursive>
 800c4e2:	bf00      	nop
 800c4e4:	20000dcd 	.word	0x20000dcd

0800c4e8 <__sinit>:
 800c4e8:	b510      	push	{r4, lr}
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	f7ff fff0 	bl	800c4d0 <__sfp_lock_acquire>
 800c4f0:	6a23      	ldr	r3, [r4, #32]
 800c4f2:	b11b      	cbz	r3, 800c4fc <__sinit+0x14>
 800c4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4f8:	f7ff bff0 	b.w	800c4dc <__sfp_lock_release>
 800c4fc:	4b04      	ldr	r3, [pc, #16]	@ (800c510 <__sinit+0x28>)
 800c4fe:	6223      	str	r3, [r4, #32]
 800c500:	4b04      	ldr	r3, [pc, #16]	@ (800c514 <__sinit+0x2c>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1f5      	bne.n	800c4f4 <__sinit+0xc>
 800c508:	f7ff ffc4 	bl	800c494 <global_stdio_init.part.0>
 800c50c:	e7f2      	b.n	800c4f4 <__sinit+0xc>
 800c50e:	bf00      	nop
 800c510:	0800c455 	.word	0x0800c455
 800c514:	20000dc4 	.word	0x20000dc4

0800c518 <_fwalk_sglue>:
 800c518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c51c:	4607      	mov	r7, r0
 800c51e:	4688      	mov	r8, r1
 800c520:	4614      	mov	r4, r2
 800c522:	2600      	movs	r6, #0
 800c524:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c528:	f1b9 0901 	subs.w	r9, r9, #1
 800c52c:	d505      	bpl.n	800c53a <_fwalk_sglue+0x22>
 800c52e:	6824      	ldr	r4, [r4, #0]
 800c530:	2c00      	cmp	r4, #0
 800c532:	d1f7      	bne.n	800c524 <_fwalk_sglue+0xc>
 800c534:	4630      	mov	r0, r6
 800c536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c53a:	89ab      	ldrh	r3, [r5, #12]
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d907      	bls.n	800c550 <_fwalk_sglue+0x38>
 800c540:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c544:	3301      	adds	r3, #1
 800c546:	d003      	beq.n	800c550 <_fwalk_sglue+0x38>
 800c548:	4629      	mov	r1, r5
 800c54a:	4638      	mov	r0, r7
 800c54c:	47c0      	blx	r8
 800c54e:	4306      	orrs	r6, r0
 800c550:	3568      	adds	r5, #104	@ 0x68
 800c552:	e7e9      	b.n	800c528 <_fwalk_sglue+0x10>

0800c554 <iprintf>:
 800c554:	b40f      	push	{r0, r1, r2, r3}
 800c556:	b507      	push	{r0, r1, r2, lr}
 800c558:	4906      	ldr	r1, [pc, #24]	@ (800c574 <iprintf+0x20>)
 800c55a:	ab04      	add	r3, sp, #16
 800c55c:	6808      	ldr	r0, [r1, #0]
 800c55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c562:	6881      	ldr	r1, [r0, #8]
 800c564:	9301      	str	r3, [sp, #4]
 800c566:	f001 fb21 	bl	800dbac <_vfiprintf_r>
 800c56a:	b003      	add	sp, #12
 800c56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c570:	b004      	add	sp, #16
 800c572:	4770      	bx	lr
 800c574:	20000038 	.word	0x20000038

0800c578 <__sread>:
 800c578:	b510      	push	{r4, lr}
 800c57a:	460c      	mov	r4, r1
 800c57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c580:	f000 f86c 	bl	800c65c <_read_r>
 800c584:	2800      	cmp	r0, #0
 800c586:	bfab      	itete	ge
 800c588:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c58a:	89a3      	ldrhlt	r3, [r4, #12]
 800c58c:	181b      	addge	r3, r3, r0
 800c58e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c592:	bfac      	ite	ge
 800c594:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c596:	81a3      	strhlt	r3, [r4, #12]
 800c598:	bd10      	pop	{r4, pc}

0800c59a <__swrite>:
 800c59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c59e:	461f      	mov	r7, r3
 800c5a0:	898b      	ldrh	r3, [r1, #12]
 800c5a2:	05db      	lsls	r3, r3, #23
 800c5a4:	4605      	mov	r5, r0
 800c5a6:	460c      	mov	r4, r1
 800c5a8:	4616      	mov	r6, r2
 800c5aa:	d505      	bpl.n	800c5b8 <__swrite+0x1e>
 800c5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5b0:	2302      	movs	r3, #2
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f000 f840 	bl	800c638 <_lseek_r>
 800c5b8:	89a3      	ldrh	r3, [r4, #12]
 800c5ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c5c2:	81a3      	strh	r3, [r4, #12]
 800c5c4:	4632      	mov	r2, r6
 800c5c6:	463b      	mov	r3, r7
 800c5c8:	4628      	mov	r0, r5
 800c5ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ce:	f000 b867 	b.w	800c6a0 <_write_r>

0800c5d2 <__sseek>:
 800c5d2:	b510      	push	{r4, lr}
 800c5d4:	460c      	mov	r4, r1
 800c5d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5da:	f000 f82d 	bl	800c638 <_lseek_r>
 800c5de:	1c43      	adds	r3, r0, #1
 800c5e0:	89a3      	ldrh	r3, [r4, #12]
 800c5e2:	bf15      	itete	ne
 800c5e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c5e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c5ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c5ee:	81a3      	strheq	r3, [r4, #12]
 800c5f0:	bf18      	it	ne
 800c5f2:	81a3      	strhne	r3, [r4, #12]
 800c5f4:	bd10      	pop	{r4, pc}

0800c5f6 <__sclose>:
 800c5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5fa:	f000 b80d 	b.w	800c618 <_close_r>

0800c5fe <memset>:
 800c5fe:	4402      	add	r2, r0
 800c600:	4603      	mov	r3, r0
 800c602:	4293      	cmp	r3, r2
 800c604:	d100      	bne.n	800c608 <memset+0xa>
 800c606:	4770      	bx	lr
 800c608:	f803 1b01 	strb.w	r1, [r3], #1
 800c60c:	e7f9      	b.n	800c602 <memset+0x4>
	...

0800c610 <_localeconv_r>:
 800c610:	4800      	ldr	r0, [pc, #0]	@ (800c614 <_localeconv_r+0x4>)
 800c612:	4770      	bx	lr
 800c614:	20000178 	.word	0x20000178

0800c618 <_close_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	4d06      	ldr	r5, [pc, #24]	@ (800c634 <_close_r+0x1c>)
 800c61c:	2300      	movs	r3, #0
 800c61e:	4604      	mov	r4, r0
 800c620:	4608      	mov	r0, r1
 800c622:	602b      	str	r3, [r5, #0]
 800c624:	f7f5 fdda 	bl	80021dc <_close>
 800c628:	1c43      	adds	r3, r0, #1
 800c62a:	d102      	bne.n	800c632 <_close_r+0x1a>
 800c62c:	682b      	ldr	r3, [r5, #0]
 800c62e:	b103      	cbz	r3, 800c632 <_close_r+0x1a>
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	20000dc8 	.word	0x20000dc8

0800c638 <_lseek_r>:
 800c638:	b538      	push	{r3, r4, r5, lr}
 800c63a:	4d07      	ldr	r5, [pc, #28]	@ (800c658 <_lseek_r+0x20>)
 800c63c:	4604      	mov	r4, r0
 800c63e:	4608      	mov	r0, r1
 800c640:	4611      	mov	r1, r2
 800c642:	2200      	movs	r2, #0
 800c644:	602a      	str	r2, [r5, #0]
 800c646:	461a      	mov	r2, r3
 800c648:	f7f5 fdef 	bl	800222a <_lseek>
 800c64c:	1c43      	adds	r3, r0, #1
 800c64e:	d102      	bne.n	800c656 <_lseek_r+0x1e>
 800c650:	682b      	ldr	r3, [r5, #0]
 800c652:	b103      	cbz	r3, 800c656 <_lseek_r+0x1e>
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	bd38      	pop	{r3, r4, r5, pc}
 800c658:	20000dc8 	.word	0x20000dc8

0800c65c <_read_r>:
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	4d07      	ldr	r5, [pc, #28]	@ (800c67c <_read_r+0x20>)
 800c660:	4604      	mov	r4, r0
 800c662:	4608      	mov	r0, r1
 800c664:	4611      	mov	r1, r2
 800c666:	2200      	movs	r2, #0
 800c668:	602a      	str	r2, [r5, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	f7f5 fd99 	bl	80021a2 <_read>
 800c670:	1c43      	adds	r3, r0, #1
 800c672:	d102      	bne.n	800c67a <_read_r+0x1e>
 800c674:	682b      	ldr	r3, [r5, #0]
 800c676:	b103      	cbz	r3, 800c67a <_read_r+0x1e>
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	bd38      	pop	{r3, r4, r5, pc}
 800c67c:	20000dc8 	.word	0x20000dc8

0800c680 <_sbrk_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	4d06      	ldr	r5, [pc, #24]	@ (800c69c <_sbrk_r+0x1c>)
 800c684:	2300      	movs	r3, #0
 800c686:	4604      	mov	r4, r0
 800c688:	4608      	mov	r0, r1
 800c68a:	602b      	str	r3, [r5, #0]
 800c68c:	f7f5 fdda 	bl	8002244 <_sbrk>
 800c690:	1c43      	adds	r3, r0, #1
 800c692:	d102      	bne.n	800c69a <_sbrk_r+0x1a>
 800c694:	682b      	ldr	r3, [r5, #0]
 800c696:	b103      	cbz	r3, 800c69a <_sbrk_r+0x1a>
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	bd38      	pop	{r3, r4, r5, pc}
 800c69c:	20000dc8 	.word	0x20000dc8

0800c6a0 <_write_r>:
 800c6a0:	b538      	push	{r3, r4, r5, lr}
 800c6a2:	4d07      	ldr	r5, [pc, #28]	@ (800c6c0 <_write_r+0x20>)
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	4608      	mov	r0, r1
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	602a      	str	r2, [r5, #0]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	f7f5 fa3e 	bl	8001b30 <_write>
 800c6b4:	1c43      	adds	r3, r0, #1
 800c6b6:	d102      	bne.n	800c6be <_write_r+0x1e>
 800c6b8:	682b      	ldr	r3, [r5, #0]
 800c6ba:	b103      	cbz	r3, 800c6be <_write_r+0x1e>
 800c6bc:	6023      	str	r3, [r4, #0]
 800c6be:	bd38      	pop	{r3, r4, r5, pc}
 800c6c0:	20000dc8 	.word	0x20000dc8

0800c6c4 <__errno>:
 800c6c4:	4b01      	ldr	r3, [pc, #4]	@ (800c6cc <__errno+0x8>)
 800c6c6:	6818      	ldr	r0, [r3, #0]
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	20000038 	.word	0x20000038

0800c6d0 <__libc_init_array>:
 800c6d0:	b570      	push	{r4, r5, r6, lr}
 800c6d2:	4d0d      	ldr	r5, [pc, #52]	@ (800c708 <__libc_init_array+0x38>)
 800c6d4:	4c0d      	ldr	r4, [pc, #52]	@ (800c70c <__libc_init_array+0x3c>)
 800c6d6:	1b64      	subs	r4, r4, r5
 800c6d8:	10a4      	asrs	r4, r4, #2
 800c6da:	2600      	movs	r6, #0
 800c6dc:	42a6      	cmp	r6, r4
 800c6de:	d109      	bne.n	800c6f4 <__libc_init_array+0x24>
 800c6e0:	4d0b      	ldr	r5, [pc, #44]	@ (800c710 <__libc_init_array+0x40>)
 800c6e2:	4c0c      	ldr	r4, [pc, #48]	@ (800c714 <__libc_init_array+0x44>)
 800c6e4:	f001 fdfc 	bl	800e2e0 <_init>
 800c6e8:	1b64      	subs	r4, r4, r5
 800c6ea:	10a4      	asrs	r4, r4, #2
 800c6ec:	2600      	movs	r6, #0
 800c6ee:	42a6      	cmp	r6, r4
 800c6f0:	d105      	bne.n	800c6fe <__libc_init_array+0x2e>
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}
 800c6f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6f8:	4798      	blx	r3
 800c6fa:	3601      	adds	r6, #1
 800c6fc:	e7ee      	b.n	800c6dc <__libc_init_array+0xc>
 800c6fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800c702:	4798      	blx	r3
 800c704:	3601      	adds	r6, #1
 800c706:	e7f2      	b.n	800c6ee <__libc_init_array+0x1e>
 800c708:	0800e6cc 	.word	0x0800e6cc
 800c70c:	0800e6cc 	.word	0x0800e6cc
 800c710:	0800e6cc 	.word	0x0800e6cc
 800c714:	0800e6d0 	.word	0x0800e6d0

0800c718 <__retarget_lock_init_recursive>:
 800c718:	4770      	bx	lr

0800c71a <__retarget_lock_acquire_recursive>:
 800c71a:	4770      	bx	lr

0800c71c <__retarget_lock_release_recursive>:
 800c71c:	4770      	bx	lr

0800c71e <quorem>:
 800c71e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c722:	6903      	ldr	r3, [r0, #16]
 800c724:	690c      	ldr	r4, [r1, #16]
 800c726:	42a3      	cmp	r3, r4
 800c728:	4607      	mov	r7, r0
 800c72a:	db7e      	blt.n	800c82a <quorem+0x10c>
 800c72c:	3c01      	subs	r4, #1
 800c72e:	f101 0814 	add.w	r8, r1, #20
 800c732:	00a3      	lsls	r3, r4, #2
 800c734:	f100 0514 	add.w	r5, r0, #20
 800c738:	9300      	str	r3, [sp, #0]
 800c73a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c73e:	9301      	str	r3, [sp, #4]
 800c740:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c744:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c748:	3301      	adds	r3, #1
 800c74a:	429a      	cmp	r2, r3
 800c74c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c750:	fbb2 f6f3 	udiv	r6, r2, r3
 800c754:	d32e      	bcc.n	800c7b4 <quorem+0x96>
 800c756:	f04f 0a00 	mov.w	sl, #0
 800c75a:	46c4      	mov	ip, r8
 800c75c:	46ae      	mov	lr, r5
 800c75e:	46d3      	mov	fp, sl
 800c760:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c764:	b298      	uxth	r0, r3
 800c766:	fb06 a000 	mla	r0, r6, r0, sl
 800c76a:	0c02      	lsrs	r2, r0, #16
 800c76c:	0c1b      	lsrs	r3, r3, #16
 800c76e:	fb06 2303 	mla	r3, r6, r3, r2
 800c772:	f8de 2000 	ldr.w	r2, [lr]
 800c776:	b280      	uxth	r0, r0
 800c778:	b292      	uxth	r2, r2
 800c77a:	1a12      	subs	r2, r2, r0
 800c77c:	445a      	add	r2, fp
 800c77e:	f8de 0000 	ldr.w	r0, [lr]
 800c782:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c786:	b29b      	uxth	r3, r3
 800c788:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c78c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c790:	b292      	uxth	r2, r2
 800c792:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c796:	45e1      	cmp	r9, ip
 800c798:	f84e 2b04 	str.w	r2, [lr], #4
 800c79c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c7a0:	d2de      	bcs.n	800c760 <quorem+0x42>
 800c7a2:	9b00      	ldr	r3, [sp, #0]
 800c7a4:	58eb      	ldr	r3, [r5, r3]
 800c7a6:	b92b      	cbnz	r3, 800c7b4 <quorem+0x96>
 800c7a8:	9b01      	ldr	r3, [sp, #4]
 800c7aa:	3b04      	subs	r3, #4
 800c7ac:	429d      	cmp	r5, r3
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	d32f      	bcc.n	800c812 <quorem+0xf4>
 800c7b2:	613c      	str	r4, [r7, #16]
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f001 f8c7 	bl	800d948 <__mcmp>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	db25      	blt.n	800c80a <quorem+0xec>
 800c7be:	4629      	mov	r1, r5
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	f858 2b04 	ldr.w	r2, [r8], #4
 800c7c6:	f8d1 c000 	ldr.w	ip, [r1]
 800c7ca:	fa1f fe82 	uxth.w	lr, r2
 800c7ce:	fa1f f38c 	uxth.w	r3, ip
 800c7d2:	eba3 030e 	sub.w	r3, r3, lr
 800c7d6:	4403      	add	r3, r0
 800c7d8:	0c12      	lsrs	r2, r2, #16
 800c7da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c7de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7e8:	45c1      	cmp	r9, r8
 800c7ea:	f841 3b04 	str.w	r3, [r1], #4
 800c7ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c7f2:	d2e6      	bcs.n	800c7c2 <quorem+0xa4>
 800c7f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7fc:	b922      	cbnz	r2, 800c808 <quorem+0xea>
 800c7fe:	3b04      	subs	r3, #4
 800c800:	429d      	cmp	r5, r3
 800c802:	461a      	mov	r2, r3
 800c804:	d30b      	bcc.n	800c81e <quorem+0x100>
 800c806:	613c      	str	r4, [r7, #16]
 800c808:	3601      	adds	r6, #1
 800c80a:	4630      	mov	r0, r6
 800c80c:	b003      	add	sp, #12
 800c80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c812:	6812      	ldr	r2, [r2, #0]
 800c814:	3b04      	subs	r3, #4
 800c816:	2a00      	cmp	r2, #0
 800c818:	d1cb      	bne.n	800c7b2 <quorem+0x94>
 800c81a:	3c01      	subs	r4, #1
 800c81c:	e7c6      	b.n	800c7ac <quorem+0x8e>
 800c81e:	6812      	ldr	r2, [r2, #0]
 800c820:	3b04      	subs	r3, #4
 800c822:	2a00      	cmp	r2, #0
 800c824:	d1ef      	bne.n	800c806 <quorem+0xe8>
 800c826:	3c01      	subs	r4, #1
 800c828:	e7ea      	b.n	800c800 <quorem+0xe2>
 800c82a:	2000      	movs	r0, #0
 800c82c:	e7ee      	b.n	800c80c <quorem+0xee>
	...

0800c830 <_dtoa_r>:
 800c830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c834:	69c7      	ldr	r7, [r0, #28]
 800c836:	b097      	sub	sp, #92	@ 0x5c
 800c838:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c83c:	ec55 4b10 	vmov	r4, r5, d0
 800c840:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c842:	9107      	str	r1, [sp, #28]
 800c844:	4681      	mov	r9, r0
 800c846:	920c      	str	r2, [sp, #48]	@ 0x30
 800c848:	9311      	str	r3, [sp, #68]	@ 0x44
 800c84a:	b97f      	cbnz	r7, 800c86c <_dtoa_r+0x3c>
 800c84c:	2010      	movs	r0, #16
 800c84e:	f7ff f8ab 	bl	800b9a8 <malloc>
 800c852:	4602      	mov	r2, r0
 800c854:	f8c9 001c 	str.w	r0, [r9, #28]
 800c858:	b920      	cbnz	r0, 800c864 <_dtoa_r+0x34>
 800c85a:	4ba9      	ldr	r3, [pc, #676]	@ (800cb00 <_dtoa_r+0x2d0>)
 800c85c:	21ef      	movs	r1, #239	@ 0xef
 800c85e:	48a9      	ldr	r0, [pc, #676]	@ (800cb04 <_dtoa_r+0x2d4>)
 800c860:	f001 fc0a 	bl	800e078 <__assert_func>
 800c864:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c868:	6007      	str	r7, [r0, #0]
 800c86a:	60c7      	str	r7, [r0, #12]
 800c86c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c870:	6819      	ldr	r1, [r3, #0]
 800c872:	b159      	cbz	r1, 800c88c <_dtoa_r+0x5c>
 800c874:	685a      	ldr	r2, [r3, #4]
 800c876:	604a      	str	r2, [r1, #4]
 800c878:	2301      	movs	r3, #1
 800c87a:	4093      	lsls	r3, r2
 800c87c:	608b      	str	r3, [r1, #8]
 800c87e:	4648      	mov	r0, r9
 800c880:	f000 fe30 	bl	800d4e4 <_Bfree>
 800c884:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c888:	2200      	movs	r2, #0
 800c88a:	601a      	str	r2, [r3, #0]
 800c88c:	1e2b      	subs	r3, r5, #0
 800c88e:	bfb9      	ittee	lt
 800c890:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c894:	9305      	strlt	r3, [sp, #20]
 800c896:	2300      	movge	r3, #0
 800c898:	6033      	strge	r3, [r6, #0]
 800c89a:	9f05      	ldr	r7, [sp, #20]
 800c89c:	4b9a      	ldr	r3, [pc, #616]	@ (800cb08 <_dtoa_r+0x2d8>)
 800c89e:	bfbc      	itt	lt
 800c8a0:	2201      	movlt	r2, #1
 800c8a2:	6032      	strlt	r2, [r6, #0]
 800c8a4:	43bb      	bics	r3, r7
 800c8a6:	d112      	bne.n	800c8ce <_dtoa_r+0x9e>
 800c8a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c8aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c8ae:	6013      	str	r3, [r2, #0]
 800c8b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c8b4:	4323      	orrs	r3, r4
 800c8b6:	f000 855a 	beq.w	800d36e <_dtoa_r+0xb3e>
 800c8ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c8bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800cb1c <_dtoa_r+0x2ec>
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f000 855c 	beq.w	800d37e <_dtoa_r+0xb4e>
 800c8c6:	f10a 0303 	add.w	r3, sl, #3
 800c8ca:	f000 bd56 	b.w	800d37a <_dtoa_r+0xb4a>
 800c8ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	ec51 0b17 	vmov	r0, r1, d7
 800c8d8:	2300      	movs	r3, #0
 800c8da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c8de:	f7f4 f8f3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8e2:	4680      	mov	r8, r0
 800c8e4:	b158      	cbz	r0, 800c8fe <_dtoa_r+0xce>
 800c8e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	6013      	str	r3, [r2, #0]
 800c8ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c8ee:	b113      	cbz	r3, 800c8f6 <_dtoa_r+0xc6>
 800c8f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c8f2:	4b86      	ldr	r3, [pc, #536]	@ (800cb0c <_dtoa_r+0x2dc>)
 800c8f4:	6013      	str	r3, [r2, #0]
 800c8f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800cb20 <_dtoa_r+0x2f0>
 800c8fa:	f000 bd40 	b.w	800d37e <_dtoa_r+0xb4e>
 800c8fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c902:	aa14      	add	r2, sp, #80	@ 0x50
 800c904:	a915      	add	r1, sp, #84	@ 0x54
 800c906:	4648      	mov	r0, r9
 800c908:	f001 f8ce 	bl	800daa8 <__d2b>
 800c90c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c910:	9002      	str	r0, [sp, #8]
 800c912:	2e00      	cmp	r6, #0
 800c914:	d078      	beq.n	800ca08 <_dtoa_r+0x1d8>
 800c916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c918:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c91c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c920:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c924:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c928:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c92c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c930:	4619      	mov	r1, r3
 800c932:	2200      	movs	r2, #0
 800c934:	4b76      	ldr	r3, [pc, #472]	@ (800cb10 <_dtoa_r+0x2e0>)
 800c936:	f7f3 fca7 	bl	8000288 <__aeabi_dsub>
 800c93a:	a36b      	add	r3, pc, #428	@ (adr r3, 800cae8 <_dtoa_r+0x2b8>)
 800c93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c940:	f7f3 fe5a 	bl	80005f8 <__aeabi_dmul>
 800c944:	a36a      	add	r3, pc, #424	@ (adr r3, 800caf0 <_dtoa_r+0x2c0>)
 800c946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94a:	f7f3 fc9f 	bl	800028c <__adddf3>
 800c94e:	4604      	mov	r4, r0
 800c950:	4630      	mov	r0, r6
 800c952:	460d      	mov	r5, r1
 800c954:	f7f3 fde6 	bl	8000524 <__aeabi_i2d>
 800c958:	a367      	add	r3, pc, #412	@ (adr r3, 800caf8 <_dtoa_r+0x2c8>)
 800c95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95e:	f7f3 fe4b 	bl	80005f8 <__aeabi_dmul>
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	4620      	mov	r0, r4
 800c968:	4629      	mov	r1, r5
 800c96a:	f7f3 fc8f 	bl	800028c <__adddf3>
 800c96e:	4604      	mov	r4, r0
 800c970:	460d      	mov	r5, r1
 800c972:	f7f4 f8f1 	bl	8000b58 <__aeabi_d2iz>
 800c976:	2200      	movs	r2, #0
 800c978:	4607      	mov	r7, r0
 800c97a:	2300      	movs	r3, #0
 800c97c:	4620      	mov	r0, r4
 800c97e:	4629      	mov	r1, r5
 800c980:	f7f4 f8ac 	bl	8000adc <__aeabi_dcmplt>
 800c984:	b140      	cbz	r0, 800c998 <_dtoa_r+0x168>
 800c986:	4638      	mov	r0, r7
 800c988:	f7f3 fdcc 	bl	8000524 <__aeabi_i2d>
 800c98c:	4622      	mov	r2, r4
 800c98e:	462b      	mov	r3, r5
 800c990:	f7f4 f89a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c994:	b900      	cbnz	r0, 800c998 <_dtoa_r+0x168>
 800c996:	3f01      	subs	r7, #1
 800c998:	2f16      	cmp	r7, #22
 800c99a:	d852      	bhi.n	800ca42 <_dtoa_r+0x212>
 800c99c:	4b5d      	ldr	r3, [pc, #372]	@ (800cb14 <_dtoa_r+0x2e4>)
 800c99e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c9aa:	f7f4 f897 	bl	8000adc <__aeabi_dcmplt>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	d049      	beq.n	800ca46 <_dtoa_r+0x216>
 800c9b2:	3f01      	subs	r7, #1
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800c9b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c9ba:	1b9b      	subs	r3, r3, r6
 800c9bc:	1e5a      	subs	r2, r3, #1
 800c9be:	bf45      	ittet	mi
 800c9c0:	f1c3 0301 	rsbmi	r3, r3, #1
 800c9c4:	9300      	strmi	r3, [sp, #0]
 800c9c6:	2300      	movpl	r3, #0
 800c9c8:	2300      	movmi	r3, #0
 800c9ca:	9206      	str	r2, [sp, #24]
 800c9cc:	bf54      	ite	pl
 800c9ce:	9300      	strpl	r3, [sp, #0]
 800c9d0:	9306      	strmi	r3, [sp, #24]
 800c9d2:	2f00      	cmp	r7, #0
 800c9d4:	db39      	blt.n	800ca4a <_dtoa_r+0x21a>
 800c9d6:	9b06      	ldr	r3, [sp, #24]
 800c9d8:	970d      	str	r7, [sp, #52]	@ 0x34
 800c9da:	443b      	add	r3, r7
 800c9dc:	9306      	str	r3, [sp, #24]
 800c9de:	2300      	movs	r3, #0
 800c9e0:	9308      	str	r3, [sp, #32]
 800c9e2:	9b07      	ldr	r3, [sp, #28]
 800c9e4:	2b09      	cmp	r3, #9
 800c9e6:	d863      	bhi.n	800cab0 <_dtoa_r+0x280>
 800c9e8:	2b05      	cmp	r3, #5
 800c9ea:	bfc4      	itt	gt
 800c9ec:	3b04      	subgt	r3, #4
 800c9ee:	9307      	strgt	r3, [sp, #28]
 800c9f0:	9b07      	ldr	r3, [sp, #28]
 800c9f2:	f1a3 0302 	sub.w	r3, r3, #2
 800c9f6:	bfcc      	ite	gt
 800c9f8:	2400      	movgt	r4, #0
 800c9fa:	2401      	movle	r4, #1
 800c9fc:	2b03      	cmp	r3, #3
 800c9fe:	d863      	bhi.n	800cac8 <_dtoa_r+0x298>
 800ca00:	e8df f003 	tbb	[pc, r3]
 800ca04:	2b375452 	.word	0x2b375452
 800ca08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ca0c:	441e      	add	r6, r3
 800ca0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ca12:	2b20      	cmp	r3, #32
 800ca14:	bfc1      	itttt	gt
 800ca16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ca1a:	409f      	lslgt	r7, r3
 800ca1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ca20:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ca24:	bfd6      	itet	le
 800ca26:	f1c3 0320 	rsble	r3, r3, #32
 800ca2a:	ea47 0003 	orrgt.w	r0, r7, r3
 800ca2e:	fa04 f003 	lslle.w	r0, r4, r3
 800ca32:	f7f3 fd67 	bl	8000504 <__aeabi_ui2d>
 800ca36:	2201      	movs	r2, #1
 800ca38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ca3c:	3e01      	subs	r6, #1
 800ca3e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ca40:	e776      	b.n	800c930 <_dtoa_r+0x100>
 800ca42:	2301      	movs	r3, #1
 800ca44:	e7b7      	b.n	800c9b6 <_dtoa_r+0x186>
 800ca46:	9010      	str	r0, [sp, #64]	@ 0x40
 800ca48:	e7b6      	b.n	800c9b8 <_dtoa_r+0x188>
 800ca4a:	9b00      	ldr	r3, [sp, #0]
 800ca4c:	1bdb      	subs	r3, r3, r7
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	427b      	negs	r3, r7
 800ca52:	9308      	str	r3, [sp, #32]
 800ca54:	2300      	movs	r3, #0
 800ca56:	930d      	str	r3, [sp, #52]	@ 0x34
 800ca58:	e7c3      	b.n	800c9e2 <_dtoa_r+0x1b2>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca60:	eb07 0b03 	add.w	fp, r7, r3
 800ca64:	f10b 0301 	add.w	r3, fp, #1
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	9303      	str	r3, [sp, #12]
 800ca6c:	bfb8      	it	lt
 800ca6e:	2301      	movlt	r3, #1
 800ca70:	e006      	b.n	800ca80 <_dtoa_r+0x250>
 800ca72:	2301      	movs	r3, #1
 800ca74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	dd28      	ble.n	800cace <_dtoa_r+0x29e>
 800ca7c:	469b      	mov	fp, r3
 800ca7e:	9303      	str	r3, [sp, #12]
 800ca80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ca84:	2100      	movs	r1, #0
 800ca86:	2204      	movs	r2, #4
 800ca88:	f102 0514 	add.w	r5, r2, #20
 800ca8c:	429d      	cmp	r5, r3
 800ca8e:	d926      	bls.n	800cade <_dtoa_r+0x2ae>
 800ca90:	6041      	str	r1, [r0, #4]
 800ca92:	4648      	mov	r0, r9
 800ca94:	f000 fce6 	bl	800d464 <_Balloc>
 800ca98:	4682      	mov	sl, r0
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d142      	bne.n	800cb24 <_dtoa_r+0x2f4>
 800ca9e:	4b1e      	ldr	r3, [pc, #120]	@ (800cb18 <_dtoa_r+0x2e8>)
 800caa0:	4602      	mov	r2, r0
 800caa2:	f240 11af 	movw	r1, #431	@ 0x1af
 800caa6:	e6da      	b.n	800c85e <_dtoa_r+0x2e>
 800caa8:	2300      	movs	r3, #0
 800caaa:	e7e3      	b.n	800ca74 <_dtoa_r+0x244>
 800caac:	2300      	movs	r3, #0
 800caae:	e7d5      	b.n	800ca5c <_dtoa_r+0x22c>
 800cab0:	2401      	movs	r4, #1
 800cab2:	2300      	movs	r3, #0
 800cab4:	9307      	str	r3, [sp, #28]
 800cab6:	9409      	str	r4, [sp, #36]	@ 0x24
 800cab8:	f04f 3bff 	mov.w	fp, #4294967295
 800cabc:	2200      	movs	r2, #0
 800cabe:	f8cd b00c 	str.w	fp, [sp, #12]
 800cac2:	2312      	movs	r3, #18
 800cac4:	920c      	str	r2, [sp, #48]	@ 0x30
 800cac6:	e7db      	b.n	800ca80 <_dtoa_r+0x250>
 800cac8:	2301      	movs	r3, #1
 800caca:	9309      	str	r3, [sp, #36]	@ 0x24
 800cacc:	e7f4      	b.n	800cab8 <_dtoa_r+0x288>
 800cace:	f04f 0b01 	mov.w	fp, #1
 800cad2:	f8cd b00c 	str.w	fp, [sp, #12]
 800cad6:	465b      	mov	r3, fp
 800cad8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800cadc:	e7d0      	b.n	800ca80 <_dtoa_r+0x250>
 800cade:	3101      	adds	r1, #1
 800cae0:	0052      	lsls	r2, r2, #1
 800cae2:	e7d1      	b.n	800ca88 <_dtoa_r+0x258>
 800cae4:	f3af 8000 	nop.w
 800cae8:	636f4361 	.word	0x636f4361
 800caec:	3fd287a7 	.word	0x3fd287a7
 800caf0:	8b60c8b3 	.word	0x8b60c8b3
 800caf4:	3fc68a28 	.word	0x3fc68a28
 800caf8:	509f79fb 	.word	0x509f79fb
 800cafc:	3fd34413 	.word	0x3fd34413
 800cb00:	0800e38d 	.word	0x0800e38d
 800cb04:	0800e3a4 	.word	0x0800e3a4
 800cb08:	7ff00000 	.word	0x7ff00000
 800cb0c:	0800e35d 	.word	0x0800e35d
 800cb10:	3ff80000 	.word	0x3ff80000
 800cb14:	0800e4f8 	.word	0x0800e4f8
 800cb18:	0800e3fc 	.word	0x0800e3fc
 800cb1c:	0800e389 	.word	0x0800e389
 800cb20:	0800e35c 	.word	0x0800e35c
 800cb24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cb28:	6018      	str	r0, [r3, #0]
 800cb2a:	9b03      	ldr	r3, [sp, #12]
 800cb2c:	2b0e      	cmp	r3, #14
 800cb2e:	f200 80a1 	bhi.w	800cc74 <_dtoa_r+0x444>
 800cb32:	2c00      	cmp	r4, #0
 800cb34:	f000 809e 	beq.w	800cc74 <_dtoa_r+0x444>
 800cb38:	2f00      	cmp	r7, #0
 800cb3a:	dd33      	ble.n	800cba4 <_dtoa_r+0x374>
 800cb3c:	4b9c      	ldr	r3, [pc, #624]	@ (800cdb0 <_dtoa_r+0x580>)
 800cb3e:	f007 020f 	and.w	r2, r7, #15
 800cb42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb46:	ed93 7b00 	vldr	d7, [r3]
 800cb4a:	05f8      	lsls	r0, r7, #23
 800cb4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800cb50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cb54:	d516      	bpl.n	800cb84 <_dtoa_r+0x354>
 800cb56:	4b97      	ldr	r3, [pc, #604]	@ (800cdb4 <_dtoa_r+0x584>)
 800cb58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cb5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb60:	f7f3 fe74 	bl	800084c <__aeabi_ddiv>
 800cb64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb68:	f004 040f 	and.w	r4, r4, #15
 800cb6c:	2603      	movs	r6, #3
 800cb6e:	4d91      	ldr	r5, [pc, #580]	@ (800cdb4 <_dtoa_r+0x584>)
 800cb70:	b954      	cbnz	r4, 800cb88 <_dtoa_r+0x358>
 800cb72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cb76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb7a:	f7f3 fe67 	bl	800084c <__aeabi_ddiv>
 800cb7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb82:	e028      	b.n	800cbd6 <_dtoa_r+0x3a6>
 800cb84:	2602      	movs	r6, #2
 800cb86:	e7f2      	b.n	800cb6e <_dtoa_r+0x33e>
 800cb88:	07e1      	lsls	r1, r4, #31
 800cb8a:	d508      	bpl.n	800cb9e <_dtoa_r+0x36e>
 800cb8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cb90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb94:	f7f3 fd30 	bl	80005f8 <__aeabi_dmul>
 800cb98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cb9c:	3601      	adds	r6, #1
 800cb9e:	1064      	asrs	r4, r4, #1
 800cba0:	3508      	adds	r5, #8
 800cba2:	e7e5      	b.n	800cb70 <_dtoa_r+0x340>
 800cba4:	f000 80af 	beq.w	800cd06 <_dtoa_r+0x4d6>
 800cba8:	427c      	negs	r4, r7
 800cbaa:	4b81      	ldr	r3, [pc, #516]	@ (800cdb0 <_dtoa_r+0x580>)
 800cbac:	4d81      	ldr	r5, [pc, #516]	@ (800cdb4 <_dtoa_r+0x584>)
 800cbae:	f004 020f 	and.w	r2, r4, #15
 800cbb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cbbe:	f7f3 fd1b 	bl	80005f8 <__aeabi_dmul>
 800cbc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cbc6:	1124      	asrs	r4, r4, #4
 800cbc8:	2300      	movs	r3, #0
 800cbca:	2602      	movs	r6, #2
 800cbcc:	2c00      	cmp	r4, #0
 800cbce:	f040 808f 	bne.w	800ccf0 <_dtoa_r+0x4c0>
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1d3      	bne.n	800cb7e <_dtoa_r+0x34e>
 800cbd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cbd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f000 8094 	beq.w	800cd0a <_dtoa_r+0x4da>
 800cbe2:	4b75      	ldr	r3, [pc, #468]	@ (800cdb8 <_dtoa_r+0x588>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	4629      	mov	r1, r5
 800cbea:	f7f3 ff77 	bl	8000adc <__aeabi_dcmplt>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	f000 808b 	beq.w	800cd0a <_dtoa_r+0x4da>
 800cbf4:	9b03      	ldr	r3, [sp, #12]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f000 8087 	beq.w	800cd0a <_dtoa_r+0x4da>
 800cbfc:	f1bb 0f00 	cmp.w	fp, #0
 800cc00:	dd34      	ble.n	800cc6c <_dtoa_r+0x43c>
 800cc02:	4620      	mov	r0, r4
 800cc04:	4b6d      	ldr	r3, [pc, #436]	@ (800cdbc <_dtoa_r+0x58c>)
 800cc06:	2200      	movs	r2, #0
 800cc08:	4629      	mov	r1, r5
 800cc0a:	f7f3 fcf5 	bl	80005f8 <__aeabi_dmul>
 800cc0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc12:	f107 38ff 	add.w	r8, r7, #4294967295
 800cc16:	3601      	adds	r6, #1
 800cc18:	465c      	mov	r4, fp
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f7f3 fc82 	bl	8000524 <__aeabi_i2d>
 800cc20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc24:	f7f3 fce8 	bl	80005f8 <__aeabi_dmul>
 800cc28:	4b65      	ldr	r3, [pc, #404]	@ (800cdc0 <_dtoa_r+0x590>)
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f7f3 fb2e 	bl	800028c <__adddf3>
 800cc30:	4605      	mov	r5, r0
 800cc32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cc36:	2c00      	cmp	r4, #0
 800cc38:	d16a      	bne.n	800cd10 <_dtoa_r+0x4e0>
 800cc3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc3e:	4b61      	ldr	r3, [pc, #388]	@ (800cdc4 <_dtoa_r+0x594>)
 800cc40:	2200      	movs	r2, #0
 800cc42:	f7f3 fb21 	bl	8000288 <__aeabi_dsub>
 800cc46:	4602      	mov	r2, r0
 800cc48:	460b      	mov	r3, r1
 800cc4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cc4e:	462a      	mov	r2, r5
 800cc50:	4633      	mov	r3, r6
 800cc52:	f7f3 ff61 	bl	8000b18 <__aeabi_dcmpgt>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	f040 8298 	bne.w	800d18c <_dtoa_r+0x95c>
 800cc5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc60:	462a      	mov	r2, r5
 800cc62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cc66:	f7f3 ff39 	bl	8000adc <__aeabi_dcmplt>
 800cc6a:	bb38      	cbnz	r0, 800ccbc <_dtoa_r+0x48c>
 800cc6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800cc70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cc74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f2c0 8157 	blt.w	800cf2a <_dtoa_r+0x6fa>
 800cc7c:	2f0e      	cmp	r7, #14
 800cc7e:	f300 8154 	bgt.w	800cf2a <_dtoa_r+0x6fa>
 800cc82:	4b4b      	ldr	r3, [pc, #300]	@ (800cdb0 <_dtoa_r+0x580>)
 800cc84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc88:	ed93 7b00 	vldr	d7, [r3]
 800cc8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	ed8d 7b00 	vstr	d7, [sp]
 800cc94:	f280 80e5 	bge.w	800ce62 <_dtoa_r+0x632>
 800cc98:	9b03      	ldr	r3, [sp, #12]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	f300 80e1 	bgt.w	800ce62 <_dtoa_r+0x632>
 800cca0:	d10c      	bne.n	800ccbc <_dtoa_r+0x48c>
 800cca2:	4b48      	ldr	r3, [pc, #288]	@ (800cdc4 <_dtoa_r+0x594>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	ec51 0b17 	vmov	r0, r1, d7
 800ccaa:	f7f3 fca5 	bl	80005f8 <__aeabi_dmul>
 800ccae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccb2:	f7f3 ff27 	bl	8000b04 <__aeabi_dcmpge>
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	f000 8266 	beq.w	800d188 <_dtoa_r+0x958>
 800ccbc:	2400      	movs	r4, #0
 800ccbe:	4625      	mov	r5, r4
 800ccc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ccc2:	4656      	mov	r6, sl
 800ccc4:	ea6f 0803 	mvn.w	r8, r3
 800ccc8:	2700      	movs	r7, #0
 800ccca:	4621      	mov	r1, r4
 800cccc:	4648      	mov	r0, r9
 800ccce:	f000 fc09 	bl	800d4e4 <_Bfree>
 800ccd2:	2d00      	cmp	r5, #0
 800ccd4:	f000 80bd 	beq.w	800ce52 <_dtoa_r+0x622>
 800ccd8:	b12f      	cbz	r7, 800cce6 <_dtoa_r+0x4b6>
 800ccda:	42af      	cmp	r7, r5
 800ccdc:	d003      	beq.n	800cce6 <_dtoa_r+0x4b6>
 800ccde:	4639      	mov	r1, r7
 800cce0:	4648      	mov	r0, r9
 800cce2:	f000 fbff 	bl	800d4e4 <_Bfree>
 800cce6:	4629      	mov	r1, r5
 800cce8:	4648      	mov	r0, r9
 800ccea:	f000 fbfb 	bl	800d4e4 <_Bfree>
 800ccee:	e0b0      	b.n	800ce52 <_dtoa_r+0x622>
 800ccf0:	07e2      	lsls	r2, r4, #31
 800ccf2:	d505      	bpl.n	800cd00 <_dtoa_r+0x4d0>
 800ccf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ccf8:	f7f3 fc7e 	bl	80005f8 <__aeabi_dmul>
 800ccfc:	3601      	adds	r6, #1
 800ccfe:	2301      	movs	r3, #1
 800cd00:	1064      	asrs	r4, r4, #1
 800cd02:	3508      	adds	r5, #8
 800cd04:	e762      	b.n	800cbcc <_dtoa_r+0x39c>
 800cd06:	2602      	movs	r6, #2
 800cd08:	e765      	b.n	800cbd6 <_dtoa_r+0x3a6>
 800cd0a:	9c03      	ldr	r4, [sp, #12]
 800cd0c:	46b8      	mov	r8, r7
 800cd0e:	e784      	b.n	800cc1a <_dtoa_r+0x3ea>
 800cd10:	4b27      	ldr	r3, [pc, #156]	@ (800cdb0 <_dtoa_r+0x580>)
 800cd12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd1c:	4454      	add	r4, sl
 800cd1e:	2900      	cmp	r1, #0
 800cd20:	d054      	beq.n	800cdcc <_dtoa_r+0x59c>
 800cd22:	4929      	ldr	r1, [pc, #164]	@ (800cdc8 <_dtoa_r+0x598>)
 800cd24:	2000      	movs	r0, #0
 800cd26:	f7f3 fd91 	bl	800084c <__aeabi_ddiv>
 800cd2a:	4633      	mov	r3, r6
 800cd2c:	462a      	mov	r2, r5
 800cd2e:	f7f3 faab 	bl	8000288 <__aeabi_dsub>
 800cd32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cd36:	4656      	mov	r6, sl
 800cd38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd3c:	f7f3 ff0c 	bl	8000b58 <__aeabi_d2iz>
 800cd40:	4605      	mov	r5, r0
 800cd42:	f7f3 fbef 	bl	8000524 <__aeabi_i2d>
 800cd46:	4602      	mov	r2, r0
 800cd48:	460b      	mov	r3, r1
 800cd4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd4e:	f7f3 fa9b 	bl	8000288 <__aeabi_dsub>
 800cd52:	3530      	adds	r5, #48	@ 0x30
 800cd54:	4602      	mov	r2, r0
 800cd56:	460b      	mov	r3, r1
 800cd58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cd5c:	f806 5b01 	strb.w	r5, [r6], #1
 800cd60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cd64:	f7f3 feba 	bl	8000adc <__aeabi_dcmplt>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d172      	bne.n	800ce52 <_dtoa_r+0x622>
 800cd6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd70:	4911      	ldr	r1, [pc, #68]	@ (800cdb8 <_dtoa_r+0x588>)
 800cd72:	2000      	movs	r0, #0
 800cd74:	f7f3 fa88 	bl	8000288 <__aeabi_dsub>
 800cd78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cd7c:	f7f3 feae 	bl	8000adc <__aeabi_dcmplt>
 800cd80:	2800      	cmp	r0, #0
 800cd82:	f040 80b4 	bne.w	800ceee <_dtoa_r+0x6be>
 800cd86:	42a6      	cmp	r6, r4
 800cd88:	f43f af70 	beq.w	800cc6c <_dtoa_r+0x43c>
 800cd8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cd90:	4b0a      	ldr	r3, [pc, #40]	@ (800cdbc <_dtoa_r+0x58c>)
 800cd92:	2200      	movs	r2, #0
 800cd94:	f7f3 fc30 	bl	80005f8 <__aeabi_dmul>
 800cd98:	4b08      	ldr	r3, [pc, #32]	@ (800cdbc <_dtoa_r+0x58c>)
 800cd9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cd9e:	2200      	movs	r2, #0
 800cda0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cda4:	f7f3 fc28 	bl	80005f8 <__aeabi_dmul>
 800cda8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cdac:	e7c4      	b.n	800cd38 <_dtoa_r+0x508>
 800cdae:	bf00      	nop
 800cdb0:	0800e4f8 	.word	0x0800e4f8
 800cdb4:	0800e4d0 	.word	0x0800e4d0
 800cdb8:	3ff00000 	.word	0x3ff00000
 800cdbc:	40240000 	.word	0x40240000
 800cdc0:	401c0000 	.word	0x401c0000
 800cdc4:	40140000 	.word	0x40140000
 800cdc8:	3fe00000 	.word	0x3fe00000
 800cdcc:	4631      	mov	r1, r6
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f7f3 fc12 	bl	80005f8 <__aeabi_dmul>
 800cdd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cdd8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cdda:	4656      	mov	r6, sl
 800cddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cde0:	f7f3 feba 	bl	8000b58 <__aeabi_d2iz>
 800cde4:	4605      	mov	r5, r0
 800cde6:	f7f3 fb9d 	bl	8000524 <__aeabi_i2d>
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdf2:	f7f3 fa49 	bl	8000288 <__aeabi_dsub>
 800cdf6:	3530      	adds	r5, #48	@ 0x30
 800cdf8:	f806 5b01 	strb.w	r5, [r6], #1
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	460b      	mov	r3, r1
 800ce00:	42a6      	cmp	r6, r4
 800ce02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce06:	f04f 0200 	mov.w	r2, #0
 800ce0a:	d124      	bne.n	800ce56 <_dtoa_r+0x626>
 800ce0c:	4baf      	ldr	r3, [pc, #700]	@ (800d0cc <_dtoa_r+0x89c>)
 800ce0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ce12:	f7f3 fa3b 	bl	800028c <__adddf3>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce1e:	f7f3 fe7b 	bl	8000b18 <__aeabi_dcmpgt>
 800ce22:	2800      	cmp	r0, #0
 800ce24:	d163      	bne.n	800ceee <_dtoa_r+0x6be>
 800ce26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ce2a:	49a8      	ldr	r1, [pc, #672]	@ (800d0cc <_dtoa_r+0x89c>)
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	f7f3 fa2b 	bl	8000288 <__aeabi_dsub>
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce3a:	f7f3 fe4f 	bl	8000adc <__aeabi_dcmplt>
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	f43f af14 	beq.w	800cc6c <_dtoa_r+0x43c>
 800ce44:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ce46:	1e73      	subs	r3, r6, #1
 800ce48:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ce4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ce4e:	2b30      	cmp	r3, #48	@ 0x30
 800ce50:	d0f8      	beq.n	800ce44 <_dtoa_r+0x614>
 800ce52:	4647      	mov	r7, r8
 800ce54:	e03b      	b.n	800cece <_dtoa_r+0x69e>
 800ce56:	4b9e      	ldr	r3, [pc, #632]	@ (800d0d0 <_dtoa_r+0x8a0>)
 800ce58:	f7f3 fbce 	bl	80005f8 <__aeabi_dmul>
 800ce5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce60:	e7bc      	b.n	800cddc <_dtoa_r+0x5ac>
 800ce62:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ce66:	4656      	mov	r6, sl
 800ce68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	4629      	mov	r1, r5
 800ce70:	f7f3 fcec 	bl	800084c <__aeabi_ddiv>
 800ce74:	f7f3 fe70 	bl	8000b58 <__aeabi_d2iz>
 800ce78:	4680      	mov	r8, r0
 800ce7a:	f7f3 fb53 	bl	8000524 <__aeabi_i2d>
 800ce7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce82:	f7f3 fbb9 	bl	80005f8 <__aeabi_dmul>
 800ce86:	4602      	mov	r2, r0
 800ce88:	460b      	mov	r3, r1
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	4629      	mov	r1, r5
 800ce8e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ce92:	f7f3 f9f9 	bl	8000288 <__aeabi_dsub>
 800ce96:	f806 4b01 	strb.w	r4, [r6], #1
 800ce9a:	9d03      	ldr	r5, [sp, #12]
 800ce9c:	eba6 040a 	sub.w	r4, r6, sl
 800cea0:	42a5      	cmp	r5, r4
 800cea2:	4602      	mov	r2, r0
 800cea4:	460b      	mov	r3, r1
 800cea6:	d133      	bne.n	800cf10 <_dtoa_r+0x6e0>
 800cea8:	f7f3 f9f0 	bl	800028c <__adddf3>
 800ceac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	460d      	mov	r5, r1
 800ceb4:	f7f3 fe30 	bl	8000b18 <__aeabi_dcmpgt>
 800ceb8:	b9c0      	cbnz	r0, 800ceec <_dtoa_r+0x6bc>
 800ceba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cebe:	4620      	mov	r0, r4
 800cec0:	4629      	mov	r1, r5
 800cec2:	f7f3 fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 800cec6:	b110      	cbz	r0, 800cece <_dtoa_r+0x69e>
 800cec8:	f018 0f01 	tst.w	r8, #1
 800cecc:	d10e      	bne.n	800ceec <_dtoa_r+0x6bc>
 800cece:	9902      	ldr	r1, [sp, #8]
 800ced0:	4648      	mov	r0, r9
 800ced2:	f000 fb07 	bl	800d4e4 <_Bfree>
 800ced6:	2300      	movs	r3, #0
 800ced8:	7033      	strb	r3, [r6, #0]
 800ceda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cedc:	3701      	adds	r7, #1
 800cede:	601f      	str	r7, [r3, #0]
 800cee0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f000 824b 	beq.w	800d37e <_dtoa_r+0xb4e>
 800cee8:	601e      	str	r6, [r3, #0]
 800ceea:	e248      	b.n	800d37e <_dtoa_r+0xb4e>
 800ceec:	46b8      	mov	r8, r7
 800ceee:	4633      	mov	r3, r6
 800cef0:	461e      	mov	r6, r3
 800cef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cef6:	2a39      	cmp	r2, #57	@ 0x39
 800cef8:	d106      	bne.n	800cf08 <_dtoa_r+0x6d8>
 800cefa:	459a      	cmp	sl, r3
 800cefc:	d1f8      	bne.n	800cef0 <_dtoa_r+0x6c0>
 800cefe:	2230      	movs	r2, #48	@ 0x30
 800cf00:	f108 0801 	add.w	r8, r8, #1
 800cf04:	f88a 2000 	strb.w	r2, [sl]
 800cf08:	781a      	ldrb	r2, [r3, #0]
 800cf0a:	3201      	adds	r2, #1
 800cf0c:	701a      	strb	r2, [r3, #0]
 800cf0e:	e7a0      	b.n	800ce52 <_dtoa_r+0x622>
 800cf10:	4b6f      	ldr	r3, [pc, #444]	@ (800d0d0 <_dtoa_r+0x8a0>)
 800cf12:	2200      	movs	r2, #0
 800cf14:	f7f3 fb70 	bl	80005f8 <__aeabi_dmul>
 800cf18:	2200      	movs	r2, #0
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	460d      	mov	r5, r1
 800cf20:	f7f3 fdd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	d09f      	beq.n	800ce68 <_dtoa_r+0x638>
 800cf28:	e7d1      	b.n	800cece <_dtoa_r+0x69e>
 800cf2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf2c:	2a00      	cmp	r2, #0
 800cf2e:	f000 80ea 	beq.w	800d106 <_dtoa_r+0x8d6>
 800cf32:	9a07      	ldr	r2, [sp, #28]
 800cf34:	2a01      	cmp	r2, #1
 800cf36:	f300 80cd 	bgt.w	800d0d4 <_dtoa_r+0x8a4>
 800cf3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cf3c:	2a00      	cmp	r2, #0
 800cf3e:	f000 80c1 	beq.w	800d0c4 <_dtoa_r+0x894>
 800cf42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cf46:	9c08      	ldr	r4, [sp, #32]
 800cf48:	9e00      	ldr	r6, [sp, #0]
 800cf4a:	9a00      	ldr	r2, [sp, #0]
 800cf4c:	441a      	add	r2, r3
 800cf4e:	9200      	str	r2, [sp, #0]
 800cf50:	9a06      	ldr	r2, [sp, #24]
 800cf52:	2101      	movs	r1, #1
 800cf54:	441a      	add	r2, r3
 800cf56:	4648      	mov	r0, r9
 800cf58:	9206      	str	r2, [sp, #24]
 800cf5a:	f000 fb77 	bl	800d64c <__i2b>
 800cf5e:	4605      	mov	r5, r0
 800cf60:	b166      	cbz	r6, 800cf7c <_dtoa_r+0x74c>
 800cf62:	9b06      	ldr	r3, [sp, #24]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	dd09      	ble.n	800cf7c <_dtoa_r+0x74c>
 800cf68:	42b3      	cmp	r3, r6
 800cf6a:	9a00      	ldr	r2, [sp, #0]
 800cf6c:	bfa8      	it	ge
 800cf6e:	4633      	movge	r3, r6
 800cf70:	1ad2      	subs	r2, r2, r3
 800cf72:	9200      	str	r2, [sp, #0]
 800cf74:	9a06      	ldr	r2, [sp, #24]
 800cf76:	1af6      	subs	r6, r6, r3
 800cf78:	1ad3      	subs	r3, r2, r3
 800cf7a:	9306      	str	r3, [sp, #24]
 800cf7c:	9b08      	ldr	r3, [sp, #32]
 800cf7e:	b30b      	cbz	r3, 800cfc4 <_dtoa_r+0x794>
 800cf80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f000 80c6 	beq.w	800d114 <_dtoa_r+0x8e4>
 800cf88:	2c00      	cmp	r4, #0
 800cf8a:	f000 80c0 	beq.w	800d10e <_dtoa_r+0x8de>
 800cf8e:	4629      	mov	r1, r5
 800cf90:	4622      	mov	r2, r4
 800cf92:	4648      	mov	r0, r9
 800cf94:	f000 fc12 	bl	800d7bc <__pow5mult>
 800cf98:	9a02      	ldr	r2, [sp, #8]
 800cf9a:	4601      	mov	r1, r0
 800cf9c:	4605      	mov	r5, r0
 800cf9e:	4648      	mov	r0, r9
 800cfa0:	f000 fb6a 	bl	800d678 <__multiply>
 800cfa4:	9902      	ldr	r1, [sp, #8]
 800cfa6:	4680      	mov	r8, r0
 800cfa8:	4648      	mov	r0, r9
 800cfaa:	f000 fa9b 	bl	800d4e4 <_Bfree>
 800cfae:	9b08      	ldr	r3, [sp, #32]
 800cfb0:	1b1b      	subs	r3, r3, r4
 800cfb2:	9308      	str	r3, [sp, #32]
 800cfb4:	f000 80b1 	beq.w	800d11a <_dtoa_r+0x8ea>
 800cfb8:	9a08      	ldr	r2, [sp, #32]
 800cfba:	4641      	mov	r1, r8
 800cfbc:	4648      	mov	r0, r9
 800cfbe:	f000 fbfd 	bl	800d7bc <__pow5mult>
 800cfc2:	9002      	str	r0, [sp, #8]
 800cfc4:	2101      	movs	r1, #1
 800cfc6:	4648      	mov	r0, r9
 800cfc8:	f000 fb40 	bl	800d64c <__i2b>
 800cfcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cfce:	4604      	mov	r4, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f000 81d8 	beq.w	800d386 <_dtoa_r+0xb56>
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	4601      	mov	r1, r0
 800cfda:	4648      	mov	r0, r9
 800cfdc:	f000 fbee 	bl	800d7bc <__pow5mult>
 800cfe0:	9b07      	ldr	r3, [sp, #28]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	f300 809f 	bgt.w	800d128 <_dtoa_r+0x8f8>
 800cfea:	9b04      	ldr	r3, [sp, #16]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f040 8097 	bne.w	800d120 <_dtoa_r+0x8f0>
 800cff2:	9b05      	ldr	r3, [sp, #20]
 800cff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f040 8093 	bne.w	800d124 <_dtoa_r+0x8f4>
 800cffe:	9b05      	ldr	r3, [sp, #20]
 800d000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d004:	0d1b      	lsrs	r3, r3, #20
 800d006:	051b      	lsls	r3, r3, #20
 800d008:	b133      	cbz	r3, 800d018 <_dtoa_r+0x7e8>
 800d00a:	9b00      	ldr	r3, [sp, #0]
 800d00c:	3301      	adds	r3, #1
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	9b06      	ldr	r3, [sp, #24]
 800d012:	3301      	adds	r3, #1
 800d014:	9306      	str	r3, [sp, #24]
 800d016:	2301      	movs	r3, #1
 800d018:	9308      	str	r3, [sp, #32]
 800d01a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f000 81b8 	beq.w	800d392 <_dtoa_r+0xb62>
 800d022:	6923      	ldr	r3, [r4, #16]
 800d024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d028:	6918      	ldr	r0, [r3, #16]
 800d02a:	f000 fac3 	bl	800d5b4 <__hi0bits>
 800d02e:	f1c0 0020 	rsb	r0, r0, #32
 800d032:	9b06      	ldr	r3, [sp, #24]
 800d034:	4418      	add	r0, r3
 800d036:	f010 001f 	ands.w	r0, r0, #31
 800d03a:	f000 8082 	beq.w	800d142 <_dtoa_r+0x912>
 800d03e:	f1c0 0320 	rsb	r3, r0, #32
 800d042:	2b04      	cmp	r3, #4
 800d044:	dd73      	ble.n	800d12e <_dtoa_r+0x8fe>
 800d046:	9b00      	ldr	r3, [sp, #0]
 800d048:	f1c0 001c 	rsb	r0, r0, #28
 800d04c:	4403      	add	r3, r0
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	9b06      	ldr	r3, [sp, #24]
 800d052:	4403      	add	r3, r0
 800d054:	4406      	add	r6, r0
 800d056:	9306      	str	r3, [sp, #24]
 800d058:	9b00      	ldr	r3, [sp, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	dd05      	ble.n	800d06a <_dtoa_r+0x83a>
 800d05e:	9902      	ldr	r1, [sp, #8]
 800d060:	461a      	mov	r2, r3
 800d062:	4648      	mov	r0, r9
 800d064:	f000 fc04 	bl	800d870 <__lshift>
 800d068:	9002      	str	r0, [sp, #8]
 800d06a:	9b06      	ldr	r3, [sp, #24]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	dd05      	ble.n	800d07c <_dtoa_r+0x84c>
 800d070:	4621      	mov	r1, r4
 800d072:	461a      	mov	r2, r3
 800d074:	4648      	mov	r0, r9
 800d076:	f000 fbfb 	bl	800d870 <__lshift>
 800d07a:	4604      	mov	r4, r0
 800d07c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d061      	beq.n	800d146 <_dtoa_r+0x916>
 800d082:	9802      	ldr	r0, [sp, #8]
 800d084:	4621      	mov	r1, r4
 800d086:	f000 fc5f 	bl	800d948 <__mcmp>
 800d08a:	2800      	cmp	r0, #0
 800d08c:	da5b      	bge.n	800d146 <_dtoa_r+0x916>
 800d08e:	2300      	movs	r3, #0
 800d090:	9902      	ldr	r1, [sp, #8]
 800d092:	220a      	movs	r2, #10
 800d094:	4648      	mov	r0, r9
 800d096:	f000 fa47 	bl	800d528 <__multadd>
 800d09a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d09c:	9002      	str	r0, [sp, #8]
 800d09e:	f107 38ff 	add.w	r8, r7, #4294967295
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f000 8177 	beq.w	800d396 <_dtoa_r+0xb66>
 800d0a8:	4629      	mov	r1, r5
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	220a      	movs	r2, #10
 800d0ae:	4648      	mov	r0, r9
 800d0b0:	f000 fa3a 	bl	800d528 <__multadd>
 800d0b4:	f1bb 0f00 	cmp.w	fp, #0
 800d0b8:	4605      	mov	r5, r0
 800d0ba:	dc6f      	bgt.n	800d19c <_dtoa_r+0x96c>
 800d0bc:	9b07      	ldr	r3, [sp, #28]
 800d0be:	2b02      	cmp	r3, #2
 800d0c0:	dc49      	bgt.n	800d156 <_dtoa_r+0x926>
 800d0c2:	e06b      	b.n	800d19c <_dtoa_r+0x96c>
 800d0c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d0c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d0ca:	e73c      	b.n	800cf46 <_dtoa_r+0x716>
 800d0cc:	3fe00000 	.word	0x3fe00000
 800d0d0:	40240000 	.word	0x40240000
 800d0d4:	9b03      	ldr	r3, [sp, #12]
 800d0d6:	1e5c      	subs	r4, r3, #1
 800d0d8:	9b08      	ldr	r3, [sp, #32]
 800d0da:	42a3      	cmp	r3, r4
 800d0dc:	db09      	blt.n	800d0f2 <_dtoa_r+0x8c2>
 800d0de:	1b1c      	subs	r4, r3, r4
 800d0e0:	9b03      	ldr	r3, [sp, #12]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	f6bf af30 	bge.w	800cf48 <_dtoa_r+0x718>
 800d0e8:	9b00      	ldr	r3, [sp, #0]
 800d0ea:	9a03      	ldr	r2, [sp, #12]
 800d0ec:	1a9e      	subs	r6, r3, r2
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	e72b      	b.n	800cf4a <_dtoa_r+0x71a>
 800d0f2:	9b08      	ldr	r3, [sp, #32]
 800d0f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d0f6:	9408      	str	r4, [sp, #32]
 800d0f8:	1ae3      	subs	r3, r4, r3
 800d0fa:	441a      	add	r2, r3
 800d0fc:	9e00      	ldr	r6, [sp, #0]
 800d0fe:	9b03      	ldr	r3, [sp, #12]
 800d100:	920d      	str	r2, [sp, #52]	@ 0x34
 800d102:	2400      	movs	r4, #0
 800d104:	e721      	b.n	800cf4a <_dtoa_r+0x71a>
 800d106:	9c08      	ldr	r4, [sp, #32]
 800d108:	9e00      	ldr	r6, [sp, #0]
 800d10a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d10c:	e728      	b.n	800cf60 <_dtoa_r+0x730>
 800d10e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d112:	e751      	b.n	800cfb8 <_dtoa_r+0x788>
 800d114:	9a08      	ldr	r2, [sp, #32]
 800d116:	9902      	ldr	r1, [sp, #8]
 800d118:	e750      	b.n	800cfbc <_dtoa_r+0x78c>
 800d11a:	f8cd 8008 	str.w	r8, [sp, #8]
 800d11e:	e751      	b.n	800cfc4 <_dtoa_r+0x794>
 800d120:	2300      	movs	r3, #0
 800d122:	e779      	b.n	800d018 <_dtoa_r+0x7e8>
 800d124:	9b04      	ldr	r3, [sp, #16]
 800d126:	e777      	b.n	800d018 <_dtoa_r+0x7e8>
 800d128:	2300      	movs	r3, #0
 800d12a:	9308      	str	r3, [sp, #32]
 800d12c:	e779      	b.n	800d022 <_dtoa_r+0x7f2>
 800d12e:	d093      	beq.n	800d058 <_dtoa_r+0x828>
 800d130:	9a00      	ldr	r2, [sp, #0]
 800d132:	331c      	adds	r3, #28
 800d134:	441a      	add	r2, r3
 800d136:	9200      	str	r2, [sp, #0]
 800d138:	9a06      	ldr	r2, [sp, #24]
 800d13a:	441a      	add	r2, r3
 800d13c:	441e      	add	r6, r3
 800d13e:	9206      	str	r2, [sp, #24]
 800d140:	e78a      	b.n	800d058 <_dtoa_r+0x828>
 800d142:	4603      	mov	r3, r0
 800d144:	e7f4      	b.n	800d130 <_dtoa_r+0x900>
 800d146:	9b03      	ldr	r3, [sp, #12]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	46b8      	mov	r8, r7
 800d14c:	dc20      	bgt.n	800d190 <_dtoa_r+0x960>
 800d14e:	469b      	mov	fp, r3
 800d150:	9b07      	ldr	r3, [sp, #28]
 800d152:	2b02      	cmp	r3, #2
 800d154:	dd1e      	ble.n	800d194 <_dtoa_r+0x964>
 800d156:	f1bb 0f00 	cmp.w	fp, #0
 800d15a:	f47f adb1 	bne.w	800ccc0 <_dtoa_r+0x490>
 800d15e:	4621      	mov	r1, r4
 800d160:	465b      	mov	r3, fp
 800d162:	2205      	movs	r2, #5
 800d164:	4648      	mov	r0, r9
 800d166:	f000 f9df 	bl	800d528 <__multadd>
 800d16a:	4601      	mov	r1, r0
 800d16c:	4604      	mov	r4, r0
 800d16e:	9802      	ldr	r0, [sp, #8]
 800d170:	f000 fbea 	bl	800d948 <__mcmp>
 800d174:	2800      	cmp	r0, #0
 800d176:	f77f ada3 	ble.w	800ccc0 <_dtoa_r+0x490>
 800d17a:	4656      	mov	r6, sl
 800d17c:	2331      	movs	r3, #49	@ 0x31
 800d17e:	f806 3b01 	strb.w	r3, [r6], #1
 800d182:	f108 0801 	add.w	r8, r8, #1
 800d186:	e59f      	b.n	800ccc8 <_dtoa_r+0x498>
 800d188:	9c03      	ldr	r4, [sp, #12]
 800d18a:	46b8      	mov	r8, r7
 800d18c:	4625      	mov	r5, r4
 800d18e:	e7f4      	b.n	800d17a <_dtoa_r+0x94a>
 800d190:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d196:	2b00      	cmp	r3, #0
 800d198:	f000 8101 	beq.w	800d39e <_dtoa_r+0xb6e>
 800d19c:	2e00      	cmp	r6, #0
 800d19e:	dd05      	ble.n	800d1ac <_dtoa_r+0x97c>
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	4632      	mov	r2, r6
 800d1a4:	4648      	mov	r0, r9
 800d1a6:	f000 fb63 	bl	800d870 <__lshift>
 800d1aa:	4605      	mov	r5, r0
 800d1ac:	9b08      	ldr	r3, [sp, #32]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d05c      	beq.n	800d26c <_dtoa_r+0xa3c>
 800d1b2:	6869      	ldr	r1, [r5, #4]
 800d1b4:	4648      	mov	r0, r9
 800d1b6:	f000 f955 	bl	800d464 <_Balloc>
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	b928      	cbnz	r0, 800d1ca <_dtoa_r+0x99a>
 800d1be:	4b82      	ldr	r3, [pc, #520]	@ (800d3c8 <_dtoa_r+0xb98>)
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d1c6:	f7ff bb4a 	b.w	800c85e <_dtoa_r+0x2e>
 800d1ca:	692a      	ldr	r2, [r5, #16]
 800d1cc:	3202      	adds	r2, #2
 800d1ce:	0092      	lsls	r2, r2, #2
 800d1d0:	f105 010c 	add.w	r1, r5, #12
 800d1d4:	300c      	adds	r0, #12
 800d1d6:	f000 ff41 	bl	800e05c <memcpy>
 800d1da:	2201      	movs	r2, #1
 800d1dc:	4631      	mov	r1, r6
 800d1de:	4648      	mov	r0, r9
 800d1e0:	f000 fb46 	bl	800d870 <__lshift>
 800d1e4:	f10a 0301 	add.w	r3, sl, #1
 800d1e8:	9300      	str	r3, [sp, #0]
 800d1ea:	eb0a 030b 	add.w	r3, sl, fp
 800d1ee:	9308      	str	r3, [sp, #32]
 800d1f0:	9b04      	ldr	r3, [sp, #16]
 800d1f2:	f003 0301 	and.w	r3, r3, #1
 800d1f6:	462f      	mov	r7, r5
 800d1f8:	9306      	str	r3, [sp, #24]
 800d1fa:	4605      	mov	r5, r0
 800d1fc:	9b00      	ldr	r3, [sp, #0]
 800d1fe:	9802      	ldr	r0, [sp, #8]
 800d200:	4621      	mov	r1, r4
 800d202:	f103 3bff 	add.w	fp, r3, #4294967295
 800d206:	f7ff fa8a 	bl	800c71e <quorem>
 800d20a:	4603      	mov	r3, r0
 800d20c:	3330      	adds	r3, #48	@ 0x30
 800d20e:	9003      	str	r0, [sp, #12]
 800d210:	4639      	mov	r1, r7
 800d212:	9802      	ldr	r0, [sp, #8]
 800d214:	9309      	str	r3, [sp, #36]	@ 0x24
 800d216:	f000 fb97 	bl	800d948 <__mcmp>
 800d21a:	462a      	mov	r2, r5
 800d21c:	9004      	str	r0, [sp, #16]
 800d21e:	4621      	mov	r1, r4
 800d220:	4648      	mov	r0, r9
 800d222:	f000 fbad 	bl	800d980 <__mdiff>
 800d226:	68c2      	ldr	r2, [r0, #12]
 800d228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d22a:	4606      	mov	r6, r0
 800d22c:	bb02      	cbnz	r2, 800d270 <_dtoa_r+0xa40>
 800d22e:	4601      	mov	r1, r0
 800d230:	9802      	ldr	r0, [sp, #8]
 800d232:	f000 fb89 	bl	800d948 <__mcmp>
 800d236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d238:	4602      	mov	r2, r0
 800d23a:	4631      	mov	r1, r6
 800d23c:	4648      	mov	r0, r9
 800d23e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d240:	9309      	str	r3, [sp, #36]	@ 0x24
 800d242:	f000 f94f 	bl	800d4e4 <_Bfree>
 800d246:	9b07      	ldr	r3, [sp, #28]
 800d248:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d24a:	9e00      	ldr	r6, [sp, #0]
 800d24c:	ea42 0103 	orr.w	r1, r2, r3
 800d250:	9b06      	ldr	r3, [sp, #24]
 800d252:	4319      	orrs	r1, r3
 800d254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d256:	d10d      	bne.n	800d274 <_dtoa_r+0xa44>
 800d258:	2b39      	cmp	r3, #57	@ 0x39
 800d25a:	d027      	beq.n	800d2ac <_dtoa_r+0xa7c>
 800d25c:	9a04      	ldr	r2, [sp, #16]
 800d25e:	2a00      	cmp	r2, #0
 800d260:	dd01      	ble.n	800d266 <_dtoa_r+0xa36>
 800d262:	9b03      	ldr	r3, [sp, #12]
 800d264:	3331      	adds	r3, #49	@ 0x31
 800d266:	f88b 3000 	strb.w	r3, [fp]
 800d26a:	e52e      	b.n	800ccca <_dtoa_r+0x49a>
 800d26c:	4628      	mov	r0, r5
 800d26e:	e7b9      	b.n	800d1e4 <_dtoa_r+0x9b4>
 800d270:	2201      	movs	r2, #1
 800d272:	e7e2      	b.n	800d23a <_dtoa_r+0xa0a>
 800d274:	9904      	ldr	r1, [sp, #16]
 800d276:	2900      	cmp	r1, #0
 800d278:	db04      	blt.n	800d284 <_dtoa_r+0xa54>
 800d27a:	9807      	ldr	r0, [sp, #28]
 800d27c:	4301      	orrs	r1, r0
 800d27e:	9806      	ldr	r0, [sp, #24]
 800d280:	4301      	orrs	r1, r0
 800d282:	d120      	bne.n	800d2c6 <_dtoa_r+0xa96>
 800d284:	2a00      	cmp	r2, #0
 800d286:	ddee      	ble.n	800d266 <_dtoa_r+0xa36>
 800d288:	9902      	ldr	r1, [sp, #8]
 800d28a:	9300      	str	r3, [sp, #0]
 800d28c:	2201      	movs	r2, #1
 800d28e:	4648      	mov	r0, r9
 800d290:	f000 faee 	bl	800d870 <__lshift>
 800d294:	4621      	mov	r1, r4
 800d296:	9002      	str	r0, [sp, #8]
 800d298:	f000 fb56 	bl	800d948 <__mcmp>
 800d29c:	2800      	cmp	r0, #0
 800d29e:	9b00      	ldr	r3, [sp, #0]
 800d2a0:	dc02      	bgt.n	800d2a8 <_dtoa_r+0xa78>
 800d2a2:	d1e0      	bne.n	800d266 <_dtoa_r+0xa36>
 800d2a4:	07da      	lsls	r2, r3, #31
 800d2a6:	d5de      	bpl.n	800d266 <_dtoa_r+0xa36>
 800d2a8:	2b39      	cmp	r3, #57	@ 0x39
 800d2aa:	d1da      	bne.n	800d262 <_dtoa_r+0xa32>
 800d2ac:	2339      	movs	r3, #57	@ 0x39
 800d2ae:	f88b 3000 	strb.w	r3, [fp]
 800d2b2:	4633      	mov	r3, r6
 800d2b4:	461e      	mov	r6, r3
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d2bc:	2a39      	cmp	r2, #57	@ 0x39
 800d2be:	d04e      	beq.n	800d35e <_dtoa_r+0xb2e>
 800d2c0:	3201      	adds	r2, #1
 800d2c2:	701a      	strb	r2, [r3, #0]
 800d2c4:	e501      	b.n	800ccca <_dtoa_r+0x49a>
 800d2c6:	2a00      	cmp	r2, #0
 800d2c8:	dd03      	ble.n	800d2d2 <_dtoa_r+0xaa2>
 800d2ca:	2b39      	cmp	r3, #57	@ 0x39
 800d2cc:	d0ee      	beq.n	800d2ac <_dtoa_r+0xa7c>
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	e7c9      	b.n	800d266 <_dtoa_r+0xa36>
 800d2d2:	9a00      	ldr	r2, [sp, #0]
 800d2d4:	9908      	ldr	r1, [sp, #32]
 800d2d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d2da:	428a      	cmp	r2, r1
 800d2dc:	d028      	beq.n	800d330 <_dtoa_r+0xb00>
 800d2de:	9902      	ldr	r1, [sp, #8]
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	220a      	movs	r2, #10
 800d2e4:	4648      	mov	r0, r9
 800d2e6:	f000 f91f 	bl	800d528 <__multadd>
 800d2ea:	42af      	cmp	r7, r5
 800d2ec:	9002      	str	r0, [sp, #8]
 800d2ee:	f04f 0300 	mov.w	r3, #0
 800d2f2:	f04f 020a 	mov.w	r2, #10
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	4648      	mov	r0, r9
 800d2fa:	d107      	bne.n	800d30c <_dtoa_r+0xadc>
 800d2fc:	f000 f914 	bl	800d528 <__multadd>
 800d300:	4607      	mov	r7, r0
 800d302:	4605      	mov	r5, r0
 800d304:	9b00      	ldr	r3, [sp, #0]
 800d306:	3301      	adds	r3, #1
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	e777      	b.n	800d1fc <_dtoa_r+0x9cc>
 800d30c:	f000 f90c 	bl	800d528 <__multadd>
 800d310:	4629      	mov	r1, r5
 800d312:	4607      	mov	r7, r0
 800d314:	2300      	movs	r3, #0
 800d316:	220a      	movs	r2, #10
 800d318:	4648      	mov	r0, r9
 800d31a:	f000 f905 	bl	800d528 <__multadd>
 800d31e:	4605      	mov	r5, r0
 800d320:	e7f0      	b.n	800d304 <_dtoa_r+0xad4>
 800d322:	f1bb 0f00 	cmp.w	fp, #0
 800d326:	bfcc      	ite	gt
 800d328:	465e      	movgt	r6, fp
 800d32a:	2601      	movle	r6, #1
 800d32c:	4456      	add	r6, sl
 800d32e:	2700      	movs	r7, #0
 800d330:	9902      	ldr	r1, [sp, #8]
 800d332:	9300      	str	r3, [sp, #0]
 800d334:	2201      	movs	r2, #1
 800d336:	4648      	mov	r0, r9
 800d338:	f000 fa9a 	bl	800d870 <__lshift>
 800d33c:	4621      	mov	r1, r4
 800d33e:	9002      	str	r0, [sp, #8]
 800d340:	f000 fb02 	bl	800d948 <__mcmp>
 800d344:	2800      	cmp	r0, #0
 800d346:	dcb4      	bgt.n	800d2b2 <_dtoa_r+0xa82>
 800d348:	d102      	bne.n	800d350 <_dtoa_r+0xb20>
 800d34a:	9b00      	ldr	r3, [sp, #0]
 800d34c:	07db      	lsls	r3, r3, #31
 800d34e:	d4b0      	bmi.n	800d2b2 <_dtoa_r+0xa82>
 800d350:	4633      	mov	r3, r6
 800d352:	461e      	mov	r6, r3
 800d354:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d358:	2a30      	cmp	r2, #48	@ 0x30
 800d35a:	d0fa      	beq.n	800d352 <_dtoa_r+0xb22>
 800d35c:	e4b5      	b.n	800ccca <_dtoa_r+0x49a>
 800d35e:	459a      	cmp	sl, r3
 800d360:	d1a8      	bne.n	800d2b4 <_dtoa_r+0xa84>
 800d362:	2331      	movs	r3, #49	@ 0x31
 800d364:	f108 0801 	add.w	r8, r8, #1
 800d368:	f88a 3000 	strb.w	r3, [sl]
 800d36c:	e4ad      	b.n	800ccca <_dtoa_r+0x49a>
 800d36e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d370:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d3cc <_dtoa_r+0xb9c>
 800d374:	b11b      	cbz	r3, 800d37e <_dtoa_r+0xb4e>
 800d376:	f10a 0308 	add.w	r3, sl, #8
 800d37a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d37c:	6013      	str	r3, [r2, #0]
 800d37e:	4650      	mov	r0, sl
 800d380:	b017      	add	sp, #92	@ 0x5c
 800d382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d386:	9b07      	ldr	r3, [sp, #28]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	f77f ae2e 	ble.w	800cfea <_dtoa_r+0x7ba>
 800d38e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d390:	9308      	str	r3, [sp, #32]
 800d392:	2001      	movs	r0, #1
 800d394:	e64d      	b.n	800d032 <_dtoa_r+0x802>
 800d396:	f1bb 0f00 	cmp.w	fp, #0
 800d39a:	f77f aed9 	ble.w	800d150 <_dtoa_r+0x920>
 800d39e:	4656      	mov	r6, sl
 800d3a0:	9802      	ldr	r0, [sp, #8]
 800d3a2:	4621      	mov	r1, r4
 800d3a4:	f7ff f9bb 	bl	800c71e <quorem>
 800d3a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d3ac:	f806 3b01 	strb.w	r3, [r6], #1
 800d3b0:	eba6 020a 	sub.w	r2, r6, sl
 800d3b4:	4593      	cmp	fp, r2
 800d3b6:	ddb4      	ble.n	800d322 <_dtoa_r+0xaf2>
 800d3b8:	9902      	ldr	r1, [sp, #8]
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	220a      	movs	r2, #10
 800d3be:	4648      	mov	r0, r9
 800d3c0:	f000 f8b2 	bl	800d528 <__multadd>
 800d3c4:	9002      	str	r0, [sp, #8]
 800d3c6:	e7eb      	b.n	800d3a0 <_dtoa_r+0xb70>
 800d3c8:	0800e3fc 	.word	0x0800e3fc
 800d3cc:	0800e380 	.word	0x0800e380

0800d3d0 <_free_r>:
 800d3d0:	b538      	push	{r3, r4, r5, lr}
 800d3d2:	4605      	mov	r5, r0
 800d3d4:	2900      	cmp	r1, #0
 800d3d6:	d041      	beq.n	800d45c <_free_r+0x8c>
 800d3d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3dc:	1f0c      	subs	r4, r1, #4
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	bfb8      	it	lt
 800d3e2:	18e4      	addlt	r4, r4, r3
 800d3e4:	f7fe fb92 	bl	800bb0c <__malloc_lock>
 800d3e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d460 <_free_r+0x90>)
 800d3ea:	6813      	ldr	r3, [r2, #0]
 800d3ec:	b933      	cbnz	r3, 800d3fc <_free_r+0x2c>
 800d3ee:	6063      	str	r3, [r4, #4]
 800d3f0:	6014      	str	r4, [r2, #0]
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3f8:	f7fe bb8e 	b.w	800bb18 <__malloc_unlock>
 800d3fc:	42a3      	cmp	r3, r4
 800d3fe:	d908      	bls.n	800d412 <_free_r+0x42>
 800d400:	6820      	ldr	r0, [r4, #0]
 800d402:	1821      	adds	r1, r4, r0
 800d404:	428b      	cmp	r3, r1
 800d406:	bf01      	itttt	eq
 800d408:	6819      	ldreq	r1, [r3, #0]
 800d40a:	685b      	ldreq	r3, [r3, #4]
 800d40c:	1809      	addeq	r1, r1, r0
 800d40e:	6021      	streq	r1, [r4, #0]
 800d410:	e7ed      	b.n	800d3ee <_free_r+0x1e>
 800d412:	461a      	mov	r2, r3
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	b10b      	cbz	r3, 800d41c <_free_r+0x4c>
 800d418:	42a3      	cmp	r3, r4
 800d41a:	d9fa      	bls.n	800d412 <_free_r+0x42>
 800d41c:	6811      	ldr	r1, [r2, #0]
 800d41e:	1850      	adds	r0, r2, r1
 800d420:	42a0      	cmp	r0, r4
 800d422:	d10b      	bne.n	800d43c <_free_r+0x6c>
 800d424:	6820      	ldr	r0, [r4, #0]
 800d426:	4401      	add	r1, r0
 800d428:	1850      	adds	r0, r2, r1
 800d42a:	4283      	cmp	r3, r0
 800d42c:	6011      	str	r1, [r2, #0]
 800d42e:	d1e0      	bne.n	800d3f2 <_free_r+0x22>
 800d430:	6818      	ldr	r0, [r3, #0]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	6053      	str	r3, [r2, #4]
 800d436:	4408      	add	r0, r1
 800d438:	6010      	str	r0, [r2, #0]
 800d43a:	e7da      	b.n	800d3f2 <_free_r+0x22>
 800d43c:	d902      	bls.n	800d444 <_free_r+0x74>
 800d43e:	230c      	movs	r3, #12
 800d440:	602b      	str	r3, [r5, #0]
 800d442:	e7d6      	b.n	800d3f2 <_free_r+0x22>
 800d444:	6820      	ldr	r0, [r4, #0]
 800d446:	1821      	adds	r1, r4, r0
 800d448:	428b      	cmp	r3, r1
 800d44a:	bf04      	itt	eq
 800d44c:	6819      	ldreq	r1, [r3, #0]
 800d44e:	685b      	ldreq	r3, [r3, #4]
 800d450:	6063      	str	r3, [r4, #4]
 800d452:	bf04      	itt	eq
 800d454:	1809      	addeq	r1, r1, r0
 800d456:	6021      	streq	r1, [r4, #0]
 800d458:	6054      	str	r4, [r2, #4]
 800d45a:	e7ca      	b.n	800d3f2 <_free_r+0x22>
 800d45c:	bd38      	pop	{r3, r4, r5, pc}
 800d45e:	bf00      	nop
 800d460:	20000c88 	.word	0x20000c88

0800d464 <_Balloc>:
 800d464:	b570      	push	{r4, r5, r6, lr}
 800d466:	69c6      	ldr	r6, [r0, #28]
 800d468:	4604      	mov	r4, r0
 800d46a:	460d      	mov	r5, r1
 800d46c:	b976      	cbnz	r6, 800d48c <_Balloc+0x28>
 800d46e:	2010      	movs	r0, #16
 800d470:	f7fe fa9a 	bl	800b9a8 <malloc>
 800d474:	4602      	mov	r2, r0
 800d476:	61e0      	str	r0, [r4, #28]
 800d478:	b920      	cbnz	r0, 800d484 <_Balloc+0x20>
 800d47a:	4b18      	ldr	r3, [pc, #96]	@ (800d4dc <_Balloc+0x78>)
 800d47c:	4818      	ldr	r0, [pc, #96]	@ (800d4e0 <_Balloc+0x7c>)
 800d47e:	216b      	movs	r1, #107	@ 0x6b
 800d480:	f000 fdfa 	bl	800e078 <__assert_func>
 800d484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d488:	6006      	str	r6, [r0, #0]
 800d48a:	60c6      	str	r6, [r0, #12]
 800d48c:	69e6      	ldr	r6, [r4, #28]
 800d48e:	68f3      	ldr	r3, [r6, #12]
 800d490:	b183      	cbz	r3, 800d4b4 <_Balloc+0x50>
 800d492:	69e3      	ldr	r3, [r4, #28]
 800d494:	68db      	ldr	r3, [r3, #12]
 800d496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d49a:	b9b8      	cbnz	r0, 800d4cc <_Balloc+0x68>
 800d49c:	2101      	movs	r1, #1
 800d49e:	fa01 f605 	lsl.w	r6, r1, r5
 800d4a2:	1d72      	adds	r2, r6, #5
 800d4a4:	0092      	lsls	r2, r2, #2
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f000 fe04 	bl	800e0b4 <_calloc_r>
 800d4ac:	b160      	cbz	r0, 800d4c8 <_Balloc+0x64>
 800d4ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4b2:	e00e      	b.n	800d4d2 <_Balloc+0x6e>
 800d4b4:	2221      	movs	r2, #33	@ 0x21
 800d4b6:	2104      	movs	r1, #4
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f000 fdfb 	bl	800e0b4 <_calloc_r>
 800d4be:	69e3      	ldr	r3, [r4, #28]
 800d4c0:	60f0      	str	r0, [r6, #12]
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d1e4      	bne.n	800d492 <_Balloc+0x2e>
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	bd70      	pop	{r4, r5, r6, pc}
 800d4cc:	6802      	ldr	r2, [r0, #0]
 800d4ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4d8:	e7f7      	b.n	800d4ca <_Balloc+0x66>
 800d4da:	bf00      	nop
 800d4dc:	0800e38d 	.word	0x0800e38d
 800d4e0:	0800e40d 	.word	0x0800e40d

0800d4e4 <_Bfree>:
 800d4e4:	b570      	push	{r4, r5, r6, lr}
 800d4e6:	69c6      	ldr	r6, [r0, #28]
 800d4e8:	4605      	mov	r5, r0
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	b976      	cbnz	r6, 800d50c <_Bfree+0x28>
 800d4ee:	2010      	movs	r0, #16
 800d4f0:	f7fe fa5a 	bl	800b9a8 <malloc>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	61e8      	str	r0, [r5, #28]
 800d4f8:	b920      	cbnz	r0, 800d504 <_Bfree+0x20>
 800d4fa:	4b09      	ldr	r3, [pc, #36]	@ (800d520 <_Bfree+0x3c>)
 800d4fc:	4809      	ldr	r0, [pc, #36]	@ (800d524 <_Bfree+0x40>)
 800d4fe:	218f      	movs	r1, #143	@ 0x8f
 800d500:	f000 fdba 	bl	800e078 <__assert_func>
 800d504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d508:	6006      	str	r6, [r0, #0]
 800d50a:	60c6      	str	r6, [r0, #12]
 800d50c:	b13c      	cbz	r4, 800d51e <_Bfree+0x3a>
 800d50e:	69eb      	ldr	r3, [r5, #28]
 800d510:	6862      	ldr	r2, [r4, #4]
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d518:	6021      	str	r1, [r4, #0]
 800d51a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d51e:	bd70      	pop	{r4, r5, r6, pc}
 800d520:	0800e38d 	.word	0x0800e38d
 800d524:	0800e40d 	.word	0x0800e40d

0800d528 <__multadd>:
 800d528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d52c:	690d      	ldr	r5, [r1, #16]
 800d52e:	4607      	mov	r7, r0
 800d530:	460c      	mov	r4, r1
 800d532:	461e      	mov	r6, r3
 800d534:	f101 0c14 	add.w	ip, r1, #20
 800d538:	2000      	movs	r0, #0
 800d53a:	f8dc 3000 	ldr.w	r3, [ip]
 800d53e:	b299      	uxth	r1, r3
 800d540:	fb02 6101 	mla	r1, r2, r1, r6
 800d544:	0c1e      	lsrs	r6, r3, #16
 800d546:	0c0b      	lsrs	r3, r1, #16
 800d548:	fb02 3306 	mla	r3, r2, r6, r3
 800d54c:	b289      	uxth	r1, r1
 800d54e:	3001      	adds	r0, #1
 800d550:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d554:	4285      	cmp	r5, r0
 800d556:	f84c 1b04 	str.w	r1, [ip], #4
 800d55a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d55e:	dcec      	bgt.n	800d53a <__multadd+0x12>
 800d560:	b30e      	cbz	r6, 800d5a6 <__multadd+0x7e>
 800d562:	68a3      	ldr	r3, [r4, #8]
 800d564:	42ab      	cmp	r3, r5
 800d566:	dc19      	bgt.n	800d59c <__multadd+0x74>
 800d568:	6861      	ldr	r1, [r4, #4]
 800d56a:	4638      	mov	r0, r7
 800d56c:	3101      	adds	r1, #1
 800d56e:	f7ff ff79 	bl	800d464 <_Balloc>
 800d572:	4680      	mov	r8, r0
 800d574:	b928      	cbnz	r0, 800d582 <__multadd+0x5a>
 800d576:	4602      	mov	r2, r0
 800d578:	4b0c      	ldr	r3, [pc, #48]	@ (800d5ac <__multadd+0x84>)
 800d57a:	480d      	ldr	r0, [pc, #52]	@ (800d5b0 <__multadd+0x88>)
 800d57c:	21ba      	movs	r1, #186	@ 0xba
 800d57e:	f000 fd7b 	bl	800e078 <__assert_func>
 800d582:	6922      	ldr	r2, [r4, #16]
 800d584:	3202      	adds	r2, #2
 800d586:	f104 010c 	add.w	r1, r4, #12
 800d58a:	0092      	lsls	r2, r2, #2
 800d58c:	300c      	adds	r0, #12
 800d58e:	f000 fd65 	bl	800e05c <memcpy>
 800d592:	4621      	mov	r1, r4
 800d594:	4638      	mov	r0, r7
 800d596:	f7ff ffa5 	bl	800d4e4 <_Bfree>
 800d59a:	4644      	mov	r4, r8
 800d59c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5a0:	3501      	adds	r5, #1
 800d5a2:	615e      	str	r6, [r3, #20]
 800d5a4:	6125      	str	r5, [r4, #16]
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ac:	0800e3fc 	.word	0x0800e3fc
 800d5b0:	0800e40d 	.word	0x0800e40d

0800d5b4 <__hi0bits>:
 800d5b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	bf36      	itet	cc
 800d5bc:	0403      	lslcc	r3, r0, #16
 800d5be:	2000      	movcs	r0, #0
 800d5c0:	2010      	movcc	r0, #16
 800d5c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d5c6:	bf3c      	itt	cc
 800d5c8:	021b      	lslcc	r3, r3, #8
 800d5ca:	3008      	addcc	r0, #8
 800d5cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d5d0:	bf3c      	itt	cc
 800d5d2:	011b      	lslcc	r3, r3, #4
 800d5d4:	3004      	addcc	r0, #4
 800d5d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5da:	bf3c      	itt	cc
 800d5dc:	009b      	lslcc	r3, r3, #2
 800d5de:	3002      	addcc	r0, #2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	db05      	blt.n	800d5f0 <__hi0bits+0x3c>
 800d5e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d5e8:	f100 0001 	add.w	r0, r0, #1
 800d5ec:	bf08      	it	eq
 800d5ee:	2020      	moveq	r0, #32
 800d5f0:	4770      	bx	lr

0800d5f2 <__lo0bits>:
 800d5f2:	6803      	ldr	r3, [r0, #0]
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	f013 0007 	ands.w	r0, r3, #7
 800d5fa:	d00b      	beq.n	800d614 <__lo0bits+0x22>
 800d5fc:	07d9      	lsls	r1, r3, #31
 800d5fe:	d421      	bmi.n	800d644 <__lo0bits+0x52>
 800d600:	0798      	lsls	r0, r3, #30
 800d602:	bf49      	itett	mi
 800d604:	085b      	lsrmi	r3, r3, #1
 800d606:	089b      	lsrpl	r3, r3, #2
 800d608:	2001      	movmi	r0, #1
 800d60a:	6013      	strmi	r3, [r2, #0]
 800d60c:	bf5c      	itt	pl
 800d60e:	6013      	strpl	r3, [r2, #0]
 800d610:	2002      	movpl	r0, #2
 800d612:	4770      	bx	lr
 800d614:	b299      	uxth	r1, r3
 800d616:	b909      	cbnz	r1, 800d61c <__lo0bits+0x2a>
 800d618:	0c1b      	lsrs	r3, r3, #16
 800d61a:	2010      	movs	r0, #16
 800d61c:	b2d9      	uxtb	r1, r3
 800d61e:	b909      	cbnz	r1, 800d624 <__lo0bits+0x32>
 800d620:	3008      	adds	r0, #8
 800d622:	0a1b      	lsrs	r3, r3, #8
 800d624:	0719      	lsls	r1, r3, #28
 800d626:	bf04      	itt	eq
 800d628:	091b      	lsreq	r3, r3, #4
 800d62a:	3004      	addeq	r0, #4
 800d62c:	0799      	lsls	r1, r3, #30
 800d62e:	bf04      	itt	eq
 800d630:	089b      	lsreq	r3, r3, #2
 800d632:	3002      	addeq	r0, #2
 800d634:	07d9      	lsls	r1, r3, #31
 800d636:	d403      	bmi.n	800d640 <__lo0bits+0x4e>
 800d638:	085b      	lsrs	r3, r3, #1
 800d63a:	f100 0001 	add.w	r0, r0, #1
 800d63e:	d003      	beq.n	800d648 <__lo0bits+0x56>
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	4770      	bx	lr
 800d644:	2000      	movs	r0, #0
 800d646:	4770      	bx	lr
 800d648:	2020      	movs	r0, #32
 800d64a:	4770      	bx	lr

0800d64c <__i2b>:
 800d64c:	b510      	push	{r4, lr}
 800d64e:	460c      	mov	r4, r1
 800d650:	2101      	movs	r1, #1
 800d652:	f7ff ff07 	bl	800d464 <_Balloc>
 800d656:	4602      	mov	r2, r0
 800d658:	b928      	cbnz	r0, 800d666 <__i2b+0x1a>
 800d65a:	4b05      	ldr	r3, [pc, #20]	@ (800d670 <__i2b+0x24>)
 800d65c:	4805      	ldr	r0, [pc, #20]	@ (800d674 <__i2b+0x28>)
 800d65e:	f240 1145 	movw	r1, #325	@ 0x145
 800d662:	f000 fd09 	bl	800e078 <__assert_func>
 800d666:	2301      	movs	r3, #1
 800d668:	6144      	str	r4, [r0, #20]
 800d66a:	6103      	str	r3, [r0, #16]
 800d66c:	bd10      	pop	{r4, pc}
 800d66e:	bf00      	nop
 800d670:	0800e3fc 	.word	0x0800e3fc
 800d674:	0800e40d 	.word	0x0800e40d

0800d678 <__multiply>:
 800d678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67c:	4617      	mov	r7, r2
 800d67e:	690a      	ldr	r2, [r1, #16]
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	429a      	cmp	r2, r3
 800d684:	bfa8      	it	ge
 800d686:	463b      	movge	r3, r7
 800d688:	4689      	mov	r9, r1
 800d68a:	bfa4      	itt	ge
 800d68c:	460f      	movge	r7, r1
 800d68e:	4699      	movge	r9, r3
 800d690:	693d      	ldr	r5, [r7, #16]
 800d692:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	6879      	ldr	r1, [r7, #4]
 800d69a:	eb05 060a 	add.w	r6, r5, sl
 800d69e:	42b3      	cmp	r3, r6
 800d6a0:	b085      	sub	sp, #20
 800d6a2:	bfb8      	it	lt
 800d6a4:	3101      	addlt	r1, #1
 800d6a6:	f7ff fedd 	bl	800d464 <_Balloc>
 800d6aa:	b930      	cbnz	r0, 800d6ba <__multiply+0x42>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	4b41      	ldr	r3, [pc, #260]	@ (800d7b4 <__multiply+0x13c>)
 800d6b0:	4841      	ldr	r0, [pc, #260]	@ (800d7b8 <__multiply+0x140>)
 800d6b2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d6b6:	f000 fcdf 	bl	800e078 <__assert_func>
 800d6ba:	f100 0414 	add.w	r4, r0, #20
 800d6be:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d6c2:	4623      	mov	r3, r4
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	4573      	cmp	r3, lr
 800d6c8:	d320      	bcc.n	800d70c <__multiply+0x94>
 800d6ca:	f107 0814 	add.w	r8, r7, #20
 800d6ce:	f109 0114 	add.w	r1, r9, #20
 800d6d2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d6d6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d6da:	9302      	str	r3, [sp, #8]
 800d6dc:	1beb      	subs	r3, r5, r7
 800d6de:	3b15      	subs	r3, #21
 800d6e0:	f023 0303 	bic.w	r3, r3, #3
 800d6e4:	3304      	adds	r3, #4
 800d6e6:	3715      	adds	r7, #21
 800d6e8:	42bd      	cmp	r5, r7
 800d6ea:	bf38      	it	cc
 800d6ec:	2304      	movcc	r3, #4
 800d6ee:	9301      	str	r3, [sp, #4]
 800d6f0:	9b02      	ldr	r3, [sp, #8]
 800d6f2:	9103      	str	r1, [sp, #12]
 800d6f4:	428b      	cmp	r3, r1
 800d6f6:	d80c      	bhi.n	800d712 <__multiply+0x9a>
 800d6f8:	2e00      	cmp	r6, #0
 800d6fa:	dd03      	ble.n	800d704 <__multiply+0x8c>
 800d6fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d700:	2b00      	cmp	r3, #0
 800d702:	d055      	beq.n	800d7b0 <__multiply+0x138>
 800d704:	6106      	str	r6, [r0, #16]
 800d706:	b005      	add	sp, #20
 800d708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d70c:	f843 2b04 	str.w	r2, [r3], #4
 800d710:	e7d9      	b.n	800d6c6 <__multiply+0x4e>
 800d712:	f8b1 a000 	ldrh.w	sl, [r1]
 800d716:	f1ba 0f00 	cmp.w	sl, #0
 800d71a:	d01f      	beq.n	800d75c <__multiply+0xe4>
 800d71c:	46c4      	mov	ip, r8
 800d71e:	46a1      	mov	r9, r4
 800d720:	2700      	movs	r7, #0
 800d722:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d726:	f8d9 3000 	ldr.w	r3, [r9]
 800d72a:	fa1f fb82 	uxth.w	fp, r2
 800d72e:	b29b      	uxth	r3, r3
 800d730:	fb0a 330b 	mla	r3, sl, fp, r3
 800d734:	443b      	add	r3, r7
 800d736:	f8d9 7000 	ldr.w	r7, [r9]
 800d73a:	0c12      	lsrs	r2, r2, #16
 800d73c:	0c3f      	lsrs	r7, r7, #16
 800d73e:	fb0a 7202 	mla	r2, sl, r2, r7
 800d742:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d746:	b29b      	uxth	r3, r3
 800d748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d74c:	4565      	cmp	r5, ip
 800d74e:	f849 3b04 	str.w	r3, [r9], #4
 800d752:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d756:	d8e4      	bhi.n	800d722 <__multiply+0xaa>
 800d758:	9b01      	ldr	r3, [sp, #4]
 800d75a:	50e7      	str	r7, [r4, r3]
 800d75c:	9b03      	ldr	r3, [sp, #12]
 800d75e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d762:	3104      	adds	r1, #4
 800d764:	f1b9 0f00 	cmp.w	r9, #0
 800d768:	d020      	beq.n	800d7ac <__multiply+0x134>
 800d76a:	6823      	ldr	r3, [r4, #0]
 800d76c:	4647      	mov	r7, r8
 800d76e:	46a4      	mov	ip, r4
 800d770:	f04f 0a00 	mov.w	sl, #0
 800d774:	f8b7 b000 	ldrh.w	fp, [r7]
 800d778:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d77c:	fb09 220b 	mla	r2, r9, fp, r2
 800d780:	4452      	add	r2, sl
 800d782:	b29b      	uxth	r3, r3
 800d784:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d788:	f84c 3b04 	str.w	r3, [ip], #4
 800d78c:	f857 3b04 	ldr.w	r3, [r7], #4
 800d790:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d794:	f8bc 3000 	ldrh.w	r3, [ip]
 800d798:	fb09 330a 	mla	r3, r9, sl, r3
 800d79c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d7a0:	42bd      	cmp	r5, r7
 800d7a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d7a6:	d8e5      	bhi.n	800d774 <__multiply+0xfc>
 800d7a8:	9a01      	ldr	r2, [sp, #4]
 800d7aa:	50a3      	str	r3, [r4, r2]
 800d7ac:	3404      	adds	r4, #4
 800d7ae:	e79f      	b.n	800d6f0 <__multiply+0x78>
 800d7b0:	3e01      	subs	r6, #1
 800d7b2:	e7a1      	b.n	800d6f8 <__multiply+0x80>
 800d7b4:	0800e3fc 	.word	0x0800e3fc
 800d7b8:	0800e40d 	.word	0x0800e40d

0800d7bc <__pow5mult>:
 800d7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7c0:	4615      	mov	r5, r2
 800d7c2:	f012 0203 	ands.w	r2, r2, #3
 800d7c6:	4607      	mov	r7, r0
 800d7c8:	460e      	mov	r6, r1
 800d7ca:	d007      	beq.n	800d7dc <__pow5mult+0x20>
 800d7cc:	4c25      	ldr	r4, [pc, #148]	@ (800d864 <__pow5mult+0xa8>)
 800d7ce:	3a01      	subs	r2, #1
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7d6:	f7ff fea7 	bl	800d528 <__multadd>
 800d7da:	4606      	mov	r6, r0
 800d7dc:	10ad      	asrs	r5, r5, #2
 800d7de:	d03d      	beq.n	800d85c <__pow5mult+0xa0>
 800d7e0:	69fc      	ldr	r4, [r7, #28]
 800d7e2:	b97c      	cbnz	r4, 800d804 <__pow5mult+0x48>
 800d7e4:	2010      	movs	r0, #16
 800d7e6:	f7fe f8df 	bl	800b9a8 <malloc>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	61f8      	str	r0, [r7, #28]
 800d7ee:	b928      	cbnz	r0, 800d7fc <__pow5mult+0x40>
 800d7f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d868 <__pow5mult+0xac>)
 800d7f2:	481e      	ldr	r0, [pc, #120]	@ (800d86c <__pow5mult+0xb0>)
 800d7f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d7f8:	f000 fc3e 	bl	800e078 <__assert_func>
 800d7fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d800:	6004      	str	r4, [r0, #0]
 800d802:	60c4      	str	r4, [r0, #12]
 800d804:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d80c:	b94c      	cbnz	r4, 800d822 <__pow5mult+0x66>
 800d80e:	f240 2171 	movw	r1, #625	@ 0x271
 800d812:	4638      	mov	r0, r7
 800d814:	f7ff ff1a 	bl	800d64c <__i2b>
 800d818:	2300      	movs	r3, #0
 800d81a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d81e:	4604      	mov	r4, r0
 800d820:	6003      	str	r3, [r0, #0]
 800d822:	f04f 0900 	mov.w	r9, #0
 800d826:	07eb      	lsls	r3, r5, #31
 800d828:	d50a      	bpl.n	800d840 <__pow5mult+0x84>
 800d82a:	4631      	mov	r1, r6
 800d82c:	4622      	mov	r2, r4
 800d82e:	4638      	mov	r0, r7
 800d830:	f7ff ff22 	bl	800d678 <__multiply>
 800d834:	4631      	mov	r1, r6
 800d836:	4680      	mov	r8, r0
 800d838:	4638      	mov	r0, r7
 800d83a:	f7ff fe53 	bl	800d4e4 <_Bfree>
 800d83e:	4646      	mov	r6, r8
 800d840:	106d      	asrs	r5, r5, #1
 800d842:	d00b      	beq.n	800d85c <__pow5mult+0xa0>
 800d844:	6820      	ldr	r0, [r4, #0]
 800d846:	b938      	cbnz	r0, 800d858 <__pow5mult+0x9c>
 800d848:	4622      	mov	r2, r4
 800d84a:	4621      	mov	r1, r4
 800d84c:	4638      	mov	r0, r7
 800d84e:	f7ff ff13 	bl	800d678 <__multiply>
 800d852:	6020      	str	r0, [r4, #0]
 800d854:	f8c0 9000 	str.w	r9, [r0]
 800d858:	4604      	mov	r4, r0
 800d85a:	e7e4      	b.n	800d826 <__pow5mult+0x6a>
 800d85c:	4630      	mov	r0, r6
 800d85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d862:	bf00      	nop
 800d864:	0800e4c0 	.word	0x0800e4c0
 800d868:	0800e38d 	.word	0x0800e38d
 800d86c:	0800e40d 	.word	0x0800e40d

0800d870 <__lshift>:
 800d870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d874:	460c      	mov	r4, r1
 800d876:	6849      	ldr	r1, [r1, #4]
 800d878:	6923      	ldr	r3, [r4, #16]
 800d87a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d87e:	68a3      	ldr	r3, [r4, #8]
 800d880:	4607      	mov	r7, r0
 800d882:	4691      	mov	r9, r2
 800d884:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d888:	f108 0601 	add.w	r6, r8, #1
 800d88c:	42b3      	cmp	r3, r6
 800d88e:	db0b      	blt.n	800d8a8 <__lshift+0x38>
 800d890:	4638      	mov	r0, r7
 800d892:	f7ff fde7 	bl	800d464 <_Balloc>
 800d896:	4605      	mov	r5, r0
 800d898:	b948      	cbnz	r0, 800d8ae <__lshift+0x3e>
 800d89a:	4602      	mov	r2, r0
 800d89c:	4b28      	ldr	r3, [pc, #160]	@ (800d940 <__lshift+0xd0>)
 800d89e:	4829      	ldr	r0, [pc, #164]	@ (800d944 <__lshift+0xd4>)
 800d8a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d8a4:	f000 fbe8 	bl	800e078 <__assert_func>
 800d8a8:	3101      	adds	r1, #1
 800d8aa:	005b      	lsls	r3, r3, #1
 800d8ac:	e7ee      	b.n	800d88c <__lshift+0x1c>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	f100 0114 	add.w	r1, r0, #20
 800d8b4:	f100 0210 	add.w	r2, r0, #16
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	4553      	cmp	r3, sl
 800d8bc:	db33      	blt.n	800d926 <__lshift+0xb6>
 800d8be:	6920      	ldr	r0, [r4, #16]
 800d8c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8c4:	f104 0314 	add.w	r3, r4, #20
 800d8c8:	f019 091f 	ands.w	r9, r9, #31
 800d8cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d8d4:	d02b      	beq.n	800d92e <__lshift+0xbe>
 800d8d6:	f1c9 0e20 	rsb	lr, r9, #32
 800d8da:	468a      	mov	sl, r1
 800d8dc:	2200      	movs	r2, #0
 800d8de:	6818      	ldr	r0, [r3, #0]
 800d8e0:	fa00 f009 	lsl.w	r0, r0, r9
 800d8e4:	4310      	orrs	r0, r2
 800d8e6:	f84a 0b04 	str.w	r0, [sl], #4
 800d8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ee:	459c      	cmp	ip, r3
 800d8f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8f4:	d8f3      	bhi.n	800d8de <__lshift+0x6e>
 800d8f6:	ebac 0304 	sub.w	r3, ip, r4
 800d8fa:	3b15      	subs	r3, #21
 800d8fc:	f023 0303 	bic.w	r3, r3, #3
 800d900:	3304      	adds	r3, #4
 800d902:	f104 0015 	add.w	r0, r4, #21
 800d906:	4560      	cmp	r0, ip
 800d908:	bf88      	it	hi
 800d90a:	2304      	movhi	r3, #4
 800d90c:	50ca      	str	r2, [r1, r3]
 800d90e:	b10a      	cbz	r2, 800d914 <__lshift+0xa4>
 800d910:	f108 0602 	add.w	r6, r8, #2
 800d914:	3e01      	subs	r6, #1
 800d916:	4638      	mov	r0, r7
 800d918:	612e      	str	r6, [r5, #16]
 800d91a:	4621      	mov	r1, r4
 800d91c:	f7ff fde2 	bl	800d4e4 <_Bfree>
 800d920:	4628      	mov	r0, r5
 800d922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d926:	f842 0f04 	str.w	r0, [r2, #4]!
 800d92a:	3301      	adds	r3, #1
 800d92c:	e7c5      	b.n	800d8ba <__lshift+0x4a>
 800d92e:	3904      	subs	r1, #4
 800d930:	f853 2b04 	ldr.w	r2, [r3], #4
 800d934:	f841 2f04 	str.w	r2, [r1, #4]!
 800d938:	459c      	cmp	ip, r3
 800d93a:	d8f9      	bhi.n	800d930 <__lshift+0xc0>
 800d93c:	e7ea      	b.n	800d914 <__lshift+0xa4>
 800d93e:	bf00      	nop
 800d940:	0800e3fc 	.word	0x0800e3fc
 800d944:	0800e40d 	.word	0x0800e40d

0800d948 <__mcmp>:
 800d948:	690a      	ldr	r2, [r1, #16]
 800d94a:	4603      	mov	r3, r0
 800d94c:	6900      	ldr	r0, [r0, #16]
 800d94e:	1a80      	subs	r0, r0, r2
 800d950:	b530      	push	{r4, r5, lr}
 800d952:	d10e      	bne.n	800d972 <__mcmp+0x2a>
 800d954:	3314      	adds	r3, #20
 800d956:	3114      	adds	r1, #20
 800d958:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d95c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d960:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d964:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d968:	4295      	cmp	r5, r2
 800d96a:	d003      	beq.n	800d974 <__mcmp+0x2c>
 800d96c:	d205      	bcs.n	800d97a <__mcmp+0x32>
 800d96e:	f04f 30ff 	mov.w	r0, #4294967295
 800d972:	bd30      	pop	{r4, r5, pc}
 800d974:	42a3      	cmp	r3, r4
 800d976:	d3f3      	bcc.n	800d960 <__mcmp+0x18>
 800d978:	e7fb      	b.n	800d972 <__mcmp+0x2a>
 800d97a:	2001      	movs	r0, #1
 800d97c:	e7f9      	b.n	800d972 <__mcmp+0x2a>
	...

0800d980 <__mdiff>:
 800d980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d984:	4689      	mov	r9, r1
 800d986:	4606      	mov	r6, r0
 800d988:	4611      	mov	r1, r2
 800d98a:	4648      	mov	r0, r9
 800d98c:	4614      	mov	r4, r2
 800d98e:	f7ff ffdb 	bl	800d948 <__mcmp>
 800d992:	1e05      	subs	r5, r0, #0
 800d994:	d112      	bne.n	800d9bc <__mdiff+0x3c>
 800d996:	4629      	mov	r1, r5
 800d998:	4630      	mov	r0, r6
 800d99a:	f7ff fd63 	bl	800d464 <_Balloc>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	b928      	cbnz	r0, 800d9ae <__mdiff+0x2e>
 800d9a2:	4b3f      	ldr	r3, [pc, #252]	@ (800daa0 <__mdiff+0x120>)
 800d9a4:	f240 2137 	movw	r1, #567	@ 0x237
 800d9a8:	483e      	ldr	r0, [pc, #248]	@ (800daa4 <__mdiff+0x124>)
 800d9aa:	f000 fb65 	bl	800e078 <__assert_func>
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d9b4:	4610      	mov	r0, r2
 800d9b6:	b003      	add	sp, #12
 800d9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9bc:	bfbc      	itt	lt
 800d9be:	464b      	movlt	r3, r9
 800d9c0:	46a1      	movlt	r9, r4
 800d9c2:	4630      	mov	r0, r6
 800d9c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d9c8:	bfba      	itte	lt
 800d9ca:	461c      	movlt	r4, r3
 800d9cc:	2501      	movlt	r5, #1
 800d9ce:	2500      	movge	r5, #0
 800d9d0:	f7ff fd48 	bl	800d464 <_Balloc>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	b918      	cbnz	r0, 800d9e0 <__mdiff+0x60>
 800d9d8:	4b31      	ldr	r3, [pc, #196]	@ (800daa0 <__mdiff+0x120>)
 800d9da:	f240 2145 	movw	r1, #581	@ 0x245
 800d9de:	e7e3      	b.n	800d9a8 <__mdiff+0x28>
 800d9e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d9e4:	6926      	ldr	r6, [r4, #16]
 800d9e6:	60c5      	str	r5, [r0, #12]
 800d9e8:	f109 0310 	add.w	r3, r9, #16
 800d9ec:	f109 0514 	add.w	r5, r9, #20
 800d9f0:	f104 0e14 	add.w	lr, r4, #20
 800d9f4:	f100 0b14 	add.w	fp, r0, #20
 800d9f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d9fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800da00:	9301      	str	r3, [sp, #4]
 800da02:	46d9      	mov	r9, fp
 800da04:	f04f 0c00 	mov.w	ip, #0
 800da08:	9b01      	ldr	r3, [sp, #4]
 800da0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800da0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800da12:	9301      	str	r3, [sp, #4]
 800da14:	fa1f f38a 	uxth.w	r3, sl
 800da18:	4619      	mov	r1, r3
 800da1a:	b283      	uxth	r3, r0
 800da1c:	1acb      	subs	r3, r1, r3
 800da1e:	0c00      	lsrs	r0, r0, #16
 800da20:	4463      	add	r3, ip
 800da22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800da26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800da30:	4576      	cmp	r6, lr
 800da32:	f849 3b04 	str.w	r3, [r9], #4
 800da36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da3a:	d8e5      	bhi.n	800da08 <__mdiff+0x88>
 800da3c:	1b33      	subs	r3, r6, r4
 800da3e:	3b15      	subs	r3, #21
 800da40:	f023 0303 	bic.w	r3, r3, #3
 800da44:	3415      	adds	r4, #21
 800da46:	3304      	adds	r3, #4
 800da48:	42a6      	cmp	r6, r4
 800da4a:	bf38      	it	cc
 800da4c:	2304      	movcc	r3, #4
 800da4e:	441d      	add	r5, r3
 800da50:	445b      	add	r3, fp
 800da52:	461e      	mov	r6, r3
 800da54:	462c      	mov	r4, r5
 800da56:	4544      	cmp	r4, r8
 800da58:	d30e      	bcc.n	800da78 <__mdiff+0xf8>
 800da5a:	f108 0103 	add.w	r1, r8, #3
 800da5e:	1b49      	subs	r1, r1, r5
 800da60:	f021 0103 	bic.w	r1, r1, #3
 800da64:	3d03      	subs	r5, #3
 800da66:	45a8      	cmp	r8, r5
 800da68:	bf38      	it	cc
 800da6a:	2100      	movcc	r1, #0
 800da6c:	440b      	add	r3, r1
 800da6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da72:	b191      	cbz	r1, 800da9a <__mdiff+0x11a>
 800da74:	6117      	str	r7, [r2, #16]
 800da76:	e79d      	b.n	800d9b4 <__mdiff+0x34>
 800da78:	f854 1b04 	ldr.w	r1, [r4], #4
 800da7c:	46e6      	mov	lr, ip
 800da7e:	0c08      	lsrs	r0, r1, #16
 800da80:	fa1c fc81 	uxtah	ip, ip, r1
 800da84:	4471      	add	r1, lr
 800da86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800da8a:	b289      	uxth	r1, r1
 800da8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800da90:	f846 1b04 	str.w	r1, [r6], #4
 800da94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da98:	e7dd      	b.n	800da56 <__mdiff+0xd6>
 800da9a:	3f01      	subs	r7, #1
 800da9c:	e7e7      	b.n	800da6e <__mdiff+0xee>
 800da9e:	bf00      	nop
 800daa0:	0800e3fc 	.word	0x0800e3fc
 800daa4:	0800e40d 	.word	0x0800e40d

0800daa8 <__d2b>:
 800daa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800daac:	460f      	mov	r7, r1
 800daae:	2101      	movs	r1, #1
 800dab0:	ec59 8b10 	vmov	r8, r9, d0
 800dab4:	4616      	mov	r6, r2
 800dab6:	f7ff fcd5 	bl	800d464 <_Balloc>
 800daba:	4604      	mov	r4, r0
 800dabc:	b930      	cbnz	r0, 800dacc <__d2b+0x24>
 800dabe:	4602      	mov	r2, r0
 800dac0:	4b23      	ldr	r3, [pc, #140]	@ (800db50 <__d2b+0xa8>)
 800dac2:	4824      	ldr	r0, [pc, #144]	@ (800db54 <__d2b+0xac>)
 800dac4:	f240 310f 	movw	r1, #783	@ 0x30f
 800dac8:	f000 fad6 	bl	800e078 <__assert_func>
 800dacc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dad0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dad4:	b10d      	cbz	r5, 800dada <__d2b+0x32>
 800dad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dada:	9301      	str	r3, [sp, #4]
 800dadc:	f1b8 0300 	subs.w	r3, r8, #0
 800dae0:	d023      	beq.n	800db2a <__d2b+0x82>
 800dae2:	4668      	mov	r0, sp
 800dae4:	9300      	str	r3, [sp, #0]
 800dae6:	f7ff fd84 	bl	800d5f2 <__lo0bits>
 800daea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800daee:	b1d0      	cbz	r0, 800db26 <__d2b+0x7e>
 800daf0:	f1c0 0320 	rsb	r3, r0, #32
 800daf4:	fa02 f303 	lsl.w	r3, r2, r3
 800daf8:	430b      	orrs	r3, r1
 800dafa:	40c2      	lsrs	r2, r0
 800dafc:	6163      	str	r3, [r4, #20]
 800dafe:	9201      	str	r2, [sp, #4]
 800db00:	9b01      	ldr	r3, [sp, #4]
 800db02:	61a3      	str	r3, [r4, #24]
 800db04:	2b00      	cmp	r3, #0
 800db06:	bf0c      	ite	eq
 800db08:	2201      	moveq	r2, #1
 800db0a:	2202      	movne	r2, #2
 800db0c:	6122      	str	r2, [r4, #16]
 800db0e:	b1a5      	cbz	r5, 800db3a <__d2b+0x92>
 800db10:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800db14:	4405      	add	r5, r0
 800db16:	603d      	str	r5, [r7, #0]
 800db18:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800db1c:	6030      	str	r0, [r6, #0]
 800db1e:	4620      	mov	r0, r4
 800db20:	b003      	add	sp, #12
 800db22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db26:	6161      	str	r1, [r4, #20]
 800db28:	e7ea      	b.n	800db00 <__d2b+0x58>
 800db2a:	a801      	add	r0, sp, #4
 800db2c:	f7ff fd61 	bl	800d5f2 <__lo0bits>
 800db30:	9b01      	ldr	r3, [sp, #4]
 800db32:	6163      	str	r3, [r4, #20]
 800db34:	3020      	adds	r0, #32
 800db36:	2201      	movs	r2, #1
 800db38:	e7e8      	b.n	800db0c <__d2b+0x64>
 800db3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800db42:	6038      	str	r0, [r7, #0]
 800db44:	6918      	ldr	r0, [r3, #16]
 800db46:	f7ff fd35 	bl	800d5b4 <__hi0bits>
 800db4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db4e:	e7e5      	b.n	800db1c <__d2b+0x74>
 800db50:	0800e3fc 	.word	0x0800e3fc
 800db54:	0800e40d 	.word	0x0800e40d

0800db58 <__sfputc_r>:
 800db58:	6893      	ldr	r3, [r2, #8]
 800db5a:	3b01      	subs	r3, #1
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	b410      	push	{r4}
 800db60:	6093      	str	r3, [r2, #8]
 800db62:	da08      	bge.n	800db76 <__sfputc_r+0x1e>
 800db64:	6994      	ldr	r4, [r2, #24]
 800db66:	42a3      	cmp	r3, r4
 800db68:	db01      	blt.n	800db6e <__sfputc_r+0x16>
 800db6a:	290a      	cmp	r1, #10
 800db6c:	d103      	bne.n	800db76 <__sfputc_r+0x1e>
 800db6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db72:	f000 b9df 	b.w	800df34 <__swbuf_r>
 800db76:	6813      	ldr	r3, [r2, #0]
 800db78:	1c58      	adds	r0, r3, #1
 800db7a:	6010      	str	r0, [r2, #0]
 800db7c:	7019      	strb	r1, [r3, #0]
 800db7e:	4608      	mov	r0, r1
 800db80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db84:	4770      	bx	lr

0800db86 <__sfputs_r>:
 800db86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db88:	4606      	mov	r6, r0
 800db8a:	460f      	mov	r7, r1
 800db8c:	4614      	mov	r4, r2
 800db8e:	18d5      	adds	r5, r2, r3
 800db90:	42ac      	cmp	r4, r5
 800db92:	d101      	bne.n	800db98 <__sfputs_r+0x12>
 800db94:	2000      	movs	r0, #0
 800db96:	e007      	b.n	800dba8 <__sfputs_r+0x22>
 800db98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db9c:	463a      	mov	r2, r7
 800db9e:	4630      	mov	r0, r6
 800dba0:	f7ff ffda 	bl	800db58 <__sfputc_r>
 800dba4:	1c43      	adds	r3, r0, #1
 800dba6:	d1f3      	bne.n	800db90 <__sfputs_r+0xa>
 800dba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dbac <_vfiprintf_r>:
 800dbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb0:	460d      	mov	r5, r1
 800dbb2:	b09d      	sub	sp, #116	@ 0x74
 800dbb4:	4614      	mov	r4, r2
 800dbb6:	4698      	mov	r8, r3
 800dbb8:	4606      	mov	r6, r0
 800dbba:	b118      	cbz	r0, 800dbc4 <_vfiprintf_r+0x18>
 800dbbc:	6a03      	ldr	r3, [r0, #32]
 800dbbe:	b90b      	cbnz	r3, 800dbc4 <_vfiprintf_r+0x18>
 800dbc0:	f7fe fc92 	bl	800c4e8 <__sinit>
 800dbc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbc6:	07d9      	lsls	r1, r3, #31
 800dbc8:	d405      	bmi.n	800dbd6 <_vfiprintf_r+0x2a>
 800dbca:	89ab      	ldrh	r3, [r5, #12]
 800dbcc:	059a      	lsls	r2, r3, #22
 800dbce:	d402      	bmi.n	800dbd6 <_vfiprintf_r+0x2a>
 800dbd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbd2:	f7fe fda2 	bl	800c71a <__retarget_lock_acquire_recursive>
 800dbd6:	89ab      	ldrh	r3, [r5, #12]
 800dbd8:	071b      	lsls	r3, r3, #28
 800dbda:	d501      	bpl.n	800dbe0 <_vfiprintf_r+0x34>
 800dbdc:	692b      	ldr	r3, [r5, #16]
 800dbde:	b99b      	cbnz	r3, 800dc08 <_vfiprintf_r+0x5c>
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	f000 f9e4 	bl	800dfb0 <__swsetup_r>
 800dbe8:	b170      	cbz	r0, 800dc08 <_vfiprintf_r+0x5c>
 800dbea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbec:	07dc      	lsls	r4, r3, #31
 800dbee:	d504      	bpl.n	800dbfa <_vfiprintf_r+0x4e>
 800dbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf4:	b01d      	add	sp, #116	@ 0x74
 800dbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfa:	89ab      	ldrh	r3, [r5, #12]
 800dbfc:	0598      	lsls	r0, r3, #22
 800dbfe:	d4f7      	bmi.n	800dbf0 <_vfiprintf_r+0x44>
 800dc00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc02:	f7fe fd8b 	bl	800c71c <__retarget_lock_release_recursive>
 800dc06:	e7f3      	b.n	800dbf0 <_vfiprintf_r+0x44>
 800dc08:	2300      	movs	r3, #0
 800dc0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc0c:	2320      	movs	r3, #32
 800dc0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc12:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc16:	2330      	movs	r3, #48	@ 0x30
 800dc18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ddc8 <_vfiprintf_r+0x21c>
 800dc1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc20:	f04f 0901 	mov.w	r9, #1
 800dc24:	4623      	mov	r3, r4
 800dc26:	469a      	mov	sl, r3
 800dc28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc2c:	b10a      	cbz	r2, 800dc32 <_vfiprintf_r+0x86>
 800dc2e:	2a25      	cmp	r2, #37	@ 0x25
 800dc30:	d1f9      	bne.n	800dc26 <_vfiprintf_r+0x7a>
 800dc32:	ebba 0b04 	subs.w	fp, sl, r4
 800dc36:	d00b      	beq.n	800dc50 <_vfiprintf_r+0xa4>
 800dc38:	465b      	mov	r3, fp
 800dc3a:	4622      	mov	r2, r4
 800dc3c:	4629      	mov	r1, r5
 800dc3e:	4630      	mov	r0, r6
 800dc40:	f7ff ffa1 	bl	800db86 <__sfputs_r>
 800dc44:	3001      	adds	r0, #1
 800dc46:	f000 80a7 	beq.w	800dd98 <_vfiprintf_r+0x1ec>
 800dc4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc4c:	445a      	add	r2, fp
 800dc4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc50:	f89a 3000 	ldrb.w	r3, [sl]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	f000 809f 	beq.w	800dd98 <_vfiprintf_r+0x1ec>
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc64:	f10a 0a01 	add.w	sl, sl, #1
 800dc68:	9304      	str	r3, [sp, #16]
 800dc6a:	9307      	str	r3, [sp, #28]
 800dc6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc70:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc72:	4654      	mov	r4, sl
 800dc74:	2205      	movs	r2, #5
 800dc76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc7a:	4853      	ldr	r0, [pc, #332]	@ (800ddc8 <_vfiprintf_r+0x21c>)
 800dc7c:	f7f2 faa8 	bl	80001d0 <memchr>
 800dc80:	9a04      	ldr	r2, [sp, #16]
 800dc82:	b9d8      	cbnz	r0, 800dcbc <_vfiprintf_r+0x110>
 800dc84:	06d1      	lsls	r1, r2, #27
 800dc86:	bf44      	itt	mi
 800dc88:	2320      	movmi	r3, #32
 800dc8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc8e:	0713      	lsls	r3, r2, #28
 800dc90:	bf44      	itt	mi
 800dc92:	232b      	movmi	r3, #43	@ 0x2b
 800dc94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc98:	f89a 3000 	ldrb.w	r3, [sl]
 800dc9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc9e:	d015      	beq.n	800dccc <_vfiprintf_r+0x120>
 800dca0:	9a07      	ldr	r2, [sp, #28]
 800dca2:	4654      	mov	r4, sl
 800dca4:	2000      	movs	r0, #0
 800dca6:	f04f 0c0a 	mov.w	ip, #10
 800dcaa:	4621      	mov	r1, r4
 800dcac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcb0:	3b30      	subs	r3, #48	@ 0x30
 800dcb2:	2b09      	cmp	r3, #9
 800dcb4:	d94b      	bls.n	800dd4e <_vfiprintf_r+0x1a2>
 800dcb6:	b1b0      	cbz	r0, 800dce6 <_vfiprintf_r+0x13a>
 800dcb8:	9207      	str	r2, [sp, #28]
 800dcba:	e014      	b.n	800dce6 <_vfiprintf_r+0x13a>
 800dcbc:	eba0 0308 	sub.w	r3, r0, r8
 800dcc0:	fa09 f303 	lsl.w	r3, r9, r3
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	9304      	str	r3, [sp, #16]
 800dcc8:	46a2      	mov	sl, r4
 800dcca:	e7d2      	b.n	800dc72 <_vfiprintf_r+0xc6>
 800dccc:	9b03      	ldr	r3, [sp, #12]
 800dcce:	1d19      	adds	r1, r3, #4
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	9103      	str	r1, [sp, #12]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	bfbb      	ittet	lt
 800dcd8:	425b      	neglt	r3, r3
 800dcda:	f042 0202 	orrlt.w	r2, r2, #2
 800dcde:	9307      	strge	r3, [sp, #28]
 800dce0:	9307      	strlt	r3, [sp, #28]
 800dce2:	bfb8      	it	lt
 800dce4:	9204      	strlt	r2, [sp, #16]
 800dce6:	7823      	ldrb	r3, [r4, #0]
 800dce8:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcea:	d10a      	bne.n	800dd02 <_vfiprintf_r+0x156>
 800dcec:	7863      	ldrb	r3, [r4, #1]
 800dcee:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcf0:	d132      	bne.n	800dd58 <_vfiprintf_r+0x1ac>
 800dcf2:	9b03      	ldr	r3, [sp, #12]
 800dcf4:	1d1a      	adds	r2, r3, #4
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	9203      	str	r2, [sp, #12]
 800dcfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dcfe:	3402      	adds	r4, #2
 800dd00:	9305      	str	r3, [sp, #20]
 800dd02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ddd8 <_vfiprintf_r+0x22c>
 800dd06:	7821      	ldrb	r1, [r4, #0]
 800dd08:	2203      	movs	r2, #3
 800dd0a:	4650      	mov	r0, sl
 800dd0c:	f7f2 fa60 	bl	80001d0 <memchr>
 800dd10:	b138      	cbz	r0, 800dd22 <_vfiprintf_r+0x176>
 800dd12:	9b04      	ldr	r3, [sp, #16]
 800dd14:	eba0 000a 	sub.w	r0, r0, sl
 800dd18:	2240      	movs	r2, #64	@ 0x40
 800dd1a:	4082      	lsls	r2, r0
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	3401      	adds	r4, #1
 800dd20:	9304      	str	r3, [sp, #16]
 800dd22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd26:	4829      	ldr	r0, [pc, #164]	@ (800ddcc <_vfiprintf_r+0x220>)
 800dd28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd2c:	2206      	movs	r2, #6
 800dd2e:	f7f2 fa4f 	bl	80001d0 <memchr>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d03f      	beq.n	800ddb6 <_vfiprintf_r+0x20a>
 800dd36:	4b26      	ldr	r3, [pc, #152]	@ (800ddd0 <_vfiprintf_r+0x224>)
 800dd38:	bb1b      	cbnz	r3, 800dd82 <_vfiprintf_r+0x1d6>
 800dd3a:	9b03      	ldr	r3, [sp, #12]
 800dd3c:	3307      	adds	r3, #7
 800dd3e:	f023 0307 	bic.w	r3, r3, #7
 800dd42:	3308      	adds	r3, #8
 800dd44:	9303      	str	r3, [sp, #12]
 800dd46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd48:	443b      	add	r3, r7
 800dd4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd4c:	e76a      	b.n	800dc24 <_vfiprintf_r+0x78>
 800dd4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd52:	460c      	mov	r4, r1
 800dd54:	2001      	movs	r0, #1
 800dd56:	e7a8      	b.n	800dcaa <_vfiprintf_r+0xfe>
 800dd58:	2300      	movs	r3, #0
 800dd5a:	3401      	adds	r4, #1
 800dd5c:	9305      	str	r3, [sp, #20]
 800dd5e:	4619      	mov	r1, r3
 800dd60:	f04f 0c0a 	mov.w	ip, #10
 800dd64:	4620      	mov	r0, r4
 800dd66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd6a:	3a30      	subs	r2, #48	@ 0x30
 800dd6c:	2a09      	cmp	r2, #9
 800dd6e:	d903      	bls.n	800dd78 <_vfiprintf_r+0x1cc>
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d0c6      	beq.n	800dd02 <_vfiprintf_r+0x156>
 800dd74:	9105      	str	r1, [sp, #20]
 800dd76:	e7c4      	b.n	800dd02 <_vfiprintf_r+0x156>
 800dd78:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd7c:	4604      	mov	r4, r0
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e7f0      	b.n	800dd64 <_vfiprintf_r+0x1b8>
 800dd82:	ab03      	add	r3, sp, #12
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	462a      	mov	r2, r5
 800dd88:	4b12      	ldr	r3, [pc, #72]	@ (800ddd4 <_vfiprintf_r+0x228>)
 800dd8a:	a904      	add	r1, sp, #16
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	f7fd ff69 	bl	800bc64 <_printf_float>
 800dd92:	4607      	mov	r7, r0
 800dd94:	1c78      	adds	r0, r7, #1
 800dd96:	d1d6      	bne.n	800dd46 <_vfiprintf_r+0x19a>
 800dd98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd9a:	07d9      	lsls	r1, r3, #31
 800dd9c:	d405      	bmi.n	800ddaa <_vfiprintf_r+0x1fe>
 800dd9e:	89ab      	ldrh	r3, [r5, #12]
 800dda0:	059a      	lsls	r2, r3, #22
 800dda2:	d402      	bmi.n	800ddaa <_vfiprintf_r+0x1fe>
 800dda4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dda6:	f7fe fcb9 	bl	800c71c <__retarget_lock_release_recursive>
 800ddaa:	89ab      	ldrh	r3, [r5, #12]
 800ddac:	065b      	lsls	r3, r3, #25
 800ddae:	f53f af1f 	bmi.w	800dbf0 <_vfiprintf_r+0x44>
 800ddb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddb4:	e71e      	b.n	800dbf4 <_vfiprintf_r+0x48>
 800ddb6:	ab03      	add	r3, sp, #12
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	462a      	mov	r2, r5
 800ddbc:	4b05      	ldr	r3, [pc, #20]	@ (800ddd4 <_vfiprintf_r+0x228>)
 800ddbe:	a904      	add	r1, sp, #16
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	f7fe f9e7 	bl	800c194 <_printf_i>
 800ddc6:	e7e4      	b.n	800dd92 <_vfiprintf_r+0x1e6>
 800ddc8:	0800e466 	.word	0x0800e466
 800ddcc:	0800e470 	.word	0x0800e470
 800ddd0:	0800bc65 	.word	0x0800bc65
 800ddd4:	0800db87 	.word	0x0800db87
 800ddd8:	0800e46c 	.word	0x0800e46c

0800dddc <__sflush_r>:
 800dddc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde4:	0716      	lsls	r6, r2, #28
 800dde6:	4605      	mov	r5, r0
 800dde8:	460c      	mov	r4, r1
 800ddea:	d454      	bmi.n	800de96 <__sflush_r+0xba>
 800ddec:	684b      	ldr	r3, [r1, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	dc02      	bgt.n	800ddf8 <__sflush_r+0x1c>
 800ddf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	dd48      	ble.n	800de8a <__sflush_r+0xae>
 800ddf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ddfa:	2e00      	cmp	r6, #0
 800ddfc:	d045      	beq.n	800de8a <__sflush_r+0xae>
 800ddfe:	2300      	movs	r3, #0
 800de00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800de04:	682f      	ldr	r7, [r5, #0]
 800de06:	6a21      	ldr	r1, [r4, #32]
 800de08:	602b      	str	r3, [r5, #0]
 800de0a:	d030      	beq.n	800de6e <__sflush_r+0x92>
 800de0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800de0e:	89a3      	ldrh	r3, [r4, #12]
 800de10:	0759      	lsls	r1, r3, #29
 800de12:	d505      	bpl.n	800de20 <__sflush_r+0x44>
 800de14:	6863      	ldr	r3, [r4, #4]
 800de16:	1ad2      	subs	r2, r2, r3
 800de18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de1a:	b10b      	cbz	r3, 800de20 <__sflush_r+0x44>
 800de1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de1e:	1ad2      	subs	r2, r2, r3
 800de20:	2300      	movs	r3, #0
 800de22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de24:	6a21      	ldr	r1, [r4, #32]
 800de26:	4628      	mov	r0, r5
 800de28:	47b0      	blx	r6
 800de2a:	1c43      	adds	r3, r0, #1
 800de2c:	89a3      	ldrh	r3, [r4, #12]
 800de2e:	d106      	bne.n	800de3e <__sflush_r+0x62>
 800de30:	6829      	ldr	r1, [r5, #0]
 800de32:	291d      	cmp	r1, #29
 800de34:	d82b      	bhi.n	800de8e <__sflush_r+0xb2>
 800de36:	4a2a      	ldr	r2, [pc, #168]	@ (800dee0 <__sflush_r+0x104>)
 800de38:	40ca      	lsrs	r2, r1
 800de3a:	07d6      	lsls	r6, r2, #31
 800de3c:	d527      	bpl.n	800de8e <__sflush_r+0xb2>
 800de3e:	2200      	movs	r2, #0
 800de40:	6062      	str	r2, [r4, #4]
 800de42:	04d9      	lsls	r1, r3, #19
 800de44:	6922      	ldr	r2, [r4, #16]
 800de46:	6022      	str	r2, [r4, #0]
 800de48:	d504      	bpl.n	800de54 <__sflush_r+0x78>
 800de4a:	1c42      	adds	r2, r0, #1
 800de4c:	d101      	bne.n	800de52 <__sflush_r+0x76>
 800de4e:	682b      	ldr	r3, [r5, #0]
 800de50:	b903      	cbnz	r3, 800de54 <__sflush_r+0x78>
 800de52:	6560      	str	r0, [r4, #84]	@ 0x54
 800de54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de56:	602f      	str	r7, [r5, #0]
 800de58:	b1b9      	cbz	r1, 800de8a <__sflush_r+0xae>
 800de5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de5e:	4299      	cmp	r1, r3
 800de60:	d002      	beq.n	800de68 <__sflush_r+0x8c>
 800de62:	4628      	mov	r0, r5
 800de64:	f7ff fab4 	bl	800d3d0 <_free_r>
 800de68:	2300      	movs	r3, #0
 800de6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800de6c:	e00d      	b.n	800de8a <__sflush_r+0xae>
 800de6e:	2301      	movs	r3, #1
 800de70:	4628      	mov	r0, r5
 800de72:	47b0      	blx	r6
 800de74:	4602      	mov	r2, r0
 800de76:	1c50      	adds	r0, r2, #1
 800de78:	d1c9      	bne.n	800de0e <__sflush_r+0x32>
 800de7a:	682b      	ldr	r3, [r5, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d0c6      	beq.n	800de0e <__sflush_r+0x32>
 800de80:	2b1d      	cmp	r3, #29
 800de82:	d001      	beq.n	800de88 <__sflush_r+0xac>
 800de84:	2b16      	cmp	r3, #22
 800de86:	d11e      	bne.n	800dec6 <__sflush_r+0xea>
 800de88:	602f      	str	r7, [r5, #0]
 800de8a:	2000      	movs	r0, #0
 800de8c:	e022      	b.n	800ded4 <__sflush_r+0xf8>
 800de8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de92:	b21b      	sxth	r3, r3
 800de94:	e01b      	b.n	800dece <__sflush_r+0xf2>
 800de96:	690f      	ldr	r7, [r1, #16]
 800de98:	2f00      	cmp	r7, #0
 800de9a:	d0f6      	beq.n	800de8a <__sflush_r+0xae>
 800de9c:	0793      	lsls	r3, r2, #30
 800de9e:	680e      	ldr	r6, [r1, #0]
 800dea0:	bf08      	it	eq
 800dea2:	694b      	ldreq	r3, [r1, #20]
 800dea4:	600f      	str	r7, [r1, #0]
 800dea6:	bf18      	it	ne
 800dea8:	2300      	movne	r3, #0
 800deaa:	eba6 0807 	sub.w	r8, r6, r7
 800deae:	608b      	str	r3, [r1, #8]
 800deb0:	f1b8 0f00 	cmp.w	r8, #0
 800deb4:	dde9      	ble.n	800de8a <__sflush_r+0xae>
 800deb6:	6a21      	ldr	r1, [r4, #32]
 800deb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800deba:	4643      	mov	r3, r8
 800debc:	463a      	mov	r2, r7
 800debe:	4628      	mov	r0, r5
 800dec0:	47b0      	blx	r6
 800dec2:	2800      	cmp	r0, #0
 800dec4:	dc08      	bgt.n	800ded8 <__sflush_r+0xfc>
 800dec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dece:	81a3      	strh	r3, [r4, #12]
 800ded0:	f04f 30ff 	mov.w	r0, #4294967295
 800ded4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded8:	4407      	add	r7, r0
 800deda:	eba8 0800 	sub.w	r8, r8, r0
 800dede:	e7e7      	b.n	800deb0 <__sflush_r+0xd4>
 800dee0:	20400001 	.word	0x20400001

0800dee4 <_fflush_r>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	690b      	ldr	r3, [r1, #16]
 800dee8:	4605      	mov	r5, r0
 800deea:	460c      	mov	r4, r1
 800deec:	b913      	cbnz	r3, 800def4 <_fflush_r+0x10>
 800deee:	2500      	movs	r5, #0
 800def0:	4628      	mov	r0, r5
 800def2:	bd38      	pop	{r3, r4, r5, pc}
 800def4:	b118      	cbz	r0, 800defe <_fflush_r+0x1a>
 800def6:	6a03      	ldr	r3, [r0, #32]
 800def8:	b90b      	cbnz	r3, 800defe <_fflush_r+0x1a>
 800defa:	f7fe faf5 	bl	800c4e8 <__sinit>
 800defe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d0f3      	beq.n	800deee <_fflush_r+0xa>
 800df06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df08:	07d0      	lsls	r0, r2, #31
 800df0a:	d404      	bmi.n	800df16 <_fflush_r+0x32>
 800df0c:	0599      	lsls	r1, r3, #22
 800df0e:	d402      	bmi.n	800df16 <_fflush_r+0x32>
 800df10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df12:	f7fe fc02 	bl	800c71a <__retarget_lock_acquire_recursive>
 800df16:	4628      	mov	r0, r5
 800df18:	4621      	mov	r1, r4
 800df1a:	f7ff ff5f 	bl	800dddc <__sflush_r>
 800df1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df20:	07da      	lsls	r2, r3, #31
 800df22:	4605      	mov	r5, r0
 800df24:	d4e4      	bmi.n	800def0 <_fflush_r+0xc>
 800df26:	89a3      	ldrh	r3, [r4, #12]
 800df28:	059b      	lsls	r3, r3, #22
 800df2a:	d4e1      	bmi.n	800def0 <_fflush_r+0xc>
 800df2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df2e:	f7fe fbf5 	bl	800c71c <__retarget_lock_release_recursive>
 800df32:	e7dd      	b.n	800def0 <_fflush_r+0xc>

0800df34 <__swbuf_r>:
 800df34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df36:	460e      	mov	r6, r1
 800df38:	4614      	mov	r4, r2
 800df3a:	4605      	mov	r5, r0
 800df3c:	b118      	cbz	r0, 800df46 <__swbuf_r+0x12>
 800df3e:	6a03      	ldr	r3, [r0, #32]
 800df40:	b90b      	cbnz	r3, 800df46 <__swbuf_r+0x12>
 800df42:	f7fe fad1 	bl	800c4e8 <__sinit>
 800df46:	69a3      	ldr	r3, [r4, #24]
 800df48:	60a3      	str	r3, [r4, #8]
 800df4a:	89a3      	ldrh	r3, [r4, #12]
 800df4c:	071a      	lsls	r2, r3, #28
 800df4e:	d501      	bpl.n	800df54 <__swbuf_r+0x20>
 800df50:	6923      	ldr	r3, [r4, #16]
 800df52:	b943      	cbnz	r3, 800df66 <__swbuf_r+0x32>
 800df54:	4621      	mov	r1, r4
 800df56:	4628      	mov	r0, r5
 800df58:	f000 f82a 	bl	800dfb0 <__swsetup_r>
 800df5c:	b118      	cbz	r0, 800df66 <__swbuf_r+0x32>
 800df5e:	f04f 37ff 	mov.w	r7, #4294967295
 800df62:	4638      	mov	r0, r7
 800df64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df66:	6823      	ldr	r3, [r4, #0]
 800df68:	6922      	ldr	r2, [r4, #16]
 800df6a:	1a98      	subs	r0, r3, r2
 800df6c:	6963      	ldr	r3, [r4, #20]
 800df6e:	b2f6      	uxtb	r6, r6
 800df70:	4283      	cmp	r3, r0
 800df72:	4637      	mov	r7, r6
 800df74:	dc05      	bgt.n	800df82 <__swbuf_r+0x4e>
 800df76:	4621      	mov	r1, r4
 800df78:	4628      	mov	r0, r5
 800df7a:	f7ff ffb3 	bl	800dee4 <_fflush_r>
 800df7e:	2800      	cmp	r0, #0
 800df80:	d1ed      	bne.n	800df5e <__swbuf_r+0x2a>
 800df82:	68a3      	ldr	r3, [r4, #8]
 800df84:	3b01      	subs	r3, #1
 800df86:	60a3      	str	r3, [r4, #8]
 800df88:	6823      	ldr	r3, [r4, #0]
 800df8a:	1c5a      	adds	r2, r3, #1
 800df8c:	6022      	str	r2, [r4, #0]
 800df8e:	701e      	strb	r6, [r3, #0]
 800df90:	6962      	ldr	r2, [r4, #20]
 800df92:	1c43      	adds	r3, r0, #1
 800df94:	429a      	cmp	r2, r3
 800df96:	d004      	beq.n	800dfa2 <__swbuf_r+0x6e>
 800df98:	89a3      	ldrh	r3, [r4, #12]
 800df9a:	07db      	lsls	r3, r3, #31
 800df9c:	d5e1      	bpl.n	800df62 <__swbuf_r+0x2e>
 800df9e:	2e0a      	cmp	r6, #10
 800dfa0:	d1df      	bne.n	800df62 <__swbuf_r+0x2e>
 800dfa2:	4621      	mov	r1, r4
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	f7ff ff9d 	bl	800dee4 <_fflush_r>
 800dfaa:	2800      	cmp	r0, #0
 800dfac:	d0d9      	beq.n	800df62 <__swbuf_r+0x2e>
 800dfae:	e7d6      	b.n	800df5e <__swbuf_r+0x2a>

0800dfb0 <__swsetup_r>:
 800dfb0:	b538      	push	{r3, r4, r5, lr}
 800dfb2:	4b29      	ldr	r3, [pc, #164]	@ (800e058 <__swsetup_r+0xa8>)
 800dfb4:	4605      	mov	r5, r0
 800dfb6:	6818      	ldr	r0, [r3, #0]
 800dfb8:	460c      	mov	r4, r1
 800dfba:	b118      	cbz	r0, 800dfc4 <__swsetup_r+0x14>
 800dfbc:	6a03      	ldr	r3, [r0, #32]
 800dfbe:	b90b      	cbnz	r3, 800dfc4 <__swsetup_r+0x14>
 800dfc0:	f7fe fa92 	bl	800c4e8 <__sinit>
 800dfc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfc8:	0719      	lsls	r1, r3, #28
 800dfca:	d422      	bmi.n	800e012 <__swsetup_r+0x62>
 800dfcc:	06da      	lsls	r2, r3, #27
 800dfce:	d407      	bmi.n	800dfe0 <__swsetup_r+0x30>
 800dfd0:	2209      	movs	r2, #9
 800dfd2:	602a      	str	r2, [r5, #0]
 800dfd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfd8:	81a3      	strh	r3, [r4, #12]
 800dfda:	f04f 30ff 	mov.w	r0, #4294967295
 800dfde:	e033      	b.n	800e048 <__swsetup_r+0x98>
 800dfe0:	0758      	lsls	r0, r3, #29
 800dfe2:	d512      	bpl.n	800e00a <__swsetup_r+0x5a>
 800dfe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfe6:	b141      	cbz	r1, 800dffa <__swsetup_r+0x4a>
 800dfe8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfec:	4299      	cmp	r1, r3
 800dfee:	d002      	beq.n	800dff6 <__swsetup_r+0x46>
 800dff0:	4628      	mov	r0, r5
 800dff2:	f7ff f9ed 	bl	800d3d0 <_free_r>
 800dff6:	2300      	movs	r3, #0
 800dff8:	6363      	str	r3, [r4, #52]	@ 0x34
 800dffa:	89a3      	ldrh	r3, [r4, #12]
 800dffc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e000:	81a3      	strh	r3, [r4, #12]
 800e002:	2300      	movs	r3, #0
 800e004:	6063      	str	r3, [r4, #4]
 800e006:	6923      	ldr	r3, [r4, #16]
 800e008:	6023      	str	r3, [r4, #0]
 800e00a:	89a3      	ldrh	r3, [r4, #12]
 800e00c:	f043 0308 	orr.w	r3, r3, #8
 800e010:	81a3      	strh	r3, [r4, #12]
 800e012:	6923      	ldr	r3, [r4, #16]
 800e014:	b94b      	cbnz	r3, 800e02a <__swsetup_r+0x7a>
 800e016:	89a3      	ldrh	r3, [r4, #12]
 800e018:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e01c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e020:	d003      	beq.n	800e02a <__swsetup_r+0x7a>
 800e022:	4621      	mov	r1, r4
 800e024:	4628      	mov	r0, r5
 800e026:	f000 f8b1 	bl	800e18c <__smakebuf_r>
 800e02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e02e:	f013 0201 	ands.w	r2, r3, #1
 800e032:	d00a      	beq.n	800e04a <__swsetup_r+0x9a>
 800e034:	2200      	movs	r2, #0
 800e036:	60a2      	str	r2, [r4, #8]
 800e038:	6962      	ldr	r2, [r4, #20]
 800e03a:	4252      	negs	r2, r2
 800e03c:	61a2      	str	r2, [r4, #24]
 800e03e:	6922      	ldr	r2, [r4, #16]
 800e040:	b942      	cbnz	r2, 800e054 <__swsetup_r+0xa4>
 800e042:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e046:	d1c5      	bne.n	800dfd4 <__swsetup_r+0x24>
 800e048:	bd38      	pop	{r3, r4, r5, pc}
 800e04a:	0799      	lsls	r1, r3, #30
 800e04c:	bf58      	it	pl
 800e04e:	6962      	ldrpl	r2, [r4, #20]
 800e050:	60a2      	str	r2, [r4, #8]
 800e052:	e7f4      	b.n	800e03e <__swsetup_r+0x8e>
 800e054:	2000      	movs	r0, #0
 800e056:	e7f7      	b.n	800e048 <__swsetup_r+0x98>
 800e058:	20000038 	.word	0x20000038

0800e05c <memcpy>:
 800e05c:	440a      	add	r2, r1
 800e05e:	4291      	cmp	r1, r2
 800e060:	f100 33ff 	add.w	r3, r0, #4294967295
 800e064:	d100      	bne.n	800e068 <memcpy+0xc>
 800e066:	4770      	bx	lr
 800e068:	b510      	push	{r4, lr}
 800e06a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e06e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e072:	4291      	cmp	r1, r2
 800e074:	d1f9      	bne.n	800e06a <memcpy+0xe>
 800e076:	bd10      	pop	{r4, pc}

0800e078 <__assert_func>:
 800e078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e07a:	4614      	mov	r4, r2
 800e07c:	461a      	mov	r2, r3
 800e07e:	4b09      	ldr	r3, [pc, #36]	@ (800e0a4 <__assert_func+0x2c>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4605      	mov	r5, r0
 800e084:	68d8      	ldr	r0, [r3, #12]
 800e086:	b14c      	cbz	r4, 800e09c <__assert_func+0x24>
 800e088:	4b07      	ldr	r3, [pc, #28]	@ (800e0a8 <__assert_func+0x30>)
 800e08a:	9100      	str	r1, [sp, #0]
 800e08c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e090:	4906      	ldr	r1, [pc, #24]	@ (800e0ac <__assert_func+0x34>)
 800e092:	462b      	mov	r3, r5
 800e094:	f000 f842 	bl	800e11c <fiprintf>
 800e098:	f000 f8d6 	bl	800e248 <abort>
 800e09c:	4b04      	ldr	r3, [pc, #16]	@ (800e0b0 <__assert_func+0x38>)
 800e09e:	461c      	mov	r4, r3
 800e0a0:	e7f3      	b.n	800e08a <__assert_func+0x12>
 800e0a2:	bf00      	nop
 800e0a4:	20000038 	.word	0x20000038
 800e0a8:	0800e481 	.word	0x0800e481
 800e0ac:	0800e48e 	.word	0x0800e48e
 800e0b0:	0800e4bc 	.word	0x0800e4bc

0800e0b4 <_calloc_r>:
 800e0b4:	b570      	push	{r4, r5, r6, lr}
 800e0b6:	fba1 5402 	umull	r5, r4, r1, r2
 800e0ba:	b934      	cbnz	r4, 800e0ca <_calloc_r+0x16>
 800e0bc:	4629      	mov	r1, r5
 800e0be:	f7fd fca5 	bl	800ba0c <_malloc_r>
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	b928      	cbnz	r0, 800e0d2 <_calloc_r+0x1e>
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ca:	220c      	movs	r2, #12
 800e0cc:	6002      	str	r2, [r0, #0]
 800e0ce:	2600      	movs	r6, #0
 800e0d0:	e7f9      	b.n	800e0c6 <_calloc_r+0x12>
 800e0d2:	462a      	mov	r2, r5
 800e0d4:	4621      	mov	r1, r4
 800e0d6:	f7fe fa92 	bl	800c5fe <memset>
 800e0da:	e7f4      	b.n	800e0c6 <_calloc_r+0x12>

0800e0dc <__ascii_mbtowc>:
 800e0dc:	b082      	sub	sp, #8
 800e0de:	b901      	cbnz	r1, 800e0e2 <__ascii_mbtowc+0x6>
 800e0e0:	a901      	add	r1, sp, #4
 800e0e2:	b142      	cbz	r2, 800e0f6 <__ascii_mbtowc+0x1a>
 800e0e4:	b14b      	cbz	r3, 800e0fa <__ascii_mbtowc+0x1e>
 800e0e6:	7813      	ldrb	r3, [r2, #0]
 800e0e8:	600b      	str	r3, [r1, #0]
 800e0ea:	7812      	ldrb	r2, [r2, #0]
 800e0ec:	1e10      	subs	r0, r2, #0
 800e0ee:	bf18      	it	ne
 800e0f0:	2001      	movne	r0, #1
 800e0f2:	b002      	add	sp, #8
 800e0f4:	4770      	bx	lr
 800e0f6:	4610      	mov	r0, r2
 800e0f8:	e7fb      	b.n	800e0f2 <__ascii_mbtowc+0x16>
 800e0fa:	f06f 0001 	mvn.w	r0, #1
 800e0fe:	e7f8      	b.n	800e0f2 <__ascii_mbtowc+0x16>

0800e100 <__ascii_wctomb>:
 800e100:	4603      	mov	r3, r0
 800e102:	4608      	mov	r0, r1
 800e104:	b141      	cbz	r1, 800e118 <__ascii_wctomb+0x18>
 800e106:	2aff      	cmp	r2, #255	@ 0xff
 800e108:	d904      	bls.n	800e114 <__ascii_wctomb+0x14>
 800e10a:	228a      	movs	r2, #138	@ 0x8a
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	f04f 30ff 	mov.w	r0, #4294967295
 800e112:	4770      	bx	lr
 800e114:	700a      	strb	r2, [r1, #0]
 800e116:	2001      	movs	r0, #1
 800e118:	4770      	bx	lr
	...

0800e11c <fiprintf>:
 800e11c:	b40e      	push	{r1, r2, r3}
 800e11e:	b503      	push	{r0, r1, lr}
 800e120:	4601      	mov	r1, r0
 800e122:	ab03      	add	r3, sp, #12
 800e124:	4805      	ldr	r0, [pc, #20]	@ (800e13c <fiprintf+0x20>)
 800e126:	f853 2b04 	ldr.w	r2, [r3], #4
 800e12a:	6800      	ldr	r0, [r0, #0]
 800e12c:	9301      	str	r3, [sp, #4]
 800e12e:	f7ff fd3d 	bl	800dbac <_vfiprintf_r>
 800e132:	b002      	add	sp, #8
 800e134:	f85d eb04 	ldr.w	lr, [sp], #4
 800e138:	b003      	add	sp, #12
 800e13a:	4770      	bx	lr
 800e13c:	20000038 	.word	0x20000038

0800e140 <__swhatbuf_r>:
 800e140:	b570      	push	{r4, r5, r6, lr}
 800e142:	460c      	mov	r4, r1
 800e144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e148:	2900      	cmp	r1, #0
 800e14a:	b096      	sub	sp, #88	@ 0x58
 800e14c:	4615      	mov	r5, r2
 800e14e:	461e      	mov	r6, r3
 800e150:	da0d      	bge.n	800e16e <__swhatbuf_r+0x2e>
 800e152:	89a3      	ldrh	r3, [r4, #12]
 800e154:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e158:	f04f 0100 	mov.w	r1, #0
 800e15c:	bf14      	ite	ne
 800e15e:	2340      	movne	r3, #64	@ 0x40
 800e160:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e164:	2000      	movs	r0, #0
 800e166:	6031      	str	r1, [r6, #0]
 800e168:	602b      	str	r3, [r5, #0]
 800e16a:	b016      	add	sp, #88	@ 0x58
 800e16c:	bd70      	pop	{r4, r5, r6, pc}
 800e16e:	466a      	mov	r2, sp
 800e170:	f000 f848 	bl	800e204 <_fstat_r>
 800e174:	2800      	cmp	r0, #0
 800e176:	dbec      	blt.n	800e152 <__swhatbuf_r+0x12>
 800e178:	9901      	ldr	r1, [sp, #4]
 800e17a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e17e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e182:	4259      	negs	r1, r3
 800e184:	4159      	adcs	r1, r3
 800e186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e18a:	e7eb      	b.n	800e164 <__swhatbuf_r+0x24>

0800e18c <__smakebuf_r>:
 800e18c:	898b      	ldrh	r3, [r1, #12]
 800e18e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e190:	079d      	lsls	r5, r3, #30
 800e192:	4606      	mov	r6, r0
 800e194:	460c      	mov	r4, r1
 800e196:	d507      	bpl.n	800e1a8 <__smakebuf_r+0x1c>
 800e198:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e19c:	6023      	str	r3, [r4, #0]
 800e19e:	6123      	str	r3, [r4, #16]
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	6163      	str	r3, [r4, #20]
 800e1a4:	b003      	add	sp, #12
 800e1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1a8:	ab01      	add	r3, sp, #4
 800e1aa:	466a      	mov	r2, sp
 800e1ac:	f7ff ffc8 	bl	800e140 <__swhatbuf_r>
 800e1b0:	9f00      	ldr	r7, [sp, #0]
 800e1b2:	4605      	mov	r5, r0
 800e1b4:	4639      	mov	r1, r7
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	f7fd fc28 	bl	800ba0c <_malloc_r>
 800e1bc:	b948      	cbnz	r0, 800e1d2 <__smakebuf_r+0x46>
 800e1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1c2:	059a      	lsls	r2, r3, #22
 800e1c4:	d4ee      	bmi.n	800e1a4 <__smakebuf_r+0x18>
 800e1c6:	f023 0303 	bic.w	r3, r3, #3
 800e1ca:	f043 0302 	orr.w	r3, r3, #2
 800e1ce:	81a3      	strh	r3, [r4, #12]
 800e1d0:	e7e2      	b.n	800e198 <__smakebuf_r+0xc>
 800e1d2:	89a3      	ldrh	r3, [r4, #12]
 800e1d4:	6020      	str	r0, [r4, #0]
 800e1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1da:	81a3      	strh	r3, [r4, #12]
 800e1dc:	9b01      	ldr	r3, [sp, #4]
 800e1de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e1e2:	b15b      	cbz	r3, 800e1fc <__smakebuf_r+0x70>
 800e1e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	f000 f81d 	bl	800e228 <_isatty_r>
 800e1ee:	b128      	cbz	r0, 800e1fc <__smakebuf_r+0x70>
 800e1f0:	89a3      	ldrh	r3, [r4, #12]
 800e1f2:	f023 0303 	bic.w	r3, r3, #3
 800e1f6:	f043 0301 	orr.w	r3, r3, #1
 800e1fa:	81a3      	strh	r3, [r4, #12]
 800e1fc:	89a3      	ldrh	r3, [r4, #12]
 800e1fe:	431d      	orrs	r5, r3
 800e200:	81a5      	strh	r5, [r4, #12]
 800e202:	e7cf      	b.n	800e1a4 <__smakebuf_r+0x18>

0800e204 <_fstat_r>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	4d07      	ldr	r5, [pc, #28]	@ (800e224 <_fstat_r+0x20>)
 800e208:	2300      	movs	r3, #0
 800e20a:	4604      	mov	r4, r0
 800e20c:	4608      	mov	r0, r1
 800e20e:	4611      	mov	r1, r2
 800e210:	602b      	str	r3, [r5, #0]
 800e212:	f7f3 ffef 	bl	80021f4 <_fstat>
 800e216:	1c43      	adds	r3, r0, #1
 800e218:	d102      	bne.n	800e220 <_fstat_r+0x1c>
 800e21a:	682b      	ldr	r3, [r5, #0]
 800e21c:	b103      	cbz	r3, 800e220 <_fstat_r+0x1c>
 800e21e:	6023      	str	r3, [r4, #0]
 800e220:	bd38      	pop	{r3, r4, r5, pc}
 800e222:	bf00      	nop
 800e224:	20000dc8 	.word	0x20000dc8

0800e228 <_isatty_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	4d06      	ldr	r5, [pc, #24]	@ (800e244 <_isatty_r+0x1c>)
 800e22c:	2300      	movs	r3, #0
 800e22e:	4604      	mov	r4, r0
 800e230:	4608      	mov	r0, r1
 800e232:	602b      	str	r3, [r5, #0]
 800e234:	f7f3 ffee 	bl	8002214 <_isatty>
 800e238:	1c43      	adds	r3, r0, #1
 800e23a:	d102      	bne.n	800e242 <_isatty_r+0x1a>
 800e23c:	682b      	ldr	r3, [r5, #0]
 800e23e:	b103      	cbz	r3, 800e242 <_isatty_r+0x1a>
 800e240:	6023      	str	r3, [r4, #0]
 800e242:	bd38      	pop	{r3, r4, r5, pc}
 800e244:	20000dc8 	.word	0x20000dc8

0800e248 <abort>:
 800e248:	b508      	push	{r3, lr}
 800e24a:	2006      	movs	r0, #6
 800e24c:	f000 f82c 	bl	800e2a8 <raise>
 800e250:	2001      	movs	r0, #1
 800e252:	f7f3 ff9b 	bl	800218c <_exit>

0800e256 <_raise_r>:
 800e256:	291f      	cmp	r1, #31
 800e258:	b538      	push	{r3, r4, r5, lr}
 800e25a:	4605      	mov	r5, r0
 800e25c:	460c      	mov	r4, r1
 800e25e:	d904      	bls.n	800e26a <_raise_r+0x14>
 800e260:	2316      	movs	r3, #22
 800e262:	6003      	str	r3, [r0, #0]
 800e264:	f04f 30ff 	mov.w	r0, #4294967295
 800e268:	bd38      	pop	{r3, r4, r5, pc}
 800e26a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e26c:	b112      	cbz	r2, 800e274 <_raise_r+0x1e>
 800e26e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e272:	b94b      	cbnz	r3, 800e288 <_raise_r+0x32>
 800e274:	4628      	mov	r0, r5
 800e276:	f000 f831 	bl	800e2dc <_getpid_r>
 800e27a:	4622      	mov	r2, r4
 800e27c:	4601      	mov	r1, r0
 800e27e:	4628      	mov	r0, r5
 800e280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e284:	f000 b818 	b.w	800e2b8 <_kill_r>
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d00a      	beq.n	800e2a2 <_raise_r+0x4c>
 800e28c:	1c59      	adds	r1, r3, #1
 800e28e:	d103      	bne.n	800e298 <_raise_r+0x42>
 800e290:	2316      	movs	r3, #22
 800e292:	6003      	str	r3, [r0, #0]
 800e294:	2001      	movs	r0, #1
 800e296:	e7e7      	b.n	800e268 <_raise_r+0x12>
 800e298:	2100      	movs	r1, #0
 800e29a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e29e:	4620      	mov	r0, r4
 800e2a0:	4798      	blx	r3
 800e2a2:	2000      	movs	r0, #0
 800e2a4:	e7e0      	b.n	800e268 <_raise_r+0x12>
	...

0800e2a8 <raise>:
 800e2a8:	4b02      	ldr	r3, [pc, #8]	@ (800e2b4 <raise+0xc>)
 800e2aa:	4601      	mov	r1, r0
 800e2ac:	6818      	ldr	r0, [r3, #0]
 800e2ae:	f7ff bfd2 	b.w	800e256 <_raise_r>
 800e2b2:	bf00      	nop
 800e2b4:	20000038 	.word	0x20000038

0800e2b8 <_kill_r>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	4d07      	ldr	r5, [pc, #28]	@ (800e2d8 <_kill_r+0x20>)
 800e2bc:	2300      	movs	r3, #0
 800e2be:	4604      	mov	r4, r0
 800e2c0:	4608      	mov	r0, r1
 800e2c2:	4611      	mov	r1, r2
 800e2c4:	602b      	str	r3, [r5, #0]
 800e2c6:	f7f3 ff51 	bl	800216c <_kill>
 800e2ca:	1c43      	adds	r3, r0, #1
 800e2cc:	d102      	bne.n	800e2d4 <_kill_r+0x1c>
 800e2ce:	682b      	ldr	r3, [r5, #0]
 800e2d0:	b103      	cbz	r3, 800e2d4 <_kill_r+0x1c>
 800e2d2:	6023      	str	r3, [r4, #0]
 800e2d4:	bd38      	pop	{r3, r4, r5, pc}
 800e2d6:	bf00      	nop
 800e2d8:	20000dc8 	.word	0x20000dc8

0800e2dc <_getpid_r>:
 800e2dc:	f7f3 bf3e 	b.w	800215c <_getpid>

0800e2e0 <_init>:
 800e2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2e2:	bf00      	nop
 800e2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2e6:	bc08      	pop	{r3}
 800e2e8:	469e      	mov	lr, r3
 800e2ea:	4770      	bx	lr

0800e2ec <_fini>:
 800e2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ee:	bf00      	nop
 800e2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2f2:	bc08      	pop	{r3}
 800e2f4:	469e      	mov	lr, r3
 800e2f6:	4770      	bx	lr
