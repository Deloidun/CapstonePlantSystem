
CapstonePlantSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009858  08009858  0000a858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009874  08009874  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009874  08009874  0000a874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800987c  0800987c  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800987c  0800987c  0000a87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009880  08009880  0000a880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009884  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000aac  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b28  20000b28  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c4f3  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040bd  00000000  00000000  0002759f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b0  00000000  00000000  0002b660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001340  00000000  00000000  0002cf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000539e  00000000  00000000  0002e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002040b  00000000  00000000  000335ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d673f  00000000  00000000  000539f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a138  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006cec  00000000  00000000  0012a17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00130e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009840 	.word	0x08009840

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009840 	.word	0x08009840

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fcf2 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f812 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f988 	bl	8000814 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f878 	bl	80005f8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8a4 	bl	8000654 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8d2 	bl	80006b4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f008 fd40 	bl	8008f94 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f954 	bl	80007c0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000518:	f000 f902 	bl	8000720 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800051c:	f008 fd60 	bl	8008fe0 <MX_USB_HOST_Process>
 8000520:	e7fc      	b.n	800051c <main+0x28>
	...

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	@ 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	@ 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f009 f8f6 	bl	8009724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	@ (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	@ 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	@ (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a21      	ldr	r2, [pc, #132]	@ (80005f4 <SystemClock_Config+0xd0>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000588:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000594:	2308      	movs	r3, #8
 8000596:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000598:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800059c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a2:	2307      	movs	r3, #7
 80005a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 ff0e 	bl	80043cc <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005b6:	f000 fa3f 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2302      	movs	r3, #2
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2105      	movs	r1, #5
 80005d8:	4618      	mov	r0, r3
 80005da:	f004 f96f 	bl	80048bc <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e4:	f000 fa28 	bl	8000a38 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	@ 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_I2C1_Init+0x50>)
 80005fe:	4a13      	ldr	r2, [pc, #76]	@ (800064c <MX_I2C1_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_I2C1_Init+0x50>)
 8000604:	4a12      	ldr	r2, [pc, #72]	@ (8000650 <MX_I2C1_Init+0x58>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <MX_I2C1_Init+0x50>)
 8000616:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800061a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	@ (8000648 <MX_I2C1_Init+0x50>)
 8000636:	f003 f8e5 	bl	8003804 <HAL_I2C_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 f9fa 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000098 	.word	0x20000098
 800064c:	40005400 	.word	0x40005400
 8000650:	000186a0 	.word	0x000186a0

08000654 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000658:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <MX_I2S3_Init+0x54>)
 800065a:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <MX_I2S3_Init+0x58>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800065e:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_I2S3_Init+0x54>)
 8000660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000664:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000666:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <MX_I2S3_Init+0x54>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800066c:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <MX_I2S3_Init+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000672:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <MX_I2S3_Init+0x54>)
 8000674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000678:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800067a:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <MX_I2S3_Init+0x54>)
 800067c:	4a0c      	ldr	r2, [pc, #48]	@ (80006b0 <MX_I2S3_Init+0x5c>)
 800067e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000680:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_I2S3_Init+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <MX_I2S3_Init+0x54>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_I2S3_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <MX_I2S3_Init+0x54>)
 8000694:	f003 f9fa 	bl	8003a8c <HAL_I2S_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800069e:	f000 f9cb 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000ec 	.word	0x200000ec
 80006ac:	40003c00 	.word	0x40003c00
 80006b0:	00017700 	.word	0x00017700

080006b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b8:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006ba:	4a18      	ldr	r2, [pc, #96]	@ (800071c <MX_SPI1_Init+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006e8:	2210      	movs	r2, #16
 80006ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_SPI1_Init+0x64>)
 8000700:	220a      	movs	r2, #10
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_SPI1_Init+0x64>)
 8000706:	f004 fc3b 	bl	8004f80 <HAL_SPI_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 f992 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000134 	.word	0x20000134
 800071c:	40013000 	.word	0x40013000

08000720 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800073e:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_TIM3_Init+0x98>)
 8000740:	4a1e      	ldr	r2, [pc, #120]	@ (80007bc <MX_TIM3_Init+0x9c>)
 8000742:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000744:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <MX_TIM3_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074a:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_TIM3_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000750:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <MX_TIM3_Init+0x98>)
 8000752:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000756:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <MX_TIM3_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <MX_TIM3_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000764:	4814      	ldr	r0, [pc, #80]	@ (80007b8 <MX_TIM3_Init+0x98>)
 8000766:	f004 fc94 	bl	8005092 <HAL_TIM_Base_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000770:	f000 f962 	bl	8000a38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000774:	2307      	movs	r3, #7
 8000776:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	480d      	ldr	r0, [pc, #52]	@ (80007b8 <MX_TIM3_Init+0x98>)
 8000784:	f004 fcd4 	bl	8005130 <HAL_TIM_SlaveConfigSynchro>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800078e:	f000 f953 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	@ (80007b8 <MX_TIM3_Init+0x98>)
 80007a0:	f004 febe 	bl	8005520 <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80007aa:	f000 f945 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	3720      	adds	r7, #32
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000018c 	.word	0x2000018c
 80007bc:	40000400 	.word	0x40000400

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MX_USART2_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f8:	f004 ff0e 	bl	8005618 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 f919 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001d4 	.word	0x200001d4
 8000810:	40004400 	.word	0x40004400

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	@ 0x30
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b7c      	ldr	r3, [pc, #496]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a7b      	ldr	r2, [pc, #492]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b79      	ldr	r3, [pc, #484]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0310 	and.w	r3, r3, #16
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b75      	ldr	r3, [pc, #468]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a74      	ldr	r2, [pc, #464]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b72      	ldr	r3, [pc, #456]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b6e      	ldr	r3, [pc, #440]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a6d      	ldr	r2, [pc, #436]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b6b      	ldr	r3, [pc, #428]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b67      	ldr	r3, [pc, #412]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a66      	ldr	r2, [pc, #408]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b64      	ldr	r3, [pc, #400]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b60      	ldr	r3, [pc, #384]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a5f      	ldr	r2, [pc, #380]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b5d      	ldr	r3, [pc, #372]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b59      	ldr	r3, [pc, #356]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a58      	ldr	r2, [pc, #352]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b56      	ldr	r3, [pc, #344]	@ (8000a20 <MX_GPIO_Init+0x20c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2108      	movs	r1, #8
 80008d6:	4853      	ldr	r0, [pc, #332]	@ (8000a24 <MX_GPIO_Init+0x210>)
 80008d8:	f000 fe46 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4851      	ldr	r0, [pc, #324]	@ (8000a28 <MX_GPIO_Init+0x214>)
 80008e2:	f000 fe41 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e6:	2200      	movs	r2, #0
 80008e8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008ec:	484f      	ldr	r0, [pc, #316]	@ (8000a2c <MX_GPIO_Init+0x218>)
 80008ee:	f000 fe3b 	bl	8001568 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f8:	484d      	ldr	r0, [pc, #308]	@ (8000a30 <MX_GPIO_Init+0x21c>)
 80008fa:	f000 fe35 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008fe:	2308      	movs	r3, #8
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4843      	ldr	r0, [pc, #268]	@ (8000a24 <MX_GPIO_Init+0x210>)
 8000916:	f000 fc8b 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800091a:	2301      	movs	r3, #1
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	483d      	ldr	r0, [pc, #244]	@ (8000a28 <MX_GPIO_Init+0x214>)
 8000932:	f000 fc7d 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000936:	2308      	movs	r3, #8
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000946:	2305      	movs	r3, #5
 8000948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4835      	ldr	r0, [pc, #212]	@ (8000a28 <MX_GPIO_Init+0x214>)
 8000952:	f000 fc6d 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4831      	ldr	r0, [pc, #196]	@ (8000a30 <MX_GPIO_Init+0x21c>)
 800096c:	f000 fc60 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000970:	2304      	movs	r3, #4
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	482c      	ldr	r0, [pc, #176]	@ (8000a34 <MX_GPIO_Init+0x220>)
 8000984:	f000 fc54 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000988:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099a:	2305      	movs	r3, #5
 800099c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4823      	ldr	r0, [pc, #140]	@ (8000a34 <MX_GPIO_Init+0x220>)
 80009a6:	f000 fc43 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009aa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	481a      	ldr	r0, [pc, #104]	@ (8000a2c <MX_GPIO_Init+0x218>)
 80009c4:	f000 fc34 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4813      	ldr	r0, [pc, #76]	@ (8000a30 <MX_GPIO_Init+0x21c>)
 80009e2:	f000 fc25 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e6:	2320      	movs	r3, #32
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <MX_GPIO_Init+0x218>)
 80009fa:	f000 fc19 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a02:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <MX_GPIO_Init+0x210>)
 8000a14:	f000 fc0c 	bl	8001230 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a18:	bf00      	nop
 8000a1a:	3730      	adds	r7, #48	@ 0x30
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40020400 	.word	0x40020400

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	4a0f      	ldr	r2, [pc, #60]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	4a08      	ldr	r2, [pc, #32]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a82:	2007      	movs	r0, #7
 8000a84:	f000 fb92 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	@ (8000b18 <HAL_I2C_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12c      	bne.n	8000b10 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <HAL_I2C_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a17      	ldr	r2, [pc, #92]	@ (8000b1c <HAL_I2C_MspInit+0x88>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <HAL_I2C_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ad2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad8:	2312      	movs	r3, #18
 8000ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <HAL_I2C_MspInit+0x8c>)
 8000af0:	f000 fb9e 	bl	8001230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <HAL_I2C_MspInit+0x88>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afc:	4a07      	ldr	r2, [pc, #28]	@ (8000b1c <HAL_I2C_MspInit+0x88>)
 8000afe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <HAL_I2C_MspInit+0x88>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	@ 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020400 	.word	0x40020400

08000b24 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	@ 0x38
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a31      	ldr	r2, [pc, #196]	@ (8000c14 <HAL_I2S_MspInit+0xf0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d15a      	bne.n	8000c0a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b54:	2301      	movs	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b58:	23c0      	movs	r3, #192	@ 0xc0
 8000b5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4618      	mov	r0, r3
 8000b66:	f004 f8c9 	bl	8004cfc <HAL_RCCEx_PeriphCLKConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b70:	f7ff ff62 	bl	8000a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	4a26      	ldr	r2, [pc, #152]	@ (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b84:	4b24      	ldr	r3, [pc, #144]	@ (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	4a1f      	ldr	r2, [pc, #124]	@ (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	4a18      	ldr	r2, [pc, #96]	@ (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd8:	2306      	movs	r3, #6
 8000bda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	480e      	ldr	r0, [pc, #56]	@ (8000c1c <HAL_I2S_MspInit+0xf8>)
 8000be4:	f000 fb24 	bl	8001230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000be8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	4806      	ldr	r0, [pc, #24]	@ (8000c20 <HAL_I2S_MspInit+0xfc>)
 8000c06:	f000 fb13 	bl	8001230 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3738      	adds	r7, #56	@ 0x38
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40003c00 	.word	0x40003c00
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020800 	.word	0x40020800

08000c24 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	@ (8000ca8 <HAL_SPI_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12b      	bne.n	8000c9e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <HAL_SPI_MspInit+0x88>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <HAL_SPI_MspInit+0x88>)
 8000c50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <HAL_SPI_MspInit+0x88>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <HAL_SPI_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <HAL_SPI_MspInit+0x88>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_SPI_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c7e:	23e0      	movs	r3, #224	@ 0xe0
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8e:	2305      	movs	r3, #5
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <HAL_SPI_MspInit+0x8c>)
 8000c9a:	f000 fac9 	bl	8001230 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	@ 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40013000 	.word	0x40013000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf0 <HAL_TIM_Base_MspInit+0x3c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10d      	bne.n	8000ce2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_TIM_Base_MspInit+0x40>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	4a09      	ldr	r2, [pc, #36]	@ (8000cf4 <HAL_TIM_Base_MspInit+0x40>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd6:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <HAL_TIM_Base_MspInit+0x40>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40000400 	.word	0x40000400
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a19      	ldr	r2, [pc, #100]	@ (8000d7c <HAL_UART_MspInit+0x84>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12b      	bne.n	8000d72 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <HAL_UART_MspInit+0x88>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	4a17      	ldr	r2, [pc, #92]	@ (8000d80 <HAL_UART_MspInit+0x88>)
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_UART_MspInit+0x88>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <HAL_UART_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a10      	ldr	r2, [pc, #64]	@ (8000d80 <HAL_UART_MspInit+0x88>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <HAL_UART_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d52:	230c      	movs	r3, #12
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d62:	2307      	movs	r3, #7
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <HAL_UART_MspInit+0x8c>)
 8000d6e:	f000 fa5f 	bl	8001230 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	@ 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <NMI_Handler+0x4>

08000d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <MemManage_Handler+0x4>

08000da0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <UsageFault_Handler+0x4>

08000db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dde:	f000 f8d1 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <OTG_FS_IRQHandler+0x10>)
 8000dee:	f000 feb5 	bl	8001b5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000600 	.word	0x20000600

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f008 fc92 	bl	8009754 <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20020000 	.word	0x20020000
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	2000021c 	.word	0x2000021c
 8000e64:	20000b28 	.word	0x20000b28

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e90:	f7ff ffea 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e96:	490d      	ldr	r1, [pc, #52]	@ (8000ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eac:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eba:	f008 fc51 	bl	8009760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fb19 	bl	80004f4 <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ed0:	08009884 	.word	0x08009884
  ldr r2, =_sbss
 8000ed4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ed8:	20000b28 	.word	0x20000b28

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f94f 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff fd96 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f967 	bl	8001216 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 f92f 	bl	80011c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	@ (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000004 	.word	0x20000004

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000220 	.word	0x20000220

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000220 	.word	0x20000220

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff ffee 	bl	8000fac <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <HAL_Delay+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffde 	bl	8000fac <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	@ (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	@ (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	@ (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	@ (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	@ 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff29 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff3e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff31 	bl	8001070 <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffa2 	bl	8001168 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	@ 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	e16b      	b.n	8001524 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800124c:	2201      	movs	r2, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 815a 	bne.w	800151e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d005      	beq.n	8001282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127e:	2b02      	cmp	r3, #2
 8001280:	d130      	bne.n	80012e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b8:	2201      	movs	r2, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 0201 	and.w	r2, r3, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d017      	beq.n	8001320 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d123      	bne.n	8001374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	69b9      	ldr	r1, [r7, #24]
 8001370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80b4 	beq.w	800151e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b60      	ldr	r3, [pc, #384]	@ (800153c <HAL_GPIO_Init+0x30c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	4a5f      	ldr	r2, [pc, #380]	@ (800153c <HAL_GPIO_Init+0x30c>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c6:	4b5d      	ldr	r3, [pc, #372]	@ (800153c <HAL_GPIO_Init+0x30c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001540 <HAL_GPIO_Init+0x310>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a52      	ldr	r2, [pc, #328]	@ (8001544 <HAL_GPIO_Init+0x314>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d02b      	beq.n	8001456 <HAL_GPIO_Init+0x226>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a51      	ldr	r2, [pc, #324]	@ (8001548 <HAL_GPIO_Init+0x318>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d025      	beq.n	8001452 <HAL_GPIO_Init+0x222>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a50      	ldr	r2, [pc, #320]	@ (800154c <HAL_GPIO_Init+0x31c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d01f      	beq.n	800144e <HAL_GPIO_Init+0x21e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4f      	ldr	r2, [pc, #316]	@ (8001550 <HAL_GPIO_Init+0x320>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x21a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4e      	ldr	r2, [pc, #312]	@ (8001554 <HAL_GPIO_Init+0x324>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x216>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4d      	ldr	r2, [pc, #308]	@ (8001558 <HAL_GPIO_Init+0x328>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x212>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4c      	ldr	r2, [pc, #304]	@ (800155c <HAL_GPIO_Init+0x32c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x20e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4b      	ldr	r2, [pc, #300]	@ (8001560 <HAL_GPIO_Init+0x330>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x20a>
 8001436:	2307      	movs	r3, #7
 8001438:	e00e      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800143a:	2308      	movs	r3, #8
 800143c:	e00c      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800143e:	2306      	movs	r3, #6
 8001440:	e00a      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001442:	2305      	movs	r3, #5
 8001444:	e008      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001446:	2304      	movs	r3, #4
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800144a:	2303      	movs	r3, #3
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001456:	2300      	movs	r3, #0
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	f002 0203 	and.w	r2, r2, #3
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4093      	lsls	r3, r2
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001468:	4935      	ldr	r1, [pc, #212]	@ (8001540 <HAL_GPIO_Init+0x310>)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001476:	4b3b      	ldr	r3, [pc, #236]	@ (8001564 <HAL_GPIO_Init+0x334>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800149a:	4a32      	ldr	r2, [pc, #200]	@ (8001564 <HAL_GPIO_Init+0x334>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a0:	4b30      	ldr	r3, [pc, #192]	@ (8001564 <HAL_GPIO_Init+0x334>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c4:	4a27      	ldr	r2, [pc, #156]	@ (8001564 <HAL_GPIO_Init+0x334>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ca:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <HAL_GPIO_Init+0x334>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001564 <HAL_GPIO_Init+0x334>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_GPIO_Init+0x334>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001518:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <HAL_GPIO_Init+0x334>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3301      	adds	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b0f      	cmp	r3, #15
 8001528:	f67f ae90 	bls.w	800124c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3724      	adds	r7, #36	@ 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40013800 	.word	0x40013800
 8001544:	40020000 	.word	0x40020000
 8001548:	40020400 	.word	0x40020400
 800154c:	40020800 	.word	0x40020800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40021000 	.word	0x40021000
 8001558:	40021400 	.word	0x40021400
 800155c:	40021800 	.word	0x40021800
 8001560:	40021c00 	.word	0x40021c00
 8001564:	40013c00 	.word	0x40013c00

08001568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001578:	787b      	ldrb	r3, [r7, #1]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001584:	e003      	b.n	800158e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	041a      	lsls	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	619a      	str	r2, [r3, #24]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af02      	add	r7, sp, #8
 80015a0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e059      	b.n	8001660 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d106      	bne.n	80015cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f007 fd42 	bl	8009050 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2203      	movs	r2, #3
 80015d0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015da:	d102      	bne.n	80015e2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 fb4f 	bl	8005c8a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7c1a      	ldrb	r2, [r3, #16]
 80015f4:	f88d 2000 	strb.w	r2, [sp]
 80015f8:	3304      	adds	r3, #4
 80015fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fc:	f004 fad0 	bl	8005ba0 <USB_CoreInit>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2202      	movs	r2, #2
 800160a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e026      	b.n	8001660 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2101      	movs	r1, #1
 8001618:	4618      	mov	r0, r3
 800161a:	f004 fb47 	bl	8005cac <USB_SetCurrentMode>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e017      	b.n	8001660 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7c1a      	ldrb	r2, [r3, #16]
 8001638:	f88d 2000 	strb.w	r2, [sp]
 800163c:	3304      	adds	r3, #4
 800163e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001640:	f004 fcf0 	bl	8006024 <USB_HostInit>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e004      	b.n	8001660 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08b      	sub	sp, #44	@ 0x2c
 800166c:	af04      	add	r7, sp, #16
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	461a      	mov	r2, r3
 8001676:	4603      	mov	r3, r0
 8001678:	70fb      	strb	r3, [r7, #3]
 800167a:	460b      	mov	r3, r1
 800167c:	70bb      	strb	r3, [r7, #2]
 800167e:	4613      	mov	r3, r2
 8001680:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001682:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001684:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_HCD_HC_Init+0x2c>
 8001690:	2302      	movs	r3, #2
 8001692:	e09d      	b.n	80017d0 <HAL_HCD_HC_Init+0x168>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800169c:	78fa      	ldrb	r2, [r7, #3]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	3319      	adds	r3, #25
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	3314      	adds	r3, #20
 80016c0:	787a      	ldrb	r2, [r7, #1]
 80016c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	3315      	adds	r3, #21
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	3326      	adds	r3, #38	@ 0x26
 80016e8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80016ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016ee:	78fa      	ldrb	r2, [r7, #3]
 80016f0:	78bb      	ldrb	r3, [r7, #2]
 80016f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016f6:	b2d8      	uxtb	r0, r3
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	3316      	adds	r3, #22
 8001706:	4602      	mov	r2, r0
 8001708:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fbc8 	bl	8001ea4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001714:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001718:	2b00      	cmp	r3, #0
 800171a:	da0a      	bge.n	8001732 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800171c:	78fa      	ldrb	r2, [r7, #3]
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	3317      	adds	r3, #23
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	e009      	b.n	8001746 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001732:	78fa      	ldrb	r2, [r7, #3]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3317      	adds	r3, #23
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f004 fdce 	bl	80062ec <USB_GetHostSpeed>
 8001750:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001752:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001756:	2b01      	cmp	r3, #1
 8001758:	d10b      	bne.n	8001772 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800175a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <HAL_HCD_HC_Init+0x10a>
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d104      	bne.n	8001772 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2bbc      	cmp	r3, #188	@ 0xbc
 800176c:	d901      	bls.n	8001772 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800176e:	23bc      	movs	r3, #188	@ 0xbc
 8001770:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	1a9b      	subs	r3, r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	3318      	adds	r3, #24
 8001782:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001786:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	b298      	uxth	r0, r3
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	3328      	adds	r3, #40	@ 0x28
 800179c:	4602      	mov	r2, r0
 800179e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	787c      	ldrb	r4, [r7, #1]
 80017aa:	78ba      	ldrb	r2, [r7, #2]
 80017ac:	78f9      	ldrb	r1, [r7, #3]
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4623      	mov	r3, r4
 80017be:	f004 fdbd 	bl	800633c <USB_HC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d101      	bne.n	80017f6 <HAL_HCD_HC_Halt+0x1e>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e00f      	b.n	8001816 <HAL_HCD_HC_Halt+0x3e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f005 f94f 	bl	8006aaa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	4608      	mov	r0, r1
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4603      	mov	r3, r0
 8001830:	70fb      	strb	r3, [r7, #3]
 8001832:	460b      	mov	r3, r1
 8001834:	70bb      	strb	r3, [r7, #2]
 8001836:	4613      	mov	r3, r2
 8001838:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800183a:	78fa      	ldrb	r2, [r7, #3]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	1a9b      	subs	r3, r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	3317      	adds	r3, #23
 800184a:	78ba      	ldrb	r2, [r7, #2]
 800184c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	1a9b      	subs	r3, r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	3326      	adds	r3, #38	@ 0x26
 800185e:	787a      	ldrb	r2, [r7, #1]
 8001860:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001862:	7c3b      	ldrb	r3, [r7, #16]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d114      	bne.n	8001892 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	332a      	adds	r3, #42	@ 0x2a
 8001878:	2203      	movs	r2, #3
 800187a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	3319      	adds	r3, #25
 800188c:	7f3a      	ldrb	r2, [r7, #28]
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	e009      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001892:	78fa      	ldrb	r2, [r7, #3]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	1a9b      	subs	r3, r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	332a      	adds	r3, #42	@ 0x2a
 80018a2:	2202      	movs	r2, #2
 80018a4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018a6:	787b      	ldrb	r3, [r7, #1]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	f200 8102 	bhi.w	8001ab2 <HAL_HCD_HC_SubmitRequest+0x292>
 80018ae:	a201      	add	r2, pc, #4	@ (adr r2, 80018b4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	080018c5 	.word	0x080018c5
 80018b8:	08001a9d 	.word	0x08001a9d
 80018bc:	08001989 	.word	0x08001989
 80018c0:	08001a13 	.word	0x08001a13
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80018c4:	7c3b      	ldrb	r3, [r7, #16]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	f040 80f5 	bne.w	8001ab6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80018cc:	78bb      	ldrb	r3, [r7, #2]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d12d      	bne.n	800192e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80018d2:	8b3b      	ldrh	r3, [r7, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	333d      	adds	r3, #61	@ 0x3d
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	333d      	adds	r3, #61	@ 0x3d
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10a      	bne.n	8001918 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	332a      	adds	r3, #42	@ 0x2a
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001916:	e0ce      	b.n	8001ab6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	332a      	adds	r3, #42	@ 0x2a
 8001928:	2202      	movs	r2, #2
 800192a:	701a      	strb	r2, [r3, #0]
      break;
 800192c:	e0c3      	b.n	8001ab6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	331a      	adds	r3, #26
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	f040 80b8 	bne.w	8001ab6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	333c      	adds	r3, #60	@ 0x3c
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10a      	bne.n	8001972 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	332a      	adds	r3, #42	@ 0x2a
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
      break;
 8001970:	e0a1      	b.n	8001ab6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	332a      	adds	r3, #42	@ 0x2a
 8001982:	2202      	movs	r2, #2
 8001984:	701a      	strb	r2, [r3, #0]
      break;
 8001986:	e096      	b.n	8001ab6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001988:	78bb      	ldrb	r3, [r7, #2]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d120      	bne.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	333d      	adds	r3, #61	@ 0x3d
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10a      	bne.n	80019ba <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	332a      	adds	r3, #42	@ 0x2a
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019b8:	e07e      	b.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ba:	78fa      	ldrb	r2, [r7, #3]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	1a9b      	subs	r3, r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	332a      	adds	r3, #42	@ 0x2a
 80019ca:	2202      	movs	r2, #2
 80019cc:	701a      	strb	r2, [r3, #0]
      break;
 80019ce:	e073      	b.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	333c      	adds	r3, #60	@ 0x3c
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	332a      	adds	r3, #42	@ 0x2a
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
      break;
 80019fa:	e05d      	b.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	332a      	adds	r3, #42	@ 0x2a
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	701a      	strb	r2, [r3, #0]
      break;
 8001a10:	e052      	b.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a12:	78bb      	ldrb	r3, [r7, #2]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d120      	bne.n	8001a5a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	333d      	adds	r3, #61	@ 0x3d
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10a      	bne.n	8001a44 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a2e:	78fa      	ldrb	r2, [r7, #3]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	332a      	adds	r3, #42	@ 0x2a
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a42:	e039      	b.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	332a      	adds	r3, #42	@ 0x2a
 8001a54:	2202      	movs	r2, #2
 8001a56:	701a      	strb	r2, [r3, #0]
      break;
 8001a58:	e02e      	b.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a5a:	78fa      	ldrb	r2, [r7, #3]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	333c      	adds	r3, #60	@ 0x3c
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10a      	bne.n	8001a86 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	332a      	adds	r3, #42	@ 0x2a
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
      break;
 8001a84:	e018      	b.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a86:	78fa      	ldrb	r2, [r7, #3]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	332a      	adds	r3, #42	@ 0x2a
 8001a96:	2202      	movs	r2, #2
 8001a98:	701a      	strb	r2, [r3, #0]
      break;
 8001a9a:	e00d      	b.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	332a      	adds	r3, #42	@ 0x2a
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
      break;
 8001ab0:	e002      	b.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001ab2:	bf00      	nop
 8001ab4:	e000      	b.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001ab6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	332c      	adds	r3, #44	@ 0x2c
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001acc:	78fa      	ldrb	r2, [r7, #3]
 8001ace:	8b39      	ldrh	r1, [r7, #24]
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4403      	add	r3, r0
 8001adc:	3334      	adds	r3, #52	@ 0x34
 8001ade:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	334c      	adds	r3, #76	@ 0x4c
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	3338      	adds	r3, #56	@ 0x38
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	3315      	adds	r3, #21
 8001b18:	78fa      	ldrb	r2, [r7, #3]
 8001b1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b1c:	78fa      	ldrb	r2, [r7, #3]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	334d      	adds	r3, #77	@ 0x4d
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	78fa      	ldrb	r2, [r7, #3]
 8001b36:	4613      	mov	r3, r2
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	3310      	adds	r3, #16
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	1d19      	adds	r1, r3, #4
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	799b      	ldrb	r3, [r3, #6]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f004 fd22 	bl	8006594 <USB_HC_StartXfer>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop

08001b5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f004 fa10 	bl	8005f98 <USB_GetMode>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	f040 80fb 	bne.w	8001d76 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 f9d3 	bl	8005f30 <USB_ReadInterrupts>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80f1 	beq.w	8001d74 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f004 f9ca 	bl	8005f30 <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ba6:	d104      	bne.n	8001bb2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001bb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 f9ba 	bl	8005f30 <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001bc6:	d104      	bne.n	8001bd2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001bd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f004 f9aa 	bl	8005f30 <USB_ReadInterrupts>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001be2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001be6:	d104      	bne.n	8001bf2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001bf0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f004 f99a 	bl	8005f30 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d103      	bne.n	8001c0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 f98c 	bl	8005f30 <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c22:	d120      	bne.n	8001c66 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001c2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d113      	bne.n	8001c66 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c3e:	2110      	movs	r1, #16
 8001c40:	6938      	ldr	r0, [r7, #16]
 8001c42:	f004 f87f 	bl	8005d44 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c46:	6938      	ldr	r0, [r7, #16]
 8001c48:	f004 f8ae 	bl	8005da8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7a5b      	ldrb	r3, [r3, #9]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d105      	bne.n	8001c60 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 faa6 	bl	80061ac <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f007 fa73 	bl	800914c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 f960 	bl	8005f30 <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c7a:	d102      	bne.n	8001c82 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f001 fd4d 	bl	800371c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 f952 	bl	8005f30 <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d106      	bne.n	8001ca4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f007 fa3c 	bl	8009114 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f004 f941 	bl	8005f30 <USB_ReadInterrupts>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cb8:	d139      	bne.n	8001d2e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 fee2 	bl	8006a88 <USB_HC_ReadInterrupt>
 8001cc4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e025      	b.n	8001d18 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d018      	beq.n	8001d12 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cf6:	d106      	bne.n	8001d06 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f905 	bl	8001f0e <HCD_HC_IN_IRQHandler>
 8001d04:	e005      	b.n	8001d12 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 ff67 	bl	8002be0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	795b      	ldrb	r3, [r3, #5]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d3d3      	bcc.n	8001ccc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 f8fc 	bl	8005f30 <USB_ReadInterrupts>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d101      	bne.n	8001d46 <HAL_HCD_IRQHandler+0x1ea>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_HCD_IRQHandler+0x1ec>
 8001d46:	2300      	movs	r3, #0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d014      	beq.n	8001d76 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0210 	bic.w	r2, r2, #16
 8001d5a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f001 fbfe 	bl	800355e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699a      	ldr	r2, [r3, #24]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0210 	orr.w	r2, r2, #16
 8001d70:	619a      	str	r2, [r3, #24]
 8001d72:	e000      	b.n	8001d76 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001d74:	bf00      	nop
    }
  }
}
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_HCD_Start+0x16>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e013      	b.n	8001dba <HAL_HCD_Start+0x3e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2101      	movs	r1, #1
 8001da0:	4618      	mov	r0, r3
 8001da2:	f004 fa6a 	bl	800627a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 ff5c 	bl	8005c68 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_HCD_Stop+0x16>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e00d      	b.n	8001df4 <HAL_HCD_Stop+0x32>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 ffbd 	bl	8006d64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f004 fa0c 	bl	8006226 <USB_ResetPort>
 8001e0e:	4603      	mov	r3, r0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	334c      	adds	r3, #76	@ 0x4c
 8001e34:	781b      	ldrb	r3, [r3, #0]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3338      	adds	r3, #56	@ 0x38
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f004 fa4e 	bl	800631a <USB_GetCurrentFrame>
 8001e7e:	4603      	mov	r3, r0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 fa29 	bl	80062ec <USB_GetHostSpeed>
 8001e9a:	4603      	mov	r3, r0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	331a      	adds	r3, #26
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	331b      	adds	r3, #27
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3325      	adds	r3, #37	@ 0x25
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	3324      	adds	r3, #36	@ 0x24
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 f812 	bl	8005f56 <USB_ReadChInterrupts>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d11a      	bne.n	8001f72 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	334d      	adds	r3, #77	@ 0x4d
 8001f5e:	2207      	movs	r2, #7
 8001f60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 fd9d 	bl	8006aaa <USB_HC_Halt>
 8001f70:	e09e      	b.n	80020b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 ffeb 	bl	8005f56 <USB_ReadChInterrupts>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f8a:	d11b      	bne.n	8001fc4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	334d      	adds	r3, #77	@ 0x4d
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 fd74 	bl	8006aaa <USB_HC_Halt>
 8001fc2:	e075      	b.n	80020b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 ffc2 	bl	8005f56 <USB_ReadChInterrupts>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d11a      	bne.n	8002012 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fe8:	461a      	mov	r2, r3
 8001fea:	2308      	movs	r3, #8
 8001fec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	334d      	adds	r3, #77	@ 0x4d
 8001ffe:	2206      	movs	r2, #6
 8002000:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f004 fd4d 	bl	8006aaa <USB_HC_Halt>
 8002010:	e04e      	b.n	80020b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f003 ff9b 	bl	8005f56 <USB_ReadChInterrupts>
 8002020:	4603      	mov	r3, r0
 8002022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800202a:	d11b      	bne.n	8002064 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002038:	461a      	mov	r2, r3
 800203a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800203e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	334d      	adds	r3, #77	@ 0x4d
 8002050:	2209      	movs	r2, #9
 8002052:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f004 fd24 	bl	8006aaa <USB_HC_Halt>
 8002062:	e025      	b.n	80020b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f003 ff72 	bl	8005f56 <USB_ReadChInterrupts>
 8002072:	4603      	mov	r3, r0
 8002074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002078:	2b80      	cmp	r3, #128	@ 0x80
 800207a:	d119      	bne.n	80020b0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4413      	add	r3, r2
 8002084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002088:	461a      	mov	r2, r3
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	334d      	adds	r3, #77	@ 0x4d
 800209e:	2207      	movs	r2, #7
 80020a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 fcfd 	bl	8006aaa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 ff4c 	bl	8005f56 <USB_ReadChInterrupts>
 80020be:	4603      	mov	r3, r0
 80020c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020c8:	d112      	bne.n	80020f0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fce9 	bl	8006aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020e4:	461a      	mov	r2, r3
 80020e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020ea:	6093      	str	r3, [r2, #8]
 80020ec:	f000 bd75 	b.w	8002bda <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 ff2c 	bl	8005f56 <USB_ReadChInterrupts>
 80020fe:	4603      	mov	r3, r0
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	f040 8128 	bne.w	800235a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4413      	add	r3, r2
 8002112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002116:	461a      	mov	r2, r3
 8002118:	2320      	movs	r3, #32
 800211a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	331b      	adds	r3, #27
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d119      	bne.n	8002166 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	331b      	adds	r3, #27
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4413      	add	r3, r2
 800214e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	0151      	lsls	r1, r2, #5
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	440a      	add	r2, r1
 800215c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002164:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	799b      	ldrb	r3, [r3, #6]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01b      	beq.n	80021a6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	3330      	adds	r3, #48	@ 0x30
 800217e:	6819      	ldr	r1, [r3, #0]
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	1ac9      	subs	r1, r1, r3
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4403      	add	r3, r0
 80021a2:	3338      	adds	r3, #56	@ 0x38
 80021a4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	334d      	adds	r3, #77	@ 0x4d
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	3344      	adds	r3, #68	@ 0x44
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021da:	461a      	mov	r2, r3
 80021dc:	2301      	movs	r3, #1
 80021de:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	3326      	adds	r3, #38	@ 0x26
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	3326      	adds	r3, #38	@ 0x26
 8002206:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002208:	2b02      	cmp	r3, #2
 800220a:	d110      	bne.n	800222e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f004 fc48 	bl	8006aaa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002226:	461a      	mov	r2, r3
 8002228:	2310      	movs	r3, #16
 800222a:	6093      	str	r3, [r2, #8]
 800222c:	e03d      	b.n	80022aa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	3326      	adds	r3, #38	@ 0x26
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d00a      	beq.n	800225a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3326      	adds	r3, #38	@ 0x26
 8002254:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002256:	2b01      	cmp	r3, #1
 8002258:	d127      	bne.n	80022aa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	0151      	lsls	r1, r2, #5
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	440a      	add	r2, r1
 8002270:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002274:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002278:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	334c      	adds	r3, #76	@ 0x4c
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	334c      	adds	r3, #76	@ 0x4c
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	4619      	mov	r1, r3
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f006 ff5f 	bl	8009168 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	799b      	ldrb	r3, [r3, #6]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d13b      	bne.n	800232a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	3338      	adds	r3, #56	@ 0x38
 80022c2:	6819      	ldr	r1, [r3, #0]
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4403      	add	r3, r0
 80022d2:	3328      	adds	r3, #40	@ 0x28
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	440b      	add	r3, r1
 80022d8:	1e59      	subs	r1, r3, #1
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4403      	add	r3, r0
 80022e8:	3328      	adds	r3, #40	@ 0x28
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 8470 	beq.w	8002bda <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	333c      	adds	r3, #60	@ 0x3c
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	f083 0301 	eor.w	r3, r3, #1
 8002312:	b2d8      	uxtb	r0, r3
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	333c      	adds	r3, #60	@ 0x3c
 8002322:	4602      	mov	r2, r0
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	f000 bc58 	b.w	8002bda <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	333c      	adds	r3, #60	@ 0x3c
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	f083 0301 	eor.w	r3, r3, #1
 8002342:	b2d8      	uxtb	r0, r3
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	333c      	adds	r3, #60	@ 0x3c
 8002352:	4602      	mov	r2, r0
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	f000 bc40 	b.w	8002bda <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f003 fdf7 	bl	8005f56 <USB_ReadChInterrupts>
 8002368:	4603      	mov	r3, r0
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b20      	cmp	r3, #32
 8002370:	d131      	bne.n	80023d6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800237e:	461a      	mov	r2, r3
 8002380:	2320      	movs	r3, #32
 8002382:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	331a      	adds	r3, #26
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	f040 841f 	bne.w	8002bda <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	331b      	adds	r3, #27
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	334d      	adds	r3, #77	@ 0x4d
 80023c0:	2203      	movs	r2, #3
 80023c2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f004 fb6c 	bl	8006aaa <USB_HC_Halt>
 80023d2:	f000 bc02 	b.w	8002bda <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fdb9 	bl	8005f56 <USB_ReadChInterrupts>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	f040 8305 	bne.w	80029fa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023fc:	461a      	mov	r2, r3
 80023fe:	2302      	movs	r3, #2
 8002400:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	334d      	adds	r3, #77	@ 0x4d
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d114      	bne.n	8002442 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	334d      	adds	r3, #77	@ 0x4d
 8002428:	2202      	movs	r2, #2
 800242a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	334c      	adds	r3, #76	@ 0x4c
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e2cc      	b.n	80029dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	334d      	adds	r3, #77	@ 0x4d
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b06      	cmp	r3, #6
 8002456:	d114      	bne.n	8002482 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	334d      	adds	r3, #77	@ 0x4d
 8002468:	2202      	movs	r2, #2
 800246a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	334c      	adds	r3, #76	@ 0x4c
 800247c:	2205      	movs	r2, #5
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	e2ac      	b.n	80029dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	334d      	adds	r3, #77	@ 0x4d
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b07      	cmp	r3, #7
 8002496:	d00b      	beq.n	80024b0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	334d      	adds	r3, #77	@ 0x4d
 80024a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024aa:	2b09      	cmp	r3, #9
 80024ac:	f040 80a6 	bne.w	80025fc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	334d      	adds	r3, #77	@ 0x4d
 80024c0:	2202      	movs	r2, #2
 80024c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	3344      	adds	r3, #68	@ 0x44
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	1c59      	adds	r1, r3, #1
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4403      	add	r3, r0
 80024e4:	3344      	adds	r3, #68	@ 0x44
 80024e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	3344      	adds	r3, #68	@ 0x44
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d943      	bls.n	8002586 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3344      	adds	r3, #68	@ 0x44
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	331a      	adds	r3, #26
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d123      	bne.n	8002570 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	331b      	adds	r3, #27
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	331c      	adds	r3, #28
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	0151      	lsls	r1, r2, #5
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	440a      	add	r2, r1
 8002566:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800256a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800256e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	334c      	adds	r3, #76	@ 0x4c
 8002580:	2204      	movs	r2, #4
 8002582:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002584:	e229      	b.n	80029da <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	334c      	adds	r3, #76	@ 0x4c
 8002596:	2202      	movs	r2, #2
 8002598:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	3326      	adds	r3, #38	@ 0x26
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00b      	beq.n	80025c8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3326      	adds	r3, #38	@ 0x26
 80025c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	f040 8209 	bne.w	80029da <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80025de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f4:	461a      	mov	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025fa:	e1ee      	b.n	80029da <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	334d      	adds	r3, #77	@ 0x4d
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b05      	cmp	r3, #5
 8002610:	f040 80c8 	bne.w	80027a4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	334d      	adds	r3, #77	@ 0x4d
 8002624:	2202      	movs	r2, #2
 8002626:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	331b      	adds	r3, #27
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	f040 81ce 	bne.w	80029dc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3326      	adds	r3, #38	@ 0x26
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d16b      	bne.n	800272e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	3348      	adds	r3, #72	@ 0x48
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	1c59      	adds	r1, r3, #1
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4403      	add	r3, r0
 8002676:	3348      	adds	r3, #72	@ 0x48
 8002678:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	3348      	adds	r3, #72	@ 0x48
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d943      	bls.n	8002718 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	3348      	adds	r3, #72	@ 0x48
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	331b      	adds	r3, #27
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	3344      	adds	r3, #68	@ 0x44
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d809      	bhi.n	80026e2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	331c      	adds	r3, #28
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	0151      	lsls	r1, r2, #5
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	440a      	add	r2, r1
 80026f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002700:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	334c      	adds	r3, #76	@ 0x4c
 8002712:	2204      	movs	r2, #4
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	e014      	b.n	8002742 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	334c      	adds	r3, #76	@ 0x4c
 8002728:	2202      	movs	r2, #2
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e009      	b.n	8002742 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	334c      	adds	r3, #76	@ 0x4c
 800273e:	2202      	movs	r2, #2
 8002740:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3326      	adds	r3, #38	@ 0x26
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00b      	beq.n	8002770 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3326      	adds	r3, #38	@ 0x26
 8002768:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800276a:	2b02      	cmp	r3, #2
 800276c:	f040 8136 	bne.w	80029dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002786:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800278e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279c:	461a      	mov	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e11b      	b.n	80029dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	334d      	adds	r3, #77	@ 0x4d
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	f040 8081 	bne.w	80028be <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	334d      	adds	r3, #77	@ 0x4d
 80027cc:	2202      	movs	r2, #2
 80027ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	331b      	adds	r3, #27
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	f040 80fa 	bne.w	80029dc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	334c      	adds	r3, #76	@ 0x4c
 80027f8:	2202      	movs	r2, #2
 80027fa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	0151      	lsls	r1, r2, #5
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	440a      	add	r2, r1
 8002812:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800281a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	0151      	lsls	r1, r2, #5
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	440a      	add	r2, r1
 8002832:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800283a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	0151      	lsls	r1, r2, #5
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	440a      	add	r2, r1
 8002852:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002856:	f023 0320 	bic.w	r3, r3, #32
 800285a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	3326      	adds	r3, #38	@ 0x26
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	3326      	adds	r3, #38	@ 0x26
 8002882:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002884:	2b02      	cmp	r3, #2
 8002886:	f040 80a9 	bne.w	80029dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b6:	461a      	mov	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	e08e      	b.n	80029dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	334d      	adds	r3, #77	@ 0x4d
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d143      	bne.n	800295c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	334d      	adds	r3, #77	@ 0x4d
 80028e4:	2202      	movs	r2, #2
 80028e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	334c      	adds	r3, #76	@ 0x4c
 80028f8:	2202      	movs	r2, #2
 80028fa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	3326      	adds	r3, #38	@ 0x26
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	3326      	adds	r3, #38	@ 0x26
 8002922:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002924:	2b02      	cmp	r3, #2
 8002926:	d159      	bne.n	80029dc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4413      	add	r3, r2
 8002930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800293e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002946:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002954:	461a      	mov	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e03f      	b.n	80029dc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	334d      	adds	r3, #77	@ 0x4d
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b08      	cmp	r3, #8
 8002970:	d126      	bne.n	80029c0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	334d      	adds	r3, #77	@ 0x4d
 8002982:	2202      	movs	r2, #2
 8002984:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	3344      	adds	r3, #68	@ 0x44
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	1c59      	adds	r1, r3, #1
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4403      	add	r3, r0
 80029a6:	3344      	adds	r3, #68	@ 0x44
 80029a8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	334c      	adds	r3, #76	@ 0x4c
 80029ba:	2204      	movs	r2, #4
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e00d      	b.n	80029dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	334d      	adds	r3, #77	@ 0x4d
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	f000 8100 	beq.w	8002bd8 <HCD_HC_IN_IRQHandler+0xcca>
 80029d8:	e000      	b.n	80029dc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029da:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	334c      	adds	r3, #76	@ 0x4c
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	4619      	mov	r1, r3
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f006 fbb8 	bl	8009168 <HAL_HCD_HC_NotifyURBChange_Callback>
 80029f8:	e0ef      	b.n	8002bda <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 faa7 	bl	8005f56 <USB_ReadChInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0e:	2b40      	cmp	r3, #64	@ 0x40
 8002a10:	d12f      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2340      	movs	r3, #64	@ 0x40
 8002a22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	334d      	adds	r3, #77	@ 0x4d
 8002a34:	2205      	movs	r2, #5
 8002a36:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	331a      	adds	r3, #26
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3344      	adds	r3, #68	@ 0x44
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f004 f81d 	bl	8006aaa <USB_HC_Halt>
 8002a70:	e0b3      	b.n	8002bda <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 fa6b 	bl	8005f56 <USB_ReadChInterrupts>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	f040 80a7 	bne.w	8002bda <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	3326      	adds	r3, #38	@ 0x26
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d11b      	bne.n	8002ada <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	3344      	adds	r3, #68	@ 0x44
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	334d      	adds	r3, #77	@ 0x4d
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f003 ffe9 	bl	8006aaa <USB_HC_Halt>
 8002ad8:	e03f      	b.n	8002b5a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3326      	adds	r3, #38	@ 0x26
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	3326      	adds	r3, #38	@ 0x26
 8002b00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d129      	bne.n	8002b5a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	3344      	adds	r3, #68	@ 0x44
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	799b      	ldrb	r3, [r3, #6]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HCD_HC_IN_IRQHandler+0xc2a>
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	331b      	adds	r3, #27
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d110      	bne.n	8002b5a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	334d      	adds	r3, #77	@ 0x4d
 8002b48:	2204      	movs	r2, #4
 8002b4a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 ffa8 	bl	8006aaa <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	331b      	adds	r3, #27
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d129      	bne.n	8002bc4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	331b      	adds	r3, #27
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	0151      	lsls	r1, r2, #5
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	440a      	add	r2, r1
 8002b9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	0151      	lsls	r1, r2, #5
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	440a      	add	r2, r1
 8002bba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bbe:	f043 0320 	orr.w	r3, r3, #32
 8002bc2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2310      	movs	r3, #16
 8002bd4:	6093      	str	r3, [r2, #8]
 8002bd6:	e000      	b.n	8002bda <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002bd8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f003 f9a9 	bl	8005f56 <USB_ReadChInterrupts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d11b      	bne.n	8002c46 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334d      	adds	r3, #77	@ 0x4d
 8002c30:	2207      	movs	r2, #7
 8002c32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 ff34 	bl	8006aaa <USB_HC_Halt>
 8002c42:	f000 bc89 	b.w	8003558 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f003 f981 	bl	8005f56 <USB_ReadChInterrupts>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	f040 8082 	bne.w	8002d64 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2320      	movs	r3, #32
 8002c70:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3319      	adds	r3, #25
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d124      	bne.n	8002cd2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3319      	adds	r3, #25
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	334c      	adds	r3, #76	@ 0x4c
 8002cac:	2202      	movs	r2, #2
 8002cae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	334d      	adds	r3, #77	@ 0x4d
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 feec 	bl	8006aaa <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	331a      	adds	r3, #26
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	f040 8437 	bne.w	8003558 <HCD_HC_OUT_IRQHandler+0x978>
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	331b      	adds	r3, #27
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f040 842b 	bne.w	8003558 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3326      	adds	r3, #38	@ 0x26
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d009      	beq.n	8002d2c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	331b      	adds	r3, #27
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	334d      	adds	r3, #77	@ 0x4d
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f003 feae 	bl	8006aaa <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3344      	adds	r3, #68	@ 0x44
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e3f9      	b.n	8003558 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 f8f2 	bl	8005f56 <USB_ReadChInterrupts>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d7c:	d111      	bne.n	8002da2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d90:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 fe85 	bl	8006aaa <USB_HC_Halt>
 8002da0:	e3da      	b.n	8003558 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f003 f8d3 	bl	8005f56 <USB_ReadChInterrupts>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d168      	bne.n	8002e8c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3344      	adds	r3, #68	@ 0x44
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f003 f8bd 	bl	8005f56 <USB_ReadChInterrupts>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de2:	2b40      	cmp	r3, #64	@ 0x40
 8002de4:	d112      	bne.n	8002e0c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	3319      	adds	r3, #25
 8002df6:	2201      	movs	r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e06:	461a      	mov	r2, r3
 8002e08:	2340      	movs	r3, #64	@ 0x40
 8002e0a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	331b      	adds	r3, #27
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d019      	beq.n	8002e56 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	331b      	adds	r3, #27
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	0151      	lsls	r1, r2, #5
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	440a      	add	r2, r1
 8002e4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e54:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e62:	461a      	mov	r2, r3
 8002e64:	2301      	movs	r3, #1
 8002e66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	334d      	adds	r3, #77	@ 0x4d
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 fe10 	bl	8006aaa <USB_HC_Halt>
 8002e8a:	e365      	b.n	8003558 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 f85e 	bl	8005f56 <USB_ReadChInterrupts>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea0:	2b40      	cmp	r3, #64	@ 0x40
 8002ea2:	d139      	bne.n	8002f18 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	334d      	adds	r3, #77	@ 0x4d
 8002eb4:	2205      	movs	r2, #5
 8002eb6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	331a      	adds	r3, #26
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3319      	adds	r3, #25
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3344      	adds	r3, #68	@ 0x44
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f003 fdd3 	bl	8006aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f10:	461a      	mov	r2, r3
 8002f12:	2340      	movs	r3, #64	@ 0x40
 8002f14:	6093      	str	r3, [r2, #8]
 8002f16:	e31f      	b.n	8003558 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 f818 	bl	8005f56 <USB_ReadChInterrupts>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d11a      	bne.n	8002f66 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2308      	movs	r3, #8
 8002f40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	334d      	adds	r3, #77	@ 0x4d
 8002f52:	2206      	movs	r2, #6
 8002f54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f003 fda3 	bl	8006aaa <USB_HC_Halt>
 8002f64:	e2f8      	b.n	8003558 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f002 fff1 	bl	8005f56 <USB_ReadChInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d144      	bne.n	8003008 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3344      	adds	r3, #68	@ 0x44
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	334d      	adds	r3, #77	@ 0x4d
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	3319      	adds	r3, #25
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d114      	bne.n	8002fe6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	3318      	adds	r3, #24
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	3319      	adds	r3, #25
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f003 fd5b 	bl	8006aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003000:	461a      	mov	r2, r3
 8003002:	2310      	movs	r3, #16
 8003004:	6093      	str	r3, [r2, #8]
 8003006:	e2a7      	b.n	8003558 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f002 ffa0 	bl	8005f56 <USB_ReadChInterrupts>
 8003016:	4603      	mov	r3, r0
 8003018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301c:	2b80      	cmp	r3, #128	@ 0x80
 800301e:	f040 8083 	bne.w	8003128 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	799b      	ldrb	r3, [r3, #6]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d111      	bne.n	800304e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	334d      	adds	r3, #77	@ 0x4d
 800303a:	2207      	movs	r2, #7
 800303c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f003 fd2f 	bl	8006aaa <USB_HC_Halt>
 800304c:	e062      	b.n	8003114 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3344      	adds	r3, #68	@ 0x44
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	1c59      	adds	r1, r3, #1
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4403      	add	r3, r0
 800306e:	3344      	adds	r3, #68	@ 0x44
 8003070:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	3344      	adds	r3, #68	@ 0x44
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d922      	bls.n	80030ce <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	3344      	adds	r3, #68	@ 0x44
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	334c      	adds	r3, #76	@ 0x4c
 80030ac:	2204      	movs	r2, #4
 80030ae:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	334c      	adds	r3, #76	@ 0x4c
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	4619      	mov	r1, r3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f006 f84e 	bl	8009168 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030cc:	e022      	b.n	8003114 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	334c      	adds	r3, #76	@ 0x4c
 80030de:	2202      	movs	r2, #2
 80030e0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030f8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003100:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003120:	461a      	mov	r2, r3
 8003122:	2380      	movs	r3, #128	@ 0x80
 8003124:	6093      	str	r3, [r2, #8]
 8003126:	e217      	b.n	8003558 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f002 ff10 	bl	8005f56 <USB_ReadChInterrupts>
 8003136:	4603      	mov	r3, r0
 8003138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003140:	d11b      	bne.n	800317a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	334d      	adds	r3, #77	@ 0x4d
 8003152:	2209      	movs	r2, #9
 8003154:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f003 fca3 	bl	8006aaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003170:	461a      	mov	r2, r3
 8003172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003176:	6093      	str	r3, [r2, #8]
 8003178:	e1ee      	b.n	8003558 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f002 fee7 	bl	8005f56 <USB_ReadChInterrupts>
 8003188:	4603      	mov	r3, r0
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b02      	cmp	r3, #2
 8003190:	f040 81df 	bne.w	8003552 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a0:	461a      	mov	r2, r3
 80031a2:	2302      	movs	r3, #2
 80031a4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	334d      	adds	r3, #77	@ 0x4d
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	f040 8093 	bne.w	80032e4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	334d      	adds	r3, #77	@ 0x4d
 80031ce:	2202      	movs	r2, #2
 80031d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	334c      	adds	r3, #76	@ 0x4c
 80031e2:	2201      	movs	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	3326      	adds	r3, #38	@ 0x26
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d00b      	beq.n	8003214 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	3326      	adds	r3, #38	@ 0x26
 800320c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800320e:	2b03      	cmp	r3, #3
 8003210:	f040 8190 	bne.w	8003534 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	799b      	ldrb	r3, [r3, #6]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d115      	bne.n	8003248 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	333d      	adds	r3, #61	@ 0x3d
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	f083 0301 	eor.w	r3, r3, #1
 8003234:	b2d8      	uxtb	r0, r3
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	333d      	adds	r3, #61	@ 0x3d
 8003244:	4602      	mov	r2, r0
 8003246:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	799b      	ldrb	r3, [r3, #6]
 800324c:	2b01      	cmp	r3, #1
 800324e:	f040 8171 	bne.w	8003534 <HCD_HC_OUT_IRQHandler+0x954>
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	3334      	adds	r3, #52	@ 0x34
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8165 	beq.w	8003534 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	3334      	adds	r3, #52	@ 0x34
 800327a:	6819      	ldr	r1, [r3, #0]
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4403      	add	r3, r0
 800328a:	3328      	adds	r3, #40	@ 0x28
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	440b      	add	r3, r1
 8003290:	1e59      	subs	r1, r3, #1
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4403      	add	r3, r0
 80032a0:	3328      	adds	r3, #40	@ 0x28
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 813f 	beq.w	8003534 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	333d      	adds	r3, #61	@ 0x3d
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	f083 0301 	eor.w	r3, r3, #1
 80032ce:	b2d8      	uxtb	r0, r3
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	333d      	adds	r3, #61	@ 0x3d
 80032de:	4602      	mov	r2, r0
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e127      	b.n	8003534 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	334d      	adds	r3, #77	@ 0x4d
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d120      	bne.n	800333c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	334d      	adds	r3, #77	@ 0x4d
 800330a:	2202      	movs	r2, #2
 800330c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	331b      	adds	r3, #27
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	f040 8107 	bne.w	8003534 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334c      	adds	r3, #76	@ 0x4c
 8003336:	2202      	movs	r2, #2
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e0fb      	b.n	8003534 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	334d      	adds	r3, #77	@ 0x4d
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b04      	cmp	r3, #4
 8003350:	d13a      	bne.n	80033c8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	334d      	adds	r3, #77	@ 0x4d
 8003362:	2202      	movs	r2, #2
 8003364:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	334c      	adds	r3, #76	@ 0x4c
 8003376:	2202      	movs	r2, #2
 8003378:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	331b      	adds	r3, #27
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b01      	cmp	r3, #1
 800338e:	f040 80d1 	bne.w	8003534 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	331b      	adds	r3, #27
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	0151      	lsls	r1, r2, #5
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	440a      	add	r2, r1
 80033bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c4:	6053      	str	r3, [r2, #4]
 80033c6:	e0b5      	b.n	8003534 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	334d      	adds	r3, #77	@ 0x4d
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d114      	bne.n	8003408 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	334d      	adds	r3, #77	@ 0x4d
 80033ee:	2202      	movs	r2, #2
 80033f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	334c      	adds	r3, #76	@ 0x4c
 8003402:	2202      	movs	r2, #2
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	e095      	b.n	8003534 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	334d      	adds	r3, #77	@ 0x4d
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b06      	cmp	r3, #6
 800341c:	d114      	bne.n	8003448 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	334d      	adds	r3, #77	@ 0x4d
 800342e:	2202      	movs	r2, #2
 8003430:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	334c      	adds	r3, #76	@ 0x4c
 8003442:	2205      	movs	r2, #5
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e075      	b.n	8003534 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	334d      	adds	r3, #77	@ 0x4d
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b07      	cmp	r3, #7
 800345c:	d00a      	beq.n	8003474 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	334d      	adds	r3, #77	@ 0x4d
 800346e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003470:	2b09      	cmp	r3, #9
 8003472:	d170      	bne.n	8003556 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	334d      	adds	r3, #77	@ 0x4d
 8003484:	2202      	movs	r2, #2
 8003486:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	3344      	adds	r3, #68	@ 0x44
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	1c59      	adds	r1, r3, #1
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4403      	add	r3, r0
 80034a8:	3344      	adds	r3, #68	@ 0x44
 80034aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3344      	adds	r3, #68	@ 0x44
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d914      	bls.n	80034ec <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3344      	adds	r3, #68	@ 0x44
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	334c      	adds	r3, #76	@ 0x4c
 80034e6:	2204      	movs	r2, #4
 80034e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034ea:	e022      	b.n	8003532 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	334c      	adds	r3, #76	@ 0x4c
 80034fc:	2202      	movs	r2, #2
 80034fe:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003516:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800351e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800352c:	461a      	mov	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003532:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	334c      	adds	r3, #76	@ 0x4c
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f005 fe0c 	bl	8009168 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003550:	e002      	b.n	8003558 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003556:	bf00      	nop
  }
}
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b08a      	sub	sp, #40	@ 0x28
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	0c5b      	lsrs	r3, r3, #17
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003592:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d004      	beq.n	80035a4 <HCD_RXQLVL_IRQHandler+0x46>
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b05      	cmp	r3, #5
 800359e:	f000 80b6 	beq.w	800370e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035a2:	e0b7      	b.n	8003714 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80b3 	beq.w	8003712 <HCD_RXQLVL_IRQHandler+0x1b4>
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	332c      	adds	r3, #44	@ 0x2c
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80a7 	beq.w	8003712 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	3338      	adds	r3, #56	@ 0x38
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	18d1      	adds	r1, r2, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4403      	add	r3, r0
 80035e8:	3334      	adds	r3, #52	@ 0x34
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4299      	cmp	r1, r3
 80035ee:	f200 8083 	bhi.w	80036f8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	332c      	adds	r3, #44	@ 0x2c
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	b292      	uxth	r2, r2
 800360c:	4619      	mov	r1, r3
 800360e:	f002 fc37 	bl	8005e80 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	332c      	adds	r3, #44	@ 0x2c
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	18d1      	adds	r1, r2, r3
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4403      	add	r3, r0
 8003636:	332c      	adds	r3, #44	@ 0x2c
 8003638:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	3338      	adds	r3, #56	@ 0x38
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	18d1      	adds	r1, r2, r3
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4613      	mov	r3, r2
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4403      	add	r3, r0
 800365e:	3338      	adds	r3, #56	@ 0x38
 8003660:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	4413      	add	r3, r2
 800366a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	0cdb      	lsrs	r3, r3, #19
 8003672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003676:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	3328      	adds	r3, #40	@ 0x28
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4293      	cmp	r3, r2
 8003690:	d13f      	bne.n	8003712 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d03c      	beq.n	8003712 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c4:	461a      	mov	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	333c      	adds	r3, #60	@ 0x3c
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	f083 0301 	eor.w	r3, r3, #1
 80036e0:	b2d8      	uxtb	r0, r3
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4613      	mov	r3, r2
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	333c      	adds	r3, #60	@ 0x3c
 80036f2:	4602      	mov	r2, r0
 80036f4:	701a      	strb	r2, [r3, #0]
      break;
 80036f6:	e00c      	b.n	8003712 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4613      	mov	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	334c      	adds	r3, #76	@ 0x4c
 8003708:	2204      	movs	r2, #4
 800370a:	701a      	strb	r2, [r3, #0]
      break;
 800370c:	e001      	b.n	8003712 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003712:	bf00      	nop
  }
}
 8003714:	bf00      	nop
 8003716:	3728      	adds	r7, #40	@ 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003748:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b02      	cmp	r3, #2
 8003752:	d10b      	bne.n	800376c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b01      	cmp	r3, #1
 800375c:	d102      	bne.n	8003764 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f005 fce6 	bl	8009130 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d132      	bne.n	80037dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f043 0308 	orr.w	r3, r3, #8
 800377c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b04      	cmp	r3, #4
 8003786:	d126      	bne.n	80037d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7a5b      	ldrb	r3, [r3, #9]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d113      	bne.n	80037b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003796:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800379a:	d106      	bne.n	80037aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2102      	movs	r1, #2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f002 fd02 	bl	80061ac <USB_InitFSLSPClkSel>
 80037a8:	e011      	b.n	80037ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f002 fcfb 	bl	80061ac <USB_InitFSLSPClkSel>
 80037b6:	e00a      	b.n	80037ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	79db      	ldrb	r3, [r3, #7]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d106      	bne.n	80037ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037c6:	461a      	mov	r2, r3
 80037c8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80037cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f005 fcd8 	bl	8009184 <HAL_HCD_PortEnabled_Callback>
 80037d4:	e002      	b.n	80037dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f005 fce2 	bl	80091a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d103      	bne.n	80037ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f043 0320 	orr.w	r3, r3, #32
 80037ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	6013      	str	r3, [r2, #0]
}
 80037fa:	bf00      	nop
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e12b      	b.n	8003a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd f932 	bl	8000a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	@ 0x24
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003868:	f001 fa20 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 800386c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4a81      	ldr	r2, [pc, #516]	@ (8003a78 <HAL_I2C_Init+0x274>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d807      	bhi.n	8003888 <HAL_I2C_Init+0x84>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a80      	ldr	r2, [pc, #512]	@ (8003a7c <HAL_I2C_Init+0x278>)
 800387c:	4293      	cmp	r3, r2
 800387e:	bf94      	ite	ls
 8003880:	2301      	movls	r3, #1
 8003882:	2300      	movhi	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e006      	b.n	8003896 <HAL_I2C_Init+0x92>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a7d      	ldr	r2, [pc, #500]	@ (8003a80 <HAL_I2C_Init+0x27c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	bf94      	ite	ls
 8003890:	2301      	movls	r3, #1
 8003892:	2300      	movhi	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0e7      	b.n	8003a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4a78      	ldr	r2, [pc, #480]	@ (8003a84 <HAL_I2C_Init+0x280>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	0c9b      	lsrs	r3, r3, #18
 80038a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003a78 <HAL_I2C_Init+0x274>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d802      	bhi.n	80038d8 <HAL_I2C_Init+0xd4>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	3301      	adds	r3, #1
 80038d6:	e009      	b.n	80038ec <HAL_I2C_Init+0xe8>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	4a69      	ldr	r2, [pc, #420]	@ (8003a88 <HAL_I2C_Init+0x284>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	099b      	lsrs	r3, r3, #6
 80038ea:	3301      	adds	r3, #1
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	495c      	ldr	r1, [pc, #368]	@ (8003a78 <HAL_I2C_Init+0x274>)
 8003908:	428b      	cmp	r3, r1
 800390a:	d819      	bhi.n	8003940 <HAL_I2C_Init+0x13c>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1e59      	subs	r1, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	fbb1 f3f3 	udiv	r3, r1, r3
 800391a:	1c59      	adds	r1, r3, #1
 800391c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003920:	400b      	ands	r3, r1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_I2C_Init+0x138>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1e59      	subs	r1, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	fbb1 f3f3 	udiv	r3, r1, r3
 8003934:	3301      	adds	r3, #1
 8003936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393a:	e051      	b.n	80039e0 <HAL_I2C_Init+0x1dc>
 800393c:	2304      	movs	r3, #4
 800393e:	e04f      	b.n	80039e0 <HAL_I2C_Init+0x1dc>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d111      	bne.n	800396c <HAL_I2C_Init+0x168>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e58      	subs	r0, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	440b      	add	r3, r1
 8003956:	fbb0 f3f3 	udiv	r3, r0, r3
 800395a:	3301      	adds	r3, #1
 800395c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e012      	b.n	8003992 <HAL_I2C_Init+0x18e>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1e58      	subs	r0, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	0099      	lsls	r1, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003982:	3301      	adds	r3, #1
 8003984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Init+0x196>
 8003996:	2301      	movs	r3, #1
 8003998:	e022      	b.n	80039e0 <HAL_I2C_Init+0x1dc>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10e      	bne.n	80039c0 <HAL_I2C_Init+0x1bc>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1e58      	subs	r0, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	460b      	mov	r3, r1
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	440b      	add	r3, r1
 80039b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b4:	3301      	adds	r3, #1
 80039b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039be:	e00f      	b.n	80039e0 <HAL_I2C_Init+0x1dc>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1e58      	subs	r0, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	0099      	lsls	r1, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	6809      	ldr	r1, [r1, #0]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69da      	ldr	r2, [r3, #28]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6911      	ldr	r1, [r2, #16]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68d2      	ldr	r2, [r2, #12]
 8003a1a:	4311      	orrs	r1, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	430b      	orrs	r3, r1
 8003a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	000186a0 	.word	0x000186a0
 8003a7c:	001e847f 	.word	0x001e847f
 8003a80:	003d08ff 	.word	0x003d08ff
 8003a84:	431bde83 	.word	0x431bde83
 8003a88:	10624dd3 	.word	0x10624dd3

08003a8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e128      	b.n	8003cf0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a90      	ldr	r2, [pc, #576]	@ (8003cf8 <HAL_I2S_Init+0x26c>)
 8003ab6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fd f833 	bl	8000b24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ad4:	f023 030f 	bic.w	r3, r3, #15
 8003ad8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d060      	beq.n	8003bac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003af2:	2310      	movs	r3, #16
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e001      	b.n	8003afc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003af8:	2320      	movs	r3, #32
 8003afa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d802      	bhi.n	8003b0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	f001 f9d8 	bl	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b10:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b1a:	d125      	bne.n	8003b68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d010      	beq.n	8003b46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	461a      	mov	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	3305      	adds	r3, #5
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	e01f      	b.n	8003b86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	461a      	mov	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	3305      	adds	r3, #5
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e00e      	b.n	8003b86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	461a      	mov	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	3305      	adds	r3, #5
 8003b84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4a5c      	ldr	r2, [pc, #368]	@ (8003cfc <HAL_I2S_Init+0x270>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	08db      	lsrs	r3, r3, #3
 8003b90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e003      	b.n	8003bb4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003bac:	2302      	movs	r3, #2
 8003bae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d902      	bls.n	8003bc0 <HAL_I2S_Init+0x134>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	2bff      	cmp	r3, #255	@ 0xff
 8003bbe:	d907      	bls.n	8003bd0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc4:	f043 0210 	orr.w	r2, r3, #16
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e08f      	b.n	8003cf0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	ea42 0103 	orr.w	r1, r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bee:	f023 030f 	bic.w	r3, r3, #15
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6851      	ldr	r1, [r2, #4]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6892      	ldr	r2, [r2, #8]
 8003bfa:	4311      	orrs	r1, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	68d2      	ldr	r2, [r2, #12]
 8003c00:	4311      	orrs	r1, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6992      	ldr	r2, [r2, #24]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d161      	bne.n	8003ce0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a38      	ldr	r2, [pc, #224]	@ (8003d00 <HAL_I2S_Init+0x274>)
 8003c20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a37      	ldr	r2, [pc, #220]	@ (8003d04 <HAL_I2S_Init+0x278>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d101      	bne.n	8003c30 <HAL_I2S_Init+0x1a4>
 8003c2c:	4b36      	ldr	r3, [pc, #216]	@ (8003d08 <HAL_I2S_Init+0x27c>)
 8003c2e:	e001      	b.n	8003c34 <HAL_I2S_Init+0x1a8>
 8003c30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	4932      	ldr	r1, [pc, #200]	@ (8003d04 <HAL_I2S_Init+0x278>)
 8003c3c:	428a      	cmp	r2, r1
 8003c3e:	d101      	bne.n	8003c44 <HAL_I2S_Init+0x1b8>
 8003c40:	4a31      	ldr	r2, [pc, #196]	@ (8003d08 <HAL_I2S_Init+0x27c>)
 8003c42:	e001      	b.n	8003c48 <HAL_I2S_Init+0x1bc>
 8003c44:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003c48:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c4c:	f023 030f 	bic.w	r3, r3, #15
 8003c50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2b      	ldr	r2, [pc, #172]	@ (8003d04 <HAL_I2S_Init+0x278>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_I2S_Init+0x1d4>
 8003c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8003d08 <HAL_I2S_Init+0x27c>)
 8003c5e:	e001      	b.n	8003c64 <HAL_I2S_Init+0x1d8>
 8003c60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c64:	2202      	movs	r2, #2
 8003c66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a25      	ldr	r2, [pc, #148]	@ (8003d04 <HAL_I2S_Init+0x278>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d101      	bne.n	8003c76 <HAL_I2S_Init+0x1ea>
 8003c72:	4b25      	ldr	r3, [pc, #148]	@ (8003d08 <HAL_I2S_Init+0x27c>)
 8003c74:	e001      	b.n	8003c7a <HAL_I2S_Init+0x1ee>
 8003c76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c86:	d003      	beq.n	8003c90 <HAL_I2S_Init+0x204>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e001      	b.n	8003c9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	897b      	ldrh	r3, [r7, #10]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003cc8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a0d      	ldr	r2, [pc, #52]	@ (8003d04 <HAL_I2S_Init+0x278>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d101      	bne.n	8003cd8 <HAL_I2S_Init+0x24c>
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <HAL_I2S_Init+0x27c>)
 8003cd6:	e001      	b.n	8003cdc <HAL_I2S_Init+0x250>
 8003cd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cdc:	897a      	ldrh	r2, [r7, #10]
 8003cde:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3720      	adds	r7, #32
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	08003e03 	.word	0x08003e03
 8003cfc:	cccccccd 	.word	0xcccccccd
 8003d00:	08003f19 	.word	0x08003f19
 8003d04:	40003800 	.word	0x40003800
 8003d08:	40003400 	.word	0x40003400

08003d0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	881a      	ldrh	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	1c9a      	adds	r2, r3, #2
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10e      	bne.n	8003d9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ffb8 	bl	8003d0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	b292      	uxth	r2, r2
 8003db8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbe:	1c9a      	adds	r2, r3, #2
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10e      	bne.n	8003dfa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff93 	bl	8003d20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d13a      	bne.n	8003e94 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d109      	bne.n	8003e3c <I2S_IRQHandler+0x3a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e32:	2b40      	cmp	r3, #64	@ 0x40
 8003e34:	d102      	bne.n	8003e3c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ffb4 	bl	8003da4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e42:	2b40      	cmp	r3, #64	@ 0x40
 8003e44:	d126      	bne.n	8003e94 <I2S_IRQHandler+0x92>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d11f      	bne.n	8003e94 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e86:	f043 0202 	orr.w	r2, r3, #2
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff ff50 	bl	8003d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d136      	bne.n	8003f0e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d109      	bne.n	8003ebe <I2S_IRQHandler+0xbc>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb4:	2b80      	cmp	r3, #128	@ 0x80
 8003eb6:	d102      	bne.n	8003ebe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ff45 	bl	8003d48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d122      	bne.n	8003f0e <I2S_IRQHandler+0x10c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d11b      	bne.n	8003f0e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ee4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f00:	f043 0204 	orr.w	r2, r3, #4
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ff13 	bl	8003d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f0e:	bf00      	nop
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a92      	ldr	r2, [pc, #584]	@ (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003f32:	4b92      	ldr	r3, [pc, #584]	@ (800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f34:	e001      	b.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003f36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a8b      	ldr	r2, [pc, #556]	@ (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d101      	bne.n	8003f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f50:	4b8a      	ldr	r3, [pc, #552]	@ (800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f52:	e001      	b.n	8003f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f64:	d004      	beq.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f040 8099 	bne.w	80040a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d107      	bne.n	8003f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f925 	bl	80041d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d107      	bne.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f9c8 	bl	8004334 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003faa:	2b40      	cmp	r3, #64	@ 0x40
 8003fac:	d13a      	bne.n	8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d035      	beq.n	8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a6e      	ldr	r2, [pc, #440]	@ (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003fc2:	4b6e      	ldr	r3, [pc, #440]	@ (800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fc4:	e001      	b.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003fc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4969      	ldr	r1, [pc, #420]	@ (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fd2:	428b      	cmp	r3, r1
 8003fd4:	d101      	bne.n	8003fda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003fd6:	4b69      	ldr	r3, [pc, #420]	@ (800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fd8:	e001      	b.n	8003fde <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003fda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fe2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ff2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	f043 0202 	orr.w	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff fe88 	bl	8003d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b08      	cmp	r3, #8
 800402c:	f040 80c3 	bne.w	80041b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80bd 	beq.w	80041b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800404a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a49      	ldr	r2, [pc, #292]	@ (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004056:	4b49      	ldr	r3, [pc, #292]	@ (800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004058:	e001      	b.n	800405e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800405a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4944      	ldr	r1, [pc, #272]	@ (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004066:	428b      	cmp	r3, r1
 8004068:	d101      	bne.n	800406e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800406a:	4b44      	ldr	r3, [pc, #272]	@ (800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800406c:	e001      	b.n	8004072 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800406e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004072:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004076:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004078:	2300      	movs	r3, #0
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004092:	f043 0204 	orr.w	r2, r3, #4
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fe4a 	bl	8003d34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040a0:	e089      	b.n	80041b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d107      	bne.n	80040bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8be 	bl	8004238 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d107      	bne.n	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f8fd 	bl	80042d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040dc:	2b40      	cmp	r3, #64	@ 0x40
 80040de:	d12f      	bne.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d02a      	beq.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d101      	bne.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004104:	4b1d      	ldr	r3, [pc, #116]	@ (800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004106:	e001      	b.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004108:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4919      	ldr	r1, [pc, #100]	@ (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004114:	428b      	cmp	r3, r1
 8004116:	d101      	bne.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004118:	4b18      	ldr	r3, [pc, #96]	@ (800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800411a:	e001      	b.n	8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800411c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004120:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004124:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	f043 0202 	orr.w	r2, r3, #2
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fdfa 	bl	8003d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b08      	cmp	r3, #8
 8004148:	d136      	bne.n	80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d031      	beq.n	80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a07      	ldr	r2, [pc, #28]	@ (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d101      	bne.n	8004162 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800415e:	4b07      	ldr	r3, [pc, #28]	@ (800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004160:	e001      	b.n	8004166 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004162:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4902      	ldr	r1, [pc, #8]	@ (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800416e:	428b      	cmp	r3, r1
 8004170:	d106      	bne.n	8004180 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004172:	4b02      	ldr	r3, [pc, #8]	@ (800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004174:	e006      	b.n	8004184 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004176:	bf00      	nop
 8004178:	40003800 	.word	0x40003800
 800417c:	40003400 	.word	0x40003400
 8004180:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004184:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004188:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004198:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	f043 0204 	orr.w	r2, r3, #4
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff fdc0 	bl	8003d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b4:	e000      	b.n	80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041b6:	bf00      	nop
}
 80041b8:	bf00      	nop
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	1c99      	adds	r1, r3, #2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6251      	str	r1, [r2, #36]	@ 0x24
 80041e6:	881a      	ldrh	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d113      	bne.n	800422e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004214:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d106      	bne.n	800422e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ffc9 	bl	80041c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	1c99      	adds	r1, r3, #2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6251      	str	r1, [r2, #36]	@ 0x24
 800424a:	8819      	ldrh	r1, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1d      	ldr	r2, [pc, #116]	@ (80042c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <I2SEx_TxISR_I2SExt+0x22>
 8004256:	4b1d      	ldr	r3, [pc, #116]	@ (80042cc <I2SEx_TxISR_I2SExt+0x94>)
 8004258:	e001      	b.n	800425e <I2SEx_TxISR_I2SExt+0x26>
 800425a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800425e:	460a      	mov	r2, r1
 8004260:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d121      	bne.n	80042be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a12      	ldr	r2, [pc, #72]	@ (80042c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d101      	bne.n	8004288 <I2SEx_TxISR_I2SExt+0x50>
 8004284:	4b11      	ldr	r3, [pc, #68]	@ (80042cc <I2SEx_TxISR_I2SExt+0x94>)
 8004286:	e001      	b.n	800428c <I2SEx_TxISR_I2SExt+0x54>
 8004288:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	490d      	ldr	r1, [pc, #52]	@ (80042c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004294:	428b      	cmp	r3, r1
 8004296:	d101      	bne.n	800429c <I2SEx_TxISR_I2SExt+0x64>
 8004298:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <I2SEx_TxISR_I2SExt+0x94>)
 800429a:	e001      	b.n	80042a0 <I2SEx_TxISR_I2SExt+0x68>
 800429c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ff81 	bl	80041c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40003800 	.word	0x40003800
 80042cc:	40003400 	.word	0x40003400

080042d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68d8      	ldr	r0, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e2:	1c99      	adds	r1, r3, #2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042e8:	b282      	uxth	r2, r0
 80042ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d113      	bne.n	800432c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004312:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff ff4a 	bl	80041c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a20      	ldr	r2, [pc, #128]	@ (80043c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d101      	bne.n	800434a <I2SEx_RxISR_I2SExt+0x16>
 8004346:	4b20      	ldr	r3, [pc, #128]	@ (80043c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004348:	e001      	b.n	800434e <I2SEx_RxISR_I2SExt+0x1a>
 800434a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800434e:	68d8      	ldr	r0, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004354:	1c99      	adds	r1, r3, #2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800435a:	b282      	uxth	r2, r0
 800435c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d121      	bne.n	80043ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a12      	ldr	r2, [pc, #72]	@ (80043c4 <I2SEx_RxISR_I2SExt+0x90>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d101      	bne.n	8004384 <I2SEx_RxISR_I2SExt+0x50>
 8004380:	4b11      	ldr	r3, [pc, #68]	@ (80043c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004382:	e001      	b.n	8004388 <I2SEx_RxISR_I2SExt+0x54>
 8004384:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	490d      	ldr	r1, [pc, #52]	@ (80043c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004390:	428b      	cmp	r3, r1
 8004392:	d101      	bne.n	8004398 <I2SEx_RxISR_I2SExt+0x64>
 8004394:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004396:	e001      	b.n	800439c <I2SEx_RxISR_I2SExt+0x68>
 8004398:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800439c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff ff03 	bl	80041c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40003800 	.word	0x40003800
 80043c8:	40003400 	.word	0x40003400

080043cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e267      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d075      	beq.n	80044d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043ea:	4b88      	ldr	r3, [pc, #544]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d00c      	beq.n	8004410 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043f6:	4b85      	ldr	r3, [pc, #532]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d112      	bne.n	8004428 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004402:	4b82      	ldr	r3, [pc, #520]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800440a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800440e:	d10b      	bne.n	8004428 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	4b7e      	ldr	r3, [pc, #504]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d05b      	beq.n	80044d4 <HAL_RCC_OscConfig+0x108>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d157      	bne.n	80044d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e242      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004430:	d106      	bne.n	8004440 <HAL_RCC_OscConfig+0x74>
 8004432:	4b76      	ldr	r3, [pc, #472]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a75      	ldr	r2, [pc, #468]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e01d      	b.n	800447c <HAL_RCC_OscConfig+0xb0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0x98>
 800444a:	4b70      	ldr	r3, [pc, #448]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a6f      	ldr	r2, [pc, #444]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 8004450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	4b6d      	ldr	r3, [pc, #436]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a6c      	ldr	r2, [pc, #432]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e00b      	b.n	800447c <HAL_RCC_OscConfig+0xb0>
 8004464:	4b69      	ldr	r3, [pc, #420]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a68      	ldr	r2, [pc, #416]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 800446a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	4b66      	ldr	r3, [pc, #408]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a65      	ldr	r2, [pc, #404]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 8004476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800447a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d013      	beq.n	80044ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fc fd92 	bl	8000fac <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800448c:	f7fc fd8e 	bl	8000fac <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	@ 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e207      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	4b5b      	ldr	r3, [pc, #364]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0xc0>
 80044aa:	e014      	b.n	80044d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fc fd7e 	bl	8000fac <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b4:	f7fc fd7a 	bl	8000fac <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	@ 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e1f3      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	4b51      	ldr	r3, [pc, #324]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0xe8>
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d063      	beq.n	80045aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044e2:	4b4a      	ldr	r3, [pc, #296]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ee:	4b47      	ldr	r3, [pc, #284]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d11c      	bne.n	8004534 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044fa:	4b44      	ldr	r3, [pc, #272]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d116      	bne.n	8004534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	4b41      	ldr	r3, [pc, #260]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_RCC_OscConfig+0x152>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d001      	beq.n	800451e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e1c7      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451e:	4b3b      	ldr	r3, [pc, #236]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4937      	ldr	r1, [pc, #220]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004532:	e03a      	b.n	80045aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d020      	beq.n	800457e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800453c:	4b34      	ldr	r3, [pc, #208]	@ (8004610 <HAL_RCC_OscConfig+0x244>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004542:	f7fc fd33 	bl	8000fac <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800454a:	f7fc fd2f 	bl	8000fac <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e1a8      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455c:	4b2b      	ldr	r3, [pc, #172]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004568:	4b28      	ldr	r3, [pc, #160]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4925      	ldr	r1, [pc, #148]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 8004578:	4313      	orrs	r3, r2
 800457a:	600b      	str	r3, [r1, #0]
 800457c:	e015      	b.n	80045aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800457e:	4b24      	ldr	r3, [pc, #144]	@ (8004610 <HAL_RCC_OscConfig+0x244>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fc fd12 	bl	8000fac <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800458c:	f7fc fd0e 	bl	8000fac <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e187      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	4b1b      	ldr	r3, [pc, #108]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d036      	beq.n	8004624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d016      	beq.n	80045ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045be:	4b15      	ldr	r3, [pc, #84]	@ (8004614 <HAL_RCC_OscConfig+0x248>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c4:	f7fc fcf2 	bl	8000fac <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045cc:	f7fc fcee 	bl	8000fac <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e167      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	4b0b      	ldr	r3, [pc, #44]	@ (800460c <HAL_RCC_OscConfig+0x240>)
 80045e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x200>
 80045ea:	e01b      	b.n	8004624 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ec:	4b09      	ldr	r3, [pc, #36]	@ (8004614 <HAL_RCC_OscConfig+0x248>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f2:	f7fc fcdb 	bl	8000fac <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f8:	e00e      	b.n	8004618 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045fa:	f7fc fcd7 	bl	8000fac <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d907      	bls.n	8004618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e150      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
 800460c:	40023800 	.word	0x40023800
 8004610:	42470000 	.word	0x42470000
 8004614:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004618:	4b88      	ldr	r3, [pc, #544]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 800461a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1ea      	bne.n	80045fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8097 	beq.w	8004760 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004636:	4b81      	ldr	r3, [pc, #516]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10f      	bne.n	8004662 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	4b7d      	ldr	r3, [pc, #500]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	4a7c      	ldr	r2, [pc, #496]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 800464c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004650:	6413      	str	r3, [r2, #64]	@ 0x40
 8004652:	4b7a      	ldr	r3, [pc, #488]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800465e:	2301      	movs	r3, #1
 8004660:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004662:	4b77      	ldr	r3, [pc, #476]	@ (8004840 <HAL_RCC_OscConfig+0x474>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d118      	bne.n	80046a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800466e:	4b74      	ldr	r3, [pc, #464]	@ (8004840 <HAL_RCC_OscConfig+0x474>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a73      	ldr	r2, [pc, #460]	@ (8004840 <HAL_RCC_OscConfig+0x474>)
 8004674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800467a:	f7fc fc97 	bl	8000fac <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004682:	f7fc fc93 	bl	8000fac <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e10c      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004694:	4b6a      	ldr	r3, [pc, #424]	@ (8004840 <HAL_RCC_OscConfig+0x474>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d106      	bne.n	80046b6 <HAL_RCC_OscConfig+0x2ea>
 80046a8:	4b64      	ldr	r3, [pc, #400]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ac:	4a63      	ldr	r2, [pc, #396]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046b4:	e01c      	b.n	80046f0 <HAL_RCC_OscConfig+0x324>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x30c>
 80046be:	4b5f      	ldr	r3, [pc, #380]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c2:	4a5e      	ldr	r2, [pc, #376]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 80046c4:	f043 0304 	orr.w	r3, r3, #4
 80046c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ca:	4b5c      	ldr	r3, [pc, #368]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ce:	4a5b      	ldr	r2, [pc, #364]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046d6:	e00b      	b.n	80046f0 <HAL_RCC_OscConfig+0x324>
 80046d8:	4b58      	ldr	r3, [pc, #352]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046dc:	4a57      	ldr	r2, [pc, #348]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 80046de:	f023 0301 	bic.w	r3, r3, #1
 80046e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046e4:	4b55      	ldr	r3, [pc, #340]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e8:	4a54      	ldr	r2, [pc, #336]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 80046ea:	f023 0304 	bic.w	r3, r3, #4
 80046ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d015      	beq.n	8004724 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fc fc58 	bl	8000fac <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004700:	f7fc fc54 	bl	8000fac <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e0cb      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	4b49      	ldr	r3, [pc, #292]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0ee      	beq.n	8004700 <HAL_RCC_OscConfig+0x334>
 8004722:	e014      	b.n	800474e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004724:	f7fc fc42 	bl	8000fac <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800472a:	e00a      	b.n	8004742 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472c:	f7fc fc3e 	bl	8000fac <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e0b5      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004742:	4b3e      	ldr	r3, [pc, #248]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1ee      	bne.n	800472c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d105      	bne.n	8004760 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004754:	4b39      	ldr	r3, [pc, #228]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 8004756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004758:	4a38      	ldr	r2, [pc, #224]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 800475a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800475e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80a1 	beq.w	80048ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800476a:	4b34      	ldr	r3, [pc, #208]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b08      	cmp	r3, #8
 8004774:	d05c      	beq.n	8004830 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d141      	bne.n	8004802 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477e:	4b31      	ldr	r3, [pc, #196]	@ (8004844 <HAL_RCC_OscConfig+0x478>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fc fc12 	bl	8000fac <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478c:	f7fc fc0e 	bl	8000fac <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e087      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	4b27      	ldr	r3, [pc, #156]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69da      	ldr	r2, [r3, #28]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	019b      	lsls	r3, r3, #6
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	085b      	lsrs	r3, r3, #1
 80047c2:	3b01      	subs	r3, #1
 80047c4:	041b      	lsls	r3, r3, #16
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	061b      	lsls	r3, r3, #24
 80047ce:	491b      	ldr	r1, [pc, #108]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004844 <HAL_RCC_OscConfig+0x478>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047da:	f7fc fbe7 	bl	8000fac <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e2:	f7fc fbe3 	bl	8000fac <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e05c      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f4:	4b11      	ldr	r3, [pc, #68]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x416>
 8004800:	e054      	b.n	80048ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004802:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <HAL_RCC_OscConfig+0x478>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fc fbd0 	bl	8000fac <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004810:	f7fc fbcc 	bl	8000fac <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e045      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	4b06      	ldr	r3, [pc, #24]	@ (800483c <HAL_RCC_OscConfig+0x470>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x444>
 800482e:	e03d      	b.n	80048ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d107      	bne.n	8004848 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e038      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
 800483c:	40023800 	.word	0x40023800
 8004840:	40007000 	.word	0x40007000
 8004844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004848:	4b1b      	ldr	r3, [pc, #108]	@ (80048b8 <HAL_RCC_OscConfig+0x4ec>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d028      	beq.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d121      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d11a      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004878:	4013      	ands	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800487e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004880:	4293      	cmp	r3, r2
 8004882:	d111      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488e:	085b      	lsrs	r3, r3, #1
 8004890:	3b01      	subs	r3, #1
 8004892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d107      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40023800 	.word	0x40023800

080048bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0cc      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048d0:	4b68      	ldr	r3, [pc, #416]	@ (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d90c      	bls.n	80048f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b65      	ldr	r3, [pc, #404]	@ (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b63      	ldr	r3, [pc, #396]	@ (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0b8      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d020      	beq.n	8004946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004910:	4b59      	ldr	r3, [pc, #356]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4a58      	ldr	r2, [pc, #352]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800491a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004928:	4b53      	ldr	r3, [pc, #332]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a52      	ldr	r2, [pc, #328]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004934:	4b50      	ldr	r3, [pc, #320]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	494d      	ldr	r1, [pc, #308]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d044      	beq.n	80049dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d107      	bne.n	800496a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	4b47      	ldr	r3, [pc, #284]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d119      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e07f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d003      	beq.n	800497a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004976:	2b03      	cmp	r3, #3
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e06f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e067      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499a:	4b37      	ldr	r3, [pc, #220]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4934      	ldr	r1, [pc, #208]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049ac:	f7fc fafe 	bl	8000fac <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b4:	f7fc fafa 	bl	8000fac <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e04f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 020c 	and.w	r2, r3, #12
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1eb      	bne.n	80049b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049dc:	4b25      	ldr	r3, [pc, #148]	@ (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d20c      	bcs.n	8004a04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b22      	ldr	r3, [pc, #136]	@ (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b20      	ldr	r3, [pc, #128]	@ (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e032      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a10:	4b19      	ldr	r3, [pc, #100]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4916      	ldr	r1, [pc, #88]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a2e:	4b12      	ldr	r3, [pc, #72]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	490e      	ldr	r1, [pc, #56]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a42:	f000 f821 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8004a46:	4602      	mov	r2, r0
 8004a48:	4b0b      	ldr	r3, [pc, #44]	@ (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	490a      	ldr	r1, [pc, #40]	@ (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 8004a54:	5ccb      	ldrb	r3, [r1, r3]
 8004a56:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5a:	4a09      	ldr	r2, [pc, #36]	@ (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a5e:	4b09      	ldr	r3, [pc, #36]	@ (8004a84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fc fa5e 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023c00 	.word	0x40023c00
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	0800985c 	.word	0x0800985c
 8004a80:	20000000 	.word	0x20000000
 8004a84:	20000004 	.word	0x20000004

08004a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a8c:	b094      	sub	sp, #80	@ 0x50
 8004a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa0:	4b79      	ldr	r3, [pc, #484]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	f200 80e1 	bhi.w	8004c74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x34>
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aba:	e0db      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004abc:	4b73      	ldr	r3, [pc, #460]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004abe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ac0:	e0db      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ac2:	4b73      	ldr	r3, [pc, #460]	@ (8004c90 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ac6:	e0d8      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac8:	4b6f      	ldr	r3, [pc, #444]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ad0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d063      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ade:	4b6a      	ldr	r3, [pc, #424]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	099b      	lsrs	r3, r3, #6
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ae8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004af2:	2300      	movs	r3, #0
 8004af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004afa:	4622      	mov	r2, r4
 8004afc:	462b      	mov	r3, r5
 8004afe:	f04f 0000 	mov.w	r0, #0
 8004b02:	f04f 0100 	mov.w	r1, #0
 8004b06:	0159      	lsls	r1, r3, #5
 8004b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b0c:	0150      	lsls	r0, r2, #5
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4621      	mov	r1, r4
 8004b14:	1a51      	subs	r1, r2, r1
 8004b16:	6139      	str	r1, [r7, #16]
 8004b18:	4629      	mov	r1, r5
 8004b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	018b      	lsls	r3, r1, #6
 8004b30:	4651      	mov	r1, sl
 8004b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b36:	4651      	mov	r1, sl
 8004b38:	018a      	lsls	r2, r1, #6
 8004b3a:	4651      	mov	r1, sl
 8004b3c:	ebb2 0801 	subs.w	r8, r2, r1
 8004b40:	4659      	mov	r1, fp
 8004b42:	eb63 0901 	sbc.w	r9, r3, r1
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b5a:	4690      	mov	r8, r2
 8004b5c:	4699      	mov	r9, r3
 8004b5e:	4623      	mov	r3, r4
 8004b60:	eb18 0303 	adds.w	r3, r8, r3
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	462b      	mov	r3, r5
 8004b68:	eb49 0303 	adc.w	r3, r9, r3
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	024b      	lsls	r3, r1, #9
 8004b7e:	4621      	mov	r1, r4
 8004b80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b84:	4621      	mov	r1, r4
 8004b86:	024a      	lsls	r2, r1, #9
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b8e:	2200      	movs	r2, #0
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b98:	f7fb fb16 	bl	80001c8 <__aeabi_uldivmod>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ba4:	e058      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba6:	4b38      	ldr	r3, [pc, #224]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	099b      	lsrs	r3, r3, #6
 8004bac:	2200      	movs	r2, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bb6:	623b      	str	r3, [r7, #32]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	f04f 0000 	mov.w	r0, #0
 8004bc8:	f04f 0100 	mov.w	r1, #0
 8004bcc:	0159      	lsls	r1, r3, #5
 8004bce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bd2:	0150      	lsls	r0, r2, #5
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4641      	mov	r1, r8
 8004bda:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bde:	4649      	mov	r1, r9
 8004be0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bf8:	ebb2 040a 	subs.w	r4, r2, sl
 8004bfc:	eb63 050b 	sbc.w	r5, r3, fp
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	00eb      	lsls	r3, r5, #3
 8004c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c0e:	00e2      	lsls	r2, r4, #3
 8004c10:	4614      	mov	r4, r2
 8004c12:	461d      	mov	r5, r3
 8004c14:	4643      	mov	r3, r8
 8004c16:	18e3      	adds	r3, r4, r3
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	eb45 0303 	adc.w	r3, r5, r3
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c2e:	4629      	mov	r1, r5
 8004c30:	028b      	lsls	r3, r1, #10
 8004c32:	4621      	mov	r1, r4
 8004c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c38:	4621      	mov	r1, r4
 8004c3a:	028a      	lsls	r2, r1, #10
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c42:	2200      	movs	r2, #0
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	61fa      	str	r2, [r7, #28]
 8004c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c4c:	f7fb fabc 	bl	80001c8 <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4613      	mov	r3, r2
 8004c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c58:	4b0b      	ldr	r3, [pc, #44]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	3301      	adds	r3, #1
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3750      	adds	r7, #80	@ 0x50
 8004c80:	46bd      	mov	sp, r7
 8004c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	00f42400 	.word	0x00f42400
 8004c90:	007a1200 	.word	0x007a1200

08004c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c98:	4b03      	ldr	r3, [pc, #12]	@ (8004ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000000 	.word	0x20000000

08004cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cb0:	f7ff fff0 	bl	8004c94 <HAL_RCC_GetHCLKFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	0a9b      	lsrs	r3, r3, #10
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	4903      	ldr	r1, [pc, #12]	@ (8004cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	0800986c 	.word	0x0800986c

08004cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cd8:	f7ff ffdc 	bl	8004c94 <HAL_RCC_GetHCLKFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	0b5b      	lsrs	r3, r3, #13
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	4903      	ldr	r1, [pc, #12]	@ (8004cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	0800986c 	.word	0x0800986c

08004cfc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d035      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d24:	4b62      	ldr	r3, [pc, #392]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d2a:	f7fc f93f 	bl	8000fac <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d32:	f7fc f93b 	bl	8000fac <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e0b0      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d44:	4b5b      	ldr	r3, [pc, #364]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	019a      	lsls	r2, r3, #6
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	071b      	lsls	r3, r3, #28
 8004d5c:	4955      	ldr	r1, [pc, #340]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d64:	4b52      	ldr	r3, [pc, #328]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d6a:	f7fc f91f 	bl	8000fac <HAL_GetTick>
 8004d6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d70:	e008      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d72:	f7fc f91b 	bl	8000fac <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e090      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d84:	4b4b      	ldr	r3, [pc, #300]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8083 	beq.w	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	4b44      	ldr	r3, [pc, #272]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	4a43      	ldr	r2, [pc, #268]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dae:	4b41      	ldr	r3, [pc, #260]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dba:	4b3f      	ldr	r3, [pc, #252]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dc6:	f7fc f8f1 	bl	8000fac <HAL_GetTick>
 8004dca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dce:	f7fc f8ed 	bl	8000fac <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e062      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004de0:	4b35      	ldr	r3, [pc, #212]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dec:	4b31      	ldr	r3, [pc, #196]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d02f      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d028      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e14:	4b29      	ldr	r3, [pc, #164]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e1a:	4b28      	ldr	r3, [pc, #160]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e20:	4a24      	ldr	r2, [pc, #144]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e26:	4b23      	ldr	r3, [pc, #140]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d114      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e32:	f7fc f8bb 	bl	8000fac <HAL_GetTick>
 8004e36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e38:	e00a      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3a:	f7fc f8b7 	bl	8000fac <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e02a      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e50:	4b18      	ldr	r3, [pc, #96]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0ee      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e68:	d10d      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e6a:	4b12      	ldr	r3, [pc, #72]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e7e:	490d      	ldr	r1, [pc, #52]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	608b      	str	r3, [r1, #8]
 8004e84:	e005      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e86:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e8c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e90:	6093      	str	r3, [r2, #8]
 8004e92:	4b08      	ldr	r3, [pc, #32]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9e:	4905      	ldr	r1, [pc, #20]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	42470068 	.word	0x42470068
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	40007000 	.word	0x40007000
 8004ebc:	42470e40 	.word	0x42470e40

08004ec0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d13f      	bne.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ede:	4b24      	ldr	r3, [pc, #144]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ee6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d006      	beq.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ef4:	d12f      	bne.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ef8:	617b      	str	r3, [r7, #20]
          break;
 8004efa:	e02f      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004efc:	4b1c      	ldr	r3, [pc, #112]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f08:	d108      	bne.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f0a:	4b19      	ldr	r3, [pc, #100]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f12:	4a19      	ldr	r2, [pc, #100]	@ (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	e007      	b.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f1c:	4b14      	ldr	r3, [pc, #80]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f24:	4a15      	ldr	r2, [pc, #84]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f2c:	4b10      	ldr	r3, [pc, #64]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f32:	099b      	lsrs	r3, r3, #6
 8004f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	fb02 f303 	mul.w	r3, r2, r3
 8004f3e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f40:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f46:	0f1b      	lsrs	r3, r3, #28
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f52:	617b      	str	r3, [r7, #20]
          break;
 8004f54:	e002      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]
          break;
 8004f5a:	bf00      	nop
        }
      }
      break;
 8004f5c:	e000      	b.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004f5e:	bf00      	nop
    }
  }
  return frequency;
 8004f60:	697b      	ldr	r3, [r7, #20]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40023800 	.word	0x40023800
 8004f74:	00bb8000 	.word	0x00bb8000
 8004f78:	007a1200 	.word	0x007a1200
 8004f7c:	00f42400 	.word	0x00f42400

08004f80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e07b      	b.n	800508a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d108      	bne.n	8004fac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fa2:	d009      	beq.n	8004fb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	61da      	str	r2, [r3, #28]
 8004faa:	e005      	b.n	8004fb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fb fe26 	bl	8000c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800503c:	ea42 0103 	orr.w	r1, r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005044:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	0c1b      	lsrs	r3, r3, #16
 8005056:	f003 0104 	and.w	r1, r3, #4
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	f003 0210 	and.w	r2, r3, #16
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69da      	ldr	r2, [r3, #28]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005078:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e041      	b.n	8005128 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7fb fdfb 	bl	8000cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f000 f86f 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005144:	2302      	movs	r3, #2
 8005146:	e031      	b.n	80051ac <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005158:	6839      	ldr	r1, [r7, #0]
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8d0 	bl	8005300 <TIM_SlaveTimer_SetConfig>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e018      	b.n	80051ac <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005188:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005198:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a43      	ldr	r2, [pc, #268]	@ (80052d4 <TIM_Base_SetConfig+0x120>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d2:	d00f      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a40      	ldr	r2, [pc, #256]	@ (80052d8 <TIM_Base_SetConfig+0x124>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00b      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3f      	ldr	r2, [pc, #252]	@ (80052dc <TIM_Base_SetConfig+0x128>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d007      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3e      	ldr	r2, [pc, #248]	@ (80052e0 <TIM_Base_SetConfig+0x12c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a3d      	ldr	r2, [pc, #244]	@ (80052e4 <TIM_Base_SetConfig+0x130>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d108      	bne.n	8005206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a32      	ldr	r2, [pc, #200]	@ (80052d4 <TIM_Base_SetConfig+0x120>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d02b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005214:	d027      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2f      	ldr	r2, [pc, #188]	@ (80052d8 <TIM_Base_SetConfig+0x124>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d023      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2e      	ldr	r2, [pc, #184]	@ (80052dc <TIM_Base_SetConfig+0x128>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2d      	ldr	r2, [pc, #180]	@ (80052e0 <TIM_Base_SetConfig+0x12c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2c      	ldr	r2, [pc, #176]	@ (80052e4 <TIM_Base_SetConfig+0x130>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d017      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a2b      	ldr	r2, [pc, #172]	@ (80052e8 <TIM_Base_SetConfig+0x134>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2a      	ldr	r2, [pc, #168]	@ (80052ec <TIM_Base_SetConfig+0x138>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a29      	ldr	r2, [pc, #164]	@ (80052f0 <TIM_Base_SetConfig+0x13c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a28      	ldr	r2, [pc, #160]	@ (80052f4 <TIM_Base_SetConfig+0x140>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d007      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a27      	ldr	r2, [pc, #156]	@ (80052f8 <TIM_Base_SetConfig+0x144>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a26      	ldr	r2, [pc, #152]	@ (80052fc <TIM_Base_SetConfig+0x148>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d108      	bne.n	8005278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800526c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a0e      	ldr	r2, [pc, #56]	@ (80052d4 <TIM_Base_SetConfig+0x120>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d003      	beq.n	80052a6 <TIM_Base_SetConfig+0xf2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a10      	ldr	r2, [pc, #64]	@ (80052e4 <TIM_Base_SetConfig+0x130>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d103      	bne.n	80052ae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f043 0204 	orr.w	r2, r3, #4
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	601a      	str	r2, [r3, #0]
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40010000 	.word	0x40010000
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000800 	.word	0x40000800
 80052e0:	40000c00 	.word	0x40000c00
 80052e4:	40010400 	.word	0x40010400
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40014400 	.word	0x40014400
 80052f0:	40014800 	.word	0x40014800
 80052f4:	40001800 	.word	0x40001800
 80052f8:	40001c00 	.word	0x40001c00
 80052fc:	40002000 	.word	0x40002000

08005300 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f023 0307 	bic.w	r3, r3, #7
 800532e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b70      	cmp	r3, #112	@ 0x70
 8005348:	d01a      	beq.n	8005380 <TIM_SlaveTimer_SetConfig+0x80>
 800534a:	2b70      	cmp	r3, #112	@ 0x70
 800534c:	d860      	bhi.n	8005410 <TIM_SlaveTimer_SetConfig+0x110>
 800534e:	2b60      	cmp	r3, #96	@ 0x60
 8005350:	d054      	beq.n	80053fc <TIM_SlaveTimer_SetConfig+0xfc>
 8005352:	2b60      	cmp	r3, #96	@ 0x60
 8005354:	d85c      	bhi.n	8005410 <TIM_SlaveTimer_SetConfig+0x110>
 8005356:	2b50      	cmp	r3, #80	@ 0x50
 8005358:	d046      	beq.n	80053e8 <TIM_SlaveTimer_SetConfig+0xe8>
 800535a:	2b50      	cmp	r3, #80	@ 0x50
 800535c:	d858      	bhi.n	8005410 <TIM_SlaveTimer_SetConfig+0x110>
 800535e:	2b40      	cmp	r3, #64	@ 0x40
 8005360:	d019      	beq.n	8005396 <TIM_SlaveTimer_SetConfig+0x96>
 8005362:	2b40      	cmp	r3, #64	@ 0x40
 8005364:	d854      	bhi.n	8005410 <TIM_SlaveTimer_SetConfig+0x110>
 8005366:	2b30      	cmp	r3, #48	@ 0x30
 8005368:	d055      	beq.n	8005416 <TIM_SlaveTimer_SetConfig+0x116>
 800536a:	2b30      	cmp	r3, #48	@ 0x30
 800536c:	d850      	bhi.n	8005410 <TIM_SlaveTimer_SetConfig+0x110>
 800536e:	2b20      	cmp	r3, #32
 8005370:	d051      	beq.n	8005416 <TIM_SlaveTimer_SetConfig+0x116>
 8005372:	2b20      	cmp	r3, #32
 8005374:	d84c      	bhi.n	8005410 <TIM_SlaveTimer_SetConfig+0x110>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d04d      	beq.n	8005416 <TIM_SlaveTimer_SetConfig+0x116>
 800537a:	2b10      	cmp	r3, #16
 800537c:	d04b      	beq.n	8005416 <TIM_SlaveTimer_SetConfig+0x116>
 800537e:	e047      	b.n	8005410 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005390:	f000 f8a6 	bl	80054e0 <TIM_ETR_SetConfig>
      break;
 8005394:	e040      	b.n	8005418 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b05      	cmp	r3, #5
 800539c:	d101      	bne.n	80053a2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e03b      	b.n	800541a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6a1a      	ldr	r2, [r3, #32]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0201 	bic.w	r2, r2, #1
 80053b8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053c8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	621a      	str	r2, [r3, #32]
      break;
 80053e6:	e017      	b.n	8005418 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f4:	461a      	mov	r2, r3
 80053f6:	f000 f814 	bl	8005422 <TIM_TI1_ConfigInputStage>
      break;
 80053fa:	e00d      	b.n	8005418 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005408:	461a      	mov	r2, r3
 800540a:	f000 f839 	bl	8005480 <TIM_TI2_ConfigInputStage>
      break;
 800540e:	e003      	b.n	8005418 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
      break;
 8005414:	e000      	b.n	8005418 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005416:	bf00      	nop
  }

  return status;
 8005418:	7dfb      	ldrb	r3, [r7, #23]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005422:	b480      	push	{r7}
 8005424:	b087      	sub	sp, #28
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	f023 0201 	bic.w	r2, r3, #1
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800544c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f023 030a 	bic.w	r3, r3, #10
 800545e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	621a      	str	r2, [r3, #32]
}
 8005474:	bf00      	nop
 8005476:	371c      	adds	r7, #28
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	f023 0210 	bic.w	r2, r3, #16
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	031b      	lsls	r3, r3, #12
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	021a      	lsls	r2, r3, #8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	431a      	orrs	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4313      	orrs	r3, r2
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	609a      	str	r2, [r3, #8]
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005534:	2302      	movs	r3, #2
 8005536:	e05a      	b.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a21      	ldr	r2, [pc, #132]	@ (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d022      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005584:	d01d      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1d      	ldr	r2, [pc, #116]	@ (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d018      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1b      	ldr	r2, [pc, #108]	@ (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1a      	ldr	r2, [pc, #104]	@ (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00e      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a18      	ldr	r2, [pc, #96]	@ (800560c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d009      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a17      	ldr	r2, [pc, #92]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d004      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a15      	ldr	r2, [pc, #84]	@ (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d10c      	bne.n	80055dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40010000 	.word	0x40010000
 8005600:	40000400 	.word	0x40000400
 8005604:	40000800 	.word	0x40000800
 8005608:	40000c00 	.word	0x40000c00
 800560c:	40010400 	.word	0x40010400
 8005610:	40014000 	.word	0x40014000
 8005614:	40001800 	.word	0x40001800

08005618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e042      	b.n	80056b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fb fb5a 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2224      	movs	r2, #36	@ 0x24
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800565a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f82b 	bl	80056b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695a      	ldr	r2, [r3, #20]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056bc:	b0c0      	sub	sp, #256	@ 0x100
 80056be:	af00      	add	r7, sp, #0
 80056c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	68d9      	ldr	r1, [r3, #12]
 80056d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	ea40 0301 	orr.w	r3, r0, r1
 80056e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005710:	f021 010c 	bic.w	r1, r1, #12
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800571e:	430b      	orrs	r3, r1
 8005720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005732:	6999      	ldr	r1, [r3, #24]
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	ea40 0301 	orr.w	r3, r0, r1
 800573e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4b8f      	ldr	r3, [pc, #572]	@ (8005984 <UART_SetConfig+0x2cc>)
 8005748:	429a      	cmp	r2, r3
 800574a:	d005      	beq.n	8005758 <UART_SetConfig+0xa0>
 800574c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b8d      	ldr	r3, [pc, #564]	@ (8005988 <UART_SetConfig+0x2d0>)
 8005754:	429a      	cmp	r2, r3
 8005756:	d104      	bne.n	8005762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005758:	f7ff fabc 	bl	8004cd4 <HAL_RCC_GetPCLK2Freq>
 800575c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005760:	e003      	b.n	800576a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005762:	f7ff faa3 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 8005766:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005774:	f040 810c 	bne.w	8005990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800577c:	2200      	movs	r2, #0
 800577e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005782:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800578a:	4622      	mov	r2, r4
 800578c:	462b      	mov	r3, r5
 800578e:	1891      	adds	r1, r2, r2
 8005790:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005792:	415b      	adcs	r3, r3
 8005794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800579a:	4621      	mov	r1, r4
 800579c:	eb12 0801 	adds.w	r8, r2, r1
 80057a0:	4629      	mov	r1, r5
 80057a2:	eb43 0901 	adc.w	r9, r3, r1
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057ba:	4690      	mov	r8, r2
 80057bc:	4699      	mov	r9, r3
 80057be:	4623      	mov	r3, r4
 80057c0:	eb18 0303 	adds.w	r3, r8, r3
 80057c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057c8:	462b      	mov	r3, r5
 80057ca:	eb49 0303 	adc.w	r3, r9, r3
 80057ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057e6:	460b      	mov	r3, r1
 80057e8:	18db      	adds	r3, r3, r3
 80057ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80057ec:	4613      	mov	r3, r2
 80057ee:	eb42 0303 	adc.w	r3, r2, r3
 80057f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80057f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057fc:	f7fa fce4 	bl	80001c8 <__aeabi_uldivmod>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4b61      	ldr	r3, [pc, #388]	@ (800598c <UART_SetConfig+0x2d4>)
 8005806:	fba3 2302 	umull	r2, r3, r3, r2
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	011c      	lsls	r4, r3, #4
 800580e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005812:	2200      	movs	r2, #0
 8005814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005818:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800581c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005820:	4642      	mov	r2, r8
 8005822:	464b      	mov	r3, r9
 8005824:	1891      	adds	r1, r2, r2
 8005826:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005828:	415b      	adcs	r3, r3
 800582a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800582c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005830:	4641      	mov	r1, r8
 8005832:	eb12 0a01 	adds.w	sl, r2, r1
 8005836:	4649      	mov	r1, r9
 8005838:	eb43 0b01 	adc.w	fp, r3, r1
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800584c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005850:	4692      	mov	sl, r2
 8005852:	469b      	mov	fp, r3
 8005854:	4643      	mov	r3, r8
 8005856:	eb1a 0303 	adds.w	r3, sl, r3
 800585a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800585e:	464b      	mov	r3, r9
 8005860:	eb4b 0303 	adc.w	r3, fp, r3
 8005864:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005874:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800587c:	460b      	mov	r3, r1
 800587e:	18db      	adds	r3, r3, r3
 8005880:	643b      	str	r3, [r7, #64]	@ 0x40
 8005882:	4613      	mov	r3, r2
 8005884:	eb42 0303 	adc.w	r3, r2, r3
 8005888:	647b      	str	r3, [r7, #68]	@ 0x44
 800588a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800588e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005892:	f7fa fc99 	bl	80001c8 <__aeabi_uldivmod>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4611      	mov	r1, r2
 800589c:	4b3b      	ldr	r3, [pc, #236]	@ (800598c <UART_SetConfig+0x2d4>)
 800589e:	fba3 2301 	umull	r2, r3, r3, r1
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	2264      	movs	r2, #100	@ 0x64
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	1acb      	subs	r3, r1, r3
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80058b2:	4b36      	ldr	r3, [pc, #216]	@ (800598c <UART_SetConfig+0x2d4>)
 80058b4:	fba3 2302 	umull	r2, r3, r3, r2
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058c0:	441c      	add	r4, r3
 80058c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80058d4:	4642      	mov	r2, r8
 80058d6:	464b      	mov	r3, r9
 80058d8:	1891      	adds	r1, r2, r2
 80058da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058dc:	415b      	adcs	r3, r3
 80058de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058e4:	4641      	mov	r1, r8
 80058e6:	1851      	adds	r1, r2, r1
 80058e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80058ea:	4649      	mov	r1, r9
 80058ec:	414b      	adcs	r3, r1
 80058ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058fc:	4659      	mov	r1, fp
 80058fe:	00cb      	lsls	r3, r1, #3
 8005900:	4651      	mov	r1, sl
 8005902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005906:	4651      	mov	r1, sl
 8005908:	00ca      	lsls	r2, r1, #3
 800590a:	4610      	mov	r0, r2
 800590c:	4619      	mov	r1, r3
 800590e:	4603      	mov	r3, r0
 8005910:	4642      	mov	r2, r8
 8005912:	189b      	adds	r3, r3, r2
 8005914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005918:	464b      	mov	r3, r9
 800591a:	460a      	mov	r2, r1
 800591c:	eb42 0303 	adc.w	r3, r2, r3
 8005920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005930:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005938:	460b      	mov	r3, r1
 800593a:	18db      	adds	r3, r3, r3
 800593c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800593e:	4613      	mov	r3, r2
 8005940:	eb42 0303 	adc.w	r3, r2, r3
 8005944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800594a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800594e:	f7fa fc3b 	bl	80001c8 <__aeabi_uldivmod>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	4b0d      	ldr	r3, [pc, #52]	@ (800598c <UART_SetConfig+0x2d4>)
 8005958:	fba3 1302 	umull	r1, r3, r3, r2
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	2164      	movs	r1, #100	@ 0x64
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	3332      	adds	r3, #50	@ 0x32
 800596a:	4a08      	ldr	r2, [pc, #32]	@ (800598c <UART_SetConfig+0x2d4>)
 800596c:	fba2 2303 	umull	r2, r3, r2, r3
 8005970:	095b      	lsrs	r3, r3, #5
 8005972:	f003 0207 	and.w	r2, r3, #7
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4422      	add	r2, r4
 800597e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005980:	e106      	b.n	8005b90 <UART_SetConfig+0x4d8>
 8005982:	bf00      	nop
 8005984:	40011000 	.word	0x40011000
 8005988:	40011400 	.word	0x40011400
 800598c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005994:	2200      	movs	r2, #0
 8005996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800599a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800599e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059a2:	4642      	mov	r2, r8
 80059a4:	464b      	mov	r3, r9
 80059a6:	1891      	adds	r1, r2, r2
 80059a8:	6239      	str	r1, [r7, #32]
 80059aa:	415b      	adcs	r3, r3
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059b2:	4641      	mov	r1, r8
 80059b4:	1854      	adds	r4, r2, r1
 80059b6:	4649      	mov	r1, r9
 80059b8:	eb43 0501 	adc.w	r5, r3, r1
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	00eb      	lsls	r3, r5, #3
 80059c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059ca:	00e2      	lsls	r2, r4, #3
 80059cc:	4614      	mov	r4, r2
 80059ce:	461d      	mov	r5, r3
 80059d0:	4643      	mov	r3, r8
 80059d2:	18e3      	adds	r3, r4, r3
 80059d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059d8:	464b      	mov	r3, r9
 80059da:	eb45 0303 	adc.w	r3, r5, r3
 80059de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059fe:	4629      	mov	r1, r5
 8005a00:	008b      	lsls	r3, r1, #2
 8005a02:	4621      	mov	r1, r4
 8005a04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a08:	4621      	mov	r1, r4
 8005a0a:	008a      	lsls	r2, r1, #2
 8005a0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a10:	f7fa fbda 	bl	80001c8 <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4b60      	ldr	r3, [pc, #384]	@ (8005b9c <UART_SetConfig+0x4e4>)
 8005a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	011c      	lsls	r4, r3, #4
 8005a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	1891      	adds	r1, r2, r2
 8005a3a:	61b9      	str	r1, [r7, #24]
 8005a3c:	415b      	adcs	r3, r3
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a44:	4641      	mov	r1, r8
 8005a46:	1851      	adds	r1, r2, r1
 8005a48:	6139      	str	r1, [r7, #16]
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	414b      	adcs	r3, r1
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	00cb      	lsls	r3, r1, #3
 8005a60:	4651      	mov	r1, sl
 8005a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a66:	4651      	mov	r1, sl
 8005a68:	00ca      	lsls	r2, r1, #3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4642      	mov	r2, r8
 8005a72:	189b      	adds	r3, r3, r2
 8005a74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a78:	464b      	mov	r3, r9
 8005a7a:	460a      	mov	r2, r1
 8005a7c:	eb42 0303 	adc.w	r3, r2, r3
 8005a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	008b      	lsls	r3, r1, #2
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aa6:	4641      	mov	r1, r8
 8005aa8:	008a      	lsls	r2, r1, #2
 8005aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005aae:	f7fa fb8b 	bl	80001c8 <__aeabi_uldivmod>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	4b38      	ldr	r3, [pc, #224]	@ (8005b9c <UART_SetConfig+0x4e4>)
 8005aba:	fba3 2301 	umull	r2, r3, r3, r1
 8005abe:	095b      	lsrs	r3, r3, #5
 8005ac0:	2264      	movs	r2, #100	@ 0x64
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	1acb      	subs	r3, r1, r3
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	3332      	adds	r3, #50	@ 0x32
 8005acc:	4a33      	ldr	r2, [pc, #204]	@ (8005b9c <UART_SetConfig+0x4e4>)
 8005ace:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ad8:	441c      	add	r4, r3
 8005ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ade:	2200      	movs	r2, #0
 8005ae0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ae2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ae4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ae8:	4642      	mov	r2, r8
 8005aea:	464b      	mov	r3, r9
 8005aec:	1891      	adds	r1, r2, r2
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	415b      	adcs	r3, r3
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005af8:	4641      	mov	r1, r8
 8005afa:	1851      	adds	r1, r2, r1
 8005afc:	6039      	str	r1, [r7, #0]
 8005afe:	4649      	mov	r1, r9
 8005b00:	414b      	adcs	r3, r1
 8005b02:	607b      	str	r3, [r7, #4]
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b10:	4659      	mov	r1, fp
 8005b12:	00cb      	lsls	r3, r1, #3
 8005b14:	4651      	mov	r1, sl
 8005b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b1a:	4651      	mov	r1, sl
 8005b1c:	00ca      	lsls	r2, r1, #3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	4619      	mov	r1, r3
 8005b22:	4603      	mov	r3, r0
 8005b24:	4642      	mov	r2, r8
 8005b26:	189b      	adds	r3, r3, r2
 8005b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	460a      	mov	r2, r1
 8005b2e:	eb42 0303 	adc.w	r3, r2, r3
 8005b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b4c:	4649      	mov	r1, r9
 8005b4e:	008b      	lsls	r3, r1, #2
 8005b50:	4641      	mov	r1, r8
 8005b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b56:	4641      	mov	r1, r8
 8005b58:	008a      	lsls	r2, r1, #2
 8005b5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b5e:	f7fa fb33 	bl	80001c8 <__aeabi_uldivmod>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4b0d      	ldr	r3, [pc, #52]	@ (8005b9c <UART_SetConfig+0x4e4>)
 8005b68:	fba3 1302 	umull	r1, r3, r3, r2
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	2164      	movs	r1, #100	@ 0x64
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	3332      	adds	r3, #50	@ 0x32
 8005b7a:	4a08      	ldr	r2, [pc, #32]	@ (8005b9c <UART_SetConfig+0x4e4>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	f003 020f 	and.w	r2, r3, #15
 8005b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4422      	add	r2, r4
 8005b8e:	609a      	str	r2, [r3, #8]
}
 8005b90:	bf00      	nop
 8005b92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b96:	46bd      	mov	sp, r7
 8005b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b9c:	51eb851f 	.word	0x51eb851f

08005ba0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	f107 001c 	add.w	r0, r7, #28
 8005bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bb2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d123      	bne.n	8005c02 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005bce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005be2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d105      	bne.n	8005bf6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9dc 	bl	8005fb4 <USB_CoreReset>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	73fb      	strb	r3, [r7, #15]
 8005c00:	e01b      	b.n	8005c3a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9d0 	bl	8005fb4 <USB_CoreReset>
 8005c14:	4603      	mov	r3, r0
 8005c16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c18:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c24:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c2c:	e005      	b.n	8005c3a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c32:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c3a:	7fbb      	ldrb	r3, [r7, #30]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d10b      	bne.n	8005c58 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f043 0206 	orr.w	r2, r3, #6
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f043 0220 	orr.w	r2, r3, #32
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c64:	b004      	add	sp, #16
 8005c66:	4770      	bx	lr

08005c68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f043 0201 	orr.w	r2, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f023 0201 	bic.w	r2, r3, #1
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d115      	bne.n	8005cfa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005cda:	200a      	movs	r0, #10
 8005cdc:	f7fb f972 	bl	8000fc4 <HAL_Delay>
      ms += 10U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	330a      	adds	r3, #10
 8005ce4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f956 	bl	8005f98 <USB_GetMode>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d01e      	beq.n	8005d30 <USB_SetCurrentMode+0x84>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2bc7      	cmp	r3, #199	@ 0xc7
 8005cf6:	d9f0      	bls.n	8005cda <USB_SetCurrentMode+0x2e>
 8005cf8:	e01a      	b.n	8005d30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d115      	bne.n	8005d2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d0c:	200a      	movs	r0, #10
 8005d0e:	f7fb f959 	bl	8000fc4 <HAL_Delay>
      ms += 10U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	330a      	adds	r3, #10
 8005d16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f93d 	bl	8005f98 <USB_GetMode>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <USB_SetCurrentMode+0x84>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d28:	d9f0      	bls.n	8005d0c <USB_SetCurrentMode+0x60>
 8005d2a:	e001      	b.n	8005d30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e005      	b.n	8005d3c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d34:	d101      	bne.n	8005d3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3301      	adds	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d5e:	d901      	bls.n	8005d64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e01b      	b.n	8005d9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	daf2      	bge.n	8005d52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	019b      	lsls	r3, r3, #6
 8005d74:	f043 0220 	orr.w	r2, r3, #32
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d88:	d901      	bls.n	8005d8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e006      	b.n	8005d9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d0f0      	beq.n	8005d7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dc0:	d901      	bls.n	8005dc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e018      	b.n	8005df8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	daf2      	bge.n	8005db4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2210      	movs	r2, #16
 8005dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005de4:	d901      	bls.n	8005dea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e006      	b.n	8005df8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f003 0310 	and.w	r3, r3, #16
 8005df2:	2b10      	cmp	r3, #16
 8005df4:	d0f0      	beq.n	8005dd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b089      	sub	sp, #36	@ 0x24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	4611      	mov	r1, r2
 8005e10:	461a      	mov	r2, r3
 8005e12:	460b      	mov	r3, r1
 8005e14:	71fb      	strb	r3, [r7, #7]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d123      	bne.n	8005e72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e2a:	88bb      	ldrh	r3, [r7, #4]
 8005e2c:	3303      	adds	r3, #3
 8005e2e:	089b      	lsrs	r3, r3, #2
 8005e30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e32:	2300      	movs	r3, #0
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	e018      	b.n	8005e6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	031a      	lsls	r2, r3, #12
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e44:	461a      	mov	r2, r3
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	3301      	adds	r3, #1
 8005e56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3301      	adds	r3, #1
 8005e62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	3301      	adds	r3, #1
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d3e2      	bcc.n	8005e38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3724      	adds	r7, #36	@ 0x24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b08b      	sub	sp, #44	@ 0x2c
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e96:	88fb      	ldrh	r3, [r7, #6]
 8005e98:	089b      	lsrs	r3, r3, #2
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	623b      	str	r3, [r7, #32]
 8005eaa:	e014      	b.n	8005ed6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	3301      	adds	r3, #1
 8005ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	3301      	adds	r3, #1
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	623b      	str	r3, [r7, #32]
 8005ed6:	6a3a      	ldr	r2, [r7, #32]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d3e6      	bcc.n	8005eac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ede:	8bfb      	ldrh	r3, [r7, #30]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01e      	beq.n	8005f22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f107 0310 	add.w	r3, r7, #16
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	fa22 f303 	lsr.w	r3, r2, r3
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	701a      	strb	r2, [r3, #0]
      i++;
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f12:	3301      	adds	r3, #1
 8005f14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005f16:	8bfb      	ldrh	r3, [r7, #30]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f1c:	8bfb      	ldrh	r3, [r7, #30]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1ea      	bne.n	8005ef8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	372c      	adds	r7, #44	@ 0x2c
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4013      	ands	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f48:	68fb      	ldr	r3, [r7, #12]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	4013      	ands	r3, r2
 8005f88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fcc:	d901      	bls.n	8005fd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e022      	b.n	8006018 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	daf2      	bge.n	8005fc0 <USB_CoreReset+0xc>

  count = 10U;
 8005fda:	230a      	movs	r3, #10
 8005fdc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005fde:	e002      	b.n	8005fe6 <USB_CoreReset+0x32>
  {
    count--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f9      	bne.n	8005fe0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f043 0201 	orr.w	r2, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006004:	d901      	bls.n	800600a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e006      	b.n	8006018 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b01      	cmp	r3, #1
 8006014:	d0f0      	beq.n	8005ff8 <USB_CoreReset+0x44>

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006024:	b084      	sub	sp, #16
 8006026:	b580      	push	{r7, lr}
 8006028:	b086      	sub	sp, #24
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006044:	461a      	mov	r2, r3
 8006046:	2300      	movs	r3, #0
 8006048:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006066:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d119      	bne.n	80060ae <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800607a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800607e:	2b01      	cmp	r3, #1
 8006080:	d10a      	bne.n	8006098 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006090:	f043 0304 	orr.w	r3, r3, #4
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	e014      	b.n	80060c2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80060a6:	f023 0304 	bic.w	r3, r3, #4
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	e009      	b.n	80060c2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80060bc:	f023 0304 	bic.w	r3, r3, #4
 80060c0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060c2:	2110      	movs	r1, #16
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff fe3d 	bl	8005d44 <USB_FlushTxFifo>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff fe67 	bl	8005da8 <USB_FlushRxFifo>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80060e4:	2300      	movs	r3, #0
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	e015      	b.n	8006116 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f6:	461a      	mov	r2, r3
 80060f8:	f04f 33ff 	mov.w	r3, #4294967295
 80060fc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4413      	add	r3, r2
 8006106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800610a:	461a      	mov	r2, r3
 800610c:	2300      	movs	r3, #0
 800610e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	3301      	adds	r3, #1
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800611a:	461a      	mov	r2, r3
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	4293      	cmp	r3, r2
 8006120:	d3e3      	bcc.n	80060ea <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f04f 32ff 	mov.w	r2, #4294967295
 800612e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a18      	ldr	r2, [pc, #96]	@ (8006194 <USB_HostInit+0x170>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d10b      	bne.n	8006150 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800613e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a15      	ldr	r2, [pc, #84]	@ (8006198 <USB_HostInit+0x174>)
 8006144:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a14      	ldr	r2, [pc, #80]	@ (800619c <USB_HostInit+0x178>)
 800614a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800614e:	e009      	b.n	8006164 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2280      	movs	r2, #128	@ 0x80
 8006154:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a11      	ldr	r2, [pc, #68]	@ (80061a0 <USB_HostInit+0x17c>)
 800615a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a11      	ldr	r2, [pc, #68]	@ (80061a4 <USB_HostInit+0x180>)
 8006160:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006164:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006168:	2b00      	cmp	r3, #0
 800616a:	d105      	bne.n	8006178 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	f043 0210 	orr.w	r2, r3, #16
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699a      	ldr	r2, [r3, #24]
 800617c:	4b0a      	ldr	r3, [pc, #40]	@ (80061a8 <USB_HostInit+0x184>)
 800617e:	4313      	orrs	r3, r2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006184:	7dfb      	ldrb	r3, [r7, #23]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006190:	b004      	add	sp, #16
 8006192:	4770      	bx	lr
 8006194:	40040000 	.word	0x40040000
 8006198:	01000200 	.word	0x01000200
 800619c:	00e00300 	.word	0x00e00300
 80061a0:	00600080 	.word	0x00600080
 80061a4:	004000e0 	.word	0x004000e0
 80061a8:	a3200008 	.word	0xa3200008

080061ac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80061ca:	f023 0303 	bic.w	r3, r3, #3
 80061ce:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	68f9      	ldr	r1, [r7, #12]
 80061e0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80061e4:	4313      	orrs	r3, r2
 80061e6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d107      	bne.n	80061fe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061f4:	461a      	mov	r2, r3
 80061f6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80061fa:	6053      	str	r3, [r2, #4]
 80061fc:	e00c      	b.n	8006218 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d107      	bne.n	8006214 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800620a:	461a      	mov	r2, r3
 800620c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006210:	6053      	str	r3, [r2, #4]
 8006212:	e001      	b.n	8006218 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006246:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006254:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006256:	2064      	movs	r0, #100	@ 0x64
 8006258:	f7fa feb4 	bl	8000fc4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006268:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800626a:	200a      	movs	r0, #10
 800626c:	f7fa feaa 	bl	8000fc4 <HAL_Delay>

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	460b      	mov	r3, r1
 8006284:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800629e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <USB_DriveVbus+0x44>
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d106      	bne.n	80062be <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80062b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062bc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062c8:	d109      	bne.n	80062de <USB_DriveVbus+0x64>
 80062ca:	78fb      	ldrb	r3, [r7, #3]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80062d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062dc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	0c5b      	lsrs	r3, r3, #17
 800630a:	f003 0303 	and.w	r3, r3, #3
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800631a:	b480      	push	{r7}
 800631c:	b085      	sub	sp, #20
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	b29b      	uxth	r3, r3
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	4608      	mov	r0, r1
 8006346:	4611      	mov	r1, r2
 8006348:	461a      	mov	r2, r3
 800634a:	4603      	mov	r3, r0
 800634c:	70fb      	strb	r3, [r7, #3]
 800634e:	460b      	mov	r3, r1
 8006350:	70bb      	strb	r3, [r7, #2]
 8006352:	4613      	mov	r3, r2
 8006354:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800636a:	461a      	mov	r2, r3
 800636c:	f04f 33ff 	mov.w	r3, #4294967295
 8006370:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006372:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006376:	2b03      	cmp	r3, #3
 8006378:	d87c      	bhi.n	8006474 <USB_HC_Init+0x138>
 800637a:	a201      	add	r2, pc, #4	@ (adr r2, 8006380 <USB_HC_Init+0x44>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	08006391 	.word	0x08006391
 8006384:	08006437 	.word	0x08006437
 8006388:	08006391 	.word	0x08006391
 800638c:	080063f9 	.word	0x080063f9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4413      	add	r3, r2
 8006398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800639c:	461a      	mov	r2, r3
 800639e:	f240 439d 	movw	r3, #1181	@ 0x49d
 80063a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80063a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da10      	bge.n	80063ce <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	78fa      	ldrb	r2, [r7, #3]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063ca:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80063cc:	e055      	b.n	800647a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a6f      	ldr	r2, [pc, #444]	@ (8006590 <USB_HC_Init+0x254>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d151      	bne.n	800647a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063f0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80063f4:	60d3      	str	r3, [r2, #12]
      break;
 80063f6:	e040      	b.n	800647a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006404:	461a      	mov	r2, r3
 8006406:	f240 639d 	movw	r3, #1693	@ 0x69d
 800640a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800640c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006410:	2b00      	cmp	r3, #0
 8006412:	da34      	bge.n	800647e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4413      	add	r3, r2
 800641c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	78fa      	ldrb	r2, [r7, #3]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	440a      	add	r2, r1
 800642a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800642e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006432:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006434:	e023      	b.n	800647e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	4413      	add	r3, r2
 800643e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006442:	461a      	mov	r2, r3
 8006444:	f240 2325 	movw	r3, #549	@ 0x225
 8006448:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800644a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800644e:	2b00      	cmp	r3, #0
 8006450:	da17      	bge.n	8006482 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	78fa      	ldrb	r2, [r7, #3]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	440a      	add	r2, r1
 8006468:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800646c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006470:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006472:	e006      	b.n	8006482 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	77fb      	strb	r3, [r7, #31]
      break;
 8006478:	e004      	b.n	8006484 <USB_HC_Init+0x148>
      break;
 800647a:	bf00      	nop
 800647c:	e002      	b.n	8006484 <USB_HC_Init+0x148>
      break;
 800647e:	bf00      	nop
 8006480:	e000      	b.n	8006484 <USB_HC_Init+0x148>
      break;
 8006482:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4413      	add	r3, r2
 800648c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006490:	461a      	mov	r2, r3
 8006492:	2300      	movs	r3, #0
 8006494:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006496:	78fb      	ldrb	r3, [r7, #3]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4413      	add	r3, r2
 800649e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	78fa      	ldrb	r2, [r7, #3]
 80064a6:	0151      	lsls	r1, r2, #5
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	440a      	add	r2, r1
 80064ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064b0:	f043 0302 	orr.w	r3, r3, #2
 80064b4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	2101      	movs	r1, #1
 80064c6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ca:	6939      	ldr	r1, [r7, #16]
 80064cc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064d0:	4313      	orrs	r3, r2
 80064d2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80064e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	da03      	bge.n	80064f0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80064e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	e001      	b.n	80064f4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff fef9 	bl	80062ec <USB_GetHostSpeed>
 80064fa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80064fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006500:	2b02      	cmp	r3, #2
 8006502:	d106      	bne.n	8006512 <USB_HC_Init+0x1d6>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b02      	cmp	r3, #2
 8006508:	d003      	beq.n	8006512 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800650a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	e001      	b.n	8006516 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006516:	787b      	ldrb	r3, [r7, #1]
 8006518:	059b      	lsls	r3, r3, #22
 800651a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800651e:	78bb      	ldrb	r3, [r7, #2]
 8006520:	02db      	lsls	r3, r3, #11
 8006522:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006526:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006528:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800652c:	049b      	lsls	r3, r3, #18
 800652e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006532:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006534:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006536:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800653a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	431a      	orrs	r2, r3
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006544:	78fa      	ldrb	r2, [r7, #3]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	440a      	add	r2, r1
 800654c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006550:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006554:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006556:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800655a:	2b03      	cmp	r3, #3
 800655c:	d003      	beq.n	8006566 <USB_HC_Init+0x22a>
 800655e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006562:	2b01      	cmp	r3, #1
 8006564:	d10f      	bne.n	8006586 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	4413      	add	r3, r2
 800656e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	78fa      	ldrb	r2, [r7, #3]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	440a      	add	r2, r1
 800657c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006580:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006584:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006586:	7ffb      	ldrb	r3, [r7, #31]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40040000 	.word	0x40040000

08006594 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08c      	sub	sp, #48	@ 0x30
 8006598:	af02      	add	r7, sp, #8
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	4613      	mov	r3, r2
 80065a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80065ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80065b0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4a5d      	ldr	r2, [pc, #372]	@ (800672c <USB_HC_StartXfer+0x198>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d12f      	bne.n	800661a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d11c      	bne.n	80065fa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	7c9b      	ldrb	r3, [r3, #18]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <USB_HC_StartXfer+0x3c>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	7c9b      	ldrb	r3, [r3, #18]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d124      	bne.n	800661a <USB_HC_StartXfer+0x86>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	799b      	ldrb	r3, [r3, #6]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d120      	bne.n	800661a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	6a3a      	ldr	r2, [r7, #32]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f6:	60d3      	str	r3, [r2, #12]
 80065f8:	e00f      	b.n	800661a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	791b      	ldrb	r3, [r3, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <USB_HC_StartXfer+0x86>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	795b      	ldrb	r3, [r3, #5]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d107      	bne.n	800661a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	785b      	ldrb	r3, [r3, #1]
 800660e:	4619      	mov	r1, r3
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fb6b 	bl	8006cec <USB_DoPing>
        return HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	e232      	b.n	8006a80 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	799b      	ldrb	r3, [r3, #6]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d158      	bne.n	80066d4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006622:	2301      	movs	r3, #1
 8006624:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	78db      	ldrb	r3, [r3, #3]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800662e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	8a92      	ldrh	r2, [r2, #20]
 8006634:	fb03 f202 	mul.w	r2, r3, r2
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	61da      	str	r2, [r3, #28]
 800663c:	e07c      	b.n	8006738 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	7c9b      	ldrb	r3, [r3, #18]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d130      	bne.n	80066a8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	2bbc      	cmp	r3, #188	@ 0xbc
 800664c:	d918      	bls.n	8006680 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	8a9b      	ldrh	r3, [r3, #20]
 8006652:	461a      	mov	r2, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d003      	beq.n	8006670 <USB_HC_StartXfer+0xdc>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d103      	bne.n	8006678 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2202      	movs	r2, #2
 8006674:	60da      	str	r2, [r3, #12]
 8006676:	e05f      	b.n	8006738 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2201      	movs	r2, #1
 800667c:	60da      	str	r2, [r3, #12]
 800667e:	e05b      	b.n	8006738 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	6a1a      	ldr	r2, [r3, #32]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d007      	beq.n	80066a0 <USB_HC_StartXfer+0x10c>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d003      	beq.n	80066a0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2204      	movs	r2, #4
 800669c:	60da      	str	r2, [r3, #12]
 800669e:	e04b      	b.n	8006738 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2203      	movs	r2, #3
 80066a4:	60da      	str	r2, [r3, #12]
 80066a6:	e047      	b.n	8006738 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d10d      	bne.n	80066ca <USB_HC_StartXfer+0x136>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	8a92      	ldrh	r2, [r2, #20]
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d907      	bls.n	80066ca <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	8a92      	ldrh	r2, [r2, #20]
 80066c0:	fb03 f202 	mul.w	r2, r3, r2
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	61da      	str	r2, [r3, #28]
 80066c8:	e036      	b.n	8006738 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6a1a      	ldr	r2, [r3, #32]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	61da      	str	r2, [r3, #28]
 80066d2:	e031      	b.n	8006738 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d018      	beq.n	800670e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	8a92      	ldrh	r2, [r2, #20]
 80066e4:	4413      	add	r3, r2
 80066e6:	3b01      	subs	r3, #1
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	8a92      	ldrh	r2, [r2, #20]
 80066ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80066f0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80066f2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80066f4:	8b7b      	ldrh	r3, [r7, #26]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d90b      	bls.n	8006712 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80066fa:	8b7b      	ldrh	r3, [r7, #26]
 80066fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	8a92      	ldrh	r2, [r2, #20]
 8006704:	fb03 f202 	mul.w	r2, r3, r2
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	61da      	str	r2, [r3, #28]
 800670c:	e001      	b.n	8006712 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800670e:	2301      	movs	r3, #1
 8006710:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	78db      	ldrb	r3, [r3, #3]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800671a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	8a92      	ldrh	r2, [r2, #20]
 8006720:	fb03 f202 	mul.w	r2, r3, r2
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	61da      	str	r2, [r3, #28]
 8006728:	e006      	b.n	8006738 <USB_HC_StartXfer+0x1a4>
 800672a:	bf00      	nop
 800672c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	6a1a      	ldr	r2, [r3, #32]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006740:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006742:	04d9      	lsls	r1, r3, #19
 8006744:	4ba3      	ldr	r3, [pc, #652]	@ (80069d4 <USB_HC_StartXfer+0x440>)
 8006746:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006748:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	7d9b      	ldrb	r3, [r3, #22]
 800674e:	075b      	lsls	r3, r3, #29
 8006750:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006754:	69f9      	ldr	r1, [r7, #28]
 8006756:	0148      	lsls	r0, r1, #5
 8006758:	6a39      	ldr	r1, [r7, #32]
 800675a:	4401      	add	r1, r0
 800675c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006760:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006762:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d009      	beq.n	800677e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	6999      	ldr	r1, [r3, #24]
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	4413      	add	r3, r2
 8006776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800677a:	460a      	mov	r2, r1
 800677c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	bf0c      	ite	eq
 800678e:	2301      	moveq	r3, #1
 8006790:	2300      	movne	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	4413      	add	r3, r2
 800679e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	0151      	lsls	r1, r2, #5
 80067a8:	6a3a      	ldr	r2, [r7, #32]
 80067aa:	440a      	add	r2, r1
 80067ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80067b4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	7e7b      	ldrb	r3, [r7, #25]
 80067c6:	075b      	lsls	r3, r3, #29
 80067c8:	69f9      	ldr	r1, [r7, #28]
 80067ca:	0148      	lsls	r0, r1, #5
 80067cc:	6a39      	ldr	r1, [r7, #32]
 80067ce:	4401      	add	r1, r0
 80067d0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80067d4:	4313      	orrs	r3, r2
 80067d6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	799b      	ldrb	r3, [r3, #6]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	f040 80c3 	bne.w	8006968 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	7c5b      	ldrb	r3, [r3, #17]
 80067e6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80067ec:	4313      	orrs	r3, r2
 80067ee:	69fa      	ldr	r2, [r7, #28]
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	6a3a      	ldr	r2, [r7, #32]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80067fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80067fe:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	6a3a      	ldr	r2, [r7, #32]
 8006814:	440a      	add	r2, r1
 8006816:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800681a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800681e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	79db      	ldrb	r3, [r3, #7]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d123      	bne.n	8006870 <USB_HC_StartXfer+0x2dc>
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	78db      	ldrb	r3, [r3, #3]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d11f      	bne.n	8006870 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	6a3a      	ldr	r2, [r7, #32]
 8006844:	440a      	add	r2, r1
 8006846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800684a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800684e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	4413      	add	r3, r2
 8006858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	69fa      	ldr	r2, [r7, #28]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	6a3a      	ldr	r2, [r7, #32]
 8006864:	440a      	add	r2, r1
 8006866:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800686a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800686e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	7c9b      	ldrb	r3, [r3, #18]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d003      	beq.n	8006880 <USB_HC_StartXfer+0x2ec>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	7c9b      	ldrb	r3, [r3, #18]
 800687c:	2b03      	cmp	r3, #3
 800687e:	d117      	bne.n	80068b0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006884:	2b01      	cmp	r3, #1
 8006886:	d113      	bne.n	80068b0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	78db      	ldrb	r3, [r3, #3]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d10f      	bne.n	80068b0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	4413      	add	r3, r2
 8006898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	0151      	lsls	r1, r2, #5
 80068a2:	6a3a      	ldr	r2, [r7, #32]
 80068a4:	440a      	add	r2, r1
 80068a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ae:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	7c9b      	ldrb	r3, [r3, #18]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d162      	bne.n	800697e <USB_HC_StartXfer+0x3ea>
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	78db      	ldrb	r3, [r3, #3]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d15e      	bne.n	800697e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d858      	bhi.n	800697c <USB_HC_StartXfer+0x3e8>
 80068ca:	a201      	add	r2, pc, #4	@ (adr r2, 80068d0 <USB_HC_StartXfer+0x33c>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	080068e1 	.word	0x080068e1
 80068d4:	08006903 	.word	0x08006903
 80068d8:	08006925 	.word	0x08006925
 80068dc:	08006947 	.word	0x08006947
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	6a3a      	ldr	r2, [r7, #32]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068fe:	6053      	str	r3, [r2, #4]
          break;
 8006900:	e03d      	b.n	800697e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	4413      	add	r3, r2
 800690a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	6a3a      	ldr	r2, [r7, #32]
 8006916:	440a      	add	r2, r1
 8006918:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800691c:	f043 030e 	orr.w	r3, r3, #14
 8006920:	6053      	str	r3, [r2, #4]
          break;
 8006922:	e02c      	b.n	800697e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	4413      	add	r3, r2
 800692c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	6a3a      	ldr	r2, [r7, #32]
 8006938:	440a      	add	r2, r1
 800693a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800693e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006942:	6053      	str	r3, [r2, #4]
          break;
 8006944:	e01b      	b.n	800697e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	0151      	lsls	r1, r2, #5
 8006958:	6a3a      	ldr	r2, [r7, #32]
 800695a:	440a      	add	r2, r1
 800695c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006960:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006964:	6053      	str	r3, [r2, #4]
          break;
 8006966:	e00a      	b.n	800697e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	4413      	add	r3, r2
 8006970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006974:	461a      	mov	r2, r3
 8006976:	2300      	movs	r3, #0
 8006978:	6053      	str	r3, [r2, #4]
 800697a:	e000      	b.n	800697e <USB_HC_StartXfer+0x3ea>
          break;
 800697c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	4413      	add	r3, r2
 8006986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006994:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	78db      	ldrb	r3, [r3, #3]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d004      	beq.n	80069a8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	e003      	b.n	80069b0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069ae:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069b6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c4:	461a      	mov	r2, r3
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80069ca:	79fb      	ldrb	r3, [r7, #7]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	e055      	b.n	8006a80 <USB_HC_StartXfer+0x4ec>
 80069d4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	78db      	ldrb	r3, [r3, #3]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d14e      	bne.n	8006a7e <USB_HC_StartXfer+0x4ea>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d04a      	beq.n	8006a7e <USB_HC_StartXfer+0x4ea>
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	79db      	ldrb	r3, [r3, #7]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d146      	bne.n	8006a7e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	7c9b      	ldrb	r3, [r3, #18]
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d831      	bhi.n	8006a5c <USB_HC_StartXfer+0x4c8>
 80069f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006a00 <USB_HC_StartXfer+0x46c>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a11 	.word	0x08006a11
 8006a04:	08006a35 	.word	0x08006a35
 8006a08:	08006a11 	.word	0x08006a11
 8006a0c:	08006a35 	.word	0x08006a35
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	3303      	adds	r3, #3
 8006a16:	089b      	lsrs	r3, r3, #2
 8006a18:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006a1a:	8afa      	ldrh	r2, [r7, #22]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d91c      	bls.n	8006a60 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	f043 0220 	orr.w	r2, r3, #32
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a32:	e015      	b.n	8006a60 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	3303      	adds	r3, #3
 8006a3a:	089b      	lsrs	r3, r3, #2
 8006a3c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006a3e:	8afa      	ldrh	r2, [r7, #22]
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d90a      	bls.n	8006a64 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a5a:	e003      	b.n	8006a64 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006a5c:	bf00      	nop
 8006a5e:	e002      	b.n	8006a66 <USB_HC_StartXfer+0x4d2>
        break;
 8006a60:	bf00      	nop
 8006a62:	e000      	b.n	8006a66 <USB_HC_StartXfer+0x4d2>
        break;
 8006a64:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	6999      	ldr	r1, [r3, #24]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	785a      	ldrb	r2, [r3, #1]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	2000      	movs	r0, #0
 8006a76:	9000      	str	r0, [sp, #0]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7ff f9c3 	bl	8005e04 <USB_WritePacket>
  }

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3728      	adds	r7, #40	@ 0x28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	b29b      	uxth	r3, r3
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b089      	sub	sp, #36	@ 0x24
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006aba:	78fb      	ldrb	r3, [r7, #3]
 8006abc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	0c9b      	lsrs	r3, r3, #18
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	0fdb      	lsrs	r3, r3, #31
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	0fdb      	lsrs	r3, r3, #31
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	d10d      	bne.n	8006b2c <USB_HC_Halt+0x82>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <USB_HC_Halt+0x82>
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d002      	beq.n	8006b28 <USB_HC_Halt+0x7e>
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d101      	bne.n	8006b2c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e0d8      	b.n	8006cde <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <USB_HC_Halt+0x8e>
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d173      	bne.n	8006c20 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	0151      	lsls	r1, r2, #5
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b56:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 0320 	and.w	r3, r3, #32
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d14a      	bne.n	8006bfa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d133      	bne.n	8006bd8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b8e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006baa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bae:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bbc:	d82e      	bhi.n	8006c1c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bd4:	d0ec      	beq.n	8006bb0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bd6:	e081      	b.n	8006cdc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bf6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bf8:	e070      	b.n	8006cdc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c18:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c1a:	e05f      	b.n	8006cdc <USB_HC_Halt+0x232>
            break;
 8006c1c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c1e:	e05d      	b.n	8006cdc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	0151      	lsls	r1, r2, #5
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	440a      	add	r2, r1
 8006c36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c3e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d133      	bne.n	8006cb8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c8e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	3301      	adds	r3, #1
 8006c94:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c9c:	d81d      	bhi.n	8006cda <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cb4:	d0ec      	beq.n	8006c90 <USB_HC_Halt+0x1e6>
 8006cb6:	e011      	b.n	8006cdc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	0151      	lsls	r1, r2, #5
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	440a      	add	r2, r1
 8006cce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	e000      	b.n	8006cdc <USB_HC_Halt+0x232>
          break;
 8006cda:	bf00      	nop
    }
  }

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3724      	adds	r7, #36	@ 0x24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
	...

08006cec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006d00:	2301      	movs	r3, #1
 8006d02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	04da      	lsls	r2, r3, #19
 8006d08:	4b15      	ldr	r3, [pc, #84]	@ (8006d60 <USB_DoPing+0x74>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d1c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d34:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d3c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	1ff80000 	.word	0x1ff80000

08006d64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7fe ff86 	bl	8005c8a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d7e:	2110      	movs	r1, #16
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7fe ffdf 	bl	8005d44 <USB_FlushTxFifo>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff f809 	bl	8005da8 <USB_FlushRxFifo>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006da0:	2300      	movs	r3, #0
 8006da2:	61bb      	str	r3, [r7, #24]
 8006da4:	e01f      	b.n	8006de6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006dc4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dcc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dda:	461a      	mov	r2, r3
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	3301      	adds	r3, #1
 8006de4:	61bb      	str	r3, [r7, #24]
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	2b0f      	cmp	r3, #15
 8006dea:	d9dc      	bls.n	8006da6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006dec:	2300      	movs	r3, #0
 8006dee:	61bb      	str	r3, [r7, #24]
 8006df0:	e034      	b.n	8006e5c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e08:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e18:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e26:	461a      	mov	r2, r3
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e38:	d80c      	bhi.n	8006e54 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e50:	d0ec      	beq.n	8006e2c <USB_StopHost+0xc8>
 8006e52:	e000      	b.n	8006e56 <USB_StopHost+0xf2>
        break;
 8006e54:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	61bb      	str	r3, [r7, #24]
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	2b0f      	cmp	r3, #15
 8006e60:	d9c7      	bls.n	8006df2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f04f 32ff 	mov.w	r2, #4294967295
 8006e76:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7fe fef5 	bl	8005c68 <USB_EnableGlobalInt>

  return ret;
 8006e7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006e88:	b590      	push	{r4, r7, lr}
 8006e8a:	b089      	sub	sp, #36	@ 0x24
 8006e8c:	af04      	add	r7, sp, #16
 8006e8e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006e90:	2301      	movs	r3, #1
 8006e92:	2202      	movs	r2, #2
 8006e94:	2102      	movs	r1, #2
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fc83 	bl	80077a2 <USBH_FindInterface>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	2bff      	cmp	r3, #255	@ 0xff
 8006ea4:	d002      	beq.n	8006eac <USBH_CDC_InterfaceInit+0x24>
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d901      	bls.n	8006eb0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006eac:	2302      	movs	r3, #2
 8006eae:	e13d      	b.n	800712c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fc58 	bl	800776a <USBH_SelectInterface>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e131      	b.n	800712c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006ece:	2050      	movs	r0, #80	@ 0x50
 8006ed0:	f002 fb6a 	bl	80095a8 <malloc>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e11f      	b.n	800712c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006eec:	2250      	movs	r2, #80	@ 0x50
 8006eee:	2100      	movs	r1, #0
 8006ef0:	68b8      	ldr	r0, [r7, #8]
 8006ef2:	f002 fc17 	bl	8009724 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	211a      	movs	r1, #26
 8006efc:	fb01 f303 	mul.w	r3, r1, r3
 8006f00:	4413      	add	r3, r2
 8006f02:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	b25b      	sxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	da15      	bge.n	8006f3a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	211a      	movs	r1, #26
 8006f14:	fb01 f303 	mul.w	r3, r1, r3
 8006f18:	4413      	add	r3, r2
 8006f1a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006f1e:	781a      	ldrb	r2, [r3, #0]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	211a      	movs	r1, #26
 8006f2a:	fb01 f303 	mul.w	r3, r1, r3
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006f34:	881a      	ldrh	r2, [r3, #0]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f001 ffc4 	bl	8008ece <USBH_AllocPipe>
 8006f46:	4603      	mov	r3, r0
 8006f48:	461a      	mov	r2, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	7819      	ldrb	r1, [r3, #0]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	7858      	ldrb	r0, [r3, #1]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	8952      	ldrh	r2, [r2, #10]
 8006f66:	9202      	str	r2, [sp, #8]
 8006f68:	2203      	movs	r2, #3
 8006f6a:	9201      	str	r2, [sp, #4]
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	4623      	mov	r3, r4
 8006f70:	4602      	mov	r2, r0
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f001 ff7c 	bl	8008e70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f002 fa8b 	bl	800949c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006f86:	2300      	movs	r3, #0
 8006f88:	2200      	movs	r2, #0
 8006f8a:	210a      	movs	r1, #10
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fc08 	bl	80077a2 <USBH_FindInterface>
 8006f92:	4603      	mov	r3, r0
 8006f94:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	2bff      	cmp	r3, #255	@ 0xff
 8006f9a:	d002      	beq.n	8006fa2 <USBH_CDC_InterfaceInit+0x11a>
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d901      	bls.n	8006fa6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e0c2      	b.n	800712c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	211a      	movs	r1, #26
 8006fac:	fb01 f303 	mul.w	r3, r1, r3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	b25b      	sxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	da16      	bge.n	8006fec <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	211a      	movs	r1, #26
 8006fc4:	fb01 f303 	mul.w	r3, r1, r3
 8006fc8:	4413      	add	r3, r2
 8006fca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006fce:	781a      	ldrb	r2, [r3, #0]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	211a      	movs	r1, #26
 8006fda:	fb01 f303 	mul.w	r3, r1, r3
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006fe4:	881a      	ldrh	r2, [r3, #0]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	835a      	strh	r2, [r3, #26]
 8006fea:	e015      	b.n	8007018 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	211a      	movs	r1, #26
 8006ff2:	fb01 f303 	mul.w	r3, r1, r3
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	211a      	movs	r1, #26
 8007008:	fb01 f303 	mul.w	r3, r1, r3
 800700c:	4413      	add	r3, r2
 800700e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007012:	881a      	ldrh	r2, [r3, #0]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	211a      	movs	r1, #26
 800701e:	fb01 f303 	mul.w	r3, r1, r3
 8007022:	4413      	add	r3, r2
 8007024:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	b25b      	sxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	da16      	bge.n	800705e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	211a      	movs	r1, #26
 8007036:	fb01 f303 	mul.w	r3, r1, r3
 800703a:	4413      	add	r3, r2
 800703c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007040:	781a      	ldrb	r2, [r3, #0]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	211a      	movs	r1, #26
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	4413      	add	r3, r2
 8007052:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007056:	881a      	ldrh	r2, [r3, #0]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	835a      	strh	r2, [r3, #26]
 800705c:	e015      	b.n	800708a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	211a      	movs	r1, #26
 8007064:	fb01 f303 	mul.w	r3, r1, r3
 8007068:	4413      	add	r3, r2
 800706a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800706e:	781a      	ldrb	r2, [r3, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	211a      	movs	r1, #26
 800707a:	fb01 f303 	mul.w	r3, r1, r3
 800707e:	4413      	add	r3, r2
 8007080:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007084:	881a      	ldrh	r2, [r3, #0]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	7b9b      	ldrb	r3, [r3, #14]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 ff1c 	bl	8008ece <USBH_AllocPipe>
 8007096:	4603      	mov	r3, r0
 8007098:	461a      	mov	r2, r3
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	7bdb      	ldrb	r3, [r3, #15]
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 ff12 	bl	8008ece <USBH_AllocPipe>
 80070aa:	4603      	mov	r3, r0
 80070ac:	461a      	mov	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	7b59      	ldrb	r1, [r3, #13]
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	7b98      	ldrb	r0, [r3, #14]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	8b12      	ldrh	r2, [r2, #24]
 80070ca:	9202      	str	r2, [sp, #8]
 80070cc:	2202      	movs	r2, #2
 80070ce:	9201      	str	r2, [sp, #4]
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	4623      	mov	r3, r4
 80070d4:	4602      	mov	r2, r0
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 feca 	bl	8008e70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	7b19      	ldrb	r1, [r3, #12]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	7bd8      	ldrb	r0, [r3, #15]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	8b52      	ldrh	r2, [r2, #26]
 80070f4:	9202      	str	r2, [sp, #8]
 80070f6:	2202      	movs	r2, #2
 80070f8:	9201      	str	r2, [sp, #4]
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	4623      	mov	r3, r4
 80070fe:	4602      	mov	r2, r0
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 feb5 	bl	8008e70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	7b5b      	ldrb	r3, [r3, #13]
 8007112:	2200      	movs	r2, #0
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f002 f9c0 	bl	800949c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	7b1b      	ldrb	r3, [r3, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f002 f9b9 	bl	800949c <USBH_LL_SetToggle>

  return USBH_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	bd90      	pop	{r4, r7, pc}

08007134 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00e      	beq.n	800716c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 feaa 	bl	8008eae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 fed5 	bl	8008f10 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	7b1b      	ldrb	r3, [r3, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00e      	beq.n	8007192 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	7b1b      	ldrb	r3, [r3, #12]
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fe97 	bl	8008eae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	7b1b      	ldrb	r3, [r3, #12]
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f001 fec2 	bl	8008f10 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	7b5b      	ldrb	r3, [r3, #13]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00e      	beq.n	80071b8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	7b5b      	ldrb	r3, [r3, #13]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 fe84 	bl	8008eae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	7b5b      	ldrb	r3, [r3, #13]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 feaf 	bl	8008f10 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00b      	beq.n	80071dc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f002 f9f3 	bl	80095b8 <free>
    phost->pActiveClass->pData = 0U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071d8:	2200      	movs	r2, #0
 80071da:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3340      	adds	r3, #64	@ 0x40
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f8b1 	bl	8007366 <GetLineCoding>
 8007204:	4603      	mov	r3, r0
 8007206:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007208:	7afb      	ldrb	r3, [r7, #11]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d105      	bne.n	800721a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007214:	2102      	movs	r1, #2
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800721a:	7afb      	ldrb	r3, [r7, #11]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800722c:	2301      	movs	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007244:	2b04      	cmp	r3, #4
 8007246:	d877      	bhi.n	8007338 <USBH_CDC_Process+0x114>
 8007248:	a201      	add	r2, pc, #4	@ (adr r2, 8007250 <USBH_CDC_Process+0x2c>)
 800724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724e:	bf00      	nop
 8007250:	08007265 	.word	0x08007265
 8007254:	0800726b 	.word	0x0800726b
 8007258:	0800729b 	.word	0x0800729b
 800725c:	0800730f 	.word	0x0800730f
 8007260:	0800731d 	.word	0x0800731d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	73fb      	strb	r3, [r7, #15]
      break;
 8007268:	e06d      	b.n	8007346 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f897 	bl	80073a4 <SetLineCoding>
 8007276:	4603      	mov	r3, r0
 8007278:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d104      	bne.n	800728a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007288:	e058      	b.n	800733c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d055      	beq.n	800733c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2204      	movs	r2, #4
 8007294:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007298:	e050      	b.n	800733c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	3340      	adds	r3, #64	@ 0x40
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f860 	bl	8007366 <GetLineCoding>
 80072a6:	4603      	mov	r3, r0
 80072a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d126      	bne.n	80072fe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072c2:	791b      	ldrb	r3, [r3, #4]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d13b      	bne.n	8007340 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072d2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d133      	bne.n	8007340 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072e2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d12b      	bne.n	8007340 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072f0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d124      	bne.n	8007340 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f958 	bl	80075ac <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80072fc:	e020      	b.n	8007340 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d01d      	beq.n	8007340 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2204      	movs	r2, #4
 8007308:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800730c:	e018      	b.n	8007340 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f867 	bl	80073e2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f8da 	bl	80074ce <CDC_ProcessReception>
      break;
 800731a:	e014      	b.n	8007346 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800731c:	2100      	movs	r1, #0
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 f81e 	bl	8008360 <USBH_ClrFeature>
 8007324:	4603      	mov	r3, r0
 8007326:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007336:	e005      	b.n	8007344 <USBH_CDC_Process+0x120>

    default:
      break;
 8007338:	bf00      	nop
 800733a:	e004      	b.n	8007346 <USBH_CDC_Process+0x122>
      break;
 800733c:	bf00      	nop
 800733e:	e002      	b.n	8007346 <USBH_CDC_Process+0x122>
      break;
 8007340:	bf00      	nop
 8007342:	e000      	b.n	8007346 <USBH_CDC_Process+0x122>
      break;
 8007344:	bf00      	nop

  }

  return status;
 8007346:	7bfb      	ldrb	r3, [r7, #15]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	22a1      	movs	r2, #161	@ 0xa1
 8007374:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2221      	movs	r2, #33	@ 0x21
 800737a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2207      	movs	r2, #7
 800738c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2207      	movs	r2, #7
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 fb17 	bl	80089c8 <USBH_CtlReq>
 800739a:	4603      	mov	r3, r0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2221      	movs	r2, #33	@ 0x21
 80073b2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2220      	movs	r2, #32
 80073b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2207      	movs	r2, #7
 80073ca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2207      	movs	r2, #7
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 faf8 	bl	80089c8 <USBH_CtlReq>
 80073d8:	4603      	mov	r3, r0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b086      	sub	sp, #24
 80073e6:	af02      	add	r7, sp, #8
 80073e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073f4:	2300      	movs	r3, #0
 80073f6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d002      	beq.n	8007408 <CDC_ProcessTransmission+0x26>
 8007402:	2b02      	cmp	r3, #2
 8007404:	d023      	beq.n	800744e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007406:	e05e      	b.n	80074c6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	8b12      	ldrh	r2, [r2, #24]
 8007410:	4293      	cmp	r3, r2
 8007412:	d90b      	bls.n	800742c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	69d9      	ldr	r1, [r3, #28]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8b1a      	ldrh	r2, [r3, #24]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	7b5b      	ldrb	r3, [r3, #13]
 8007420:	2001      	movs	r0, #1
 8007422:	9000      	str	r0, [sp, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 fce0 	bl	8008dea <USBH_BulkSendData>
 800742a:	e00b      	b.n	8007444 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007434:	b29a      	uxth	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	7b5b      	ldrb	r3, [r3, #13]
 800743a:	2001      	movs	r0, #1
 800743c:	9000      	str	r0, [sp, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 fcd3 	bl	8008dea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800744c:	e03b      	b.n	80074c6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	7b5b      	ldrb	r3, [r3, #13]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 fff7 	bl	8009448 <USBH_LL_GetURBState>
 800745a:	4603      	mov	r3, r0
 800745c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800745e:	7afb      	ldrb	r3, [r7, #11]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d128      	bne.n	80074b6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	8b12      	ldrh	r2, [r2, #24]
 800746c:	4293      	cmp	r3, r2
 800746e:	d90e      	bls.n	800748e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	8b12      	ldrh	r2, [r2, #24]
 8007478:	1a9a      	subs	r2, r3, r2
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	8b12      	ldrh	r2, [r2, #24]
 8007486:	441a      	add	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	61da      	str	r2, [r3, #28]
 800748c:	e002      	b.n	8007494 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007498:	2b00      	cmp	r3, #0
 800749a:	d004      	beq.n	80074a6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80074a4:	e00e      	b.n	80074c4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f868 	bl	8007584 <USBH_CDC_TransmitCallback>
      break;
 80074b4:	e006      	b.n	80074c4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80074b6:	7afb      	ldrb	r3, [r7, #11]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d103      	bne.n	80074c4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80074c4:	bf00      	nop
  }
}
 80074c6:	bf00      	nop
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b086      	sub	sp, #24
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80074e0:	2300      	movs	r3, #0
 80074e2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d002      	beq.n	80074f4 <CDC_ProcessReception+0x26>
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d00e      	beq.n	8007510 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80074f2:	e043      	b.n	800757c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	6a19      	ldr	r1, [r3, #32]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	8b5a      	ldrh	r2, [r3, #26]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	7b1b      	ldrb	r3, [r3, #12]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 fc97 	bl	8008e34 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2204      	movs	r2, #4
 800750a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800750e:	e035      	b.n	800757c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	7b1b      	ldrb	r3, [r3, #12]
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 ff96 	bl	8009448 <USBH_LL_GetURBState>
 800751c:	4603      	mov	r3, r0
 800751e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007520:	7cfb      	ldrb	r3, [r7, #19]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d129      	bne.n	800757a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	7b1b      	ldrb	r3, [r3, #12]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 fef9 	bl	8009324 <USBH_LL_GetLastXferSize>
 8007532:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	429a      	cmp	r2, r3
 800753c:	d016      	beq.n	800756c <CDC_ProcessReception+0x9e>
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	8b5b      	ldrh	r3, [r3, #26]
 8007542:	461a      	mov	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4293      	cmp	r3, r2
 8007548:	d110      	bne.n	800756c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	1ad2      	subs	r2, r2, r3
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	6a1a      	ldr	r2, [r3, #32]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	441a      	add	r2, r3
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2203      	movs	r2, #3
 8007566:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800756a:	e006      	b.n	800757a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f80f 	bl	8007598 <USBH_CDC_ReceiveCallback>
      break;
 800757a:	bf00      	nop
  }
}
 800757c:	bf00      	nop
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	4613      	mov	r3, r2
 80075cc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80075d4:	2302      	movs	r3, #2
 80075d6:	e029      	b.n	800762c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	79fa      	ldrb	r2, [r7, #7]
 80075dc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 f81f 	bl	8007634 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f001 fdc9 	bl	80091bc <USBH_LL_Init>

  return USBH_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800763c:	2300      	movs	r3, #0
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	e009      	b.n	8007656 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	33e0      	adds	r3, #224	@ 0xe0
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	2200      	movs	r2, #0
 800764e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3301      	adds	r3, #1
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b0f      	cmp	r3, #15
 800765a:	d9f2      	bls.n	8007642 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800765c:	2300      	movs	r3, #0
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	e009      	b.n	8007676 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4413      	add	r3, r2
 8007668:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800766c:	2200      	movs	r2, #0
 800766e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800767c:	d3f1      	bcc.n	8007662 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2240      	movs	r2, #64	@ 0x40
 80076a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	331c      	adds	r3, #28
 80076ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076d2:	2100      	movs	r1, #0
 80076d4:	4618      	mov	r0, r3
 80076d6:	f002 f825 	bl	8009724 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80076e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076e4:	2100      	movs	r1, #0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f002 f81c 	bl	8009724 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80076f2:	2212      	movs	r2, #18
 80076f4:	2100      	movs	r1, #0
 80076f6:	4618      	mov	r0, r3
 80076f8:	f002 f814 	bl	8009724 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007702:	223e      	movs	r2, #62	@ 0x3e
 8007704:	2100      	movs	r1, #0
 8007706:	4618      	mov	r0, r3
 8007708:	f002 f80c 	bl	8009724 <memset>

  return USBH_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d016      	beq.n	8007758 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10e      	bne.n	8007752 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800773a:	1c59      	adds	r1, r3, #1
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	33de      	adds	r3, #222	@ 0xde
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
 8007750:	e004      	b.n	800775c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007752:	2302      	movs	r3, #2
 8007754:	73fb      	strb	r3, [r7, #15]
 8007756:	e001      	b.n	800775c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007758:	2302      	movs	r3, #2
 800775a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800776a:	b480      	push	{r7}
 800776c:	b085      	sub	sp, #20
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	460b      	mov	r3, r1
 8007774:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007780:	78fa      	ldrb	r2, [r7, #3]
 8007782:	429a      	cmp	r2, r3
 8007784:	d204      	bcs.n	8007790 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	78fa      	ldrb	r2, [r7, #3]
 800778a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800778e:	e001      	b.n	8007794 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007790:	2302      	movs	r3, #2
 8007792:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b087      	sub	sp, #28
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	4608      	mov	r0, r1
 80077ac:	4611      	mov	r1, r2
 80077ae:	461a      	mov	r2, r3
 80077b0:	4603      	mov	r3, r0
 80077b2:	70fb      	strb	r3, [r7, #3]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70bb      	strb	r3, [r7, #2]
 80077b8:	4613      	mov	r3, r2
 80077ba:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80077ca:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80077cc:	e025      	b.n	800781a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	221a      	movs	r2, #26
 80077d2:	fb02 f303 	mul.w	r3, r2, r3
 80077d6:	3308      	adds	r3, #8
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	4413      	add	r3, r2
 80077dc:	3302      	adds	r3, #2
 80077de:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	795b      	ldrb	r3, [r3, #5]
 80077e4:	78fa      	ldrb	r2, [r7, #3]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d002      	beq.n	80077f0 <USBH_FindInterface+0x4e>
 80077ea:	78fb      	ldrb	r3, [r7, #3]
 80077ec:	2bff      	cmp	r3, #255	@ 0xff
 80077ee:	d111      	bne.n	8007814 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077f4:	78ba      	ldrb	r2, [r7, #2]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d002      	beq.n	8007800 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077fa:	78bb      	ldrb	r3, [r7, #2]
 80077fc:	2bff      	cmp	r3, #255	@ 0xff
 80077fe:	d109      	bne.n	8007814 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007804:	787a      	ldrb	r2, [r7, #1]
 8007806:	429a      	cmp	r2, r3
 8007808:	d002      	beq.n	8007810 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800780a:	787b      	ldrb	r3, [r7, #1]
 800780c:	2bff      	cmp	r3, #255	@ 0xff
 800780e:	d101      	bne.n	8007814 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	e006      	b.n	8007822 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	3301      	adds	r3, #1
 8007818:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d9d6      	bls.n	80077ce <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007820:	23ff      	movs	r3, #255	@ 0xff
}
 8007822:	4618      	mov	r0, r3
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 fcfc 	bl	8009234 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800783c:	2101      	movs	r1, #1
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 fe15 	bl	800946e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af04      	add	r7, sp, #16
 8007856:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007858:	2302      	movs	r3, #2
 800785a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b01      	cmp	r3, #1
 800786a:	d102      	bne.n	8007872 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2203      	movs	r2, #3
 8007870:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b0b      	cmp	r3, #11
 800787a:	f200 81bc 	bhi.w	8007bf6 <USBH_Process+0x3a6>
 800787e:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <USBH_Process+0x34>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	080078b5 	.word	0x080078b5
 8007888:	080078e7 	.word	0x080078e7
 800788c:	08007951 	.word	0x08007951
 8007890:	08007b91 	.word	0x08007b91
 8007894:	08007bf7 	.word	0x08007bf7
 8007898:	080079f1 	.word	0x080079f1
 800789c:	08007b37 	.word	0x08007b37
 80078a0:	08007a27 	.word	0x08007a27
 80078a4:	08007a47 	.word	0x08007a47
 80078a8:	08007a65 	.word	0x08007a65
 80078ac:	08007aa9 	.word	0x08007aa9
 80078b0:	08007b79 	.word	0x08007b79
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 819c 	beq.w	8007bfa <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80078c8:	20c8      	movs	r0, #200	@ 0xc8
 80078ca:	f001 fe1a 	bl	8009502 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 fd0d 	bl	80092ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80078e4:	e189      	b.n	8007bfa <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d107      	bne.n	8007902 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007900:	e18a      	b.n	8007c18 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007908:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800790c:	d914      	bls.n	8007938 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007914:	3301      	adds	r3, #1
 8007916:	b2da      	uxtb	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007924:	2b03      	cmp	r3, #3
 8007926:	d903      	bls.n	8007930 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	220d      	movs	r2, #13
 800792c:	701a      	strb	r2, [r3, #0]
      break;
 800792e:	e173      	b.n	8007c18 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
      break;
 8007936:	e16f      	b.n	8007c18 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800793e:	f103 020a 	add.w	r2, r3, #10
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007948:	200a      	movs	r0, #10
 800794a:	f001 fdda 	bl	8009502 <USBH_Delay>
      break;
 800794e:	e163      	b.n	8007c18 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007956:	2b00      	cmp	r3, #0
 8007958:	d005      	beq.n	8007966 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007960:	2104      	movs	r1, #4
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007966:	2064      	movs	r0, #100	@ 0x64
 8007968:	f001 fdcb 	bl	8009502 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 fc97 	bl	80092a0 <USBH_LL_GetSpeed>
 8007972:	4603      	mov	r3, r0
 8007974:	461a      	mov	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2205      	movs	r2, #5
 8007980:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007982:	2100      	movs	r1, #0
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f001 faa2 	bl	8008ece <USBH_AllocPipe>
 800798a:	4603      	mov	r3, r0
 800798c:	461a      	mov	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007992:	2180      	movs	r1, #128	@ 0x80
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 fa9a 	bl	8008ece <USBH_AllocPipe>
 800799a:	4603      	mov	r3, r0
 800799c:	461a      	mov	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	7919      	ldrb	r1, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80079b6:	9202      	str	r2, [sp, #8]
 80079b8:	2200      	movs	r2, #0
 80079ba:	9201      	str	r2, [sp, #4]
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	4603      	mov	r3, r0
 80079c0:	2280      	movs	r2, #128	@ 0x80
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 fa54 	bl	8008e70 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	7959      	ldrb	r1, [r3, #5]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80079dc:	9202      	str	r2, [sp, #8]
 80079de:	2200      	movs	r2, #0
 80079e0:	9201      	str	r2, [sp, #4]
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	4603      	mov	r3, r0
 80079e6:	2200      	movs	r2, #0
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 fa41 	bl	8008e70 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80079ee:	e113      	b.n	8007c18 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f917 	bl	8007c24 <USBH_HandleEnum>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f040 80fd 	bne.w	8007bfe <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d103      	bne.n	8007a1e <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2208      	movs	r2, #8
 8007a1a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007a1c:	e0ef      	b.n	8007bfe <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2207      	movs	r2, #7
 8007a22:	701a      	strb	r2, [r3, #0]
      break;
 8007a24:	e0eb      	b.n	8007bfe <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80e8 	beq.w	8007c02 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a38:	2101      	movs	r1, #1
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2208      	movs	r2, #8
 8007a42:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8007a44:	e0dd      	b.n	8007c02 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fc3f 	bl	80082d2 <USBH_SetCfg>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f040 80d5 	bne.w	8007c06 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2209      	movs	r2, #9
 8007a60:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007a62:	e0d0      	b.n	8007c06 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007a6a:	f003 0320 	and.w	r3, r3, #32
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d016      	beq.n	8007aa0 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007a72:	2101      	movs	r1, #1
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fc4f 	bl	8008318 <USBH_SetFeature>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d103      	bne.n	8007a8e <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	220a      	movs	r2, #10
 8007a8a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007a8c:	e0bd      	b.n	8007c0a <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	f040 80b9 	bne.w	8007c0a <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	220a      	movs	r2, #10
 8007a9c:	701a      	strb	r2, [r3, #0]
      break;
 8007a9e:	e0b4      	b.n	8007c0a <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	220a      	movs	r2, #10
 8007aa4:	701a      	strb	r2, [r3, #0]
      break;
 8007aa6:	e0b0      	b.n	8007c0a <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 80ad 	beq.w	8007c0e <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007abc:	2300      	movs	r3, #0
 8007abe:	73fb      	strb	r3, [r7, #15]
 8007ac0:	e016      	b.n	8007af0 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007ac2:	7bfa      	ldrb	r2, [r7, #15]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	32de      	adds	r2, #222	@ 0xde
 8007ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007acc:	791a      	ldrb	r2, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d108      	bne.n	8007aea <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007ad8:	7bfa      	ldrb	r2, [r7, #15]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	32de      	adds	r2, #222	@ 0xde
 8007ade:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007ae8:	e005      	b.n	8007af6 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	3301      	adds	r3, #1
 8007aee:	73fb      	strb	r3, [r7, #15]
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0e5      	beq.n	8007ac2 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d016      	beq.n	8007b2e <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	4798      	blx	r3
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d109      	bne.n	8007b26 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2206      	movs	r2, #6
 8007b16:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b1e:	2103      	movs	r1, #3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007b24:	e073      	b.n	8007c0e <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	220d      	movs	r2, #13
 8007b2a:	701a      	strb	r2, [r3, #0]
      break;
 8007b2c:	e06f      	b.n	8007c0e <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	220d      	movs	r2, #13
 8007b32:	701a      	strb	r2, [r3, #0]
      break;
 8007b34:	e06b      	b.n	8007c0e <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d017      	beq.n	8007b70 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	4798      	blx	r3
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d103      	bne.n	8007b60 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	220b      	movs	r2, #11
 8007b5c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007b5e:	e058      	b.n	8007c12 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d154      	bne.n	8007c12 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	220d      	movs	r2, #13
 8007b6c:	701a      	strb	r2, [r3, #0]
      break;
 8007b6e:	e050      	b.n	8007c12 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	220d      	movs	r2, #13
 8007b74:	701a      	strb	r2, [r3, #0]
      break;
 8007b76:	e04c      	b.n	8007c12 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d049      	beq.n	8007c16 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	4798      	blx	r3
      }
      break;
 8007b8e:	e042      	b.n	8007c16 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7ff fd4b 	bl	8007634 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d009      	beq.n	8007bbc <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d005      	beq.n	8007bd2 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007bcc:	2105      	movs	r1, #5
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d107      	bne.n	8007bee <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff fe21 	bl	800782e <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007bec:	e014      	b.n	8007c18 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 fb20 	bl	8009234 <USBH_LL_Start>
      break;
 8007bf4:	e010      	b.n	8007c18 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007bf6:	bf00      	nop
 8007bf8:	e00e      	b.n	8007c18 <USBH_Process+0x3c8>
      break;
 8007bfa:	bf00      	nop
 8007bfc:	e00c      	b.n	8007c18 <USBH_Process+0x3c8>
      break;
 8007bfe:	bf00      	nop
 8007c00:	e00a      	b.n	8007c18 <USBH_Process+0x3c8>
    break;
 8007c02:	bf00      	nop
 8007c04:	e008      	b.n	8007c18 <USBH_Process+0x3c8>
      break;
 8007c06:	bf00      	nop
 8007c08:	e006      	b.n	8007c18 <USBH_Process+0x3c8>
      break;
 8007c0a:	bf00      	nop
 8007c0c:	e004      	b.n	8007c18 <USBH_Process+0x3c8>
      break;
 8007c0e:	bf00      	nop
 8007c10:	e002      	b.n	8007c18 <USBH_Process+0x3c8>
      break;
 8007c12:	bf00      	nop
 8007c14:	e000      	b.n	8007c18 <USBH_Process+0x3c8>
      break;
 8007c16:	bf00      	nop
  }
  return USBH_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop

08007c24 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b088      	sub	sp, #32
 8007c28:	af04      	add	r7, sp, #16
 8007c2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007c30:	2301      	movs	r3, #1
 8007c32:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	2b07      	cmp	r3, #7
 8007c3a:	f200 81bd 	bhi.w	8007fb8 <USBH_HandleEnum+0x394>
 8007c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c44 <USBH_HandleEnum+0x20>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c65 	.word	0x08007c65
 8007c48:	08007d1f 	.word	0x08007d1f
 8007c4c:	08007d89 	.word	0x08007d89
 8007c50:	08007e13 	.word	0x08007e13
 8007c54:	08007e7d 	.word	0x08007e7d
 8007c58:	08007eed 	.word	0x08007eed
 8007c5c:	08007f33 	.word	0x08007f33
 8007c60:	08007f79 	.word	0x08007f79
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007c64:	2108      	movs	r1, #8
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa50 	bl	800810c <USBH_Get_DevDesc>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d12e      	bne.n	8007cd4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	7919      	ldrb	r1, [r3, #4]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c9a:	9202      	str	r2, [sp, #8]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	9201      	str	r2, [sp, #4]
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2280      	movs	r2, #128	@ 0x80
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 f8e2 	bl	8008e70 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	7959      	ldrb	r1, [r3, #5]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007cc0:	9202      	str	r2, [sp, #8]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	9201      	str	r2, [sp, #4]
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2200      	movs	r2, #0
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 f8cf 	bl	8008e70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007cd2:	e173      	b.n	8007fbc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	f040 8170 	bne.w	8007fbc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d903      	bls.n	8007cfe <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	220d      	movs	r2, #13
 8007cfa:	701a      	strb	r2, [r3, #0]
      break;
 8007cfc:	e15e      	b.n	8007fbc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	795b      	ldrb	r3, [r3, #5]
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f001 f903 	bl	8008f10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	791b      	ldrb	r3, [r3, #4]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 f8fd 	bl	8008f10 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	701a      	strb	r2, [r3, #0]
      break;
 8007d1c:	e14e      	b.n	8007fbc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007d1e:	2112      	movs	r1, #18
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f9f3 	bl	800810c <USBH_Get_DevDesc>
 8007d26:	4603      	mov	r3, r0
 8007d28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d2a:	7bbb      	ldrb	r3, [r7, #14]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d103      	bne.n	8007d38 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d36:	e143      	b.n	8007fc0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	f040 8140 	bne.w	8007fc0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d46:	3301      	adds	r3, #1
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d903      	bls.n	8007d62 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	220d      	movs	r2, #13
 8007d5e:	701a      	strb	r2, [r3, #0]
      break;
 8007d60:	e12e      	b.n	8007fc0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	795b      	ldrb	r3, [r3, #5]
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 f8d1 	bl	8008f10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	791b      	ldrb	r3, [r3, #4]
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f001 f8cb 	bl	8008f10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	701a      	strb	r2, [r3, #0]
      break;
 8007d86:	e11b      	b.n	8007fc0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007d88:	2101      	movs	r1, #1
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa7d 	bl	800828a <USBH_SetAddress>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d130      	bne.n	8007dfc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007d9a:	2002      	movs	r0, #2
 8007d9c:	f001 fbb1 	bl	8009502 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2203      	movs	r2, #3
 8007dac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	7919      	ldrb	r1, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007dc2:	9202      	str	r2, [sp, #8]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	9201      	str	r2, [sp, #4]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2280      	movs	r2, #128	@ 0x80
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 f84e 	bl	8008e70 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	7959      	ldrb	r1, [r3, #5]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007de8:	9202      	str	r2, [sp, #8]
 8007dea:	2200      	movs	r2, #0
 8007dec:	9201      	str	r2, [sp, #4]
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	4603      	mov	r3, r0
 8007df2:	2200      	movs	r2, #0
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 f83b 	bl	8008e70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007dfa:	e0e3      	b.n	8007fc4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	f040 80e0 	bne.w	8007fc4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	220d      	movs	r2, #13
 8007e08:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	705a      	strb	r2, [r3, #1]
      break;
 8007e10:	e0d8      	b.n	8007fc4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007e12:	2109      	movs	r1, #9
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f9a5 	bl	8008164 <USBH_Get_CfgDesc>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d103      	bne.n	8007e2c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2204      	movs	r2, #4
 8007e28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e2a:	e0cd      	b.n	8007fc8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	f040 80ca 	bne.w	8007fc8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d903      	bls.n	8007e56 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	220d      	movs	r2, #13
 8007e52:	701a      	strb	r2, [r3, #0]
      break;
 8007e54:	e0b8      	b.n	8007fc8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	795b      	ldrb	r3, [r3, #5]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 f857 	bl	8008f10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	791b      	ldrb	r3, [r3, #4]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 f851 	bl	8008f10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	701a      	strb	r2, [r3, #0]
      break;
 8007e7a:	e0a5      	b.n	8007fc8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f96d 	bl	8008164 <USBH_Get_CfgDesc>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d103      	bne.n	8007e9c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2205      	movs	r2, #5
 8007e98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e9a:	e097      	b.n	8007fcc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	f040 8094 	bne.w	8007fcc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007eaa:	3301      	adds	r3, #1
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d903      	bls.n	8007ec6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	220d      	movs	r2, #13
 8007ec2:	701a      	strb	r2, [r3, #0]
      break;
 8007ec4:	e082      	b.n	8007fcc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	795b      	ldrb	r3, [r3, #5]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f001 f81f 	bl	8008f10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	791b      	ldrb	r3, [r3, #4]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 f819 	bl	8008f10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	701a      	strb	r2, [r3, #0]
      break;
 8007eea:	e06f      	b.n	8007fcc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d019      	beq.n	8007f2a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007f02:	23ff      	movs	r3, #255	@ 0xff
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f957 	bl	80081b8 <USBH_Get_StringDesc>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d103      	bne.n	8007f1c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2206      	movs	r2, #6
 8007f18:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007f1a:	e059      	b.n	8007fd0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d156      	bne.n	8007fd0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2206      	movs	r2, #6
 8007f26:	705a      	strb	r2, [r3, #1]
      break;
 8007f28:	e052      	b.n	8007fd0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2206      	movs	r2, #6
 8007f2e:	705a      	strb	r2, [r3, #1]
      break;
 8007f30:	e04e      	b.n	8007fd0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d019      	beq.n	8007f70 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f48:	23ff      	movs	r3, #255	@ 0xff
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f934 	bl	80081b8 <USBH_Get_StringDesc>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d103      	bne.n	8007f62 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2207      	movs	r2, #7
 8007f5e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007f60:	e038      	b.n	8007fd4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d135      	bne.n	8007fd4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2207      	movs	r2, #7
 8007f6c:	705a      	strb	r2, [r3, #1]
      break;
 8007f6e:	e031      	b.n	8007fd4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2207      	movs	r2, #7
 8007f74:	705a      	strb	r2, [r3, #1]
      break;
 8007f76:	e02d      	b.n	8007fd4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d017      	beq.n	8007fb2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f8e:	23ff      	movs	r3, #255	@ 0xff
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f911 	bl	80081b8 <USBH_Get_StringDesc>
 8007f96:	4603      	mov	r3, r0
 8007f98:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d102      	bne.n	8007fa6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007fa4:	e018      	b.n	8007fd8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d115      	bne.n	8007fd8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb0:	e012      	b.n	8007fd8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb6:	e00f      	b.n	8007fd8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007fb8:	bf00      	nop
 8007fba:	e00e      	b.n	8007fda <USBH_HandleEnum+0x3b6>
      break;
 8007fbc:	bf00      	nop
 8007fbe:	e00c      	b.n	8007fda <USBH_HandleEnum+0x3b6>
      break;
 8007fc0:	bf00      	nop
 8007fc2:	e00a      	b.n	8007fda <USBH_HandleEnum+0x3b6>
      break;
 8007fc4:	bf00      	nop
 8007fc6:	e008      	b.n	8007fda <USBH_HandleEnum+0x3b6>
      break;
 8007fc8:	bf00      	nop
 8007fca:	e006      	b.n	8007fda <USBH_HandleEnum+0x3b6>
      break;
 8007fcc:	bf00      	nop
 8007fce:	e004      	b.n	8007fda <USBH_HandleEnum+0x3b6>
      break;
 8007fd0:	bf00      	nop
 8007fd2:	e002      	b.n	8007fda <USBH_HandleEnum+0x3b6>
      break;
 8007fd4:	bf00      	nop
 8007fd6:	e000      	b.n	8007fda <USBH_HandleEnum+0x3b6>
      break;
 8007fd8:	bf00      	nop
  }
  return Status;
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f804 	bl	8008026 <USBH_HandleSof>
}
 800801e:	bf00      	nop
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b0b      	cmp	r3, #11
 8008036:	d10a      	bne.n	800804e <USBH_HandleSof+0x28>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
  }
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8008066:	bf00      	nop
}
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008072:	b480      	push	{r7}
 8008074:	b083      	sub	sp, #12
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800808a:	bf00      	nop
}
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 f8c0 	bl	800926a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	791b      	ldrb	r3, [r3, #4]
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 ff0d 	bl	8008f10 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	795b      	ldrb	r3, [r3, #5]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 ff07 	bl	8008f10 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af02      	add	r7, sp, #8
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008118:	887b      	ldrh	r3, [r7, #2]
 800811a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800811e:	d901      	bls.n	8008124 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008120:	2303      	movs	r3, #3
 8008122:	e01b      	b.n	800815c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800812a:	887b      	ldrh	r3, [r7, #2]
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	4613      	mov	r3, r2
 8008130:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008134:	2100      	movs	r1, #0
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f872 	bl	8008220 <USBH_GetDescriptor>
 800813c:	4603      	mov	r3, r0
 800813e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d109      	bne.n	800815a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800814c:	887a      	ldrh	r2, [r7, #2]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f929 	bl	80083a8 <USBH_ParseDevDesc>
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800815a:	7bfb      	ldrb	r3, [r7, #15]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af02      	add	r7, sp, #8
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	460b      	mov	r3, r1
 800816e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	331c      	adds	r3, #28
 8008174:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008176:	887b      	ldrh	r3, [r7, #2]
 8008178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800817c:	d901      	bls.n	8008182 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800817e:	2303      	movs	r3, #3
 8008180:	e016      	b.n	80081b0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008182:	887b      	ldrh	r3, [r7, #2]
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800818c:	2100      	movs	r1, #0
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f846 	bl	8008220 <USBH_GetDescriptor>
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d107      	bne.n	80081ae <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800819e:	887b      	ldrh	r3, [r7, #2]
 80081a0:	461a      	mov	r2, r3
 80081a2:	68b9      	ldr	r1, [r7, #8]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f9af 	bl	8008508 <USBH_ParseCfgDesc>
 80081aa:	4603      	mov	r3, r0
 80081ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af02      	add	r7, sp, #8
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	607a      	str	r2, [r7, #4]
 80081c2:	461a      	mov	r2, r3
 80081c4:	460b      	mov	r3, r1
 80081c6:	72fb      	strb	r3, [r7, #11]
 80081c8:	4613      	mov	r3, r2
 80081ca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80081cc:	893b      	ldrh	r3, [r7, #8]
 80081ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d2:	d802      	bhi.n	80081da <USBH_Get_StringDesc+0x22>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80081da:	2303      	movs	r3, #3
 80081dc:	e01c      	b.n	8008218 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80081de:	7afb      	ldrb	r3, [r7, #11]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80081e6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80081ee:	893b      	ldrh	r3, [r7, #8]
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	460b      	mov	r3, r1
 80081f4:	2100      	movs	r1, #0
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f000 f812 	bl	8008220 <USBH_GetDescriptor>
 80081fc:	4603      	mov	r3, r0
 80081fe:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008200:	7dfb      	ldrb	r3, [r7, #23]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d107      	bne.n	8008216 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800820c:	893a      	ldrh	r2, [r7, #8]
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fb8c 	bl	800892e <USBH_ParseStringDesc>
  }

  return status;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	607b      	str	r3, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	72fb      	strb	r3, [r7, #11]
 800822e:	4613      	mov	r3, r2
 8008230:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	789b      	ldrb	r3, [r3, #2]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d11c      	bne.n	8008274 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800823a:	7afb      	ldrb	r3, [r7, #11]
 800823c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008240:	b2da      	uxtb	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2206      	movs	r2, #6
 800824a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	893a      	ldrh	r2, [r7, #8]
 8008250:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008252:	893b      	ldrh	r3, [r7, #8]
 8008254:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008258:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800825c:	d104      	bne.n	8008268 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f240 4209 	movw	r2, #1033	@ 0x409
 8008264:	829a      	strh	r2, [r3, #20]
 8008266:	e002      	b.n	800826e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8b3a      	ldrh	r2, [r7, #24]
 8008272:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008274:	8b3b      	ldrh	r3, [r7, #24]
 8008276:	461a      	mov	r2, r3
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 fba4 	bl	80089c8 <USBH_CtlReq>
 8008280:	4603      	mov	r3, r0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	789b      	ldrb	r3, [r3, #2]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d10f      	bne.n	80082be <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2205      	movs	r2, #5
 80082a8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80082be:	2200      	movs	r2, #0
 80082c0:	2100      	movs	r1, #0
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fb80 	bl	80089c8 <USBH_CtlReq>
 80082c8:	4603      	mov	r3, r0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	460b      	mov	r3, r1
 80082dc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	789b      	ldrb	r3, [r3, #2]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d10e      	bne.n	8008304 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2209      	movs	r2, #9
 80082f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	887a      	ldrh	r2, [r7, #2]
 80082f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008304:	2200      	movs	r2, #0
 8008306:	2100      	movs	r1, #0
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fb5d 	bl	80089c8 <USBH_CtlReq>
 800830e:	4603      	mov	r3, r0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	789b      	ldrb	r3, [r3, #2]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d10f      	bne.n	800834c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2203      	movs	r2, #3
 8008336:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	b29a      	uxth	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800834c:	2200      	movs	r2, #0
 800834e:	2100      	movs	r1, #0
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fb39 	bl	80089c8 <USBH_CtlReq>
 8008356:	4603      	mov	r3, r0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	789b      	ldrb	r3, [r3, #2]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d10f      	bne.n	8008394 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008386:	78fb      	ldrb	r3, [r7, #3]
 8008388:	b29a      	uxth	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008394:	2200      	movs	r2, #0
 8008396:	2100      	movs	r1, #0
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fb15 	bl	80089c8 <USBH_CtlReq>
 800839e:	4603      	mov	r3, r0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	4613      	mov	r3, r2
 80083b4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80083bc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80083c8:	2302      	movs	r3, #2
 80083ca:	e094      	b.n	80084f6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	781a      	ldrb	r2, [r3, #0]
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	785a      	ldrb	r2, [r3, #1]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	3302      	adds	r3, #2
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	3303      	adds	r3, #3
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	021b      	lsls	r3, r3, #8
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	4313      	orrs	r3, r2
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	791a      	ldrb	r2, [r3, #4]
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	795a      	ldrb	r2, [r3, #5]
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	799a      	ldrb	r2, [r3, #6]
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	79da      	ldrb	r2, [r3, #7]
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008426:	2b01      	cmp	r3, #1
 8008428:	d11b      	bne.n	8008462 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	79db      	ldrb	r3, [r3, #7]
 800842e:	2b20      	cmp	r3, #32
 8008430:	dc0f      	bgt.n	8008452 <USBH_ParseDevDesc+0xaa>
 8008432:	2b08      	cmp	r3, #8
 8008434:	db0f      	blt.n	8008456 <USBH_ParseDevDesc+0xae>
 8008436:	3b08      	subs	r3, #8
 8008438:	4a32      	ldr	r2, [pc, #200]	@ (8008504 <USBH_ParseDevDesc+0x15c>)
 800843a:	fa22 f303 	lsr.w	r3, r2, r3
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	2b00      	cmp	r3, #0
 8008444:	bf14      	ite	ne
 8008446:	2301      	movne	r3, #1
 8008448:	2300      	moveq	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b00      	cmp	r3, #0
 800844e:	d106      	bne.n	800845e <USBH_ParseDevDesc+0xb6>
 8008450:	e001      	b.n	8008456 <USBH_ParseDevDesc+0xae>
 8008452:	2b40      	cmp	r3, #64	@ 0x40
 8008454:	d003      	beq.n	800845e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	2208      	movs	r2, #8
 800845a:	71da      	strb	r2, [r3, #7]
        break;
 800845c:	e000      	b.n	8008460 <USBH_ParseDevDesc+0xb8>
        break;
 800845e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008460:	e00e      	b.n	8008480 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008468:	2b02      	cmp	r3, #2
 800846a:	d107      	bne.n	800847c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	79db      	ldrb	r3, [r3, #7]
 8008470:	2b08      	cmp	r3, #8
 8008472:	d005      	beq.n	8008480 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2208      	movs	r2, #8
 8008478:	71da      	strb	r2, [r3, #7]
 800847a:	e001      	b.n	8008480 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800847c:	2303      	movs	r3, #3
 800847e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008480:	88fb      	ldrh	r3, [r7, #6]
 8008482:	2b08      	cmp	r3, #8
 8008484:	d936      	bls.n	80084f4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	3308      	adds	r3, #8
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	461a      	mov	r2, r3
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	3309      	adds	r3, #9
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	021b      	lsls	r3, r3, #8
 8008496:	b29b      	uxth	r3, r3
 8008498:	4313      	orrs	r3, r2
 800849a:	b29a      	uxth	r2, r3
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	330a      	adds	r3, #10
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	330b      	adds	r3, #11
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	021b      	lsls	r3, r3, #8
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	4313      	orrs	r3, r2
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	330c      	adds	r3, #12
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	330d      	adds	r3, #13
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	021b      	lsls	r3, r3, #8
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	4313      	orrs	r3, r2
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	7b9a      	ldrb	r2, [r3, #14]
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	7bda      	ldrb	r2, [r3, #15]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	7c1a      	ldrb	r2, [r3, #16]
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	7c5a      	ldrb	r2, [r3, #17]
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	01000101 	.word	0x01000101

08008508 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08c      	sub	sp, #48	@ 0x30
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4613      	mov	r3, r2
 8008514:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800851c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008536:	2302      	movs	r3, #2
 8008538:	e0de      	b.n	80086f8 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800853e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b09      	cmp	r3, #9
 8008544:	d002      	beq.n	800854c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008548:	2209      	movs	r2, #9
 800854a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	781a      	ldrb	r2, [r3, #0]
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	785a      	ldrb	r2, [r3, #1]
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	3302      	adds	r3, #2
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	3303      	adds	r3, #3
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	021b      	lsls	r3, r3, #8
 800856c:	b29b      	uxth	r3, r3
 800856e:	4313      	orrs	r3, r2
 8008570:	b29b      	uxth	r3, r3
 8008572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008576:	bf28      	it	cs
 8008578:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800857c:	b29a      	uxth	r2, r3
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	791a      	ldrb	r2, [r3, #4]
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	795a      	ldrb	r2, [r3, #5]
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	799a      	ldrb	r2, [r3, #6]
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	79da      	ldrb	r2, [r3, #7]
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	7a1a      	ldrb	r2, [r3, #8]
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80085aa:	88fb      	ldrh	r3, [r7, #6]
 80085ac:	2b09      	cmp	r3, #9
 80085ae:	f240 80a1 	bls.w	80086f4 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 80085b2:	2309      	movs	r3, #9
 80085b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80085b6:	2300      	movs	r3, #0
 80085b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085ba:	e085      	b.n	80086c8 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80085bc:	f107 0316 	add.w	r3, r7, #22
 80085c0:	4619      	mov	r1, r3
 80085c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085c4:	f000 f9e6 	bl	8008994 <USBH_GetNextDesc>
 80085c8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80085ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085cc:	785b      	ldrb	r3, [r3, #1]
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d17a      	bne.n	80086c8 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80085d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	2b09      	cmp	r3, #9
 80085d8:	d002      	beq.n	80085e0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80085da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085dc:	2209      	movs	r2, #9
 80085de:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80085e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085e4:	221a      	movs	r2, #26
 80085e6:	fb02 f303 	mul.w	r3, r2, r3
 80085ea:	3308      	adds	r3, #8
 80085ec:	6a3a      	ldr	r2, [r7, #32]
 80085ee:	4413      	add	r3, r2
 80085f0:	3302      	adds	r3, #2
 80085f2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80085f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085f6:	69f8      	ldr	r0, [r7, #28]
 80085f8:	f000 f882 	bl	8008700 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008602:	2300      	movs	r3, #0
 8008604:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008606:	e043      	b.n	8008690 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008608:	f107 0316 	add.w	r3, r7, #22
 800860c:	4619      	mov	r1, r3
 800860e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008610:	f000 f9c0 	bl	8008994 <USBH_GetNextDesc>
 8008614:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	2b05      	cmp	r3, #5
 800861c:	d138      	bne.n	8008690 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	795b      	ldrb	r3, [r3, #5]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d113      	bne.n	800864e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800862a:	2b02      	cmp	r3, #2
 800862c:	d003      	beq.n	8008636 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	799b      	ldrb	r3, [r3, #6]
 8008632:	2b03      	cmp	r3, #3
 8008634:	d10b      	bne.n	800864e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	79db      	ldrb	r3, [r3, #7]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10b      	bne.n	8008656 <USBH_ParseCfgDesc+0x14e>
 800863e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b09      	cmp	r3, #9
 8008644:	d007      	beq.n	8008656 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008648:	2209      	movs	r2, #9
 800864a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800864c:	e003      	b.n	8008656 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800864e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008650:	2207      	movs	r2, #7
 8008652:	701a      	strb	r2, [r3, #0]
 8008654:	e000      	b.n	8008658 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008656:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800865c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008660:	3201      	adds	r2, #1
 8008662:	00d2      	lsls	r2, r2, #3
 8008664:	211a      	movs	r1, #26
 8008666:	fb01 f303 	mul.w	r3, r1, r3
 800866a:	4413      	add	r3, r2
 800866c:	3308      	adds	r3, #8
 800866e:	6a3a      	ldr	r2, [r7, #32]
 8008670:	4413      	add	r3, r2
 8008672:	3304      	adds	r3, #4
 8008674:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008678:	69b9      	ldr	r1, [r7, #24]
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 f86f 	bl	800875e <USBH_ParseEPDesc>
 8008680:	4603      	mov	r3, r0
 8008682:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008686:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800868a:	3301      	adds	r3, #1
 800868c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008690:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008694:	2b01      	cmp	r3, #1
 8008696:	d80a      	bhi.n	80086ae <USBH_ParseCfgDesc+0x1a6>
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	791b      	ldrb	r3, [r3, #4]
 800869c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d204      	bcs.n	80086ae <USBH_ParseCfgDesc+0x1a6>
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	885a      	ldrh	r2, [r3, #2]
 80086a8:	8afb      	ldrh	r3, [r7, #22]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d8ac      	bhi.n	8008608 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	791b      	ldrb	r3, [r3, #4]
 80086b2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d201      	bcs.n	80086be <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 80086ba:	2303      	movs	r3, #3
 80086bc:	e01c      	b.n	80086f8 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 80086be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086c2:	3301      	adds	r3, #1
 80086c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80086c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d805      	bhi.n	80086dc <USBH_ParseCfgDesc+0x1d4>
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	885a      	ldrh	r2, [r3, #2]
 80086d4:	8afb      	ldrh	r3, [r7, #22]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	f63f af70 	bhi.w	80085bc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	791b      	ldrb	r3, [r3, #4]
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	bf28      	it	cs
 80086e4:	2302      	movcs	r3, #2
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d201      	bcs.n	80086f4 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e001      	b.n	80086f8 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 80086f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3730      	adds	r7, #48	@ 0x30
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781a      	ldrb	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	785a      	ldrb	r2, [r3, #1]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	789a      	ldrb	r2, [r3, #2]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	78da      	ldrb	r2, [r3, #3]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	791a      	ldrb	r2, [r3, #4]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	795a      	ldrb	r2, [r3, #5]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	799a      	ldrb	r2, [r3, #6]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	79da      	ldrb	r2, [r3, #7]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	7a1a      	ldrb	r2, [r3, #8]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	721a      	strb	r2, [r3, #8]
}
 8008752:	bf00      	nop
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800875e:	b480      	push	{r7}
 8008760:	b087      	sub	sp, #28
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	781a      	ldrb	r2, [r3, #0]
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	785a      	ldrb	r2, [r3, #1]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	789a      	ldrb	r2, [r3, #2]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	78da      	ldrb	r2, [r3, #3]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	3304      	adds	r3, #4
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3305      	adds	r3, #5
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	021b      	lsls	r3, r3, #8
 800879e:	b29b      	uxth	r3, r3
 80087a0:	4313      	orrs	r3, r2
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	799a      	ldrb	r2, [r3, #6]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	889b      	ldrh	r3, [r3, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d009      	beq.n	80087cc <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80087bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087c0:	d804      	bhi.n	80087cc <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80087c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087ca:	d901      	bls.n	80087d0 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80087cc:	2303      	movs	r3, #3
 80087ce:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d136      	bne.n	8008848 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	78db      	ldrb	r3, [r3, #3]
 80087de:	f003 0303 	and.w	r3, r3, #3
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d108      	bne.n	80087f8 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	889b      	ldrh	r3, [r3, #4]
 80087ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087ee:	f240 8097 	bls.w	8008920 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087f2:	2303      	movs	r3, #3
 80087f4:	75fb      	strb	r3, [r7, #23]
 80087f6:	e093      	b.n	8008920 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	78db      	ldrb	r3, [r3, #3]
 80087fc:	f003 0303 	and.w	r3, r3, #3
 8008800:	2b00      	cmp	r3, #0
 8008802:	d107      	bne.n	8008814 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	889b      	ldrh	r3, [r3, #4]
 8008808:	2b40      	cmp	r3, #64	@ 0x40
 800880a:	f240 8089 	bls.w	8008920 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800880e:	2303      	movs	r3, #3
 8008810:	75fb      	strb	r3, [r7, #23]
 8008812:	e085      	b.n	8008920 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	78db      	ldrb	r3, [r3, #3]
 8008818:	f003 0303 	and.w	r3, r3, #3
 800881c:	2b01      	cmp	r3, #1
 800881e:	d005      	beq.n	800882c <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	78db      	ldrb	r3, [r3, #3]
 8008824:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008828:	2b03      	cmp	r3, #3
 800882a:	d10a      	bne.n	8008842 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	799b      	ldrb	r3, [r3, #6]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <USBH_ParseEPDesc+0xde>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	799b      	ldrb	r3, [r3, #6]
 8008838:	2b10      	cmp	r3, #16
 800883a:	d970      	bls.n	800891e <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800883c:	2303      	movs	r3, #3
 800883e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008840:	e06d      	b.n	800891e <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008842:	2303      	movs	r3, #3
 8008844:	75fb      	strb	r3, [r7, #23]
 8008846:	e06b      	b.n	8008920 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800884e:	2b01      	cmp	r3, #1
 8008850:	d13c      	bne.n	80088cc <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	78db      	ldrb	r3, [r3, #3]
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	2b02      	cmp	r3, #2
 800885c:	d005      	beq.n	800886a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	78db      	ldrb	r3, [r3, #3]
 8008862:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008866:	2b00      	cmp	r3, #0
 8008868:	d106      	bne.n	8008878 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	889b      	ldrh	r3, [r3, #4]
 800886e:	2b40      	cmp	r3, #64	@ 0x40
 8008870:	d956      	bls.n	8008920 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008872:	2303      	movs	r3, #3
 8008874:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008876:	e053      	b.n	8008920 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	78db      	ldrb	r3, [r3, #3]
 800887c:	f003 0303 	and.w	r3, r3, #3
 8008880:	2b01      	cmp	r3, #1
 8008882:	d10e      	bne.n	80088a2 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	799b      	ldrb	r3, [r3, #6]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d007      	beq.n	800889c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008890:	2b10      	cmp	r3, #16
 8008892:	d803      	bhi.n	800889c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008898:	2b40      	cmp	r3, #64	@ 0x40
 800889a:	d941      	bls.n	8008920 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800889c:	2303      	movs	r3, #3
 800889e:	75fb      	strb	r3, [r7, #23]
 80088a0:	e03e      	b.n	8008920 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	78db      	ldrb	r3, [r3, #3]
 80088a6:	f003 0303 	and.w	r3, r3, #3
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d10b      	bne.n	80088c6 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	799b      	ldrb	r3, [r3, #6]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d004      	beq.n	80088c0 <USBH_ParseEPDesc+0x162>
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	889b      	ldrh	r3, [r3, #4]
 80088ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088be:	d32f      	bcc.n	8008920 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80088c0:	2303      	movs	r3, #3
 80088c2:	75fb      	strb	r3, [r7, #23]
 80088c4:	e02c      	b.n	8008920 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80088c6:	2303      	movs	r3, #3
 80088c8:	75fb      	strb	r3, [r7, #23]
 80088ca:	e029      	b.n	8008920 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d120      	bne.n	8008918 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	78db      	ldrb	r3, [r3, #3]
 80088da:	f003 0303 	and.w	r3, r3, #3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d106      	bne.n	80088f0 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	889b      	ldrh	r3, [r3, #4]
 80088e6:	2b08      	cmp	r3, #8
 80088e8:	d01a      	beq.n	8008920 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80088ea:	2303      	movs	r3, #3
 80088ec:	75fb      	strb	r3, [r7, #23]
 80088ee:	e017      	b.n	8008920 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	78db      	ldrb	r3, [r3, #3]
 80088f4:	f003 0303 	and.w	r3, r3, #3
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d10a      	bne.n	8008912 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	799b      	ldrb	r3, [r3, #6]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <USBH_ParseEPDesc+0x1ae>
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	889b      	ldrh	r3, [r3, #4]
 8008908:	2b08      	cmp	r3, #8
 800890a:	d909      	bls.n	8008920 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800890c:	2303      	movs	r3, #3
 800890e:	75fb      	strb	r3, [r7, #23]
 8008910:	e006      	b.n	8008920 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008912:	2303      	movs	r3, #3
 8008914:	75fb      	strb	r3, [r7, #23]
 8008916:	e003      	b.n	8008920 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008918:	2303      	movs	r3, #3
 800891a:	75fb      	strb	r3, [r7, #23]
 800891c:	e000      	b.n	8008920 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800891e:	bf00      	nop
  }

  return status;
 8008920:	7dfb      	ldrb	r3, [r7, #23]
}
 8008922:	4618      	mov	r0, r3
 8008924:	371c      	adds	r7, #28
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800892e:	b480      	push	{r7}
 8008930:	b087      	sub	sp, #28
 8008932:	af00      	add	r7, sp, #0
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	4613      	mov	r3, r2
 800893a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3301      	adds	r3, #1
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	2b03      	cmp	r3, #3
 8008944:	d120      	bne.n	8008988 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	1e9a      	subs	r2, r3, #2
 800894c:	88fb      	ldrh	r3, [r7, #6]
 800894e:	4293      	cmp	r3, r2
 8008950:	bf28      	it	cs
 8008952:	4613      	movcs	r3, r2
 8008954:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3302      	adds	r3, #2
 800895a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800895c:	2300      	movs	r3, #0
 800895e:	82fb      	strh	r3, [r7, #22]
 8008960:	e00b      	b.n	800897a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008962:	8afb      	ldrh	r3, [r7, #22]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	4413      	add	r3, r2
 8008968:	781a      	ldrb	r2, [r3, #0]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	3301      	adds	r3, #1
 8008972:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008974:	8afb      	ldrh	r3, [r7, #22]
 8008976:	3302      	adds	r3, #2
 8008978:	82fb      	strh	r3, [r7, #22]
 800897a:	8afa      	ldrh	r2, [r7, #22]
 800897c:	8abb      	ldrh	r3, [r7, #20]
 800897e:	429a      	cmp	r2, r3
 8008980:	d3ef      	bcc.n	8008962 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2200      	movs	r2, #0
 8008986:	701a      	strb	r2, [r3, #0]
  }
}
 8008988:	bf00      	nop
 800898a:	371c      	adds	r7, #28
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	7812      	ldrb	r2, [r2, #0]
 80089a6:	4413      	add	r3, r2
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4413      	add	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80089ba:	68fb      	ldr	r3, [r7, #12]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	4613      	mov	r3, r2
 80089d4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80089d6:	2301      	movs	r3, #1
 80089d8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	789b      	ldrb	r3, [r3, #2]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d002      	beq.n	80089e8 <USBH_CtlReq+0x20>
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d00f      	beq.n	8008a06 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 80089e6:	e027      	b.n	8008a38 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	88fa      	ldrh	r2, [r7, #6]
 80089f2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2202      	movs	r2, #2
 80089fe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008a00:	2301      	movs	r3, #1
 8008a02:	75fb      	strb	r3, [r7, #23]
      break;
 8008a04:	e018      	b.n	8008a38 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 f81c 	bl	8008a44 <USBH_HandleControl>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008a10:	7dfb      	ldrb	r3, [r7, #23]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <USBH_CtlReq+0x54>
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d106      	bne.n	8008a2a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	761a      	strb	r2, [r3, #24]
      break;
 8008a28:	e005      	b.n	8008a36 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d102      	bne.n	8008a36 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2201      	movs	r2, #1
 8008a34:	709a      	strb	r2, [r3, #2]
      break;
 8008a36:	bf00      	nop
  }
  return status;
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	7e1b      	ldrb	r3, [r3, #24]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	2b0a      	cmp	r3, #10
 8008a5c:	f200 8157 	bhi.w	8008d0e <USBH_HandleControl+0x2ca>
 8008a60:	a201      	add	r2, pc, #4	@ (adr r2, 8008a68 <USBH_HandleControl+0x24>)
 8008a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a66:	bf00      	nop
 8008a68:	08008a95 	.word	0x08008a95
 8008a6c:	08008aaf 	.word	0x08008aaf
 8008a70:	08008b19 	.word	0x08008b19
 8008a74:	08008b3f 	.word	0x08008b3f
 8008a78:	08008b79 	.word	0x08008b79
 8008a7c:	08008ba3 	.word	0x08008ba3
 8008a80:	08008bf5 	.word	0x08008bf5
 8008a84:	08008c17 	.word	0x08008c17
 8008a88:	08008c53 	.word	0x08008c53
 8008a8c:	08008c79 	.word	0x08008c79
 8008a90:	08008cb7 	.word	0x08008cb7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f103 0110 	add.w	r1, r3, #16
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	795b      	ldrb	r3, [r3, #5]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f945 	bl	8008d30 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	761a      	strb	r2, [r3, #24]
      break;
 8008aac:	e13a      	b.n	8008d24 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	795b      	ldrb	r3, [r3, #5]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fcc7 	bl	8009448 <USBH_LL_GetURBState>
 8008aba:	4603      	mov	r3, r0
 8008abc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d11e      	bne.n	8008b02 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7c1b      	ldrb	r3, [r3, #16]
 8008ac8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008acc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	8adb      	ldrh	r3, [r3, #22]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00a      	beq.n	8008aec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008ad6:	7b7b      	ldrb	r3, [r7, #13]
 8008ad8:	2b80      	cmp	r3, #128	@ 0x80
 8008ada:	d103      	bne.n	8008ae4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2203      	movs	r2, #3
 8008ae0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008ae2:	e116      	b.n	8008d12 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2205      	movs	r2, #5
 8008ae8:	761a      	strb	r2, [r3, #24]
      break;
 8008aea:	e112      	b.n	8008d12 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8008aec:	7b7b      	ldrb	r3, [r7, #13]
 8008aee:	2b80      	cmp	r3, #128	@ 0x80
 8008af0:	d103      	bne.n	8008afa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2209      	movs	r2, #9
 8008af6:	761a      	strb	r2, [r3, #24]
      break;
 8008af8:	e10b      	b.n	8008d12 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2207      	movs	r2, #7
 8008afe:	761a      	strb	r2, [r3, #24]
      break;
 8008b00:	e107      	b.n	8008d12 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	2b04      	cmp	r3, #4
 8008b06:	d003      	beq.n	8008b10 <USBH_HandleControl+0xcc>
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	f040 8101 	bne.w	8008d12 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	220b      	movs	r2, #11
 8008b14:	761a      	strb	r2, [r3, #24]
      break;
 8008b16:	e0fc      	b.n	8008d12 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6899      	ldr	r1, [r3, #8]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	899a      	ldrh	r2, [r3, #12]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	791b      	ldrb	r3, [r3, #4]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f93c 	bl	8008dae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2204      	movs	r2, #4
 8008b3a:	761a      	strb	r2, [r3, #24]
      break;
 8008b3c:	e0f2      	b.n	8008d24 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	791b      	ldrb	r3, [r3, #4]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fc7f 	bl	8009448 <USBH_LL_GetURBState>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008b4e:	7bbb      	ldrb	r3, [r7, #14]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d103      	bne.n	8008b5c <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2209      	movs	r2, #9
 8008b58:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008b5a:	e0dc      	b.n	8008d16 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	2b05      	cmp	r3, #5
 8008b60:	d102      	bne.n	8008b68 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8008b62:	2303      	movs	r3, #3
 8008b64:	73fb      	strb	r3, [r7, #15]
      break;
 8008b66:	e0d6      	b.n	8008d16 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	f040 80d3 	bne.w	8008d16 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	220b      	movs	r2, #11
 8008b74:	761a      	strb	r2, [r3, #24]
      break;
 8008b76:	e0ce      	b.n	8008d16 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6899      	ldr	r1, [r3, #8]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	899a      	ldrh	r2, [r3, #12]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	795b      	ldrb	r3, [r3, #5]
 8008b84:	2001      	movs	r0, #1
 8008b86:	9000      	str	r0, [sp, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f8eb 	bl	8008d64 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2206      	movs	r2, #6
 8008b9e:	761a      	strb	r2, [r3, #24]
      break;
 8008ba0:	e0c0      	b.n	8008d24 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	795b      	ldrb	r3, [r3, #5]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fc4d 	bl	8009448 <USBH_LL_GetURBState>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d103      	bne.n	8008bc0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2207      	movs	r2, #7
 8008bbc:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008bbe:	e0ac      	b.n	8008d1a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	2b05      	cmp	r3, #5
 8008bc4:	d105      	bne.n	8008bd2 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	220c      	movs	r2, #12
 8008bca:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	73fb      	strb	r3, [r7, #15]
      break;
 8008bd0:	e0a3      	b.n	8008d1a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d103      	bne.n	8008be0 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2205      	movs	r2, #5
 8008bdc:	761a      	strb	r2, [r3, #24]
      break;
 8008bde:	e09c      	b.n	8008d1a <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	f040 8099 	bne.w	8008d1a <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	220b      	movs	r2, #11
 8008bec:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008bee:	2302      	movs	r3, #2
 8008bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8008bf2:	e092      	b.n	8008d1a <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	791b      	ldrb	r3, [r3, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f8d6 	bl	8008dae <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2208      	movs	r2, #8
 8008c12:	761a      	strb	r2, [r3, #24]

      break;
 8008c14:	e086      	b.n	8008d24 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	791b      	ldrb	r3, [r3, #4]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fc13 	bl	8009448 <USBH_LL_GetURBState>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d105      	bne.n	8008c38 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	220d      	movs	r2, #13
 8008c30:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008c36:	e072      	b.n	8008d1e <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	2b04      	cmp	r3, #4
 8008c3c:	d103      	bne.n	8008c46 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	220b      	movs	r2, #11
 8008c42:	761a      	strb	r2, [r3, #24]
      break;
 8008c44:	e06b      	b.n	8008d1e <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
 8008c48:	2b05      	cmp	r3, #5
 8008c4a:	d168      	bne.n	8008d1e <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c50:	e065      	b.n	8008d1e <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	795b      	ldrb	r3, [r3, #5]
 8008c56:	2201      	movs	r2, #1
 8008c58:	9200      	str	r2, [sp, #0]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f880 	bl	8008d64 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	220a      	movs	r2, #10
 8008c74:	761a      	strb	r2, [r3, #24]
      break;
 8008c76:	e055      	b.n	8008d24 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	795b      	ldrb	r3, [r3, #5]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fbe2 	bl	8009448 <USBH_LL_GetURBState>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d105      	bne.n	8008c9a <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	220d      	movs	r2, #13
 8008c96:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008c98:	e043      	b.n	8008d22 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d103      	bne.n	8008ca8 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2209      	movs	r2, #9
 8008ca4:	761a      	strb	r2, [r3, #24]
      break;
 8008ca6:	e03c      	b.n	8008d22 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d139      	bne.n	8008d22 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	220b      	movs	r2, #11
 8008cb2:	761a      	strb	r2, [r3, #24]
      break;
 8008cb4:	e035      	b.n	8008d22 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	7e5b      	ldrb	r3, [r3, #25]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	765a      	strb	r2, [r3, #25]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	7e5b      	ldrb	r3, [r3, #25]
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d806      	bhi.n	8008cd8 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008cd6:	e025      	b.n	8008d24 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008cde:	2106      	movs	r1, #6
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	795b      	ldrb	r3, [r3, #5]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f90d 	bl	8008f10 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	791b      	ldrb	r3, [r3, #4]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f907 	bl	8008f10 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008d08:	2302      	movs	r3, #2
 8008d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d0c:	e00a      	b.n	8008d24 <USBH_HandleControl+0x2e0>

    default:
      break;
 8008d0e:	bf00      	nop
 8008d10:	e008      	b.n	8008d24 <USBH_HandleControl+0x2e0>
      break;
 8008d12:	bf00      	nop
 8008d14:	e006      	b.n	8008d24 <USBH_HandleControl+0x2e0>
      break;
 8008d16:	bf00      	nop
 8008d18:	e004      	b.n	8008d24 <USBH_HandleControl+0x2e0>
      break;
 8008d1a:	bf00      	nop
 8008d1c:	e002      	b.n	8008d24 <USBH_HandleControl+0x2e0>
      break;
 8008d1e:	bf00      	nop
 8008d20:	e000      	b.n	8008d24 <USBH_HandleControl+0x2e0>
      break;
 8008d22:	bf00      	nop
  }

  return status;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop

08008d30 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af04      	add	r7, sp, #16
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d3e:	79f9      	ldrb	r1, [r7, #7]
 8008d40:	2300      	movs	r3, #0
 8008d42:	9303      	str	r3, [sp, #12]
 8008d44:	2308      	movs	r3, #8
 8008d46:	9302      	str	r3, [sp, #8]
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	2300      	movs	r3, #0
 8008d52:	2200      	movs	r2, #0
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f000 fb46 	bl	80093e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af04      	add	r7, sp, #16
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	4611      	mov	r1, r2
 8008d70:	461a      	mov	r2, r3
 8008d72:	460b      	mov	r3, r1
 8008d74:	80fb      	strh	r3, [r7, #6]
 8008d76:	4613      	mov	r3, r2
 8008d78:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d88:	7979      	ldrb	r1, [r7, #5]
 8008d8a:	7e3b      	ldrb	r3, [r7, #24]
 8008d8c:	9303      	str	r3, [sp, #12]
 8008d8e:	88fb      	ldrh	r3, [r7, #6]
 8008d90:	9302      	str	r3, [sp, #8]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	2301      	movs	r3, #1
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 fb21 	bl	80093e6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b088      	sub	sp, #32
 8008db2:	af04      	add	r7, sp, #16
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	4611      	mov	r1, r2
 8008dba:	461a      	mov	r2, r3
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	80fb      	strh	r3, [r7, #6]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dc4:	7979      	ldrb	r1, [r7, #5]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	9303      	str	r3, [sp, #12]
 8008dca:	88fb      	ldrh	r3, [r7, #6]
 8008dcc:	9302      	str	r3, [sp, #8]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	2201      	movs	r2, #1
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 fb03 	bl	80093e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008de0:	2300      	movs	r3, #0

}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b088      	sub	sp, #32
 8008dee:	af04      	add	r7, sp, #16
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	4611      	mov	r1, r2
 8008df6:	461a      	mov	r2, r3
 8008df8:	460b      	mov	r3, r1
 8008dfa:	80fb      	strh	r3, [r7, #6]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e0e:	7979      	ldrb	r1, [r7, #5]
 8008e10:	7e3b      	ldrb	r3, [r7, #24]
 8008e12:	9303      	str	r3, [sp, #12]
 8008e14:	88fb      	ldrh	r3, [r7, #6]
 8008e16:	9302      	str	r3, [sp, #8]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	2302      	movs	r3, #2
 8008e22:	2200      	movs	r2, #0
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 fade 	bl	80093e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af04      	add	r7, sp, #16
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	4611      	mov	r1, r2
 8008e40:	461a      	mov	r2, r3
 8008e42:	460b      	mov	r3, r1
 8008e44:	80fb      	strh	r3, [r7, #6]
 8008e46:	4613      	mov	r3, r2
 8008e48:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e4a:	7979      	ldrb	r1, [r7, #5]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9303      	str	r3, [sp, #12]
 8008e50:	88fb      	ldrh	r3, [r7, #6]
 8008e52:	9302      	str	r3, [sp, #8]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	2301      	movs	r3, #1
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	2201      	movs	r2, #1
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 fac0 	bl	80093e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af04      	add	r7, sp, #16
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	4608      	mov	r0, r1
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	4603      	mov	r3, r0
 8008e80:	70fb      	strb	r3, [r7, #3]
 8008e82:	460b      	mov	r3, r1
 8008e84:	70bb      	strb	r3, [r7, #2]
 8008e86:	4613      	mov	r3, r2
 8008e88:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008e8a:	7878      	ldrb	r0, [r7, #1]
 8008e8c:	78ba      	ldrb	r2, [r7, #2]
 8008e8e:	78f9      	ldrb	r1, [r7, #3]
 8008e90:	8b3b      	ldrh	r3, [r7, #24]
 8008e92:	9302      	str	r3, [sp, #8]
 8008e94:	7d3b      	ldrb	r3, [r7, #20]
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	7c3b      	ldrb	r3, [r7, #16]
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa53 	bl	800934a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fa72 	bl	80093a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f836 	bl	8008f4c <USBH_GetFreePipe>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008ee4:	89fb      	ldrh	r3, [r7, #14]
 8008ee6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d00a      	beq.n	8008f04 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008eee:	78fa      	ldrb	r2, [r7, #3]
 8008ef0:	89fb      	ldrh	r3, [r7, #14]
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	33e0      	adds	r3, #224	@ 0xe0
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	440b      	add	r3, r1
 8008f02:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008f04:	89fb      	ldrh	r3, [r7, #14]
 8008f06:	b2db      	uxtb	r3, r3
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	2b0f      	cmp	r3, #15
 8008f20:	d80d      	bhi.n	8008f3e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008f22:	78fb      	ldrb	r3, [r7, #3]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	33e0      	adds	r3, #224	@ 0xe0
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008f34:	6879      	ldr	r1, [r7, #4]
 8008f36:	33e0      	adds	r3, #224	@ 0xe0
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	440b      	add	r3, r1
 8008f3c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008f54:	2300      	movs	r3, #0
 8008f56:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73fb      	strb	r3, [r7, #15]
 8008f5c:	e00f      	b.n	8008f7e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	33e0      	adds	r3, #224	@ 0xe0
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d102      	bne.n	8008f78 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	e007      	b.n	8008f88 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	73fb      	strb	r3, [r7, #15]
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	2b0f      	cmp	r3, #15
 8008f82:	d9ec      	bls.n	8008f5e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008f84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008f98:	2201      	movs	r2, #1
 8008f9a:	490e      	ldr	r1, [pc, #56]	@ (8008fd4 <MX_USB_HOST_Init+0x40>)
 8008f9c:	480e      	ldr	r0, [pc, #56]	@ (8008fd8 <MX_USB_HOST_Init+0x44>)
 8008f9e:	f7fe fb0f 	bl	80075c0 <USBH_Init>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008fa8:	f7f7 fd46 	bl	8000a38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008fac:	490b      	ldr	r1, [pc, #44]	@ (8008fdc <MX_USB_HOST_Init+0x48>)
 8008fae:	480a      	ldr	r0, [pc, #40]	@ (8008fd8 <MX_USB_HOST_Init+0x44>)
 8008fb0:	f7fe fbb1 	bl	8007716 <USBH_RegisterClass>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008fba:	f7f7 fd3d 	bl	8000a38 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008fbe:	4806      	ldr	r0, [pc, #24]	@ (8008fd8 <MX_USB_HOST_Init+0x44>)
 8008fc0:	f7fe fc35 	bl	800782e <USBH_Start>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008fca:	f7f7 fd35 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008fce:	bf00      	nop
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	08008ff5 	.word	0x08008ff5
 8008fd8:	20000224 	.word	0x20000224
 8008fdc:	2000000c 	.word	0x2000000c

08008fe0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008fe4:	4802      	ldr	r0, [pc, #8]	@ (8008ff0 <MX_USB_HOST_Process+0x10>)
 8008fe6:	f7fe fc33 	bl	8007850 <USBH_Process>
}
 8008fea:	bf00      	nop
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000224 	.word	0x20000224

08008ff4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	3b01      	subs	r3, #1
 8009004:	2b04      	cmp	r3, #4
 8009006:	d819      	bhi.n	800903c <USBH_UserProcess+0x48>
 8009008:	a201      	add	r2, pc, #4	@ (adr r2, 8009010 <USBH_UserProcess+0x1c>)
 800900a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900e:	bf00      	nop
 8009010:	0800903d 	.word	0x0800903d
 8009014:	0800902d 	.word	0x0800902d
 8009018:	0800903d 	.word	0x0800903d
 800901c:	08009035 	.word	0x08009035
 8009020:	08009025 	.word	0x08009025
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009024:	4b09      	ldr	r3, [pc, #36]	@ (800904c <USBH_UserProcess+0x58>)
 8009026:	2203      	movs	r2, #3
 8009028:	701a      	strb	r2, [r3, #0]
  break;
 800902a:	e008      	b.n	800903e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800902c:	4b07      	ldr	r3, [pc, #28]	@ (800904c <USBH_UserProcess+0x58>)
 800902e:	2202      	movs	r2, #2
 8009030:	701a      	strb	r2, [r3, #0]
  break;
 8009032:	e004      	b.n	800903e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009034:	4b05      	ldr	r3, [pc, #20]	@ (800904c <USBH_UserProcess+0x58>)
 8009036:	2201      	movs	r2, #1
 8009038:	701a      	strb	r2, [r3, #0]
  break;
 800903a:	e000      	b.n	800903e <USBH_UserProcess+0x4a>

  default:
  break;
 800903c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800903e:	bf00      	nop
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	200005fc 	.word	0x200005fc

08009050 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08a      	sub	sp, #40	@ 0x28
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009058:	f107 0314 	add.w	r3, r7, #20
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]
 8009060:	605a      	str	r2, [r3, #4]
 8009062:	609a      	str	r2, [r3, #8]
 8009064:	60da      	str	r2, [r3, #12]
 8009066:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009070:	d147      	bne.n	8009102 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]
 8009076:	4b25      	ldr	r3, [pc, #148]	@ (800910c <HAL_HCD_MspInit+0xbc>)
 8009078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800907a:	4a24      	ldr	r2, [pc, #144]	@ (800910c <HAL_HCD_MspInit+0xbc>)
 800907c:	f043 0301 	orr.w	r3, r3, #1
 8009080:	6313      	str	r3, [r2, #48]	@ 0x30
 8009082:	4b22      	ldr	r3, [pc, #136]	@ (800910c <HAL_HCD_MspInit+0xbc>)
 8009084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	613b      	str	r3, [r7, #16]
 800908c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800908e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009094:	2300      	movs	r3, #0
 8009096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009098:	2300      	movs	r3, #0
 800909a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800909c:	f107 0314 	add.w	r3, r7, #20
 80090a0:	4619      	mov	r1, r3
 80090a2:	481b      	ldr	r0, [pc, #108]	@ (8009110 <HAL_HCD_MspInit+0xc0>)
 80090a4:	f7f8 f8c4 	bl	8001230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80090a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80090ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090ae:	2302      	movs	r3, #2
 80090b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090b2:	2300      	movs	r3, #0
 80090b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090b6:	2300      	movs	r3, #0
 80090b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80090ba:	230a      	movs	r3, #10
 80090bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090be:	f107 0314 	add.w	r3, r7, #20
 80090c2:	4619      	mov	r1, r3
 80090c4:	4812      	ldr	r0, [pc, #72]	@ (8009110 <HAL_HCD_MspInit+0xc0>)
 80090c6:	f7f8 f8b3 	bl	8001230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80090ca:	4b10      	ldr	r3, [pc, #64]	@ (800910c <HAL_HCD_MspInit+0xbc>)
 80090cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ce:	4a0f      	ldr	r2, [pc, #60]	@ (800910c <HAL_HCD_MspInit+0xbc>)
 80090d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d4:	6353      	str	r3, [r2, #52]	@ 0x34
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	4b0c      	ldr	r3, [pc, #48]	@ (800910c <HAL_HCD_MspInit+0xbc>)
 80090dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090de:	4a0b      	ldr	r2, [pc, #44]	@ (800910c <HAL_HCD_MspInit+0xbc>)
 80090e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80090e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80090e6:	4b09      	ldr	r3, [pc, #36]	@ (800910c <HAL_HCD_MspInit+0xbc>)
 80090e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090f2:	2200      	movs	r2, #0
 80090f4:	2100      	movs	r1, #0
 80090f6:	2043      	movs	r0, #67	@ 0x43
 80090f8:	f7f8 f863 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090fc:	2043      	movs	r0, #67	@ 0x43
 80090fe:	f7f8 f87c 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009102:	bf00      	nop
 8009104:	3728      	adds	r7, #40	@ 0x28
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	40023800 	.word	0x40023800
 8009110:	40020000 	.word	0x40020000

08009114 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe ff6d 	bl	8008002 <USBH_LL_IncTimer>
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe ffa9 	bl	8008096 <USBH_LL_Connect>
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe ffb2 	bl	80080c4 <USBH_LL_Disconnect>
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
 8009174:	4613      	mov	r3, r2
 8009176:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009192:	4618      	mov	r0, r3
 8009194:	f7fe ff5f 	bl	8008056 <USBH_LL_PortEnabled>
}
 8009198:	bf00      	nop
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fe ff5f 	bl	8008072 <USBH_LL_PortDisabled>
}
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d12a      	bne.n	8009224 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80091ce:	4a18      	ldr	r2, [pc, #96]	@ (8009230 <USBH_LL_Init+0x74>)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a15      	ldr	r2, [pc, #84]	@ (8009230 <USBH_LL_Init+0x74>)
 80091da:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80091de:	4b14      	ldr	r3, [pc, #80]	@ (8009230 <USBH_LL_Init+0x74>)
 80091e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80091e4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80091e6:	4b12      	ldr	r3, [pc, #72]	@ (8009230 <USBH_LL_Init+0x74>)
 80091e8:	2208      	movs	r2, #8
 80091ea:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80091ec:	4b10      	ldr	r3, [pc, #64]	@ (8009230 <USBH_LL_Init+0x74>)
 80091ee:	2201      	movs	r2, #1
 80091f0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091f2:	4b0f      	ldr	r3, [pc, #60]	@ (8009230 <USBH_LL_Init+0x74>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80091f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009230 <USBH_LL_Init+0x74>)
 80091fa:	2202      	movs	r2, #2
 80091fc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80091fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009230 <USBH_LL_Init+0x74>)
 8009200:	2200      	movs	r2, #0
 8009202:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009204:	480a      	ldr	r0, [pc, #40]	@ (8009230 <USBH_LL_Init+0x74>)
 8009206:	f7f8 f9c8 	bl	800159a <HAL_HCD_Init>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009210:	f7f7 fc12 	bl	8000a38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009214:	4806      	ldr	r0, [pc, #24]	@ (8009230 <USBH_LL_Init+0x74>)
 8009216:	f7f8 fe29 	bl	8001e6c <HAL_HCD_GetCurrentFrame>
 800921a:	4603      	mov	r3, r0
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7fe fee0 	bl	8007fe4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	20000600 	.word	0x20000600

08009234 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800924a:	4618      	mov	r0, r3
 800924c:	f7f8 fd96 	bl	8001d7c <HAL_HCD_Start>
 8009250:	4603      	mov	r3, r0
 8009252:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009254:	7bfb      	ldrb	r3, [r7, #15]
 8009256:	4618      	mov	r0, r3
 8009258:	f000 f95e 	bl	8009518 <USBH_Get_USB_Status>
 800925c:	4603      	mov	r3, r0
 800925e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009260:	7bbb      	ldrb	r3, [r7, #14]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b084      	sub	sp, #16
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009280:	4618      	mov	r0, r3
 8009282:	f7f8 fd9e 	bl	8001dc2 <HAL_HCD_Stop>
 8009286:	4603      	mov	r3, r0
 8009288:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	4618      	mov	r0, r3
 800928e:	f000 f943 	bl	8009518 <USBH_Get_USB_Status>
 8009292:	4603      	mov	r3, r0
 8009294:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009296:	7bbb      	ldrb	r3, [r7, #14]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80092a8:	2301      	movs	r3, #1
 80092aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7f8 fde8 	bl	8001e88 <HAL_HCD_GetCurrentSpeed>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d00c      	beq.n	80092d8 <USBH_LL_GetSpeed+0x38>
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d80d      	bhi.n	80092de <USBH_LL_GetSpeed+0x3e>
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <USBH_LL_GetSpeed+0x2c>
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d003      	beq.n	80092d2 <USBH_LL_GetSpeed+0x32>
 80092ca:	e008      	b.n	80092de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
    break;
 80092d0:	e008      	b.n	80092e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80092d2:	2301      	movs	r3, #1
 80092d4:	73fb      	strb	r3, [r7, #15]
    break;
 80092d6:	e005      	b.n	80092e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80092d8:	2302      	movs	r3, #2
 80092da:	73fb      	strb	r3, [r7, #15]
    break;
 80092dc:	e002      	b.n	80092e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80092de:	2301      	movs	r3, #1
 80092e0:	73fb      	strb	r3, [r7, #15]
    break;
 80092e2:	bf00      	nop
  }
  return  speed;
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b084      	sub	sp, #16
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009304:	4618      	mov	r0, r3
 8009306:	f7f8 fd79 	bl	8001dfc <HAL_HCD_ResetPort>
 800930a:	4603      	mov	r3, r0
 800930c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	4618      	mov	r0, r3
 8009312:	f000 f901 	bl	8009518 <USBH_Get_USB_Status>
 8009316:	4603      	mov	r3, r0
 8009318:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800931a:	7bbb      	ldrb	r3, [r7, #14]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	4611      	mov	r1, r2
 800933a:	4618      	mov	r0, r3
 800933c:	f7f8 fd81 	bl	8001e42 <HAL_HCD_HC_GetXferCount>
 8009340:	4603      	mov	r3, r0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800934a:	b590      	push	{r4, r7, lr}
 800934c:	b089      	sub	sp, #36	@ 0x24
 800934e:	af04      	add	r7, sp, #16
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	4608      	mov	r0, r1
 8009354:	4611      	mov	r1, r2
 8009356:	461a      	mov	r2, r3
 8009358:	4603      	mov	r3, r0
 800935a:	70fb      	strb	r3, [r7, #3]
 800935c:	460b      	mov	r3, r1
 800935e:	70bb      	strb	r3, [r7, #2]
 8009360:	4613      	mov	r3, r2
 8009362:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009372:	787c      	ldrb	r4, [r7, #1]
 8009374:	78ba      	ldrb	r2, [r7, #2]
 8009376:	78f9      	ldrb	r1, [r7, #3]
 8009378:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800937a:	9302      	str	r3, [sp, #8]
 800937c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	4623      	mov	r3, r4
 800938a:	f7f8 f96d 	bl	8001668 <HAL_HCD_HC_Init>
 800938e:	4603      	mov	r3, r0
 8009390:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009392:	7bfb      	ldrb	r3, [r7, #15]
 8009394:	4618      	mov	r0, r3
 8009396:	f000 f8bf 	bl	8009518 <USBH_Get_USB_Status>
 800939a:	4603      	mov	r3, r0
 800939c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800939e:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd90      	pop	{r4, r7, pc}

080093a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	460b      	mov	r3, r1
 80093b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80093c2:	78fa      	ldrb	r2, [r7, #3]
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7f8 fa06 	bl	80017d8 <HAL_HCD_HC_Halt>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 f8a0 	bl	8009518 <USBH_Get_USB_Status>
 80093d8:	4603      	mov	r3, r0
 80093da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80093e6:	b590      	push	{r4, r7, lr}
 80093e8:	b089      	sub	sp, #36	@ 0x24
 80093ea:	af04      	add	r7, sp, #16
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	4608      	mov	r0, r1
 80093f0:	4611      	mov	r1, r2
 80093f2:	461a      	mov	r2, r3
 80093f4:	4603      	mov	r3, r0
 80093f6:	70fb      	strb	r3, [r7, #3]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70bb      	strb	r3, [r7, #2]
 80093fc:	4613      	mov	r3, r2
 80093fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800940e:	787c      	ldrb	r4, [r7, #1]
 8009410:	78ba      	ldrb	r2, [r7, #2]
 8009412:	78f9      	ldrb	r1, [r7, #3]
 8009414:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009418:	9303      	str	r3, [sp, #12]
 800941a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800941c:	9302      	str	r3, [sp, #8]
 800941e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009420:	9301      	str	r3, [sp, #4]
 8009422:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	4623      	mov	r3, r4
 800942a:	f7f8 f9f9 	bl	8001820 <HAL_HCD_HC_SubmitRequest>
 800942e:	4603      	mov	r3, r0
 8009430:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009432:	7bfb      	ldrb	r3, [r7, #15]
 8009434:	4618      	mov	r0, r3
 8009436:	f000 f86f 	bl	8009518 <USBH_Get_USB_Status>
 800943a:	4603      	mov	r3, r0
 800943c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800943e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3714      	adds	r7, #20
 8009444:	46bd      	mov	sp, r7
 8009446:	bd90      	pop	{r4, r7, pc}

08009448 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800945a:	78fa      	ldrb	r2, [r7, #3]
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f7f8 fcda 	bl	8001e18 <HAL_HCD_HC_GetURBState>
 8009464:	4603      	mov	r3, r0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009480:	2b01      	cmp	r3, #1
 8009482:	d103      	bne.n	800948c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009484:	78fb      	ldrb	r3, [r7, #3]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f872 	bl	8009570 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800948c:	20c8      	movs	r0, #200	@ 0xc8
 800948e:	f7f7 fd99 	bl	8000fc4 <HAL_Delay>
  return USBH_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	460b      	mov	r3, r1
 80094a6:	70fb      	strb	r3, [r7, #3]
 80094a8:	4613      	mov	r3, r2
 80094aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80094b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80094b4:	78fa      	ldrb	r2, [r7, #3]
 80094b6:	68f9      	ldr	r1, [r7, #12]
 80094b8:	4613      	mov	r3, r2
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	1a9b      	subs	r3, r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	440b      	add	r3, r1
 80094c2:	3317      	adds	r3, #23
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00a      	beq.n	80094e0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80094ca:	78fa      	ldrb	r2, [r7, #3]
 80094cc:	68f9      	ldr	r1, [r7, #12]
 80094ce:	4613      	mov	r3, r2
 80094d0:	011b      	lsls	r3, r3, #4
 80094d2:	1a9b      	subs	r3, r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	440b      	add	r3, r1
 80094d8:	333c      	adds	r3, #60	@ 0x3c
 80094da:	78ba      	ldrb	r2, [r7, #2]
 80094dc:	701a      	strb	r2, [r3, #0]
 80094de:	e009      	b.n	80094f4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80094e0:	78fa      	ldrb	r2, [r7, #3]
 80094e2:	68f9      	ldr	r1, [r7, #12]
 80094e4:	4613      	mov	r3, r2
 80094e6:	011b      	lsls	r3, r3, #4
 80094e8:	1a9b      	subs	r3, r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	333d      	adds	r3, #61	@ 0x3d
 80094f0:	78ba      	ldrb	r2, [r7, #2]
 80094f2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b082      	sub	sp, #8
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7f7 fd5a 	bl	8000fc4 <HAL_Delay>
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	4603      	mov	r3, r0
 8009520:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009526:	79fb      	ldrb	r3, [r7, #7]
 8009528:	2b03      	cmp	r3, #3
 800952a:	d817      	bhi.n	800955c <USBH_Get_USB_Status+0x44>
 800952c:	a201      	add	r2, pc, #4	@ (adr r2, 8009534 <USBH_Get_USB_Status+0x1c>)
 800952e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009532:	bf00      	nop
 8009534:	08009545 	.word	0x08009545
 8009538:	0800954b 	.word	0x0800954b
 800953c:	08009551 	.word	0x08009551
 8009540:	08009557 	.word	0x08009557
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73fb      	strb	r3, [r7, #15]
    break;
 8009548:	e00b      	b.n	8009562 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800954a:	2302      	movs	r3, #2
 800954c:	73fb      	strb	r3, [r7, #15]
    break;
 800954e:	e008      	b.n	8009562 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009550:	2301      	movs	r3, #1
 8009552:	73fb      	strb	r3, [r7, #15]
    break;
 8009554:	e005      	b.n	8009562 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009556:	2302      	movs	r3, #2
 8009558:	73fb      	strb	r3, [r7, #15]
    break;
 800955a:	e002      	b.n	8009562 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800955c:	2302      	movs	r3, #2
 800955e:	73fb      	strb	r3, [r7, #15]
    break;
 8009560:	bf00      	nop
  }
  return usb_status;
 8009562:	7bfb      	ldrb	r3, [r7, #15]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3714      	adds	r7, #20
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	4603      	mov	r3, r0
 8009578:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800957e:	79fb      	ldrb	r3, [r7, #7]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d102      	bne.n	800958a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]
 8009588:	e001      	b.n	800958e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800958a:	2301      	movs	r3, #1
 800958c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	461a      	mov	r2, r3
 8009592:	2101      	movs	r1, #1
 8009594:	4803      	ldr	r0, [pc, #12]	@ (80095a4 <MX_DriverVbusFS+0x34>)
 8009596:	f7f7 ffe7 	bl	8001568 <HAL_GPIO_WritePin>
}
 800959a:	bf00      	nop
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	40020800 	.word	0x40020800

080095a8 <malloc>:
 80095a8:	4b02      	ldr	r3, [pc, #8]	@ (80095b4 <malloc+0xc>)
 80095aa:	4601      	mov	r1, r0
 80095ac:	6818      	ldr	r0, [r3, #0]
 80095ae:	f000 b82d 	b.w	800960c <_malloc_r>
 80095b2:	bf00      	nop
 80095b4:	2000002c 	.word	0x2000002c

080095b8 <free>:
 80095b8:	4b02      	ldr	r3, [pc, #8]	@ (80095c4 <free+0xc>)
 80095ba:	4601      	mov	r1, r0
 80095bc:	6818      	ldr	r0, [r3, #0]
 80095be:	f000 b8f5 	b.w	80097ac <_free_r>
 80095c2:	bf00      	nop
 80095c4:	2000002c 	.word	0x2000002c

080095c8 <sbrk_aligned>:
 80095c8:	b570      	push	{r4, r5, r6, lr}
 80095ca:	4e0f      	ldr	r6, [pc, #60]	@ (8009608 <sbrk_aligned+0x40>)
 80095cc:	460c      	mov	r4, r1
 80095ce:	6831      	ldr	r1, [r6, #0]
 80095d0:	4605      	mov	r5, r0
 80095d2:	b911      	cbnz	r1, 80095da <sbrk_aligned+0x12>
 80095d4:	f000 f8ae 	bl	8009734 <_sbrk_r>
 80095d8:	6030      	str	r0, [r6, #0]
 80095da:	4621      	mov	r1, r4
 80095dc:	4628      	mov	r0, r5
 80095de:	f000 f8a9 	bl	8009734 <_sbrk_r>
 80095e2:	1c43      	adds	r3, r0, #1
 80095e4:	d103      	bne.n	80095ee <sbrk_aligned+0x26>
 80095e6:	f04f 34ff 	mov.w	r4, #4294967295
 80095ea:	4620      	mov	r0, r4
 80095ec:	bd70      	pop	{r4, r5, r6, pc}
 80095ee:	1cc4      	adds	r4, r0, #3
 80095f0:	f024 0403 	bic.w	r4, r4, #3
 80095f4:	42a0      	cmp	r0, r4
 80095f6:	d0f8      	beq.n	80095ea <sbrk_aligned+0x22>
 80095f8:	1a21      	subs	r1, r4, r0
 80095fa:	4628      	mov	r0, r5
 80095fc:	f000 f89a 	bl	8009734 <_sbrk_r>
 8009600:	3001      	adds	r0, #1
 8009602:	d1f2      	bne.n	80095ea <sbrk_aligned+0x22>
 8009604:	e7ef      	b.n	80095e6 <sbrk_aligned+0x1e>
 8009606:	bf00      	nop
 8009608:	200009e0 	.word	0x200009e0

0800960c <_malloc_r>:
 800960c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009610:	1ccd      	adds	r5, r1, #3
 8009612:	f025 0503 	bic.w	r5, r5, #3
 8009616:	3508      	adds	r5, #8
 8009618:	2d0c      	cmp	r5, #12
 800961a:	bf38      	it	cc
 800961c:	250c      	movcc	r5, #12
 800961e:	2d00      	cmp	r5, #0
 8009620:	4606      	mov	r6, r0
 8009622:	db01      	blt.n	8009628 <_malloc_r+0x1c>
 8009624:	42a9      	cmp	r1, r5
 8009626:	d904      	bls.n	8009632 <_malloc_r+0x26>
 8009628:	230c      	movs	r3, #12
 800962a:	6033      	str	r3, [r6, #0]
 800962c:	2000      	movs	r0, #0
 800962e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009632:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009708 <_malloc_r+0xfc>
 8009636:	f000 f869 	bl	800970c <__malloc_lock>
 800963a:	f8d8 3000 	ldr.w	r3, [r8]
 800963e:	461c      	mov	r4, r3
 8009640:	bb44      	cbnz	r4, 8009694 <_malloc_r+0x88>
 8009642:	4629      	mov	r1, r5
 8009644:	4630      	mov	r0, r6
 8009646:	f7ff ffbf 	bl	80095c8 <sbrk_aligned>
 800964a:	1c43      	adds	r3, r0, #1
 800964c:	4604      	mov	r4, r0
 800964e:	d158      	bne.n	8009702 <_malloc_r+0xf6>
 8009650:	f8d8 4000 	ldr.w	r4, [r8]
 8009654:	4627      	mov	r7, r4
 8009656:	2f00      	cmp	r7, #0
 8009658:	d143      	bne.n	80096e2 <_malloc_r+0xd6>
 800965a:	2c00      	cmp	r4, #0
 800965c:	d04b      	beq.n	80096f6 <_malloc_r+0xea>
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	4639      	mov	r1, r7
 8009662:	4630      	mov	r0, r6
 8009664:	eb04 0903 	add.w	r9, r4, r3
 8009668:	f000 f864 	bl	8009734 <_sbrk_r>
 800966c:	4581      	cmp	r9, r0
 800966e:	d142      	bne.n	80096f6 <_malloc_r+0xea>
 8009670:	6821      	ldr	r1, [r4, #0]
 8009672:	1a6d      	subs	r5, r5, r1
 8009674:	4629      	mov	r1, r5
 8009676:	4630      	mov	r0, r6
 8009678:	f7ff ffa6 	bl	80095c8 <sbrk_aligned>
 800967c:	3001      	adds	r0, #1
 800967e:	d03a      	beq.n	80096f6 <_malloc_r+0xea>
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	442b      	add	r3, r5
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	f8d8 3000 	ldr.w	r3, [r8]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	bb62      	cbnz	r2, 80096e8 <_malloc_r+0xdc>
 800968e:	f8c8 7000 	str.w	r7, [r8]
 8009692:	e00f      	b.n	80096b4 <_malloc_r+0xa8>
 8009694:	6822      	ldr	r2, [r4, #0]
 8009696:	1b52      	subs	r2, r2, r5
 8009698:	d420      	bmi.n	80096dc <_malloc_r+0xd0>
 800969a:	2a0b      	cmp	r2, #11
 800969c:	d917      	bls.n	80096ce <_malloc_r+0xc2>
 800969e:	1961      	adds	r1, r4, r5
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	6025      	str	r5, [r4, #0]
 80096a4:	bf18      	it	ne
 80096a6:	6059      	strne	r1, [r3, #4]
 80096a8:	6863      	ldr	r3, [r4, #4]
 80096aa:	bf08      	it	eq
 80096ac:	f8c8 1000 	streq.w	r1, [r8]
 80096b0:	5162      	str	r2, [r4, r5]
 80096b2:	604b      	str	r3, [r1, #4]
 80096b4:	4630      	mov	r0, r6
 80096b6:	f000 f82f 	bl	8009718 <__malloc_unlock>
 80096ba:	f104 000b 	add.w	r0, r4, #11
 80096be:	1d23      	adds	r3, r4, #4
 80096c0:	f020 0007 	bic.w	r0, r0, #7
 80096c4:	1ac2      	subs	r2, r0, r3
 80096c6:	bf1c      	itt	ne
 80096c8:	1a1b      	subne	r3, r3, r0
 80096ca:	50a3      	strne	r3, [r4, r2]
 80096cc:	e7af      	b.n	800962e <_malloc_r+0x22>
 80096ce:	6862      	ldr	r2, [r4, #4]
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	bf0c      	ite	eq
 80096d4:	f8c8 2000 	streq.w	r2, [r8]
 80096d8:	605a      	strne	r2, [r3, #4]
 80096da:	e7eb      	b.n	80096b4 <_malloc_r+0xa8>
 80096dc:	4623      	mov	r3, r4
 80096de:	6864      	ldr	r4, [r4, #4]
 80096e0:	e7ae      	b.n	8009640 <_malloc_r+0x34>
 80096e2:	463c      	mov	r4, r7
 80096e4:	687f      	ldr	r7, [r7, #4]
 80096e6:	e7b6      	b.n	8009656 <_malloc_r+0x4a>
 80096e8:	461a      	mov	r2, r3
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	42a3      	cmp	r3, r4
 80096ee:	d1fb      	bne.n	80096e8 <_malloc_r+0xdc>
 80096f0:	2300      	movs	r3, #0
 80096f2:	6053      	str	r3, [r2, #4]
 80096f4:	e7de      	b.n	80096b4 <_malloc_r+0xa8>
 80096f6:	230c      	movs	r3, #12
 80096f8:	6033      	str	r3, [r6, #0]
 80096fa:	4630      	mov	r0, r6
 80096fc:	f000 f80c 	bl	8009718 <__malloc_unlock>
 8009700:	e794      	b.n	800962c <_malloc_r+0x20>
 8009702:	6005      	str	r5, [r0, #0]
 8009704:	e7d6      	b.n	80096b4 <_malloc_r+0xa8>
 8009706:	bf00      	nop
 8009708:	200009e4 	.word	0x200009e4

0800970c <__malloc_lock>:
 800970c:	4801      	ldr	r0, [pc, #4]	@ (8009714 <__malloc_lock+0x8>)
 800970e:	f000 b84b 	b.w	80097a8 <__retarget_lock_acquire_recursive>
 8009712:	bf00      	nop
 8009714:	20000b24 	.word	0x20000b24

08009718 <__malloc_unlock>:
 8009718:	4801      	ldr	r0, [pc, #4]	@ (8009720 <__malloc_unlock+0x8>)
 800971a:	f000 b846 	b.w	80097aa <__retarget_lock_release_recursive>
 800971e:	bf00      	nop
 8009720:	20000b24 	.word	0x20000b24

08009724 <memset>:
 8009724:	4402      	add	r2, r0
 8009726:	4603      	mov	r3, r0
 8009728:	4293      	cmp	r3, r2
 800972a:	d100      	bne.n	800972e <memset+0xa>
 800972c:	4770      	bx	lr
 800972e:	f803 1b01 	strb.w	r1, [r3], #1
 8009732:	e7f9      	b.n	8009728 <memset+0x4>

08009734 <_sbrk_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4d06      	ldr	r5, [pc, #24]	@ (8009750 <_sbrk_r+0x1c>)
 8009738:	2300      	movs	r3, #0
 800973a:	4604      	mov	r4, r0
 800973c:	4608      	mov	r0, r1
 800973e:	602b      	str	r3, [r5, #0]
 8009740:	f7f7 fb5c 	bl	8000dfc <_sbrk>
 8009744:	1c43      	adds	r3, r0, #1
 8009746:	d102      	bne.n	800974e <_sbrk_r+0x1a>
 8009748:	682b      	ldr	r3, [r5, #0]
 800974a:	b103      	cbz	r3, 800974e <_sbrk_r+0x1a>
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	bd38      	pop	{r3, r4, r5, pc}
 8009750:	20000b20 	.word	0x20000b20

08009754 <__errno>:
 8009754:	4b01      	ldr	r3, [pc, #4]	@ (800975c <__errno+0x8>)
 8009756:	6818      	ldr	r0, [r3, #0]
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	2000002c 	.word	0x2000002c

08009760 <__libc_init_array>:
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	4d0d      	ldr	r5, [pc, #52]	@ (8009798 <__libc_init_array+0x38>)
 8009764:	4c0d      	ldr	r4, [pc, #52]	@ (800979c <__libc_init_array+0x3c>)
 8009766:	1b64      	subs	r4, r4, r5
 8009768:	10a4      	asrs	r4, r4, #2
 800976a:	2600      	movs	r6, #0
 800976c:	42a6      	cmp	r6, r4
 800976e:	d109      	bne.n	8009784 <__libc_init_array+0x24>
 8009770:	4d0b      	ldr	r5, [pc, #44]	@ (80097a0 <__libc_init_array+0x40>)
 8009772:	4c0c      	ldr	r4, [pc, #48]	@ (80097a4 <__libc_init_array+0x44>)
 8009774:	f000 f864 	bl	8009840 <_init>
 8009778:	1b64      	subs	r4, r4, r5
 800977a:	10a4      	asrs	r4, r4, #2
 800977c:	2600      	movs	r6, #0
 800977e:	42a6      	cmp	r6, r4
 8009780:	d105      	bne.n	800978e <__libc_init_array+0x2e>
 8009782:	bd70      	pop	{r4, r5, r6, pc}
 8009784:	f855 3b04 	ldr.w	r3, [r5], #4
 8009788:	4798      	blx	r3
 800978a:	3601      	adds	r6, #1
 800978c:	e7ee      	b.n	800976c <__libc_init_array+0xc>
 800978e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009792:	4798      	blx	r3
 8009794:	3601      	adds	r6, #1
 8009796:	e7f2      	b.n	800977e <__libc_init_array+0x1e>
 8009798:	0800987c 	.word	0x0800987c
 800979c:	0800987c 	.word	0x0800987c
 80097a0:	0800987c 	.word	0x0800987c
 80097a4:	08009880 	.word	0x08009880

080097a8 <__retarget_lock_acquire_recursive>:
 80097a8:	4770      	bx	lr

080097aa <__retarget_lock_release_recursive>:
 80097aa:	4770      	bx	lr

080097ac <_free_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4605      	mov	r5, r0
 80097b0:	2900      	cmp	r1, #0
 80097b2:	d041      	beq.n	8009838 <_free_r+0x8c>
 80097b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097b8:	1f0c      	subs	r4, r1, #4
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	bfb8      	it	lt
 80097be:	18e4      	addlt	r4, r4, r3
 80097c0:	f7ff ffa4 	bl	800970c <__malloc_lock>
 80097c4:	4a1d      	ldr	r2, [pc, #116]	@ (800983c <_free_r+0x90>)
 80097c6:	6813      	ldr	r3, [r2, #0]
 80097c8:	b933      	cbnz	r3, 80097d8 <_free_r+0x2c>
 80097ca:	6063      	str	r3, [r4, #4]
 80097cc:	6014      	str	r4, [r2, #0]
 80097ce:	4628      	mov	r0, r5
 80097d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097d4:	f7ff bfa0 	b.w	8009718 <__malloc_unlock>
 80097d8:	42a3      	cmp	r3, r4
 80097da:	d908      	bls.n	80097ee <_free_r+0x42>
 80097dc:	6820      	ldr	r0, [r4, #0]
 80097de:	1821      	adds	r1, r4, r0
 80097e0:	428b      	cmp	r3, r1
 80097e2:	bf01      	itttt	eq
 80097e4:	6819      	ldreq	r1, [r3, #0]
 80097e6:	685b      	ldreq	r3, [r3, #4]
 80097e8:	1809      	addeq	r1, r1, r0
 80097ea:	6021      	streq	r1, [r4, #0]
 80097ec:	e7ed      	b.n	80097ca <_free_r+0x1e>
 80097ee:	461a      	mov	r2, r3
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	b10b      	cbz	r3, 80097f8 <_free_r+0x4c>
 80097f4:	42a3      	cmp	r3, r4
 80097f6:	d9fa      	bls.n	80097ee <_free_r+0x42>
 80097f8:	6811      	ldr	r1, [r2, #0]
 80097fa:	1850      	adds	r0, r2, r1
 80097fc:	42a0      	cmp	r0, r4
 80097fe:	d10b      	bne.n	8009818 <_free_r+0x6c>
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	4401      	add	r1, r0
 8009804:	1850      	adds	r0, r2, r1
 8009806:	4283      	cmp	r3, r0
 8009808:	6011      	str	r1, [r2, #0]
 800980a:	d1e0      	bne.n	80097ce <_free_r+0x22>
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	6053      	str	r3, [r2, #4]
 8009812:	4408      	add	r0, r1
 8009814:	6010      	str	r0, [r2, #0]
 8009816:	e7da      	b.n	80097ce <_free_r+0x22>
 8009818:	d902      	bls.n	8009820 <_free_r+0x74>
 800981a:	230c      	movs	r3, #12
 800981c:	602b      	str	r3, [r5, #0]
 800981e:	e7d6      	b.n	80097ce <_free_r+0x22>
 8009820:	6820      	ldr	r0, [r4, #0]
 8009822:	1821      	adds	r1, r4, r0
 8009824:	428b      	cmp	r3, r1
 8009826:	bf04      	itt	eq
 8009828:	6819      	ldreq	r1, [r3, #0]
 800982a:	685b      	ldreq	r3, [r3, #4]
 800982c:	6063      	str	r3, [r4, #4]
 800982e:	bf04      	itt	eq
 8009830:	1809      	addeq	r1, r1, r0
 8009832:	6021      	streq	r1, [r4, #0]
 8009834:	6054      	str	r4, [r2, #4]
 8009836:	e7ca      	b.n	80097ce <_free_r+0x22>
 8009838:	bd38      	pop	{r3, r4, r5, pc}
 800983a:	bf00      	nop
 800983c:	200009e4 	.word	0x200009e4

08009840 <_init>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	bf00      	nop
 8009844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009846:	bc08      	pop	{r3}
 8009848:	469e      	mov	lr, r3
 800984a:	4770      	bx	lr

0800984c <_fini>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	bf00      	nop
 8009850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009852:	bc08      	pop	{r3}
 8009854:	469e      	mov	lr, r3
 8009856:	4770      	bx	lr
